{"sectids":"","toc-placement":"auto","notitle":"","stylesheet":"","webfonts":"","prewrap":"","attribute-undefined":"drop-line","attribute-missing":"skip","iconfont-remote":"","caution-caption":"Caution","important-caption":"Important","note-caption":"Note","tip-caption":"Tip","warning-caption":"Warning","example-caption":"Example","figure-caption":"Figure","table-caption":"Table","toc-title":"Table of Contents","section-refsig":"Section","part-refsig":"Part","chapter-refsig":"Chapter","appendix-refsig":"Appendix","appendix-caption":"Appendix","untitled-label":"Untitled","version-label":"Version","last-update-label":"Last updated","docfile":"recursive-directory-iterator-cpp.es.adoc","docdir":"","docfilesuffix":".adoc","docname":"recursive-directory-iterator-cpp.es","embedded":"","asciidoctor":"","asciidoctor-version":"2.0.10","safe-mode-name":"secure","safe-mode-secure":"","safe-mode-level":20,"max-include-depth":64,"user-home":".","backend":"html5","max-attribute-value-size":4096,"linkcss":"","doctype":"article","htmlsyntax":"html","backend-html5-doctype-article":"","doctype-article":"","backend-html5":"","outfilesuffix":".html","filetype":"html","filetype-html":"","basebackend-html-doctype-article":"","basebackend-html":"","basebackend":"html","stylesdir":".","iconsdir":"./images/icons","localdate":"2020-04-19","localyear":"2020","localtime":"01:37:30 +0200","localdatetime":"2020-04-19 01:37:30 +0200","docdate":"2017/05/28 09:00","docyear":"2020","doctime":"00:56:12 +0200","docdatetime":"2020-04-19 00:56:12 +0200","doctitle":"Sistema de Ficheros en C++17","date":"2017/05/28 09:00","keywords":["C++","C++11","C++17","IO","Filesystem"],"toc":"","description":"Vamos a analizar con un ejemplo la forma de recorrer directorios de manera recursiva a partir de C++17","lang":"es","draft":"https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4100.pdf[borrador final de la Especificación Técnica del Sistema de Ficheros,window=_blank]","fslink":"https://en.cppreference.com/w/cpp/filesystem[std::filesystem,window=_blank]","authorcount":0,"title":"Sistema de Ficheros en C++17","summary":"Vamos a analizar con un ejemplo la forma de recorrer directorios de manera recursiva a partir de C++17","html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_introducción\">Introducción</a></li>\n<li><a href=\"#_comenzar_a_utilizar_característica_experimental_filesystem_c17_g\">Comenzar a utilizar característica experimental filesystem C&#43;&#43;17 (g++)</a></li>\n<li><a href=\"#_características_de_filesystem_c17\">Características de filesystem C&#43;&#43;17</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_stdfilesystempath\">std::filesystem::path</a></li>\n<li><a href=\"#_separador_de_directorios\">Separador de directorios</a></li>\n<li><a href=\"#_operador_de_separador_de_directorios\">Operador de separador de directorios</a></li>\n<li><a href=\"#_crear_y_borrar_directorios\">Crear y borrar directorios</a></li>\n</ul>\n</li>\n<li><a href=\"#_ejemplo_completo_iterar_recursivamente_por_directorios\">Ejemplo completo: Iterar Recursivamente por Directorios</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_c11\">C&#43;&#43;11</a></li>\n<li><a href=\"#_c17\">C&#43;&#43;17</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_introducción\">Introducción</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>A partir de C&#43;&#43;17 se añadirán nuevas abstracciones sobre el sistema de ficheros. De momento están disponibles como parte de las <a href=\"https://en.cppreference.com/w/cpp/experimental\">Características Experimentales de C&#43;&#43;</a>. Si queréis profundizar aquí está el <a href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4100.pdf\" target=\"_blank\" rel=\"noopener\">borrador final de la Especificación Técnica del Sistema de Ficheros</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_comenzar_a_utilizar_característica_experimental_filesystem_c17_g\">Comenzar a utilizar característica experimental filesystem C&#43;&#43;17 (g++)</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Simplemente debemos \"decir\" al compilador que:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>estamos escribiendo código C&#43;&#43;17 (<code>-c++1z</code>) y</p>\n</li>\n<li>\n<p>que añada la librería estándar con la librería filesystem (<code>-lstdc++fs</code>).</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++ -std=c++1z main.cpp -lstdc++fs &amp;amp;&amp;amp; ./a.out</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Veamos un ejemplo muy simple utilizando la clase <code>std::filesystem::path</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\">&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>experimental/filesystem&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">namespace</span>&lt;/span&gt; <span class=\"hljs-title\">fs</span> = &lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">std</span>&lt;/span&gt;:</span>:experimental::filesystem;\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">using</span>&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">namespace</span>&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">std</span>&lt;/span&gt;;</span>\n\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">function</span>\"&gt;&lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">int</span>&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;<span class=\"hljs-title\">main</span>&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{</span>\n    fs::path aPath {&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">string</span>\"&gt;\"./<span class=\"hljs-title\">path</span>/<span class=\"hljs-title\">to</span>/<span class=\"hljs-title\">file</span>.<span class=\"hljs-title\">txt</span>\"&lt;/span&gt;};</span>\n\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">cout</span>&lt;/span&gt; &amp;<span class=\"hljs-title\">lt</span>;</span>&amp;lt; &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">string</span>\"&gt;\"<span class=\"hljs-title\">Parent</span> <span class=\"hljs-title\">path</span>:</span> <span class=\"hljs-string\">\"&lt;/span&gt; &amp;lt;&amp;lt; aPath.parent_path() &amp;lt;&amp;lt; &lt;span class=\"</span>hljs-built_in<span class=\"hljs-string\">\"&gt;endl&lt;/span&gt;;\n    &lt;span class=\"</span>hljs-built_in<span class=\"hljs-string\">\"&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"</span>hljs-<span class=\"hljs-built_in\">string</span><span class=\"hljs-string\">\"&gt;\"</span>Filename: <span class=\"hljs-string\">\"&lt;/span&gt; &amp;lt;&amp;lt; aPath.filename() &amp;lt;&amp;lt; &lt;span class=\"</span>hljs-built_in<span class=\"hljs-string\">\"&gt;endl&lt;/span&gt;;\n    &lt;span class=\"</span>hljs-built_in<span class=\"hljs-string\">\"&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"</span>hljs-<span class=\"hljs-built_in\">string</span><span class=\"hljs-string\">\"&gt;\"</span>Extension: <span class=\"hljs-string\">\"&lt;/span&gt; &amp;lt;&amp;lt; aPath.extension() &amp;lt;&amp;lt; &lt;span class=\"</span>hljs-built_in<span class=\"hljs-string\">\"&gt;endl&lt;/span&gt;;\n\n    &lt;span class=\"</span>hljs-keyword<span class=\"hljs-string\">\"&gt;return&lt;/span&gt; &lt;span class=\"</span>hljs-number<span class=\"hljs-string\">\"&gt;0&lt;/span&gt;;\n}</span></code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/9f8bebb8b7f0fbe7\" target=\"_blank\" rel=\"noopener\">Resultado de compilar y ejecutar el ejemplo anterior C&#43;&#43;17</a></div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ g++ -std=c++1z main.cpp -lstdc++fs &amp;amp;&amp;amp; ./a.out\n$ ./a.out\n\nParent path: &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"./path/to\"</span>&lt;/span&gt;\nFilename: &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"file.txt\"</span>&lt;/span&gt;\nExtension: &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\".txt\"</span>&lt;/span&gt;</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_características_de_filesystem_c17\">Características de filesystem C&#43;&#43;17</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>A continuación vamos a analizar algunas características que nos proporciona <a href=\"https://en.cppreference.com/w/cpp/filesystem\" target=\"_blank\" rel=\"noopener\">std::filesystem</a> con ejemplos en C&#43;&#43;11 y C&#43;&#43;17, de esta forma podremos hacernos una idea de las utilidades que esta nueva librería nos trae y cómo efectivamente ayuda al desarrollador a escribir código más claro y seguro.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_stdfilesystempath\">std::filesystem::path</h3>\n<div class=\"paragraph\">\n<p>Más arriba ya hemos visto un pequeño <a href=\"https://coliru.stacked-crooked.com/a/9f8bebb8b7f0fbe7\" target=\"_blank\" rel=\"noopener\">ejemplo de uso de clase std::filesystem::path</a>. Ésta abstracción nos proporciona una ruta a ficheros y directorios multi-plataforma, utilizando el separador de directorios correspondiente a la plataforma en la que trabajamos <code>\\</code> en sistemas basados en Windows y <code>/</code> en sistemas basados en Unix.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_separador_de_directorios\">Separador de directorios</h3>\n<div class=\"paragraph\">\n<p>Si quisiéramos que nuestro software utilizase el separador de directorios correcto para una plataforma, en C&#43;&#43;11 podríamos utilizar una macro de compilación condicional:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Separador de directorios independiente de la plataforma en C&#43;&#43;11</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\">&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">using</span>&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">namespace</span>&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">std</span>&lt;/span&gt;;</span>\n\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">ifdef</span>&lt;/span&gt; _<span class=\"hljs-title\">WIN32</span>&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">const</span>&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">string</span>&lt;/span&gt; <span class=\"hljs-title\">SEP</span> = &lt;span class=\"hljs-string\"&gt;\"\\\\\"&lt;/span&gt;;</span>\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">else</span>&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">const</span>&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">string</span>&lt;/span&gt; <span class=\"hljs-title\">SEP</span> = &lt;span class=\"hljs-string\"&gt;\"/\"&lt;/span&gt;;</span>\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">endif</span>&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">int</span>&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;<span class=\"hljs-title\">main</span>&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{</span>\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">cout</span>&lt;/span&gt; &amp;<span class=\"hljs-title\">lt</span>;</span>&amp;lt; &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">string</span>\"&gt;\"<span class=\"hljs-title\">Separator</span> <span class=\"hljs-title\">in</span> <span class=\"hljs-title\">my</span> <span class=\"hljs-title\">system</span> \"&lt;/span&gt; &amp;<span class=\"hljs-title\">lt</span>;</span>&amp;lt; SEP &amp;lt;&amp;lt; &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">endl</span>&lt;/span&gt;;</span>\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">return</span>&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://coliru.stacked-crooked.com/a/5023ee989105fc54\" target=\"_blank\" rel=\"noopener\">Compilar y ejecutar: ejemplo separador C&#43;&#43;11</a>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Separador de directorios independiente de la plataforma en C&#43;&#43;17. Más sencillo y claro.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\">&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>experimental/filesystem&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">namespace</span>&lt;/span&gt; <span class=\"hljs-title\">fs</span> = &lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">std</span>&lt;/span&gt;:</span>:experimental::filesystem;\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">using</span>&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">namespace</span>&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">std</span>&lt;/span&gt;;</span>\n\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">function</span>\"&gt;&lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">int</span>&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;<span class=\"hljs-title\">main</span>&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{</span>\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">cout</span>&lt;/span&gt; &amp;<span class=\"hljs-title\">lt</span>;</span>&amp;lt; &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">string</span>\"&gt;\"<span class=\"hljs-title\">Separator</span> <span class=\"hljs-title\">in</span> <span class=\"hljs-title\">my</span> <span class=\"hljs-title\">system</span> \"&lt;/span&gt; &amp;<span class=\"hljs-title\">lt</span>;</span>&amp;lt; fs::path::preferred_separator &amp;lt;&amp;lt; &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">endl</span>&lt;/span&gt;;</span>\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">return</span>&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://coliru.stacked-crooked.com/a/1f2f63b3f5597d05\" target=\"_blank\" rel=\"noopener\">Compilar y ejecutar: ejemplo separador C&#43;&#43;17</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_operador_de_separador_de_directorios\">Operador de separador de directorios</h3>\n<div class=\"paragraph\">\n<p><a href=\"https://en.cppreference.com/w/cpp/filesystem/path\">std::filesystem::path</a> implementa el operador <code>/</code>, el cual nos permite concatenar fácilmente rutas a ficheros o directorios.</p>\n</div>\n<div class=\"paragraph\">\n<p>Si quisiéramos construir rutas a directorios en C&#43;&#43;11, tendríamos que implementar cierta lógica extra para detectar que no añadimos separadores extra y para utilizar el separador correcto:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Concatenar paths en C&#43;&#43;11</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\">&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">using</span>&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">namespace</span>&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">std</span>&lt;/span&gt;;</span>\n\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">ifdef</span>&lt;/span&gt; _<span class=\"hljs-title\">WIN32</span>&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">const</span>&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">string</span>&lt;/span&gt; <span class=\"hljs-title\">SEP</span> = &lt;span class=\"hljs-string\"&gt;\"\\\\\"&lt;/span&gt;;</span>\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">else</span>&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">const</span>&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">string</span>&lt;/span&gt; <span class=\"hljs-title\">SEP</span> = &lt;span class=\"hljs-string\"&gt;\"/\"&lt;/span&gt;;</span>\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">endif</span>&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">int</span>&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;<span class=\"hljs-title\">main</span>&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{</span>\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">string</span>&lt;/span&gt; <span class=\"hljs-title\">root</span> {</span>&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">string</span>\"&gt;\"/\"&lt;/span&gt;};</span>\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">string</span>&lt;/span&gt; <span class=\"hljs-title\">dir</span> {</span>&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">string</span>\"&gt;\"<span class=\"hljs-title\">var</span>/<span class=\"hljs-title\">www</span>/\"&lt;/span&gt;};</span>\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">string</span>&lt;/span&gt; <span class=\"hljs-title\">index</span> {</span>&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">string</span>\"&gt;\"<span class=\"hljs-title\">index</span>.<span class=\"hljs-title\">html</span>\"&lt;/span&gt;};</span>\n\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">string</span>&lt;/span&gt; <span class=\"hljs-title\">pathToIndex</span>{</span>};\n    pathToIndex.append(root).append(SEP).append(dir).append(SEP).append(index);\n\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">cout</span>&lt;/span&gt; &amp;<span class=\"hljs-title\">lt</span>;</span>&amp;lt; pathToIndex &amp;lt;&amp;lt; &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">endl</span>&lt;/span&gt;;</span>\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">return</span>&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/290b278ec1de9573\" target=\"_blank\" rel=\"noopener\">Compilar y ejecutar: ejemplo concatenar rutas C&#43;&#43;11</a></div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">//var/www//index.html</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Como vemos el resultado no es del todo correcto, deberíamos comprobar si las partes de la ruta ya contienen separador, para no añadirlo.</p>\n</div>\n<div class=\"paragraph\">\n<p>Toda esta lógica ya está implementada en <a href=\"https://en.cppreference.com/w/cpp/filesystem/path\">std::filesystem::path</a>, así que el código en C&#43;&#43;17 sería algo así:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Concatenar paths en C&#43;&#43;17</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\">&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>experimental/filesystem&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">namespace</span>&lt;/span&gt; <span class=\"hljs-title\">fs</span> = &lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">std</span>&lt;/span&gt;:</span>:experimental::filesystem;\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">using</span>&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">namespace</span>&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">std</span>&lt;/span&gt;;</span>\n\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">function</span>\"&gt;&lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">int</span>&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;<span class=\"hljs-title\">main</span>&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{</span>\n    fs::path root {&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">string</span>\"&gt;\"/\"&lt;/span&gt;};</span>\n    fs::path dir {&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">string</span>\"&gt;\"<span class=\"hljs-title\">var</span>/<span class=\"hljs-title\">www</span>/\"&lt;/span&gt;};</span>\n    fs::path index {&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">string</span>\"&gt;\"<span class=\"hljs-title\">index</span>.<span class=\"hljs-title\">html</span>\"&lt;/span&gt;};</span>\n\n    fs::path pathToIndex = root / dir / index;\n\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">cout</span>&lt;/span&gt; &amp;<span class=\"hljs-title\">lt</span>;</span>&amp;lt; pathToIndex &amp;lt;&amp;lt; &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">endl</span>&lt;/span&gt;;</span>\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">return</span>&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/a24d50875b4daad1\">Compilar y ejecutar: ejemplo concatenar rutas C&#43;&#43;17</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"/var/www/index.html\"</span>&lt;/span&gt;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Aquí el código es más limpio y el resultado es simplemente correcto, no hay separadores duplicados.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_crear_y_borrar_directorios\">Crear y borrar directorios</h3>\n<div class=\"paragraph\">\n<p><a href=\"https://en.cppreference.com/w/cpp/filesystem\" target=\"_blank\" rel=\"noopener\">std::filesystem</a> introduce algunas facilidades para crear y borrar directorios y ficheros, primero vamos a ver una de las formas de hacerlo en C&#43;&#43;11.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Crear y borrar directorios anidados en C&#43;&#43;11</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\">&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>sys/stat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">using</span>&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">namespace</span>&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">std</span>&lt;/span&gt;;</span>\n\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">function</span>\"&gt;&lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">int</span>&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;<span class=\"hljs-title\">main</span>&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{</span>\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">auto</span>&lt;/span&gt; <span class=\"hljs-title\">opts</span> = <span class=\"hljs-title\">S_IRWXU</span> | <span class=\"hljs-title\">S_IRWXG</span> | <span class=\"hljs-title\">S_IROTH</span> | <span class=\"hljs-title\">S_IXOTH</span>;</span>\n    mkdir(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"sandbox\"</span>&lt;/span&gt;, opts);\n    mkdir(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"sandbox/a\"</span>&lt;/span&gt;, opts);\n    mkdir(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"sandbox/a/b\"</span>&lt;/span&gt;, opts);\n    mkdir(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"sandbox/c\"</span>&lt;/span&gt;, opts);\n    mkdir(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"sandbox/c/d\"</span>&lt;/span&gt;, opts);\n\n    system(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"ls -la sandbox/*\"</span>&lt;/span&gt;);\n\n    remove(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"sandbox/c/d\"</span>&lt;/span&gt;);\n    remove(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"sandbox/a/b\"</span>&lt;/span&gt;);\n    remove(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"sandbox/c\"</span>&lt;/span&gt;);\n    remove(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"sandbox/a\"</span>&lt;/span&gt;);\n    remove(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"sandbox\"</span>&lt;/span&gt;);\n\n    system(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"ls -la\"</span>&lt;/span&gt;);\n\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">return</span>&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/26f4763ec5b42adb\">Compilar y ejecutar: crear y borrar directorios C&#43;&#43;11</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++-4.9 -std=c++11 main.cpp -lm &amp;amp;&amp;amp; ./a.out\nsandbox/a:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 12:27 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 12:27 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 12:27 b\n\nsandbox/c:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 12:27 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 12:27 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 12:27 d\ntotal 8012\ndrwxrwxrwx 2 2001 2000    4096 May 28 12:27 .\ndrwxrwxrwx 3 2002 2000 8175616 May 28 12:27 ..\n-rwxr-xr-x 1 2001 2000    8168 May 28 12:27 a.out\n-rw-rw-rw- 1 2001 2000     517 May 28 12:27 main.cpp</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Para crear y borrar directorios anidados, debemos hacerlo uno por uno. Podemos escribir este fragmento de código con menos líneas, pero aún así tendremos que tener cuidado del orden en el que creamos/borramos los directorios.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">En C&#43;&#43;17 podemos borrar y crear directorios anidados con una sola llamada.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\">&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>experimental/filesystem&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">namespace</span>&lt;/span&gt; <span class=\"hljs-title\">fs</span> = &lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">std</span>&lt;/span&gt;:</span>:experimental::filesystem;\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">using</span>&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">namespace</span>&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">std</span>&lt;/span&gt;;</span>\n\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">function</span>\"&gt;&lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">int</span>&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;<span class=\"hljs-title\">main</span>&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{</span>\n    fs::create_directories(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"sandbox/a/b\"</span>&lt;/span&gt;);\n    fs::create_directories(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"sandbox/c/d\"</span>&lt;/span&gt;);\n    system(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"ls -la sandbox/*\"</span>&lt;/span&gt;);\n\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">cout</span>&lt;/span&gt; &amp;<span class=\"hljs-title\">lt</span>;</span>&amp;lt; &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">string</span>\"&gt;\"<span class=\"hljs-title\">Were</span> <span class=\"hljs-title\">directories</span> <span class=\"hljs-title\">removed</span>? \"&lt;/span&gt; &amp;<span class=\"hljs-title\">lt</span>;</span>&amp;lt; fs::remove_all(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"sandbox\"</span>&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">endl</span>&lt;/span&gt;;</span>\n    system(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"ls -la\"</span>&lt;/span&gt;);\n\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">return</span>&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/62c2d22fa0e7144c\">Compilar y ejecutar: crear y borrar directorios C&#43;&#43;17</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++ -std=c++1z -fconcepts -fgnu-tm  -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;amp;&amp;amp; ./a.out\nsandbox/a:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 16:45 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 16:45 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 16:45 b\n\nsandbox/c:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 16:45 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 16:45 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 16:45 d\nWere directories removed? 1\ntotal 10132\ndrwxrwxrwx 2 2001 2000    4096 May 28 16:45 .\ndrwxrwxrwx 3 2002 2000 8175616 May 28 16:45 ..\n-rwxr-xr-x 1 2001 2000 2170976 May 28 16:45 a.out\n-rw-rw-rw- 1 2001 2000     393 May 28 16:45 main.cpp</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_ejemplo_completo_iterar_recursivamente_por_directorios\">Ejemplo completo: Iterar Recursivamente por Directorios</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vamos a ver un ejemplo algo más completo, consiste en iterar recursivamente a través de directorios, filtrando los ficheros por extension.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_c11\">C&#43;&#43;11</h3>\n<div class=\"paragraph\">\n<p>Este es el ejemplo en C&#43;&#43;11, sin filtrar por extension, para evitar complicarlo:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">filesystem.11.cpp</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\">&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>dirent.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>fstream&amp;gt; <span class=\"hljs-comment\">// std::ofstream&lt;/span&gt;&lt;/span&gt;</span>\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;&amp;<span class=\"hljs-title\">lt</span>;</span><span class=\"hljs-built_in\">vector</span>&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>memory&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>system_error&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>sys/stat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">using</span>&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">namespace</span>&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">std</span>&lt;/span&gt;;</span>\n\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">const</span>&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">string</span>&lt;/span&gt; <span class=\"hljs-title\">UP_DIR</span> = &lt;span class=\"hljs-string\"&gt;\"..\"&lt;/span&gt;;</span>\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">const</span>&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">string</span>&lt;/span&gt; <span class=\"hljs-title\">CURRENT_DIR</span> = &lt;span class=\"hljs-string\"&gt;\".\"&lt;/span&gt;;</span>\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">const</span>&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">string</span>&lt;/span&gt; <span class=\"hljs-title\">SEP</span> = &lt;span class=\"hljs-string\"&gt;\"/\"&lt;/span&gt;;</span>\n\n\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">function</span>\"&gt;&lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">string</span>&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;<span class=\"hljs-title\">path</span>&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">initializer_list</span>&lt;/span&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">string</span>&lt;/span&gt;&amp;<span class=\"hljs-title\">gt</span>;</span> parts)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">string</span>&lt;/span&gt; <span class=\"hljs-title\">pathTmp</span> {</span>};\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">string</span>&lt;/span&gt; <span class=\"hljs-title\">separator</span> = &lt;span class=\"hljs-string\"&gt;\"\"&lt;/span&gt;;</span>\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">for</span>&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">auto</span>&lt;/span&gt; &amp;<span class=\"hljs-title\">amp</span>;</span> part: parts)\n    {\n        pathTmp.append(separator).append(part);\n        separator = SEP;\n    }\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">return</span>&lt;/span&gt; <span class=\"hljs-title\">pathTmp</span>;</span>\n}\n\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">function</span>\"&gt;&lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">vector</span>&lt;/span&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">string</span>&lt;/span&gt;&amp;<span class=\"hljs-title\">gt</span>;</span> &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">title</span>\"&gt;<span class=\"hljs-title\">getDirectoryFiles</span>&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(&lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">const</span>&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">string</span>&lt;/span&gt;&amp;<span class=\"hljs-title\">amp</span>;</span> dir, &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">const</span>&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">vector</span>&lt;/span&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">string</span>&lt;/span&gt;&amp;<span class=\"hljs-title\">gt</span>;</span> &amp;amp; extensions)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">vector</span>&lt;/span&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">string</span>&lt;/span&gt;&amp;<span class=\"hljs-title\">gt</span>;</span> files;\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">function</span>\"&gt;&lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">shared_ptr</span>&lt;/span&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>DIR&amp;gt; &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">title</span>\"&gt;<span class=\"hljs-title\">directory_ptr</span>&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(<span class=\"hljs-title\">opendir</span>(<span class=\"hljs-title\">dir</span>.<span class=\"hljs-title\">c_str</span>()), [](<span class=\"hljs-title\">DIR</span>* <span class=\"hljs-title\">dir</span>){</span> dir &amp;amp;&amp;amp; closedir(dir); })&lt;/span&gt;&lt;/span&gt;;\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">if</span>&lt;/span&gt; (!<span class=\"hljs-title\">directory_ptr</span>)\n    {</span>\n        &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">throw</span>&lt;/span&gt; <span class=\"hljs-title\">system_error</span>(<span class=\"hljs-title\">error_code</span>(<span class=\"hljs-title\">errno</span>, <span class=\"hljs-title\">system_category</span>()), &lt;span class=\"hljs-string\"&gt;\"<span class=\"hljs-title\">Error</span> <span class=\"hljs-title\">opening</span> :</span> <span class=\"hljs-string\">\"&lt;/span&gt; + dir);\n    }\n\n    &lt;span class=\"</span>hljs-<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>\"&gt;&lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">struct</span>&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;<span class=\"hljs-title\">dirent</span>&lt;/span&gt; *&lt;span class=\"hljs-title\"&gt;<span class=\"hljs-title\">dirent_ptr</span>&lt;/span&gt;;</span>&lt;/span&gt;\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">while</span>&lt;/span&gt; ((<span class=\"hljs-title\">dirent_ptr</span> = <span class=\"hljs-title\">readdir</span>(<span class=\"hljs-title\">directory_ptr</span>.<span class=\"hljs-title\">get</span>())) != &lt;span class=\"hljs-literal\"&gt;<span class=\"hljs-title\">nullptr</span>&lt;/span&gt;)\n    {</span>\n        &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">const</span>&lt;/span&gt; &lt;span class=\"hljs-built_in\"&gt;<span class=\"hljs-title\">string</span>&lt;/span&gt; <span class=\"hljs-title\">fileName</span> {</span>dirent_ptr-&amp;gt;d_name};\n        &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">if</span>&lt;/span&gt; (<span class=\"hljs-title\">dirent_ptr</span>-&amp;<span class=\"hljs-title\">gt</span>;</span>d_type == DT_DIR)\n        {\n            &lt;span class=<span class=\"hljs-string\">\"hljs-keyword\"</span>&gt;<span class=\"hljs-keyword\">if</span>&lt;/span&gt; (CURRENT_DIR != fileName &amp;amp;&amp;amp; UP_DIR != fileName)\n            {\n                &lt;span class=<span class=\"hljs-string\">\"hljs-keyword\"</span>&gt;<span class=\"hljs-keyword\">auto</span>&lt;/span&gt; subFiles = getDirectoryFiles(path({dir, fileName}), extensions);\n                files.insert(end(files), begin(subFiles), end(subFiles));\n            }\n        }\n        &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">else</span>&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">if</span>&lt;/span&gt; (<span class=\"hljs-title\">dirent_ptr</span>-&amp;<span class=\"hljs-title\">gt</span>;</span>d_type == DT_REG)\n        {\n            &lt;span class=<span class=\"hljs-string\">\"hljs-comment\"</span>&gt;<span class=\"hljs-comment\">// here we should check also if filename has an extension in extensions vector&lt;/span&gt;</span>\n            files.push_back(path({dir, fileName}));\n        }\n    }\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">return</span>&lt;/span&gt; <span class=\"hljs-title\">files</span>;</span>\n}\n\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">function</span>\"&gt;&lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">int</span>&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;<span class=\"hljs-title\">main</span>&lt;/span&gt; &lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{</span>\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">auto</span>&lt;/span&gt; <span class=\"hljs-title\">opt</span> = <span class=\"hljs-title\">S_IRWXU</span> | <span class=\"hljs-title\">S_IRWXG</span> | <span class=\"hljs-title\">S_IROTH</span> | <span class=\"hljs-title\">S_IXOTH</span>;</span>\n    mkdir(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"sandbox\"</span>&lt;/span&gt;, opt);\n    mkdir(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"sandbox/a\"</span>&lt;/span&gt;, opt);\n    mkdir(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"sandbox/a/b\"</span>&lt;/span&gt;, opt);\n\n\t&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">vector</span>&lt;/span&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">string</span>&lt;/span&gt;&amp;<span class=\"hljs-title\">gt</span>;</span> e_files = {\n\t    &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"./sandbox/a/b/file1.rst\"</span>&lt;/span&gt;,\n\t    &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"./sandbox/a/b/file1.txt\"</span>&lt;/span&gt;,\n\t    &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"./sandbox/a/file2.RST\"</span>&lt;/span&gt;,\n\t    &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"./sandbox/file3.md\"</span>&lt;/span&gt;,\n\t    &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"./sandbox/will_be.ignored\"</span>&lt;/span&gt;\n\t};\n\n\t&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">comment</span>\"&gt;// <span class=\"hljs-title\">create</span> <span class=\"hljs-title\">files</span>&lt;/span&gt;\n\t&lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">for</span>&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">auto</span>&lt;/span&gt; &amp;<span class=\"hljs-title\">amp</span>;</span>f: e_files)\n\t{\n\t\t&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">function</span>\"&gt;<span class=\"hljs-title\">ofstream</span> &lt;span class=\"hljs-title\"&gt;<span class=\"hljs-title\">of</span>&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(<span class=\"hljs-title\">f</span>, <span class=\"hljs-title\">ofstream</span>:</span>:out)&lt;/span&gt;&lt;/span&gt;;\n\t\tof &amp;lt;&amp;lt; &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">string</span>\"&gt;\"<span class=\"hljs-title\">test</span>\"&lt;/span&gt;;</span>\n\t}\n\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">cout</span>&lt;/span&gt; &amp;<span class=\"hljs-title\">lt</span>;</span>&amp;lt; &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">string</span>\"&gt;\"<span class=\"hljs-title\">filtered</span> <span class=\"hljs-title\">files</span>:</span> <span class=\"hljs-string\">\"&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"</span>hljs-built_in<span class=\"hljs-string\">\"&gt;endl&lt;/span&gt;;\n\t&lt;span class=\"</span>hljs-keyword<span class=\"hljs-string\">\"&gt;for&lt;/span&gt; (&lt;span class=\"</span>hljs-keyword<span class=\"hljs-string\">\"&gt;auto&lt;/span&gt; &amp;amp;f: getDirectoryFiles(&lt;span class=\"</span>hljs-<span class=\"hljs-built_in\">string</span><span class=\"hljs-string\">\"&gt;\"</span>.<span class=\"hljs-string\">\"&lt;/span&gt;, {&lt;span class=\"</span>hljs-<span class=\"hljs-built_in\">string</span><span class=\"hljs-string\">\"&gt;\"</span>.rst<span class=\"hljs-string\">\"&lt;/span&gt;, &lt;span class=\"</span>hljs-<span class=\"hljs-built_in\">string</span><span class=\"hljs-string\">\"&gt;\"</span>.RST<span class=\"hljs-string\">\"&lt;/span&gt;, &lt;span class=\"</span>hljs-<span class=\"hljs-built_in\">string</span><span class=\"hljs-string\">\"&gt;\"</span>.md<span class=\"hljs-string\">\"&lt;/span&gt;})){\n\t    &lt;span class=\"</span>hljs-built_in<span class=\"hljs-string\">\"&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=\"</span>hljs-<span class=\"hljs-built_in\">string</span><span class=\"hljs-string\">\"&gt;\"</span>\\t<span class=\"hljs-string\">\"&lt;/span&gt; &amp;lt;&amp;lt; f &amp;lt;&amp;lt; &lt;span class=\"</span>hljs-built_in<span class=\"hljs-string\">\"&gt;endl&lt;/span&gt;;\n\t}\n\n    &lt;span class=\"</span>hljs-keyword<span class=\"hljs-string\">\"&gt;return&lt;/span&gt; &lt;span class=\"</span>hljs-number<span class=\"hljs-string\">\"&gt;0&lt;/span&gt;;\n}</span></code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/af4228e039a281b3\" target=\"_blank\" rel=\"noopener\">Compilar y ejecutar el ejemplo C&#43;&#43;11</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++ -std=c++11 -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;amp;&amp;amp; ./a.out\nfiltered files:\n\t./main.cpp\n\t./sandbox/file3.md\n\t./sandbox/will_be.ignored\n\t./sandbox/a/b/file1.rst\n\t./sandbox/a/b/file1.txt\n\t./sandbox/a/file2.RST\n\t./a.out</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_c17\">C&#43;&#43;17</h3>\n<div class=\"paragraph\">\n<p>El siguiente ejemplo filtra los ficheros por extension.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">filesystem.17.cpp</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">&lt;span class=<span class=\"hljs-string\">\"hljs-comment\"</span>&gt;<span class=\"hljs-comment\">#include &amp;lt;dirent.h&amp;gt;&lt;/span&gt;</span>\n&lt;span class=<span class=\"hljs-string\">\"hljs-comment\"</span>&gt;<span class=\"hljs-comment\">#include &amp;lt;cstring&amp;gt;&lt;/span&gt;</span>\n&lt;span class=<span class=\"hljs-string\">\"hljs-comment\"</span>&gt;<span class=\"hljs-comment\">#include &amp;lt;iostream&amp;gt;&lt;/span&gt;</span>\n&lt;span class=<span class=\"hljs-string\">\"hljs-comment\"</span>&gt;<span class=\"hljs-comment\">#include &amp;lt;fstream&amp;gt; // std::ofstream&lt;/span&gt;</span>\n&lt;span class=<span class=\"hljs-string\">\"hljs-comment\"</span>&gt;<span class=\"hljs-comment\">#include &amp;lt;vector&amp;gt;&lt;/span&gt;</span>\n&lt;span class=<span class=\"hljs-string\">\"hljs-comment\"</span>&gt;<span class=\"hljs-comment\">#include &amp;lt;memory&amp;gt;&lt;/span&gt;</span>\n&lt;span class=<span class=\"hljs-string\">\"hljs-comment\"</span>&gt;<span class=\"hljs-comment\">#include &amp;lt;system_error&amp;gt;&lt;/span&gt;</span>\n&lt;span class=<span class=\"hljs-string\">\"hljs-comment\"</span>&gt;<span class=\"hljs-comment\">#include &amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;</span>\n\nusing namespace std;\n\nconst string UP_DIR = &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"..\"</span>&lt;/span&gt;;\nconst string CURRENT_DIR = &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\".\"</span>&lt;/span&gt;;\nconst string SEP = &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"/\"</span>&lt;/span&gt;;\n\n\nstring path(initializer_list&amp;lt;string&amp;gt; parts)\n{\n    string pathTmp {};\n    string separator = &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"\"</span>&lt;/span&gt;;\n    &lt;span class=<span class=\"hljs-string\">\"hljs-keyword\"</span>&gt;<span class=\"hljs-keyword\">for</span>&lt;/span&gt; (auto &amp;amp; part: parts)\n    {\n        pathTmp.append(separator).append(part);\n        separator = SEP;\n    }\n    &lt;span class=<span class=\"hljs-string\">\"hljs-built_in\"</span>&gt;<span class=\"hljs-built_in\">return</span>&lt;/span&gt; pathTmp;\n}\n\nvector&amp;lt;string&amp;gt; getDirectoryFiles(const string&amp;amp; dir, const vector&amp;lt;string&amp;gt; &amp;amp; extensions)\n{\n    vector&amp;lt;string&amp;gt; files;\n    shared_ptr&amp;lt;DIR&amp;gt; directory_ptr(opendir(dir.c_str()), [](DIR* dir){ dir &amp;amp;&amp;amp; closedir(dir); });\n    &lt;span class=<span class=\"hljs-string\">\"hljs-keyword\"</span>&gt;<span class=\"hljs-keyword\">if</span>&lt;/span&gt; (!directory_ptr)\n    {\n        throw system_error(error_code(errno, system_category()), &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"Error opening : \"</span>&lt;/span&gt; + dir);\n    }\n\n    struct dirent *dirent_ptr;\n    &lt;span class=<span class=\"hljs-string\">\"hljs-keyword\"</span>&gt;<span class=\"hljs-keyword\">while</span>&lt;/span&gt; ((dirent_ptr = readdir(directory_ptr.get())) != nullptr)\n    {\n        const string fileName {dirent_ptr-&amp;gt;d_name};\n        &lt;span class=<span class=\"hljs-string\">\"hljs-keyword\"</span>&gt;<span class=\"hljs-keyword\">if</span>&lt;/span&gt; (dirent_ptr-&amp;gt;d_type == DT_DIR)\n        {\n            &lt;span class=<span class=\"hljs-string\">\"hljs-keyword\"</span>&gt;<span class=\"hljs-keyword\">if</span>&lt;/span&gt; (CURRENT_DIR != fileName &amp;amp;&amp;amp; UP_DIR != fileName)\n            {\n                auto subFiles = getDirectoryFiles(path({dir, fileName}), extensions);\n                files.insert(end(files), begin(subFiles), end(subFiles));\n            }\n        }\n        &lt;span class=<span class=\"hljs-string\">\"hljs-keyword\"</span>&gt;<span class=\"hljs-keyword\">else</span>&lt;/span&gt; &lt;span class=<span class=\"hljs-string\">\"hljs-keyword\"</span>&gt;<span class=\"hljs-keyword\">if</span>&lt;/span&gt; (dirent_ptr-&amp;gt;d_type == DT_REG)\n        {\n            // here we should check also &lt;span class=<span class=\"hljs-string\">\"hljs-keyword\"</span>&gt;<span class=\"hljs-keyword\">if</span>&lt;/span&gt; filename has an extension &lt;span class=<span class=\"hljs-string\">\"hljs-keyword\"</span>&gt;<span class=\"hljs-keyword\">in</span>&lt;/span&gt; extensions vector\n            files.push_back(path({dir, fileName}));\n        }\n    }\n    &lt;span class=<span class=\"hljs-string\">\"hljs-built_in\"</span>&gt;<span class=\"hljs-built_in\">return</span>&lt;/span&gt; files;\n}\n\nint &lt;span class=<span class=\"hljs-string\">\"hljs-function\"</span>&gt;&lt;span class=<span class=\"hljs-string\">\"hljs-title\"</span>&gt;main&lt;/span&gt;&lt;/span&gt; ()\n{\n    auto opt = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;\n    mkdir(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"sandbox\"</span>&lt;/span&gt;, opt);\n    mkdir(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"sandbox/a\"</span>&lt;/span&gt;, opt);\n    mkdir(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"sandbox/a/b\"</span>&lt;/span&gt;, opt);\n\n\tvector&amp;lt;string&amp;gt; e_files = {\n\t    &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"./sandbox/a/b/file1.rst\"</span>&lt;/span&gt;,\n\t    &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"./sandbox/a/b/file1.txt\"</span>&lt;/span&gt;,\n\t    &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"./sandbox/a/file2.RST\"</span>&lt;/span&gt;,\n\t    &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"./sandbox/file3.md\"</span>&lt;/span&gt;,\n\t    &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"./sandbox/will_be.ignored\"</span>&lt;/span&gt;\n\t};\n\n\t// create files\n\t&lt;span class=<span class=\"hljs-string\">\"hljs-keyword\"</span>&gt;<span class=\"hljs-keyword\">for</span>&lt;/span&gt; (auto &amp;amp;f: e_files)\n\t{\n\t\tofstream of(f, ofstream::out);\n\t\tof &amp;lt;&amp;lt; &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"test\"</span>&lt;/span&gt;;\n\t}\n\n    cout &amp;lt;&amp;lt; &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"filtered files: \"</span>&lt;/span&gt; &amp;lt;&amp;lt; endl;\n\t&lt;span class=<span class=\"hljs-string\">\"hljs-keyword\"</span>&gt;<span class=\"hljs-keyword\">for</span>&lt;/span&gt; (auto &amp;amp;f: getDirectoryFiles(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\".\"</span>&lt;/span&gt;, {&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\".rst\"</span>&lt;/span&gt;, &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\".RST\"</span>&lt;/span&gt;, &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\".md\"</span>&lt;/span&gt;})){\n\t    cout &amp;lt;&amp;lt; &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"\\t\"</span>&lt;/span&gt; &amp;lt;&amp;lt; f &amp;lt;&amp;lt; endl;\n\t}\n\n    &lt;span class=<span class=\"hljs-string\">\"hljs-built_in\"</span>&gt;<span class=\"hljs-built_in\">return</span>&lt;/span&gt; 0;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/af4228e039a281b3\" target=\"_blank\" rel=\"noopener\">Compilar y ejecutar el ejemplo C&#43;&#43;17</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++ -std=c++11 -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;amp;&amp;amp; ./a.out\nfiltered files:\n\t./main.cpp\n\t./sandbox/file3.md\n\t./sandbox/will_be.ignored\n\t./sandbox/a/b/file1.rst\n\t./sandbox/a/b/file1.txt\n\t./sandbox/a/file2.RST\n\t./a.out</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>","slug":"recursive-directory-iterator-cpp"}