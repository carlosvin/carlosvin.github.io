{"sectids":"","toc-placement":"auto","notitle":"","stylesheet":"","webfonts":"","prewrap":"","attribute-undefined":"drop-line","attribute-missing":"skip","iconfont-remote":"","caution-caption":"Caution","important-caption":"Important","note-caption":"Note","tip-caption":"Tip","warning-caption":"Warning","example-caption":"Example","figure-caption":"Figure","table-caption":"Table","toc-title":"Table of Contents","section-refsig":"Section","part-refsig":"Part","chapter-refsig":"Chapter","appendix-refsig":"Appendix","appendix-caption":"Appendix","untitled-label":"Untitled","version-label":"Version","last-update-label":"Last updated","docfile":"gradle-cpp.en.adoc","docdir":"","docfilesuffix":".adoc","docname":"gradle-cpp.en","embedded":"","asciidoctor":"","asciidoctor-version":"2.0.10","safe-mode-name":"secure","safe-mode-secure":"","safe-mode-level":20,"max-include-depth":64,"user-home":".","backend":"html5","max-attribute-value-size":4096,"linkcss":"","doctype":"article","htmlsyntax":"html","backend-html5-doctype-article":"","doctype-article":"","backend-html5":"","outfilesuffix":".html","filetype":"html","filetype-html":"","basebackend-html-doctype-article":"","basebackend-html":"","basebackend":"html","stylesdir":".","iconsdir":"./images/icons","localdate":"2020-04-22","localyear":"2020","localtime":"00:25:43 +0200","localdatetime":"2020-04-22 00:25:43 +0200","docdate":"2020-04-19","docyear":"2020","doctime":"10:46:31 +0200","docdatetime":"2020-04-19 10:46:31 +0200","doctitle":"Build C++ project with Gradle","date":"2014/09/27 12:00:00","keywords":["Gradle","C++","Build Software","Build System","Dependency Management"],"description":"How to build a C++ project using Gradle","lang":"en","toc":"","scons":"https://www.scons.org[SCons,window=_blank]","autotools":"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction[Autotools,window=_blank]","ant":"https://ant.apache.org[Ant,window=_blank]","maven":"https://maven.apache.org[Maven,window=_blank]","gradle":"https://www.gradle.org[Gradle,window=_blank]","incubation":"https://docs.gradle.org/current/userguide/feature_lifecycle.html#sec:incubating_state[incubation,window=_blank]","toolchain":"https://en.wikipedia.org/wiki/Toolchain[Toolchain,window=_blank]","java":"https://www.java.com[Java,window=_blank]","makefile":"https://www.gnu.org/software/make/manual/html_node/Makefiles.html:[Makefile,window=_blank]","android":"https://developer.android.com/studio/build[Android,window=_blank]","gcc":"https://gcc.gnu.org/[GCC,window=_blank]","authorcount":0,"title":"Build C++ project with Gradle","summary":"How to build a C++ project using Gradle","html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_introduction\">Introduction</a></li>\n<li><a href=\"#_case_study\">Case study</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_project_structure\">Project Structure</a></li>\n<li><a href=\"#_c_application\">C++ Application</a></li>\n<li><a href=\"#_building_with_gradle\">Building with Gradle</a></li>\n<li><a href=\"#_try_it_yourself\">Try it yourself</a></li>\n</ul>\n</li>\n<li><a href=\"#_conclusions\">Conclusions</a></li>\n</ul>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_introduction\">Introduction</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I am more and more worried about building, dependency management and distribution of my projects. I&#8217;d like to find a tool that unifies those processes with independence of the language. I know several tools which almost fit to what I&#8217;m looking for, like <a href=\"https://www.scons.org\" target=\"_blank\" rel=\"noopener\">SCons</a>, <a href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction\" target=\"_blank\" rel=\"noopener\">Autotools</a>, <a href=\"https://ant.apache.org\" target=\"_blank\" rel=\"noopener\">Ant</a>, <a href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven</a> and lately <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>I&#8217;ve made several projects with <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a>, but always they were <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> and <a href=\"https://developer.android.com/studio/build\" target=\"_blank\" rel=\"noopener\">Android</a> projects. <span class=\"line-through\">In <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> projects I&#8217;ve found a <a href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven</a> replacement, because it is faster, easier and less verbose</span>. <strong>Update 2020</strong>: With the experience, now if I have to pick a build system for a <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> project I&#8217;d pick <a href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven</a>, especially for a professional project, but it is not the topic of this post.</p>\n</div>\n<div class=\"paragraph\">\n<p>About <a href=\"https://developer.android.com/studio/build\" target=\"_blank\" rel=\"noopener\">Android</a> projects I suffered the early adoption of <a href=\"https://developer.android.com/sdk/installing/studio-build.html\" target=\"_blank\" rel=\"noopener\">Android Studio + Gradle</a>, although currently I think the are more mature and they work fine.</p>\n</div>\n<div class=\"paragraph\">\n<p>First of all, I have to say: building C/C++/Objective-C projects with <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> is in <a href=\"https://docs.gradle.org/current/userguide/feature_lifecycle.html#sec:incubating_state\" target=\"_blank\" rel=\"noopener\">incubation</a> phase, although now we can perform advanced tasks like:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Generation several artifacts within same project (libraries and executables).</p>\n</li>\n<li>\n<p>Dependency management between artifacts (no versions).</p>\n</li>\n<li>\n<p>Different \"flavors\" of the same software, e.g: we can generate a \"Community\" release and other one with more enabled features called \"Enterprise\".</p>\n</li>\n<li>\n<p>It allows multi-platform binary generation.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>As I said, this plugin is still having limitations although they are working on it: <a href=\"https://blog.gradle.org/state-and-future-of-the-gradle-software-model#a-way-forward\">Gradle C++ roadmap</a>. <span class=\"line-through\">If they achieve it I&#8217;ll leave <a href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction\" target=\"_blank\" rel=\"noopener\">Autotools</a> (I&#8217;m going to regret saying that)</span>. <strong>Update 2020</strong>: Actually few years later I am not using <a href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction\" target=\"_blank\" rel=\"noopener\">Autotools</a>, neither <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a>, but I am using <a href=\"https://mesonbuild.com/\">Meson</a> and considering <a href=\"https://docs.bazel.build/versions/master/tutorial/cpp.html\">Bazel</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_case_study\">Case study</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I&#8217;ve extracted all the case study from <a href=\"https://docs.gradle.org/current/userguide/native_software.html\">Gradle user guide for native software</a>. I&#8217;ve adapted the project to be multi-platform with 2 versions \"Community\" and \"Enterprise\".</p>\n</div>\n<div class=\"paragraph\">\n<p>The application consists of an executable and a dynamic library. The executable will use the library.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> also is able to generate a distributable version and a debug version.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can fork the code on <a href=\"https://github.com/carlosvin/cpp_gradle\" class=\"bare\">https://github.com/carlosvin/cpp_gradle</a>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_project_structure\">Project Structure</h3>\n<div class=\"paragraph\">\n<p>We can create whichever directory structure, but it is easier using the proposed by <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a>, if not we&#8217;ll have to specify where the code is located.</p>\n</div>\n<div class=\"paragraph\">\n<p>This is the project structure:</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">gradle-cpp</dt>\n<dd>\n<p>Root directory.</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">build.gradle</dt>\n<dd>\n<p>File where is configured <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> project, it is the equivalent to: build.xml for <a href=\"https://ant.apache.org\" target=\"_blank\" rel=\"noopener\">Ant</a>, <a href=\"\">Makefile</a> for C/C++ or pom.xml for <a href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven</a>.</p>\n</dd>\n<dt class=\"hdlist1\">src</dt>\n<dd>\n<p>Folder where the source code is located.</p>\n</dd>\n</dl>\n</div>\n</dd>\n<dt class=\"hdlist1\">hello</dt>\n<dd>\n<p>This folder contains the module hello. This module will generate hello library.</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">cpp</dt>\n<dd>\n<p>This folder contains C++ source files.</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">Hello.cpp</dt>\n<dd>\n<p>Â File with the implementation of Hello class.</p>\n</dd>\n</dl>\n</div>\n</dd>\n<dt class=\"hdlist1\">headers</dt>\n<dd>\n<p>Folder with header files.</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">Hello.h</dt>\n<dd>\n<p>Class Hello declaration.</p>\n</dd>\n<dt class=\"hdlist1\">Msg.h</dt>\n<dd>\n<p>File with constants declarations.</p>\n</dd>\n</dl>\n</div>\n</dd>\n</dl>\n</div>\n</dd>\n<dt class=\"hdlist1\">main</dt>\n<dd>\n<p>This folder contains the module which produces the executable that uses hello library.</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">cpp</dt>\n<dd>\n<p>This folder contains C++ source files.</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">main.cpp</dt>\n<dd>\n<p>Source code of main function.</p>\n</dd>\n</dl>\n</div>\n</dd>\n</dl>\n</div>\n</dd>\n<dt class=\"hdlist1\">build</dt>\n<dd>\n<p>Folder created automatically by <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> where it leaves all execution results like unit tests reports, compiled files, package distributions, etc.</p>\n</dd>\n</dl>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_c_application\">C++ Application</h3>\n<div class=\"paragraph\">\n<p>It consists of an executable that uses the functionality implemented at <code>hello</code> library.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">main.cpp</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">\"Hello.h\"</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc, <span class=\"hljs-keyword\">char</span> ** argv)</span>\n</span>{\n    <span class=\"hljs-function\">Hello <span class=\"hljs-title\">hello</span> <span class=\"hljs-params\">(<span class=\"hljs-string\">\"Pepito\"</span>)</span></span>;\n    hello.sayHello(<span class=\"hljs-number\">10</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><code>hello</code> library allows greet <code>n</code> <sup class=\"footnote\">[<a id=\"_footnoteref_1\" class=\"footnote\" href=\"#_footnotedef_1\" title=\"View footnote.\">1</a>]</sup> times to someone who is passed as argument to constructor class.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Hello.h</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Hello</span>\n{</span>\n    <span class=\"hljs-keyword\">private</span>:\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> * who;\n    <span class=\"hljs-keyword\">public</span>:\n        Hello(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> * who);\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">unsigned</span> n = <span class=\"hljs-number\">1</span>)</span></span>;\n};</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_building_with_gradle\">Building with <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a></h3>\n<div class=\"sect3\">\n<h4 id=\"_base_case\">Base case</h4>\n<div class=\"paragraph\">\n<p>The only we need to build the application with <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> is: having <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a><sup class=\"footnote\">[<a id=\"_footnoteref_2\" class=\"footnote\" href=\"#_footnotedef_2\" title=\"View footnote.\">2</a>]</sup> and the file <code>build.gradle</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">build.gradle</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">apply <span class=\"hljs-string\">plugin:</span> <span class=\"hljs-string\">'cpp'</span>\n\nmodel {\n  components {\n    hello(NativeLibrarySpec) {}\n    main(NativeExecutableSpec) {\n      binaries.all {\n        lib <span class=\"hljs-string\">library:</span> <span class=\"hljs-string\">\"hello\"</span>\n      }\n    }\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>With this simple file, we&#8217;ll be able to compile and install the application in Debug mode for the platform where we are executing <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> (in my case X64).</p>\n</div>\n<div class=\"paragraph\">\n<p>If we execute <code>gradle task</code> from the root of the project, we&#8217;ll get all the tasks we can do with <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>In our case, we just want our compiled application ready to run, so we have to execute: <code>gradle installMainExecutable</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Once execution has finished, we can run the program calling to `build/install/mainExecutable/main`<sup class=\"footnote\">[<a id=\"_footnoteref_3\" class=\"footnote\" href=\"#_footnotedef_3\" title=\"View footnote.\">3</a>]</sup>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Output</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ build/install/mainExecutable/main\n1.  Hello Mr. Pepito (Community)\n2.  Hello Mr. Pepito (Community)\n3.  Hello Mr. Pepito (Community)\n4.  Hello Mr. Pepito (Community)\n5.  Hello Mr. Pepito (Community)\n6.  Hello Mr. Pepito (Community)\n7.  Hello Mr. Pepito (Community)\n8.  Hello Mr. Pepito (Community)\n9.  Hello Mr. Pepito (Community)\n10. Hello Mr. Pepito (Community)</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_different_flavors\">Different \"Flavors\"</h4>\n<div class=\"paragraph\">\n<p>With a few lines more we can generate different versions of same application. In our example we are going to build \"Community\" and \"Enterprise\" flavors.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">build.gradle</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">apply <span class=\"hljs-string\">plugin:</span> <span class=\"hljs-string\">'cpp'</span>\n\nmodel {\n  flavors {\n      community\n      enterprise\n  }\n\n  components {\n    hello(NativeLibrarySpec) {\n      binaries.all {\n        <span class=\"hljs-keyword\">if</span> (flavor == flavors.enterprise) {\n          cppCompiler.define <span class=\"hljs-string\">\"ENTERPRISE\"</span>\n        }\n      }\n    }\n    main(NativeExecutableSpec) {\n      binaries.all {\n        lib <span class=\"hljs-string\">library:</span> <span class=\"hljs-string\">\"hello\"</span>\n        }\n    }\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>We also have to prepare our application to use compilation parameters.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Msg.h</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">ifdef</span> ENTERPRISE</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> * EDITION = <span class=\"hljs-string\">\"Enterprise\"</span>;\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">else</span></span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> * EDITION = <span class=\"hljs-string\">\"Community\"</span>;\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">endif</span></span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In this way it selects a string depending on used flavor.</p>\n</div>\n<div class=\"paragraph\">\n<p>If we execute <code>gradle clean task</code> in the root folder, we&#8217;ll get more available tasks. Before, we had <code>installMainExecutable</code> which has been replaced by <code>installCommunityMainExecutable</code> and <code>installEnterpriseMainExecutable</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>If we execute both tasks, we&#8217;ll get the application installed in both flavors:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\"><span class=\"hljs-variable\">$gradle</span> installEnterpriseMainExecutable installCommunityMainExecutable\n\n:compileEnterpriseHelloSharedLibraryHelloCpp\n:linkEnterpriseHelloSharedLibrary\n:enterpriseHelloSharedLibrary\n:compileEnterpriseMainExecutableMainCpp\n:linkEnterpriseMainExecutable\n:enterpriseMainExecutable\n:installEnterpriseMainExecutable\n:compileCommunityHelloSharedLibraryHelloCpp\n:linkCommunityHelloSharedLibrary\n:communityHelloSharedLibrary\n:compileCommunityMainExecutableMainCpp\n:linkCommunityMainExecutable\n:communityMainExecutable\n:installCommunityMainExecutable\n\nBUILD SUCCESSFUL\nTotal time: 9.414 secs</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Now we can run the application in both flavors:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Community</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ build/install/mainExecutable/community/main\n1.      Hello Mr. Pepito        (Community)\n2.      Hello Mr. Pepito        (Community)\n3.      Hello Mr. Pepito        (Community)\n4.      Hello Mr. Pepito        (Community)\n5.      Hello Mr. Pepito        (Community)\n6.      Hello Mr. Pepito        (Community)\n7.      Hello Mr. Pepito        (Community)\n8.      Hello Mr. Pepito        (Community)\n9.      Hello Mr. Pepito        (Community)\n10.     Hello Mr. Pepito        (Community)</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Enterprise</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ build/install/mainExecutable/enterprise/main\n1.      Hello Mr. Pepito        (Enterprise)\n2.      Hello Mr. Pepito        (Enterprise)\n3.      Hello Mr. Pepito        (Enterprise)\n4.      Hello Mr. Pepito        (Enterprise)\n5.      Hello Mr. Pepito        (Enterprise)\n6.      Hello Mr. Pepito        (Enterprise)\n7.      Hello Mr. Pepito        (Enterprise)\n8.      Hello Mr. Pepito        (Enterprise)\n9.      Hello Mr. Pepito        (Enterprise)\n10.     Hello Mr. Pepito        (Enterprise)</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_release_or_debug\">Release or Debug</h4>\n<div class=\"paragraph\">\n<p>By default <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> compiles in Debug mode, but we can add the Release mode which enables several optimizations and remove debug flags<sup class=\"footnote\">[<a id=\"_footnoteref_4\" class=\"footnote\" href=\"#_footnotedef_4\" title=\"View footnote.\">4</a>]</sup>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">build.gradle</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">apply <span class=\"hljs-string\">plugin:</span> <span class=\"hljs-string\">'cpp'</span>\nmodel {\n    buildTypes {\n        debug\n        release\n    }\n<span class=\"hljs-comment\">// ... the rest of file below doesn't change</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If we execute <code>gradle clean task</code> we will get more tasks, they have been split, for example <code>installCommunityMainExecutable</code> has been split in <code>installDebugCommunityMainExecutable</code> and <code>installReleaseCommunityMainExecutable</code>.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_multi_platform\">Multi-platform</h4>\n<div class=\"paragraph\">\n<p>Also we can use cross-compiling features provided by compilers and generate native components for other platforms. To do so we just have to add the supported platforms.</p>\n</div>\n<div class=\"paragraph\">\n<p>This only works if we have installed the <a href=\"https://en.wikipedia.org/wiki/Toolchain\" target=\"_blank\" rel=\"noopener\">Toolchain</a> for the target platform.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">build.gradle</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">apply <span class=\"hljs-string\">plugin:</span> <span class=\"hljs-string\">'cpp'</span>\n\nmodel {\n  buildTypes {\n    debug\n    release\n  }\n\n  platforms {\n    x86 {\n      architecture <span class=\"hljs-string\">\"x86\"</span>\n    }\n    x64 {\n      architecture <span class=\"hljs-string\">\"x86_64\"</span>\n    }\n    itanium {\n      architecture <span class=\"hljs-string\">\"ia-64\"</span>\n    }\n  }\n\n  flavors {\n    community\n    enterprise\n  }\n\n  components {\n    hello(NativeLibrarySpec) {\n      binaries.all {\n        <span class=\"hljs-keyword\">if</span> (flavor == flavors.enterprise) {\n          cppCompiler.define <span class=\"hljs-string\">\"ENTERPRISE\"</span>\n        }\n      }\n    }\n    main(NativeExecutableSpec) {\n      binaries.all {\n        lib <span class=\"hljs-string\">library:</span> <span class=\"hljs-string\">\"hello\"</span>\n      }\n    }\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When execute <code>gradle clean task</code> we get the different build options we have.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nIn this example, we can build different versions of the application in different flavors for different platforms in Debug or Release mode.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_try_it_yourself\">Try it yourself</h3>\n<div class=\"paragraph\">\n<p>You can find the project at <a href=\"https://github.com/carlosvin/cpp_gradle\" class=\"bare\">https://github.com/carlosvin/cpp_gradle</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Requirements:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> 6 or higher.</p>\n</li>\n<li>\n<p>An installed compiler (e.g <a href=\"\">GCC</a>)</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>You just have to follow next steps:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p><code>git clone <a href=\"mailto:git@github.com\">git@github.com</a>:carlosvin/cpp_gradle.git</code></p>\n</li>\n<li>\n<p><code>cd cpp_gradle</code></p>\n</li>\n<li>\n<p><code>./gradlew task</code> or <code>./gradlew.bat task</code> if you are in Windows. In this way you&#8217;ll see available tasks for this project. The first execution will take more time, because it downloads <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> runtime.</p>\n</li>\n<li>\n<p>If you are in a 64 bits platform, you can use this command to install the application: <code>./gradlew installX64ReleaseEnterpriseMainExecutable</code>.</p>\n</li>\n<li>\n<p>Run the application you just built: <code>build/install/mainExecutable/x64ReleaseEnterprise/main</code>.</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_conclusions\">Conclusions</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>With a tiny configuration file, we have many different build combinations.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> for C++ has a promising future, I hope it follows the steps of <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> and <a href=\"https://developer.android.com/studio/build\" target=\"_blank\" rel=\"noopener\">Android</a> support.</p>\n</div>\n<div class=\"paragraph\">\n<p>It is well supported by continuous integration systems.</p>\n</div>\n<div class=\"paragraph\">\n<p>It has many plugins and features.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> for C++ is a feature under development, we have to be careful:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Don&#8217;t use it in production environments.</p>\n</li>\n<li>\n<p>Many things can change or disappear.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The full example is on <a href=\"https://github.com/carlosvin/cpp_gradle\" class=\"bare\">https://github.com/carlosvin/cpp_gradle</a>. I recommend you to <a href=\"#_try_it_yourself\">Try it yourself</a>.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nIf you find any issue in this example, please write a comment, open a defect or fix it yourself at <a href=\"https://github.com/carlosvin/cpp_gradle\" class=\"bare\">https://github.com/carlosvin/cpp_gradle</a>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>More info at <a href=\"https://docs.gradle.org/current/userguide/native_software.html\">Getting Started Gradle Native</a>.</p>\n</div>\n</div>\n</div>\n<div id=\"footnotes\">\n<hr>\n<div class=\"footnote\" id=\"_footnotedef_1\">\n<a href=\"#_footnoteref_1\">1</a>. 'n' Positive integer\n</div>\n<div class=\"footnote\" id=\"_footnotedef_2\">\n<a href=\"#_footnoteref_2\">2</a>. Actually <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> is not required if we use the \"wrapper\", but we aren&#8217;t going to explain it here, <a href=\"https://docs.gradle.org/current/userguide/gradle_wrapper.html\">here you can get more info about Gradle Wrapper</a>.\n</div>\n<div class=\"footnote\" id=\"_footnotedef_3\">\n<a href=\"#_footnoteref_3\">3</a>. .bat in Windows. Without extension in Linux\n</div>\n<div class=\"footnote\" id=\"_footnotedef_4\">\n<a href=\"#_footnoteref_4\">4</a>. We can also specify/modify which optimizations to apply.\n</div>\n</div>","slug":"gradle-cpp"}