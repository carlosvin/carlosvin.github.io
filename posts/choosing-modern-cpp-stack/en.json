{"sectids":"","toc-placement":"auto","notitle":"","stylesheet":"","webfonts":"","prewrap":"","attribute-undefined":"drop-line","attribute-missing":"skip","iconfont-remote":"","caution-caption":"Caution","important-caption":"Important","note-caption":"Note","tip-caption":"Tip","warning-caption":"Warning","example-caption":"Example","figure-caption":"Figure","table-caption":"Table","toc-title":"Table of Contents","section-refsig":"Section","part-refsig":"Part","chapter-refsig":"Chapter","appendix-refsig":"Appendix","appendix-caption":"Appendix","untitled-label":"Untitled","version-label":"Version","last-update-label":"Last updated","docfile":"choosing-modern-cpp-stack.en.adoc","docdir":"","docfilesuffix":".adoc","docname":"choosing-modern-cpp-stack.en","embedded":"","asciidoctor":"","asciidoctor-version":"2.0.10","safe-mode-name":"secure","safe-mode-secure":"","safe-mode-level":20,"max-include-depth":64,"user-home":".","backend":"html5","max-attribute-value-size":4096,"linkcss":"","doctype":"article","htmlsyntax":"html","backend-html5-doctype-article":"","doctype-article":"","backend-html5":"","outfilesuffix":".html","filetype":"html","filetype-html":"","basebackend-html-doctype-article":"","basebackend-html":"","basebackend":"html","stylesdir":".","iconsdir":"./images/icons","localdate":"2020-04-19","localyear":"2020","localtime":"00:53:56 +0200","localdatetime":"2020-04-19 00:53:56 +0200","docdate":"2020-04-12","docyear":"2020","doctime":"17:37:24 +0200","docdatetime":"2020-04-12 17:37:24 +0200","doctitle":"Choosing a Modern C++ stack","date":"2017/09/15 20:50:00","keywords":["C++","Unit Testing","Build System","Build Software","Meson","Catch","doctest"],"description":"My chosen technologies stack for C++ project. It contains an easy to run example defining main project skeleton.","lang":"en","toc":"","make_link":"https://www.gnu.org/software/make/manual/make.html[Make,window=_blank]","maven":"https://maven.apache.org/[Maven,window=_blank]","scons":"https://scons.org/[Scons,window=_blank]","cmake":"https://cmake.org/[CMake,window=_blank]","meson":"https://mesonbuild.com/[Meson,window=_blank]","gradle":"https://gradle.org/[Gradle,window=_blank]","autotools":"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html[Autotools,window=_blank]","gnome":"https://www.gnome.org/[Gnome,window=_blank]","ninja":"https://ninja-build.org/[Ninja,window=_blank]","python":"https://python.org/[Python,window=_blank]","catch":"https://github.com/philsquared/Catch[Catch,window=_blank]","doctest":"https://github.com/onqtam/doctest[doctest,window=_blank]","xunit":"https://en.wikipedia.org/wiki/XUnit[xUnit,window=_blank]","bdd":"https://en.wikipedia.org/wiki/Behavior-driven_development[BDD,window=_blank]","uuid":"https://en.wikipedia.org/wiki/Universally_unique_identifier[UUID,window=_blank]","mt19937":"https://www.cplusplus.com/reference/random/mt19937[mt19937,window=_blank]","benchmarkresults":"https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md[performance results]","authorcount":0,"title":"Choosing a Modern C++ stack","summary":"My chosen technologies stack for C++ project. It contains an easy to run example defining main project skeleton.","html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_choosing_build_system_meson\">Choosing Build System (Meson)</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_cmake_vs_meson\">CMake vs Meson</a></li>\n<li><a href=\"#_other_build_systems_comparisons\">Other build systems comparisons</a></li>\n</ul>\n</li>\n<li><a href=\"#_unit_testing_framework\">Unit Testing Framework</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_doctest_a_catch_alternative\">doctest: A Catch alternative</a></li>\n</ul>\n</li>\n<li><a href=\"#_example\">Example</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_project_output_artifacts\">Project output artifacts</a></li>\n<li><a href=\"#_project_structure_fork_project\">Project structure (Fork project)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I&#8217;m starting a new project in C++, but I&#8217;ve run into a pair of questions before start:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Which build system should I use?</p>\n</li>\n<li>\n<p>Which unit testing framework?</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_choosing_build_system_meson\">Choosing Build System (<a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a>)</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I have used before <a href=\"https://www.gnu.org/software/make/manual/make.html\" target=\"_blank\" rel=\"noopener\">Make</a>, <a href=\"https://maven.apache.org/\" target=\"_blank\" rel=\"noopener\">Maven</a>, <a href=\"https://scons.org/\" target=\"_blank\" rel=\"noopener\">Scons</a>, <a href=\"https://gradle.org/\" target=\"_blank\" rel=\"noopener\">Gradle</a> and <a href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html\" target=\"_blank\" rel=\"noopener\">Autotools</a>, but I have some reasons to try find something else:</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html\" target=\"_blank\" rel=\"noopener\">Autotools</a></dt>\n<dd>\n<p>It is not easy to configure and maintain. There are several configuration files and several configuration steps.</p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://gradle.org/\" target=\"_blank\" rel=\"noopener\">Gradle</a></dt>\n<dd>\n<p>C feature is still incubating. Not very fast. You can check a similar example project at link:/posts/gradle-cpp/[Build C project with Gradle].</p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://www.gnu.org/software/make/manual/make.html\" target=\"_blank\" rel=\"noopener\">Make</a></dt>\n<dd>\n<p>I don&#8217;t love the syntax. Files tends to get messy as project grows.</p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://scons.org/\" target=\"_blank\" rel=\"noopener\">Scons</a></dt>\n<dd>\n<p>It is just slower and not as easy to understand than <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a>.</p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://maven.apache.org/\" target=\"_blank\" rel=\"noopener\">Maven</a></dt>\n<dd>\n<p>It is slow and you might end up \"<em>Javatizing</em>\" your C++ project structure.</p>\n</dd>\n</dl>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nI&#8217;ve listed just things I don&#8217;t like, those projects have other great features.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_cmake_vs_meson\"><a href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake</a> vs <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a></h3>\n<div class=\"paragraph\">\n<p>After discarding previous ones, I&#8217;m considering <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> or <a href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake</a>. Both are fast build systems:</p>\n</div>\n<div class=\"paragraph\">\n<p>Although <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> is written in <a href=\"https://python.org/\" target=\"_blank\" rel=\"noopener\">Python</a>, it generates a <a href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja</a> build project. First time you configure the project you have to run <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a>, but for building or testing you are actually running <a href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake</a> is also able to generate <a href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja</a> files among other formats, <a href=\"https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html\">check CMake generators documentation for more information</a>.</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake</a></dt>\n<dd>\n<p>It has a big advantage over <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a>, it is mature and widely used in many projects, which means there are many examples and it will fulfill your C++ project building needs.</p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a></dt>\n<dd>\n<p>It is a young project compared with <a href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake</a>, but it is growing quite fast and it has been adopted in other big projects like <a href=\"\">Gnome</a>, they have an initiative to <a href=\"https://wiki.gnome.org/Initiatives/GnomeGoals/MesonPorting\">port from Autotools to Meson</a>.</p>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p><strong>Finally I&#8217;ve chosen</strong> <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> because syntax is really clear to me, when I read <code>meson.build</code> file I can quickly understand what is happening during build process.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Steps to compile and test a project</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ meson build .  &lt;b class=<span class=\"hljs-string\">\"conum\"</span>&gt;(1)&lt;/b&gt;\n$ &lt;span class=<span class=\"hljs-string\">\"hljs-built_in\"</span>&gt;<span class=\"hljs-built_in\">cd</span>&lt;/span&gt; build\n$ ninja build    &lt;b class=<span class=\"hljs-string\">\"conum\"</span>&gt;(2)&lt;/b&gt;\n$ ninja &lt;span class=<span class=\"hljs-string\">\"hljs-built_in\"</span>&gt;<span class=\"hljs-built_in\">test</span>&lt;/span&gt;     &lt;b class=<span class=\"hljs-string\">\"conum\"</span>&gt;(3)&lt;/b&gt;</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>First time you configure the project</p>\n</li>\n<li>\n<p>Each time you build it</p>\n</li>\n<li>\n<p>Each time you run tests</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_other_build_systems_comparisons\">Other build systems comparisons</h3>\n<div class=\"paragraph\">\n<p>I&#8217;ve found two interesting comparisons about available C++ build systems, they might be a little be biased because those comparisons come from <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> and <a href=\"https://scons.org/\" target=\"_blank\" rel=\"noopener\">Scons</a>.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://bitbucket.org/scons/scons/wiki/SconsVsOtherBuildTools\">C++ build systems comparison from Scons</a>.</p>\n</li>\n<li>\n<p><a href=\"https://mesonbuild.com/Simple-comparison.html\">C++ build systems comparison from Meson</a>.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_unit_testing_framework\">Unit Testing Framework</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I have used some <a href=\"https://en.wikipedia.org/wiki/XUnit\" target=\"_blank\" rel=\"noopener\">xUnit</a> based libraries like <a href=\"https://github.com/unittest-cpp/unittest-cpp\">UnitTest++</a>, <a href=\"https://cpputest.github.io/\">CppUTest</a> or <a href=\"https://github.com/google/googletest\">Google Test</a> which match perfectly with <a href=\"https://github.com/google/googletest/tree/master/googlemock\">Google Mock</a>. If you want a safe bet that fulfills almost of your testing needs I highly recommend <a href=\"https://github.com/google/googletest\">Google Test</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>But time ago I found a testing framework with some interesting features, <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a>:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>It is just a header file with no external dependencies, so very easy to start (wget + include downloaded file).</p>\n</li>\n<li>\n<p>You can use normal unit test style or <a href=\"\">BDD</a>-style</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>If you want to know more about <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a>, I recommend you to give it a try, it is a matter of 2 minutes to have a <a href=\"https://github.com/philsquared/Catch/blob/master/docs/tutorial.md#writing-tests\">simple example up and running</a>. You can also read some interesting articles like <a href=\"https://github.com/philsquared/Catch/blob/master/docs/why-catch.md\">Why do we need yet another C test framework?] or https://blog.coldflake.com/posts/Testing-C-with-a-new-Catch/[Testing C++ With A New Catch</a>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_doctest_a_catch_alternative\"><a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a>: A <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a> alternative</h3>\n<div class=\"paragraph\">\n<p>There is another testing framework named <a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a>, with same benefits as <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a>, but it promises to be faster and lighter (<a href=\"https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md\">performance results</a>) than <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a> is modeled after <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a> and some parts of the code have been taken directly, but there are <a href=\"https://github.com/onqtam/doctest/blob/master/doc/markdown/faq.md#how-is-doctest-different-from-catch\">differences</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>It hasn&#8217;t been easy to decide, both are really similar, following you can see differences:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">diff between doctest and catch branches</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-diff\" data-lang=\"diff\">&lt;span class=\"hljs-meta\"&gt;@@ -1,12 +1,12 @@&lt;/span&gt;\n&lt;span class=\"hljs-deletion\"&gt;-#define CATCH_CONFIG_MAIN // It tells Catch to provide a main() - only do this in one cpp file&lt;/span&gt;\n&lt;span class=\"hljs-addition\"&gt;+#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN&lt;/span&gt;\n\n&lt;span class=\"hljs-deletion\"&gt;-#include \"catch.hpp\"&lt;/span&gt;\n&lt;span class=\"hljs-addition\"&gt;+#include \"doctest.h\"&lt;/span&gt;\n#include \"Uuid.h\"\n#include &amp;lt;string&amp;gt;\n\nconstexpr int MAX_ITERS = 100;\n\n&lt;span class=\"hljs-deletion\"&gt;-TEST_CASE(\"Uuid\", \"[uuid]\")&lt;/span&gt;\n&lt;span class=\"hljs-addition\"&gt;+TEST_CASE(\"Uuid\")&lt;/span&gt;\n{\nfor (int i = 0; i &amp;lt; MAX_ITERS; i++)\n{\n@@ -26,7 +26,7 @@ TEST_CASE(\"Uuid\", \"[uuid]\")\n\n// BDD style\n\n&lt;span class=\"hljs-deletion\"&gt;-SCENARIO(\"UUID creation\", \"[Uuid]\")&lt;/span&gt;\n&lt;span class=\"hljs-addition\"&gt;+SCENARIO(\"UUID creation\")&lt;/span&gt;\n{\n\nGIVEN(\"A random UUID \")</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>I&#8217;ve finally chosen <a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a> because it promises to be faster: <a href=\"https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md\">performance results</a>.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nI&#8217;ve created project using both frameworks you can find them in corresponding branches: <a href=\"https://github.com/carlosvin/uuid-cpp/tree/doctest\">doctest branch</a> or <a href=\"https://github.com/carlosvin/uuid-cpp/tree/catch\">catch branch</a>.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_example\">Example</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I&#8217;ve created an example to illustrate this article: <a href=\"https://github.com/carlosvin/uuid-cpp\" class=\"bare\">https://github.com/carlosvin/uuid-cpp</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>It is a basic implementation of UUID pseudo-random generator based on <a href=\"https://www.cplusplus.com/reference/random/mt19937\" target=\"_blank\" rel=\"noopener\">mt19937</a> which is not cryptographically secure.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_project_output_artifacts\">Project output artifacts</h3>\n<div class=\"paragraph\">\n<p>When we install the project using <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> (<a href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja</a>), we will get some artifacts generated and copied in our system.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Shared library: <code>libuuid</code>.</p>\n</li>\n<li>\n<p>Header library for developers who want to use the shared library: <code>include/Uuid.h</code>.</p>\n</li>\n<li>\n<p>Executable <code>uuidgen</code> (<a href=\"\">UUID</a> generator).</p>\n</li>\n<li>\n<p>Test executable (not installed). It tests shared library.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>For example, if you execute <code>ninja install</code> on Linux, you will get something like:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">/usr/&lt;span class=<span class=\"hljs-string\">\"hljs-built_in\"</span>&gt;<span class=\"hljs-built_in\">local</span>&lt;/span&gt;/lib/libuuid.so\n/usr/&lt;span class=<span class=\"hljs-string\">\"hljs-built_in\"</span>&gt;<span class=\"hljs-built_in\">local</span>&lt;/span&gt;/include/Uuid.h\n/usr/&lt;span class=<span class=\"hljs-string\">\"hljs-built_in\"</span>&gt;<span class=\"hljs-built_in\">local</span>&lt;/span&gt;/bin/uuidgen</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_project_structure_fork_project\">Project structure (<a href=\"https://github.com/carlosvin/uuid-cpp\">Fork project</a>)</h3>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/meson.build\">meson.build</a></dt>\n<dd>\n<p>Root project file configuration. It defines project properties and subdirectories.</p>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">meson.build</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-python\" data-lang=\"python\">project(\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">string</span>\"&gt;'<span class=\"hljs-title\">cpp</span>-<span class=\"hljs-title\">meson</span>-<span class=\"hljs-title\">example</span>'&lt;/<span class=\"hljs-title\">span</span>&gt;, &lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-title\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">comment</span>\"&gt;# <span class=\"hljs-title\">project</span> <span class=\"hljs-title\">name</span>&lt;/<span class=\"hljs-title\">span</span>&gt;\n    &lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-title\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">string</span>\"&gt;'<span class=\"hljs-title\">cpp</span>'&lt;/<span class=\"hljs-title\">span</span>&gt;, &lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-title\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">comment</span>\"&gt;# <span class=\"hljs-title\">C</span>++ <span class=\"hljs-title\">project</span>, <span class=\"hljs-title\">e</span>.<span class=\"hljs-title\">g</span>:</span> <span class=\"hljs-keyword\">for</span> C project&lt;/span&gt;\n    version : &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">string</span>\"&gt;'1.0.0'&lt;/<span class=\"hljs-title\">span</span>&gt;,\n    <span class=\"hljs-title\">license</span> :</span> &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">string</span>\"&gt;'<span class=\"hljs-title\">MIT</span>'&lt;/<span class=\"hljs-title\">span</span>&gt;,\n    <span class=\"hljs-title\">default_options</span> :</span> [&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">string</span>\"&gt;'<span class=\"hljs-title\">cpp_std</span>=<span class=\"hljs-title\">c</span>++11'&lt;/<span class=\"hljs-title\">span</span>&gt;]) &lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-title\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">comment</span>\"&gt;# <span class=\"hljs-title\">compile</span> <span class=\"hljs-title\">for</span> <span class=\"hljs-title\">C</span>++&lt;/<span class=\"hljs-title\">span</span>&gt;\n\n&lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-title\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">comment</span>\"&gt;# <span class=\"hljs-title\">it</span> <span class=\"hljs-title\">will</span> <span class=\"hljs-title\">be</span> <span class=\"hljs-title\">referred</span> <span class=\"hljs-title\">from</span> <span class=\"hljs-title\">subdir</span> <span class=\"hljs-title\">projects</span>&lt;/<span class=\"hljs-title\">span</span>&gt;\n<span class=\"hljs-title\">inc</span> = <span class=\"hljs-title\">include_directories</span><span class=\"hljs-params\">(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">'include'</span>&lt;/span&gt;)</span>\n\n&lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-title\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">comment</span>\"&gt;# <span class=\"hljs-title\">meson</span> <span class=\"hljs-title\">will</span> <span class=\"hljs-title\">try</span> <span class=\"hljs-title\">to</span> <span class=\"hljs-title\">find</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-title\">meson</span>.<span class=\"hljs-title\">build</span> <span class=\"hljs-title\">file</span> <span class=\"hljs-title\">inside</span> <span class=\"hljs-title\">following</span> <span class=\"hljs-title\">directories</span>&lt;/<span class=\"hljs-title\">span</span>&gt;\n<span class=\"hljs-title\">subdir</span><span class=\"hljs-params\">(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">'include'</span>&lt;/span&gt;)</span>\n<span class=\"hljs-title\">subdir</span><span class=\"hljs-params\">(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">'src'</span>&lt;/span&gt;)</span>\n<span class=\"hljs-title\">subdir</span><span class=\"hljs-params\">(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">'test'</span>&lt;/span&gt;)</span></span></code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/include/\">include</a></dt>\n<dd>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">meson.build</dt>\n<dd>\n<p>Build configuration file for include directory.</p>\n</dd>\n</dl>\n</div>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">include/meson.build</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-python\" data-lang=\"python\">&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">comment</span>\"&gt;# <span class=\"hljs-title\">Select</span> <span class=\"hljs-title\">header</span> <span class=\"hljs-title\">files</span> <span class=\"hljs-title\">to</span> <span class=\"hljs-title\">be</span> <span class=\"hljs-title\">installed</span>&lt;/<span class=\"hljs-title\">span</span>&gt;\n<span class=\"hljs-title\">install_headers</span><span class=\"hljs-params\">(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">'Uuid.h'</span>&lt;/span&gt;)</span></span></code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/include/Uuid.h\">Uuid.h</a></dt>\n<dd>\n<p>Header file, it is the library interface definition which will be included from projects using that library</p>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">include/Uuid.h</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\">&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">namespace</span>&lt;/span&gt; <span class=\"hljs-title\">ids</span> {</span>\n\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">class</span>\"&gt;&lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">class</span>&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;<span class=\"hljs-title\">Uuid</span>&lt;/span&gt; {</span>&lt;/span&gt;\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">private</span>&lt;/span&gt;:</span>\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">comment</span>\"&gt;// ...&lt;/span&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src\">src</a></dt>\n<dd>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src/meson.build\">meson.build (src)</a></dt>\n<dd>\n<p>It declares 2 output artifacts, library <code>libuuid</code> and executable <code>uuidgen</code>. Executable depends on the libary, it will use the libary to generate <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier\" target=\"_blank\" rel=\"noopener\">UUID</a>.</p>\n</dd>\n</dl>\n</div>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">src/meson.build</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-python\" data-lang=\"python\">libuuid = shared_library(\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">string</span>\"&gt;'<span class=\"hljs-title\">uuid</span>'&lt;/<span class=\"hljs-title\">span</span>&gt;, &lt;<span class=\"hljs-title\">b</span> <span class=\"hljs-title\">class</span>=\"<span class=\"hljs-title\">conum</span>\"&gt;<span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span>&lt;/<span class=\"hljs-title\">b</span>&gt;\n    &lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-title\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">string</span>\"&gt;'<span class=\"hljs-title\">Uuid</span>.<span class=\"hljs-title\">cpp</span>'&lt;/<span class=\"hljs-title\">span</span>&gt;, &lt;<span class=\"hljs-title\">b</span> <span class=\"hljs-title\">class</span>=\"<span class=\"hljs-title\">conum</span>\"&gt;<span class=\"hljs-params\">(<span class=\"hljs-number\">2</span>)</span>&lt;/<span class=\"hljs-title\">b</span>&gt;\n    <span class=\"hljs-title\">include_directories</span> :</span> inc, &lt;b <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">conum</span>\"&gt;<span class=\"hljs-params\">(<span class=\"hljs-number\">3</span>)</span>&lt;/<span class=\"hljs-title\">b</span>&gt;\n    <span class=\"hljs-title\">install</span> :</span> true) &lt;b <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">conum</span>\"&gt;<span class=\"hljs-params\">(<span class=\"hljs-number\">4</span>)</span>&lt;/<span class=\"hljs-title\">b</span>&gt;\n\n<span class=\"hljs-title\">uuidgen</span> = <span class=\"hljs-title\">executable</span><span class=\"hljs-params\">(\n    &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">'uuidgen'</span>&lt;/span&gt;, &lt;b class=<span class=\"hljs-string\">\"conum\"</span>&gt;<span class=\"hljs-params\">(<span class=\"hljs-number\">5</span>)</span>&lt;/b&gt;\n    &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">'main.cpp'</span>&lt;/span&gt;, &lt;b class=<span class=\"hljs-string\">\"conum\"</span>&gt;<span class=\"hljs-params\">(<span class=\"hljs-number\">6</span>)</span>&lt;/b&gt;\n    include_directories : inc, &lt;b class=<span class=\"hljs-string\">\"conum\"</span>&gt;<span class=\"hljs-params\">(<span class=\"hljs-number\">7</span>)</span>&lt;/b&gt;\n    link_with : libuuid, &lt;b class=<span class=\"hljs-string\">\"conum\"</span>&gt;<span class=\"hljs-params\">(<span class=\"hljs-number\">8</span>)</span>&lt;/b&gt;\n    install : true)</span> &lt;<span class=\"hljs-title\">b</span> <span class=\"hljs-title\">class</span>=\"<span class=\"hljs-title\">conum</span>\"&gt;<span class=\"hljs-params\">(<span class=\"hljs-number\">9</span>)</span>&lt;/<span class=\"hljs-title\">b</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>library name</p>\n</li>\n<li>\n<p>source files to be compile</p>\n</li>\n<li>\n<p>previously declared include directories in root <code>meson.build</code></p>\n</li>\n<li>\n<p><code>libuuid</code> will be part of project installation</p>\n</li>\n<li>\n<p>executable name</p>\n</li>\n<li>\n<p>source files to compile</p>\n</li>\n<li>\n<p>previously declared include directories in root <code>meson.build</code></p>\n</li>\n<li>\n<p>linking executable with shared previously declared shared library <code>libuuid</code></p>\n</li>\n<li>\n<p><code>uuidgen</code> executable be part of project installation</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src/main.cpp\">main.cpp</a></dt>\n<dd>\n<p>Entry point for main executable <code>uuidgen</code>.</p>\n</dd>\n</dl>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">src/main.cpp</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\">&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;\"<span class=\"hljs-title\">Uuid</span>.<span class=\"hljs-title\">h</span>\"&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;&amp;<span class=\"hljs-title\">lt</span>;</span>iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">function</span>\"&gt;&lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">int</span>&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;<span class=\"hljs-title\">main</span>&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt;\n&lt;/span&gt;{</span>\n    ids::Uuid uuid;\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">std</span>&lt;/span&gt;:</span>:&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">cout</span>&lt;/span&gt; &amp;<span class=\"hljs-title\">lt</span>;</span>&amp;lt; uuid.to_str() &amp;lt;&amp;lt; &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">std</span>&lt;/span&gt;:</span>:&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">endl</span>&lt;/span&gt;;</span>\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">return</span>&lt;/span&gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src/Uuid.cpp\">Uuid.cpp</a></dt>\n<dd>\n<p>Implementation of declared class in header file.</p>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">src/Uuid.cpp</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\">&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;\"<span class=\"hljs-title\">Uuid</span>.<span class=\"hljs-title\">h</span>\"&lt;/span&gt;&lt;/span&gt;\n\n<span class=\"hljs-title\">Uuid</span>:</span>:Uuid()\n{ &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">comment</span>\"&gt;// ...&lt;/span&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/test/\">test</a></dt>\n<dd>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/test/meson.build\">meson.build (test)</a></dt>\n<dd>\n<p>File to configure tests build process.</p>\n</dd>\n</dl>\n</div>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">test/meson.build</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-python\" data-lang=\"python\">testexe = executable(\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">string</span>\"&gt;'<span class=\"hljs-title\">testexe</span>'&lt;/<span class=\"hljs-title\">span</span>&gt;, &lt;<span class=\"hljs-title\">b</span> <span class=\"hljs-title\">class</span>=\"<span class=\"hljs-title\">conum</span>\"&gt;<span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span>&lt;/<span class=\"hljs-title\">b</span>&gt;\n    &lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-title\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">string</span>\"&gt;'<span class=\"hljs-title\">uuid_test</span>.<span class=\"hljs-title\">cpp</span>'&lt;/<span class=\"hljs-title\">span</span>&gt;, &lt;<span class=\"hljs-title\">b</span> <span class=\"hljs-title\">class</span>=\"<span class=\"hljs-title\">conum</span>\"&gt;<span class=\"hljs-params\">(<span class=\"hljs-number\">2</span>)</span>&lt;/<span class=\"hljs-title\">b</span>&gt;\n    <span class=\"hljs-title\">include_directories</span> :</span> inc, &lt;b <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">conum</span>\"&gt;<span class=\"hljs-params\">(<span class=\"hljs-number\">3</span>)</span>&lt;/<span class=\"hljs-title\">b</span>&gt;\n    <span class=\"hljs-title\">link_with</span> :</span> libuuid) &lt;b <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">conum</span>\"&gt;<span class=\"hljs-params\">(<span class=\"hljs-number\">4</span>)</span>&lt;/<span class=\"hljs-title\">b</span>&gt;\n\n<span class=\"hljs-title\">test</span><span class=\"hljs-params\">(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">'Uuid test'</span>&lt;/span&gt;, testexe)</span> &lt;<span class=\"hljs-title\">b</span> <span class=\"hljs-title\">class</span>=\"<span class=\"hljs-title\">conum</span>\"&gt;<span class=\"hljs-params\">(<span class=\"hljs-number\">5</span>)</span>&lt;/<span class=\"hljs-title\">b</span>&gt;\n\n<span class=\"hljs-title\">test</span><span class=\"hljs-params\">(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">'Uuid test with args and env'</span>&lt;/span&gt;, testexe, args : [&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">'arg1'</span>&lt;/span&gt;, &lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">'arg2'</span>&lt;/span&gt;], env : [&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">'FOO=bar'</span>&lt;/span&gt;])</span> &lt;<span class=\"hljs-title\">b</span> <span class=\"hljs-title\">class</span>=\"<span class=\"hljs-title\">conum</span>\"&gt;<span class=\"hljs-params\">(<span class=\"hljs-number\">6</span>)</span>&lt;/<span class=\"hljs-title\">b</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>test executable name</p>\n</li>\n<li>\n<p>tests source files to be compiled</p>\n</li>\n<li>\n<p>declared include directories in root <code>meson.build</code></p>\n</li>\n<li>\n<p>link test executable with previously declared shared library <code>libuuid</code></p>\n</li>\n<li>\n<p>test execution</p>\n</li>\n<li>\n<p>we can specify other test execution passing arguments or environment variables</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">doctest.h</dt>\n<dd>\n<p><a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a> library in a single header file. You can try to automate library installation as part of your build process, but I haven not figured out yet a way to do it with <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a>. For now, I have installed it manually:</p>\n</dd>\n</dl>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Add <a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a> to your project</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">&lt;span class=<span class=\"hljs-string\">\"hljs-built_in\"</span>&gt;<span class=\"hljs-built_in\">cd</span>&lt;/span&gt; &lt;span class=<span class=\"hljs-string\">\"hljs-built_in\"</span>&gt;<span class=\"hljs-built_in\">test</span>&lt;/span&gt;\nwget https://raw.githubusercontent.com/onqtam/doctest/master/doctest/doctest.h</code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/test/uuid_test.cpp\">uuid_test.cpp</a></dt>\n<dd>\n<p>Tests implementation.</p>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">test/uuid_test.cpp</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\">&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">meta</span>\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">define</span>&lt;/span&gt; <span class=\"hljs-title\">DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN</span>&lt;/span&gt;\n\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;\"<span class=\"hljs-title\">doctest</span>.<span class=\"hljs-title\">h</span>\"&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;\"<span class=\"hljs-title\">Uuid</span>.<span class=\"hljs-title\">h</span>\"&lt;/span&gt;&lt;/span&gt;\n&lt;span class=\"hljs-meta\"&gt;#&lt;span class=\"hljs-meta-keyword\"&gt;<span class=\"hljs-title\">include</span>&lt;/span&gt; &lt;span class=\"hljs-meta-string\"&gt;&amp;<span class=\"hljs-title\">lt</span>;</span><span class=\"hljs-built_in\">string</span>&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">constexpr</span>&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">int</span>&lt;/span&gt; <span class=\"hljs-title\">MAX_ITERS</span> = &lt;span class=\"hljs-number\"&gt;100&lt;/span&gt;;</span>\n\nTEST_CASE(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"Uuid\"</span>&lt;/span&gt;)\n{\n    &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">keyword</span>\"&gt;<span class=\"hljs-title\">for</span>&lt;/span&gt; (&lt;span class=\"hljs-keyword\"&gt;<span class=\"hljs-title\">int</span>&lt;/span&gt; <span class=\"hljs-title\">i</span> = &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;;</span> i &amp;lt; MAX_ITERS; i++)\n    {\n        ids::Uuid uuid;\n        &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">std</span>&lt;/span&gt;:</span>:&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">string</span>&lt;/span&gt; <span class=\"hljs-title\">uuid_str</span>{</span>uuid.to_str()};\n\n        INFO(uuid_str);\n\n        &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">comment</span>\"&gt;// <span class=\"hljs-title\">If</span> <span class=\"hljs-title\">assertion</span> <span class=\"hljs-title\">fails</span> <span class=\"hljs-title\">test</span> <span class=\"hljs-title\">execution</span> <span class=\"hljs-title\">is</span> <span class=\"hljs-title\">stopped</span>&lt;/span&gt;\n        <span class=\"hljs-title\">REQUIRE</span>(<span class=\"hljs-title\">uuid_str</span>.<span class=\"hljs-title\">size</span>() == &lt;span class=\"hljs-number\"&gt;36&lt;/span&gt;);</span>\n\n        &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">comment</span>\"&gt;// <span class=\"hljs-title\">If</span> <span class=\"hljs-title\">assertion</span> <span class=\"hljs-title\">fails</span> <span class=\"hljs-title\">test</span> <span class=\"hljs-title\">execution</span> <span class=\"hljs-title\">continues</span>&lt;/span&gt;\n        <span class=\"hljs-title\">CHECK</span>(<span class=\"hljs-title\">uuid</span>.<span class=\"hljs-title\">most</span> &amp;<span class=\"hljs-title\">gt</span>;</span> &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">number</span>\"&gt;0&lt;/span&gt;);</span>\n        CHECK(uuid.least &amp;gt; &lt;span class=<span class=\"hljs-string\">\"hljs-number\"</span>&gt;<span class=\"hljs-number\">0</span>&lt;/span&gt;);\n    }\n}\n\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">comment</span>\"&gt;// <span class=\"hljs-title\">BDD</span> <span class=\"hljs-title\">style</span>&lt;/span&gt;\n\n<span class=\"hljs-title\">SCENARIO</span>(&lt;span class=\"hljs-string\"&gt;\"<span class=\"hljs-title\">UUID</span> <span class=\"hljs-title\">creation</span>\"&lt;/span&gt;)\n{</span>\n\n    GIVEN(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"A random UUID \"</span>&lt;/span&gt;)\n    {\n\n        ids::Uuid uuid;\n        &lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">std</span>&lt;/span&gt;:</span>:&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">hljs</span>-<span class=\"hljs-title\">built_in</span>\"&gt;<span class=\"hljs-title\">string</span>&lt;/span&gt; <span class=\"hljs-title\">uuid_str</span>{</span>uuid.to_str()};\n\n        REQUIRE(uuid_str.size() == &lt;span class=<span class=\"hljs-string\">\"hljs-number\"</span>&gt;<span class=\"hljs-number\">36</span>&lt;/span&gt;);\n\n        WHEN(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"get the most and least\"</span>&lt;/span&gt;)\n        {\n            THEN(&lt;span class=<span class=\"hljs-string\">\"hljs-string\"</span>&gt;<span class=\"hljs-string\">\"should be more than 0\"</span>&lt;/span&gt;)\n            {\n                CHECK(uuid.most &amp;gt; &lt;span class=<span class=\"hljs-string\">\"hljs-number\"</span>&gt;<span class=\"hljs-number\">0</span>&lt;/span&gt;);\n                CHECK(uuid.least &amp;gt; &lt;span class=<span class=\"hljs-string\">\"hljs-number\"</span>&gt;<span class=\"hljs-number\">0</span>&lt;/span&gt;);\n            }\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Tip</div>\n</td>\n<td class=\"content\">\nYou can find how to build and test the example project at: <a href=\"https://github.com/carlosvin/uuid-cpp#how-to-build-the-example\" class=\"bare\">https://github.com/carlosvin/uuid-cpp#how-to-build-the-example</a>\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>","slug":"choosing-modern-cpp-stack"}