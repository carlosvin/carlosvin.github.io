{"entry":{"title":"Elegir tecnologías para mi nuevo proyeco C++","lang":"es","summary":"Las razones por las que he elegido Meson+Doctest para crear un proyecto en C++. También contiene un ejemplo fácil de ejecutar y de reutilizar como template.","slug":"choosing-modern-cpp-stack","keywords":["C++","Unit Testing","Build System","Build Software","Meson","Catch","doctest"],"filename":"choosing-modern-cpp-stack.es.adoc","modified":1592006400000,"created":1506211200000,"author":"Carlos Martin Sanchez","previewimage":"icons/icon-192x192.png","otherLangs":["en"],"path":"/posts/choosing-modern-cpp-stack/es","url":"https://carlosvin.github.io/posts/choosing-modern-cpp-stack/es"},"html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_elegir_un_sistema_de_construcción_meson\">Elegir un Sistema de Construcción (Meson)</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_cmake_vs_meson\">CMake vs Meson</a></li>\n<li><a href=\"#_otras_comparaciones_entre_sistemas_de_construcción\">Otras comparaciones entre sistemas de construcción</a></li>\n</ul>\n</li>\n<li><a href=\"#_framework_the_pruebas_unitarias\">Framework the Pruebas Unitarias</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_doctest_una_alternativa_a_catch\">doctest: Una alternativa a Catch</a></li>\n</ul>\n</li>\n<li><a href=\"#_ejemplo\">Ejemplo</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_artefactos_del_proyecto\">Artefactos del Proyecto</a></li>\n<li><a href=\"#_estructura_del_proyecto_fork_project\">Estructura del Proyecto (Fork project)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Estoy empezando un pequeño proyecto en C++ y antes de nada me han surgido un par de preguntas:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>¿Cómo voy a construirlo?</p>\n</li>\n<li>\n<p>¿Qué framework para pruebas unitarias utilizar?</p>\n</li>\n</ol>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Tip</div>\n</td>\n<td class=\"content\">\nSi simplemente quieres comenzar un proyecto en C++, fácil de construir, con una librería y pruebas unitarias listas, simplemente visita el repositorio del proyecto de ejemplo <a href=\"https://github.com/carlosvin/uuid-cpp\" class=\"bare\">https://github.com/carlosvin/uuid-cpp</a> y sigue las <a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/README.md\" target=\"blank_\">instrucciones en el README.md</a>.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_elegir_un_sistema_de_construcción_meson\">Elegir un Sistema de Construcción (<a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a>)</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Ya he utilizado antes <a href=\"https://www.gnu.org/software/make/manual/make.html\" target=\"_blank\" rel=\"noopener\">Make</a>, <a href=\"https://maven.apache.org/\" target=\"_blank\" rel=\"noopener\">Maven</a>, <a href=\"https://scons.org/\" target=\"_blank\" rel=\"noopener\">Scons</a>, <a href=\"https://gradle.org/\" target=\"_blank\" rel=\"noopener\">Gradle</a> y <a href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html\" target=\"_blank\" rel=\"noopener\">Autotools</a>, pero tengo algunas razones para probar algo diferente, hay algunas cosas que no me gustan:</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html\" target=\"_blank\" rel=\"noopener\">Autotools</a></dt>\n<dd>\n<p>No es fácil de configurar y mantener: hay distintos ficheros de configuración y distintos pasos de configuración.</p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://gradle.org/\" target=\"_blank\" rel=\"noopener\">Gradle</a></dt>\n<dd>\n<p>La construcción de proyectos C++ está todavía en desarrollo, los modelos y APIs están cambiando. No es muy rápido. Puedes ver un ejemplo en este artículo <a href=\"/posts/gradle-cpp/es\">Construir un proyecto Cpp con Gradle</a>.</p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://www.gnu.org/software/make/manual/make.html\" target=\"_blank\" rel=\"noopener\">Make</a></dt>\n<dd>\n<p>A medida que el proyecto crece los archivos de configuración se van complicando y volviendo poco manejables. La sintáxis no me parece clara (esto es una custión de gustos).</p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://scons.org/\" target=\"_blank\" rel=\"noopener\">Scons</a></dt>\n<dd>\n<p>Es más lento y un poco más difícil de comprender que <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a>.</p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://maven.apache.org/\" target=\"_blank\" rel=\"noopener\">Maven</a></dt>\n<dd>\n<p>Es lento y puedes terminar \"<em>Javatizando</em>\" la estructura del proyecto.</p>\n</dd>\n</dl>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nHe nombrado solo las cosas que no gustan, pero estos sistemas de construcción tienen otras grandes virtudes, personalmente me encantan <a href=\"https://gradle.org/\" target=\"_blank\" rel=\"noopener\">Gradle</a>, <a href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html\" target=\"_blank\" rel=\"noopener\">Autotools</a> y <a href=\"https://maven.apache.org/\" target=\"_blank\" rel=\"noopener\">Maven</a> (solo para projectos Java).\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_cmake_vs_meson\"><a href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake</a> vs <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a></h3>\n<div class=\"paragraph\">\n<p>Después de descartar los anteriores, estoy considerando <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> y <a href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake</a>. Los dos son bastante rápidos:</p>\n</div>\n<div class=\"paragraph\">\n<p>Aunque <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> está hecho en <a href=\"https://python.org/\" target=\"_blank\" rel=\"noopener\">Python</a>, simplemente genera projectos <a href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja</a>. La primera vez tenemos que ejecutar <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> para configurar el proyecto, el resto de ejecuciones para compilar o ejecutar pruebas, realmente estaremos ejecutando directamente <a href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake</a> también puede generar proyectos <a href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja</a> entre otros formatos, <a href=\"https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html\">mira la documentación \"CMake generators\"</a>.</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake</a></dt>\n<dd>\n<p>Tiene una gran ventaja sobre <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a>, es mucho más maduro y es mucho más usado, lo que significa que podrás encontrar muy fácilmente ejemplos, documentación y ayuda en Internet. No importa el tipo de proyecto que estés empezando, lo más seguro es que <a href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake</a> sea una buena elección.</p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a></dt>\n<dd>\n<p>Es un proyecto jóven comparado con <a href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake</a>, pero está creciendo rápido y ya ha sido adoptado por algunos proyectos importantes como <a href=\"https://www.gnome.org/\" target=\"_blank\" rel=\"noopener\">Gnome</a>, donde han comenzado una iniciativa para <a href=\"https://wiki.gnome.org/Initiatives/GnomeGoals/MesonPorting\">migrar desde Autotools a Meson</a>.</p>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p><strong>Finalmente he elegido</strong> <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> porque:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>La sintáxis es muy clara para mí, cuando leo un archivo <span class=\"title-ref\">meson.build</span> entiendo rápidamente lo ue está pasando durante el proceso de construcción.</p>\n</li>\n<li>\n<p>Es rápido, aunque está escrito en <a href=\"https://python.org/\" target=\"_blank\" rel=\"noopener\">Python</a> utiliza <a href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja</a> para construir el proyecto. La primera vez tienes que utilizar <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> para configurar el proyecto, pero para construir y probar el proyecto relmente estamos ejecutando <a href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja</a>.</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Pasos para compilar y ejectuar tests</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ meson build . <b class=\"conum\">(1)</b>\n$ <span class=\"hljs-built_in\">cd</span> build\n$ ninja build   <b class=\"conum\">(2)</b>\n$ ninja <span class=\"hljs-built_in\">test</span>    <b class=\"conum\">(3)</b></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>Primera vez, configuración del proyecto</p>\n</li>\n<li>\n<p>Cada vez que construyes el projecto</p>\n</li>\n<li>\n<p>Cada vez que ejecutas tests</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_otras_comparaciones_entre_sistemas_de_construcción\">Otras comparaciones entre sistemas de construcción</h3>\n<div class=\"paragraph\">\n<p>He encontrado un par de comparaciones interesantes entre algunos de los sistemas de construcción en C++, aunque puede que no sean del todo imparciales porque han sido realizadas por <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> y <a href=\"https://scons.org/\" target=\"_blank\" rel=\"noopener\">Scons</a>.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://bitbucket.org/scons/scons/wiki/SconsVsOtherBuildTools\">C++ build systems comparison from Scons</a>.</p>\n</li>\n<li>\n<p><a href=\"https://mesonbuild.com/Simple-comparison.html\">C++ build systems comparison from Meson</a>.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_framework_the_pruebas_unitarias\">Framework the Pruebas Unitarias</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Anteriorment he utilizado algunas librerías del tipo <a href=\"https://en.wikipedia.org/wiki/XUnit\" target=\"_blank\" rel=\"noopener\">xUnit</a> como <a href=\"https://github.com/unittest-cpp/unittest-cpp\">UnitTest++</a>, <a href=\"https://cpputest.github.io/\">CppUTest</a> o <a href=\"https://github.com/google/googletest\">Google Test</a> que encaja perfectamente con <a href=\"https://github.com/google/googletest/tree/master/googlemock\">Google Mock</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Si quires una apuesta segura que cumpla tus expectativas, te recomiendo <a href=\"https://github.com/google/googletest\">Google Test</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Pero hace algún tiempo encontré un framework de pruebas con algunas características no tan comunes en librerías de pruebas C++ y que resultaba realmente fácil de utilizar, estoy hablando de <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a>:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Es simplemente un fichero de cabeceras C++ sin dependencias adicionales, por lo que resulta realmente rápido comenzar (wget y utilizar el fichero descargado desde tus pruebas).</p>\n</li>\n<li>\n<p>Puedes utilizar el estilo normal de pruebas unitarias o el estilo <a href=\"https://en.wikipedia.org/wiki/Behavior-driven_development\" target=\"_blank\" rel=\"noopener\">BDD</a>.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Si quieres saber más sobre <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a>, te recomiendo que directamente lo pruebes, el siguiente ejemplo, es cuestión de dos minutos <a href=\"https://github.com/philsquared/Catch/blob/master/docs/tutorial.md#writing-tests\">simple example up and running</a>. Puedes también leer algunos artículos como <a href=\"https://github.com/philsquared/Catch/blob/master/docs/why-catch.md\">Why do we need yet another C test framework?] o https://blog.coldflake.com/posts/Testing-C-with-a-new-Catch/[Testing C++ With A New Catch</a>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_doctest_una_alternativa_a_catch\"><a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a>: Una alternativa a <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a></h3>\n<div class=\"paragraph\">\n<p>Hay otro framework de pruebas llamado <a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a>, con los mismos principios que <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a>, pero promete ser más rápido y ligero (<a href=\"https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md\">resultados de las comparaciones de rendimiento</a>) que <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a> fue diseñado basándose en los puntos fuertes de <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a>, pero hay algunas <a href=\"https://github.com/onqtam/doctest/blob/master/doc/markdown/faq.md#how-is-doctest-different-from-catch\">diferencias</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>No es fácil decidirse por uno, los dos son muy parecidos, puedes comprobar las diferencias a continuación:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Differencias entre la rama usando <a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a> y la rama usando <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a></div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-diff\" data-lang=\"diff\"><span class=\"hljs-meta\">@@ -1,12 +1,12 @@</span>\n<span class=\"hljs-deletion\">-#define CATCH_CONFIG_MAIN // It tells Catch to provide a main() - only do this in one cpp file</span>\n<span class=\"hljs-addition\">+#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN</span>\n\n<span class=\"hljs-deletion\">-#include &quot;catch.hpp&quot;</span>\n<span class=\"hljs-addition\">+#include &quot;doctest.h&quot;</span>\n#include &quot;Uuid.h&quot;\n#include &lt;string&gt;\n\nconstexpr int MAX_ITERS = 100;\n\n<span class=\"hljs-deletion\">-TEST_CASE(&quot;Uuid&quot;, &quot;[uuid]&quot;)</span>\n<span class=\"hljs-addition\">+TEST_CASE(&quot;Uuid&quot;)</span>\n{\nfor (int i = 0; i &lt; MAX_ITERS; i++)\n{\n<span class=\"hljs-meta\">@@ -26,7 +26,7 @@</span> TEST_CASE(&quot;Uuid&quot;, &quot;[uuid]&quot;)\n\n// BDD style\n\n<span class=\"hljs-deletion\">-SCENARIO(&quot;UUID creation&quot;, &quot;[Uuid]&quot;)</span>\n<span class=\"hljs-addition\">+SCENARIO(&quot;UUID creation&quot;)</span>\n{\n\nGIVEN(&quot;A random UUID &quot;)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Finalmente he elegido <a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a> simplemente porque es más rápido: <a href=\"https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md\">resultados de las comparaciones de rendimiento</a>.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nHe creado el proyecto de ejemplo utilizando ambos frameworks, puedes encontrarlos en diferentes ramas del repositorio: <a href=\"https://github.com/carlosvin/uuid-cpp/tree/doctest\">rama doctest</a> or <a href=\"https://github.com/carlosvin/uuid-cpp/tree/catch\">rama catch</a>.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_ejemplo\">Ejemplo</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>He creado un ejemplo para ilustrar este artículo: <a href=\"https://github.com/carlosvin/uuid-cpp\" class=\"bare\">https://github.com/carlosvin/uuid-cpp</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Consiste en una implementación básica de un generador pseudo-aleatorio de <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier\" target=\"_blank\" rel=\"noopener\">UUID</a>, está basado en <a href=\"https://www.cplusplus.com/reference/random/mt19937\" target=\"_blank\" rel=\"noopener\">mt19937</a> que no es criptográficamente seguro.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_artefactos_del_proyecto\">Artefactos del Proyecto</h3>\n<div class=\"paragraph\">\n<p>Cuando instalemos el proyecto, <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> (<a href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja</a> realmente) generará una serie de artefactos en nuestro sistema.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Librería compartida: <code>libuuid</code>.</p>\n</li>\n<li>\n<p>Fichero de cabeceras para que los desarrolladores puedan usar la librería: <code>include/Uuid.h</code>.</p>\n</li>\n<li>\n<p>Fichero ejecutable <code>uuidgen</code> (Generador de <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier\" target=\"_blank\" rel=\"noopener\">UUID</a>).</p>\n</li>\n<li>\n<p>Ejecutable de las pruebas unitarias (no será instalado).</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Si ejecutamos <code>ninja install</code> en Linux obtendremos los siguientes ficheros:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">/usr/<span class=\"hljs-built_in\">local</span>/lib/libuuid.so\n/usr/<span class=\"hljs-built_in\">local</span>/include/Uuid.h\n/usr/<span class=\"hljs-built_in\">local</span>/bin/uuidgen</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_estructura_del_proyecto_fork_project\">Estructura del Proyecto (<a href=\"https://github.com/carlosvin/uuid-cpp\">Fork project</a>)</h3>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/meson.build\">meson.build</a></dt>\n<dd>\n<p>Fichero principal de configuración para construir el proyecto.\nLo utilizamos para especificar las propiedades y subdirectorios del proyecto.</p>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">meson.build</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-python\" data-lang=\"python\">project(\n    <span class=\"hljs-string\">&#x27;cpp-meson-example&#x27;</span>, <span class=\"hljs-comment\"># project name</span>\n    <span class=\"hljs-string\">&#x27;cpp&#x27;</span>, <span class=\"hljs-comment\"># C++ project, e.g: for C project</span>\n    version : <span class=\"hljs-string\">&#x27;1.0.0&#x27;</span>,\n    license : <span class=\"hljs-string\">&#x27;MIT&#x27;</span>,\n    default_options : [<span class=\"hljs-string\">&#x27;cpp_std=c++11&#x27;</span>]) <span class=\"hljs-comment\"># compile for C++</span>\n\n<span class=\"hljs-comment\"># it will be referred from subdir projects</span>\ninc = include_directories(<span class=\"hljs-string\">&#x27;include&#x27;</span>)\n\n<span class=\"hljs-comment\"># meson will try to find a meson.build file inside following directories</span>\nsubdir(<span class=\"hljs-string\">&#x27;include&#x27;</span>)\nsubdir(<span class=\"hljs-string\">&#x27;src&#x27;</span>)\nsubdir(<span class=\"hljs-string\">&#x27;test&#x27;</span>)</code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/include/\">include</a></dt>\n<dd>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">meson.build</dt>\n<dd>\n<p>Archivo de configuración para construir este directorio, no hay mucho que hacer aquí, simplemente indicamos qué ficheros de cabeceras han de ser instalados</p>\n</dd>\n</dl>\n</div>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">include/meson.build</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-python\" data-lang=\"python\"><span class=\"hljs-comment\"># Select header files to be installed</span>\ninstall_headers(<span class=\"hljs-string\">&#x27;Uuid.h&#x27;</span>)</code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/include/Uuid.h\">Uuid.h</a></dt>\n<dd>\n<p>Archivos de cabeceras, es el interfaz que expone la librería y que será incluido por los usuarios de la misma.</p>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">include/Uuid.h</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-keyword\">namespace</span> ids {\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Uuid</span> {</span>\n    <span class=\"hljs-keyword\">private</span>:\n    <span class=\"hljs-comment\">// ...</span></code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src\">src</a></dt>\n<dd>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src/meson.build\">meson.build (src)</a></dt>\n<dd>\n<p>Declara 2 artefactos de salida: La librería <code>libuuid</code> y el ejecutable <code>uuidgen</code>.</p>\n</dd>\n</dl>\n</div>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">src/meson.build</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-python\" data-lang=\"python\">libuuid = shared_library(\n    <span class=\"hljs-string\">&#x27;uuid&#x27;</span>, <b class=\"conum\">(1)</b>\n    <span class=\"hljs-string\">&#x27;Uuid.cpp&#x27;</span>, <b class=\"conum\">(2)</b>\n    include_directories : inc, <b class=\"conum\">(3)</b>\n    install : true) <b class=\"conum\">(4)</b>\n\nuuidgen = executable(\n    <span class=\"hljs-string\">&#x27;uuidgen&#x27;</span>, <b class=\"conum\">(5)</b>\n    <span class=\"hljs-string\">&#x27;main.cpp&#x27;</span>, <b class=\"conum\">(6)</b>\n    include_directories : inc, <b class=\"conum\">(7)</b>\n    link_with : libuuid, <b class=\"conum\">(8)</b>\n    install : true) <b class=\"conum\">(9)</b></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>library name</p>\n</li>\n<li>\n<p>source files to be compile</p>\n</li>\n<li>\n<p>previously declared include directories in root <code>meson.build</code></p>\n</li>\n<li>\n<p><code>libuuid</code> will be part of project installation</p>\n</li>\n<li>\n<p>executable name</p>\n</li>\n<li>\n<p>source files to compile</p>\n</li>\n<li>\n<p>previously declared include directories in root <code>meson.build</code></p>\n</li>\n<li>\n<p>linking executable with shared previously declared shared library <code>libuuid</code></p>\n</li>\n<li>\n<p><code>uuidgen</code> executable be part of project installation</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src/main.cpp\">main.cpp</a></dt>\n<dd>\n<p>Código fuente del ejecutable de la aplicación: <code>uuidgen</code></p>\n</dd>\n</dl>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">src/main.cpp</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&quot;Uuid.h&quot;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    ids::Uuid uuid;\n    <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &lt;&lt; uuid.to_str() &lt;&lt; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src/Uuid.cpp\">Uuid.cpp</a></dt>\n<dd>\n<p>Implementación de la clase declarada en el fichero de cabeceras <code>Uuid.h</code>.</p>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">src/Uuid.cpp</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&quot;Uuid.h&quot;</span></span>\n\nUuid::Uuid()\n{ <span class=\"hljs-comment\">// ...</span></code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/test/\">test</a></dt>\n<dd>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/test/meson.build\">meson.build (test)</a></dt>\n<dd>\n<p>Archivo de configuración para construir y ejecutar las pruebas unitarias.</p>\n</dd>\n</dl>\n</div>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">test/meson.build</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-python\" data-lang=\"python\">testexe = executable(\n    <span class=\"hljs-string\">&#x27;testexe&#x27;</span>, <b class=\"conum\">(1)</b>\n    <span class=\"hljs-string\">&#x27;uuid_test.cpp&#x27;</span>, <b class=\"conum\">(2)</b>\n    include_directories : inc, <b class=\"conum\">(3)</b>\n    link_with : libuuid) <b class=\"conum\">(4)</b>\n\ntest(<span class=\"hljs-string\">&#x27;Uuid test&#x27;</span>, testexe) <b class=\"conum\">(5)</b>\n\ntest(<span class=\"hljs-string\">&#x27;Uuid test with args and env&#x27;</span>, testexe, args : [<span class=\"hljs-string\">&#x27;arg1&#x27;</span>, <span class=\"hljs-string\">&#x27;arg2&#x27;</span>], env : [<span class=\"hljs-string\">&#x27;FOO=bar&#x27;</span>]) <b class=\"conum\">(6)</b></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>test executable name</p>\n</li>\n<li>\n<p>tests source files to be compiled</p>\n</li>\n<li>\n<p>declared include directories in root <code>meson.build</code></p>\n</li>\n<li>\n<p>link test executable with previously declared shared library <code>libuuid</code></p>\n</li>\n<li>\n<p>test execution</p>\n</li>\n<li>\n<p>we can specify other test execution passing arguments or environment variables</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">doctest.h</dt>\n<dd>\n<p>Librería <a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a> en un único fichero de cabeceras. Puedes tratar de automatizar el proceso de instalación de la librería, yo por el momento la he instalado manualmente, ya que es un proceso muy sencillo:</p>\n</dd>\n</dl>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Añadir <a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a> al proyecto</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\"><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-built_in\">test</span>\nwget https://raw.githubusercontent.com/onqtam/doctest/master/doctest/doctest.h</code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/test/uuid_test.cpp\">uuid_test.cpp</a></dt>\n<dd>\n<p>Implementación de las pruebas unitarias.</p>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">test/uuid_test.cpp</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&quot;doctest.h&quot;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&quot;Uuid.h&quot;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string&gt;</span></span>\n\n<span class=\"hljs-keyword\">constexpr</span> <span class=\"hljs-keyword\">int</span> MAX_ITERS = <span class=\"hljs-number\">100</span>;\n\nTEST_CASE(<span class=\"hljs-string\">&quot;Uuid&quot;</span>)\n{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; MAX_ITERS; i++)\n    {\n        ids::Uuid uuid;\n        <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span> uuid_str{uuid.to_str()};\n\n        INFO(uuid_str);\n\n        <span class=\"hljs-comment\">// If assertion fails test execution is stopped</span>\n        REQUIRE(uuid_str.size() == <span class=\"hljs-number\">36</span>);\n\n        <span class=\"hljs-comment\">// If assertion fails test execution continues</span>\n        CHECK(uuid.most &gt; <span class=\"hljs-number\">0</span>);\n        CHECK(uuid.least &gt; <span class=\"hljs-number\">0</span>);\n    }\n}\n\n<span class=\"hljs-comment\">// BDD style</span>\n\nSCENARIO(<span class=\"hljs-string\">&quot;UUID creation&quot;</span>)\n{\n\n    GIVEN(<span class=\"hljs-string\">&quot;A random UUID &quot;</span>)\n    {\n\n        ids::Uuid uuid;\n        <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span> uuid_str{uuid.to_str()};\n\n        REQUIRE(uuid_str.size() == <span class=\"hljs-number\">36</span>);\n\n        WHEN(<span class=\"hljs-string\">&quot;get the most and least&quot;</span>)\n        {\n            THEN(<span class=\"hljs-string\">&quot;should be more than 0&quot;</span>)\n            {\n                CHECK(uuid.most &gt; <span class=\"hljs-number\">0</span>);\n                CHECK(uuid.least &gt; <span class=\"hljs-number\">0</span>);\n            }\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Tip</div>\n</td>\n<td class=\"content\">\nPuedes encontrar las instrucciones para construir y ejecutar el proyecto de ejemplo en: <a href=\"https://github.com/carlosvin/uuid-cpp#how-to-build-the-example\" class=\"bare\">https://github.com/carlosvin/uuid-cpp#how-to-build-the-example</a>\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>"}