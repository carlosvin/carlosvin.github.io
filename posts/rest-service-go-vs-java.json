{"entry":{"title":"Golang over Java for REST services","lang":"en","summary":"Why I'd pick Golang over Java to create any new distributed system. I am going to compare a REST service implementation in Java vs the implementation in Golang","slug":"rest-service-go-vs-java","keywords":["REST","API","Web Services","Java","Golang","Gingonic","Spring"],"filename":"rest-service-go-vs-java.adoc","modified":1604188800000,"created":1604188800000,"author":"Carlos Martin Sanchez","previewimage":"icons/icon-192x192.png","otherLangs":[],"path":"/posts/rest-service-go-vs-java/en","url":"https://carlosvin.github.io/posts/rest-service-go-vs-java/en"},"html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_actual_project_examples\">Actual project examples</a></li>\n<li><a href=\"#_the_ecosystems\">The Ecosystems</a></li>\n<li><a href=\"#_routing\">Routing</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_go_without_framework\">Go - Without framework</a></li>\n<li><a href=\"#_go_gin_framework\">Go - Gin Framework</a></li>\n<li><a href=\"#_java_spring_io\">Java + Spring.io</a></li>\n</ul>\n</li>\n<li><a href=\"#_validations\">Validations</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_go_gin_framework_2\">Go - Gin Framework</a></li>\n<li><a href=\"#_java_spring_io_2\">Java + Spring.io</a></li>\n<li><a href=\"#_filtering_and_middleware\">Filtering and Middleware</a></li>\n</ul>\n</li>\n<li><a href=\"#_dependency_injection_ioc\">Dependency injection / IoC</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_spring_ioc\">Spring IoC</a></li>\n<li><a href=\"#_go\">Go</a></li>\n</ul>\n</li>\n<li><a href=\"#_testing\">Testing</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_unit_tests\">Unit tests</a></li>\n<li><a href=\"#_integration_tests\">Integration tests</a></li>\n</ul>\n</li>\n<li><a href=\"#_performance\">Performance</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_memory\">Memory</a></li>\n<li><a href=\"#_speed\">Speed</a></li>\n</ul>\n</li>\n<li><a href=\"#_conclusions\">Conclusions</a></li>\n</ul>\n</div>\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Lately I&#8217;ve been working with two different technology stacks almost in parallel, in both cases we were using them to develop <a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\" rel=\"noopener\">REST</a> services.</p>\n</div>\n<div class=\"paragraph\">\n<p>During this time I&#8217;ve come up with some conclusions and opinions I&#8217;d like to share.</p>\n</div>\n<div class=\"paragraph\">\n<p>A disclaimer, few months ago, I had several years of experience with Java and 0 days of professional experience with Golang.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_actual_project_examples\">Actual project examples</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Few months ago I created <a href=\"https://covid-rest.appspot.com/docs\" target=\"_blank\" rel=\"noopener\">an API to extract and structure COVID-19 data</a> from <a href=\"https://www.ecdc.europa.eu/en/publications-data/download-todays-data-geographic-distribution-covid-19-cases-worldwide\" target=\"_blank\" rel=\"noopener\">ECDC website</a>. I developed it in <a href=\"https://spring.io/guides/gs/rest-service\" target=\"_blank\" rel=\"noopener\">Spring Boot (REST)</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Few months later I had the luck of work on my first professional project in <a href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go</a> and I decided to create a port of <a href=\"https://covid-rest.appspot.com/docs\" target=\"_blank\" rel=\"noopener\">the API to extract COVID-19 data</a> in <a href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go</a>, just for learning and for fun.</p>\n</div>\n<div class=\"paragraph\">\n<p>Now we have two REST services, almost functionally identical, but developed in two different tech stacks, so we can easily compare some relevant aspects of both.</p>\n</div>\n<table class=\"tableblock frame-all grid-all stretch\">\n<caption class=\"title\">Table 1. Source code for the 2 REST services implementations</caption>\n<colgroup>\n<col style=\"width: 50%;\">\n<col style=\"width: 50%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\"><a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> + <a href=\"https://spring.io/guides/gs/rest-service\" target=\"_blank\" rel=\"noopener\">Spring Boot (REST)</a></th>\n<th class=\"tableblock halign-left valign-top\"><a href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go</a> + <a href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" rel=\"noopener\">Gin framework</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><a href=\"https://github.com/carlosvin/covid-rest\" class=\"bare\">https://github.com/carlosvin/covid-rest</a></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><a href=\"https://github.com/carlosvin/covid-rest-go\" class=\"bare\">https://github.com/carlosvin/covid-rest-go</a></p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nI actually created that <a href=\"https://covid-rest.appspot.com/docs\">COVID-19 data REST API</a> to be the data source for the <a href=\"https://covid-stats-pwa.netlify.app\" target=\"_blank\" rel=\"noopener\">COVID19-Stats App</a>, a <a href=\"https://web.dev/progressive-web-apps\" target=\"_blank\" rel=\"noopener\">PWA</a> built with <a href=\"https://svelte.dev\" target=\"_blank\" rel=\"noopener\">Svelte</a>, but that&#8217;s another topic.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_the_ecosystems\">The Ecosystems</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you want to create a <a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\" rel=\"noopener\">REST</a> service just in plain Java you will have extra work to do, in Golang a little bit less. That&#8217;s why we use framework, because they&#8217;ve already solved many common problems for us.</p>\n</div>\n<div class=\"paragraph\">\n<p>For this comparison I am going to use <a href=\"https://spring.io/guides/gs/rest-service\" target=\"_blank\" rel=\"noopener\">Spring Boot (REST)</a> for <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> and <a href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" rel=\"noopener\">Gin framework</a> for <a href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go</a>, but in both languages there are a lot of production ready nice options.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_routing\">Routing</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_go_without_framework\">Go - Without framework</h3>\n<div class=\"paragraph\">\n<p>Go uses the concept of <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\" target=\"_blank\" rel=\"noopener\">HTTP</a> multiplexer or router. You can specify routes using patterns and link those routes to handlers. The router will decide which handler has to execute the request based on the path received.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">router.go file</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-go\" data-lang=\"go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;log&quot;</span>\n\t<span class=\"hljs-string\">&quot;net/http&quot;</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\trouter := http.NewServeMux()\n\trouter.Handle(<span class=\"hljs-string\">&quot;/redirect&quot;</span>, http.RedirectHandler(<span class=\"hljs-string\">&quot;https://carlosvin.github.io/&quot;</span>, <span class=\"hljs-number\">307</span>))\n\trouter.HandleFunc(<span class=\"hljs-string\">&quot;/hello&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> {\n\t\tw.Write([]<span class=\"hljs-keyword\">byte</span>(<span class=\"hljs-string\">&quot;Hello world!&quot;</span>))\n\t})\n\tlog.Println(<span class=\"hljs-string\">&quot;Listening...&quot;</span>)\n\thttp.ListenAndServe(<span class=\"hljs-string\">&quot;:3000&quot;</span>, router)\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Source code is already quite simple, but there might more complex routing use cases.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_go_gin_framework\">Go - Gin Framework</h3>\n<div class=\"paragraph\">\n<p>Happily there are frameworks that help us to keep our base code simple, for example when we need to extract path parameters, which is quite common use case in <a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\" rel=\"noopener\">REST</a> <a href=\"https://en.wikipedia.org/wiki/Application_programming_interface\" target=\"_blank\" rel=\"noopener\">API</a>s, we can use a routing library, I&#8217;ve used <a href=\"https://github.com/gorilla/mux\" target=\"_blank\" rel=\"noopener\">Gorilla Mux</a> and <a href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" rel=\"noopener\">Gin framework</a> and I liked more <a href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" rel=\"noopener\">Gin framework</a>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://github.com/carlosvin/covid-rest-go/blob/master/main.go\">Full example</a></div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-go\" data-lang=\"go\"><span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;github.com/carlosvin/covid-rest-go/handlers&quot;</span>\n\t<span class=\"hljs-string\">&quot;github.com/carlosvin/covid-rest-go/readers&quot;</span>\n\t<span class=\"hljs-string\">&quot;github.com/gin-gonic/gin&quot;</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\n\t<span class=\"hljs-comment\">// ...</span>\n\n\tr := gin.Default()\n\tr.GET(<span class=\"hljs-string\">&quot;/countries&quot;</span>, router.Countries)\n\tr.GET(<span class=\"hljs-string\">&quot;/countries/:code&quot;</span>, router.Country)\n\tr.GET(<span class=\"hljs-string\">&quot;/countries/:code/dates&quot;</span>, router.CountryDates)\n\tr.GET(<span class=\"hljs-string\">&quot;/countries/:code/dates/:date&quot;</span>, router.CountryDate)\n\tr.Run()\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://github.com/carlosvin/covid-rest-go/blob/master/handlers/countries.go\">And this is a handler example</a>, the router.Countries one</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-go\" data-lang=\"go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(r *routerImpl)</span> <span class=\"hljs-title\">Countries</span><span class=\"hljs-params\">(c *gin.Context)</span></span> {\n\tc.JSON(<span class=\"hljs-number\">200</span>, r.countries())\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_java_spring_io\">Java + Spring.io</h3>\n<div class=\"paragraph\">\n<p>The <a href=\"https://spring.io/guides/gs/rest-service\" target=\"_blank\" rel=\"noopener\">Spring Boot (REST)</a> is based on the concept of Controller, it is implemented using annotations on the class and methods.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://github.com/carlosvin/covid-rest/blob/master/src/main/java/com/carlosvin/covid/controllers/CountriesController.java\" target=\"_blank\" rel=\"noopener\">CountriesController.java</a></div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@Validated</span>\n<span class=\"hljs-meta\">@RestController</span> <b class=\"conum\">(1)</b>\n<span class=\"hljs-meta\">@RequestMapping(&quot;/countries&quot;)</span> <b class=\"conum\">(2)</b>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CountriesController</span> </span>{\n\n\t<span class=\"hljs-comment\">// Some source code is not shown, you can find the complete example in the repository</span>\n\n\t<span class=\"hljs-meta\">@GetMapping(&quot;/{country}/dates/{isoDateStr}&quot;)</span>  <b class=\"conum\">(3)</b>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DateStatsDto <span class=\"hljs-title\">getDateByCountry</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@Size(min = 2, max = 2)</span> <span class=\"hljs-meta\">@PathVariable</span> String country, <span class=\"hljs-meta\">@Size(min = 10, max = 20)</span> <span class=\"hljs-meta\">@PathVariable</span> String isoDateStr)</span> <span class=\"hljs-keyword\">throws</span> NotFoundException </span>{\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> DateStatsDto(service.getDate(country, DateUtils.convert(isoDateStr)));\n\t}\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>Declare the class as Controller so it is registered in <a href=\"https://spring.io/guides/gs/rest-service\" target=\"_blank\" rel=\"noopener\">Spring Boot (REST)</a></p>\n</li>\n<li>\n<p>Controller base path definition</p>\n</li>\n<li>\n<p>Handler definition for a nested path under the main controller path. <a href=\"https://spring.io/guides/gs/rest-service\" target=\"_blank\" rel=\"noopener\">Spring Boot (REST)</a> makes easy to extract path variables defined in the route, you can directly use them as method arguments.</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_validations\">Validations</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_go_gin_framework_2\">Go - Gin Framework</h3>\n<div class=\"paragraph\">\n<p><a href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" rel=\"noopener\">Gin framework</a> uses an external validation package <a href=\"https://godoc.org/github.com/go-playground/validator\">validator</a>, besides that it is fully integrated with <a href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" rel=\"noopener\">Gin framework</a>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-go\" data-lang=\"go\"><span class=\"hljs-keyword\">type</span> User <span class=\"hljs-keyword\">struct</span> {\n\tName  <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`validate:&quot;required&quot;`</span> <b class=\"conum\">(1)</b>\n\tEmail <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`validate:&quot;required,email&quot;`</span>\n}\n\nerr := validate.Struct(user) <b class=\"conum\">(2)</b>\nvalidationErrors := err.(validator.ValidationErrors) <b class=\"conum\">(3)</b></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>The validation system uses <a href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go</a> tags, it is not the same as <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> annotations, but in the validation case, it works in pretty same way as annotations.</p>\n</li>\n<li>\n<p>Executes the validation explicitly</p>\n</li>\n<li>\n<p>Extracts validation errors</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_java_spring_io_2\">Java + Spring.io</h3>\n<div class=\"paragraph\">\n<p>You can enable the validation in the controller level, then in the handlers you can also specify the type of validation. Let&#8217;s explain it using the previous example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://github.com/carlosvin/covid-rest/blob/master/src/main/java/com/carlosvin/covid/controllers/CountriesController.java\" target=\"_blank\" rel=\"noopener\">CountriesController.java</a></div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@Validated</span> <b class=\"conum\">(1)</b>\n<span class=\"hljs-meta\">@RestController</span>\n<span class=\"hljs-meta\">@RequestMapping(&quot;/countries&quot;)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CountriesController</span> </span>{\n\n\t<span class=\"hljs-comment\">// Some source code is not shown, you can find the complete example in the repository</span>\n\n\t<span class=\"hljs-meta\">@GetMapping(&quot;/{country}/dates/{isoDateStr}&quot;)</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DateStatsDto <span class=\"hljs-title\">getDateByCountry</span><span class=\"hljs-params\">(\n\t\t<span class=\"hljs-meta\">@Size(min = 2, max = 2)</span> <span class=\"hljs-meta\">@PathVariable</span> String country, <b class=\"conum\">(2)</b>\n\t\t<span class=\"hljs-meta\">@Size(min = 10, max = 20)</span> <span class=\"hljs-meta\">@PathVariable</span> String isoDateStr)</span> <span class=\"hljs-keyword\">throws</span> NotFoundException </span>{\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> DateStatsDto(service.getDate(country, DateUtils.convert(isoDateStr)));\n\t}\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>Declare the class as Controller so it is registered in <a href=\"https://spring.io/guides/gs/rest-service\" target=\"_blank\" rel=\"noopener\">Spring Boot (REST)</a></p>\n</li>\n<li>\n<p><code>@Size</code> validates that the input argument country has 2 characters</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>The validation system is more powerful than you can see in this code snippet, for example adding <code>@Valid</code> annotation opens the door to complex types validation.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_filtering_and_middleware\">Filtering and Middleware</h3>\n<div class=\"paragraph\">\n<p>Different approaches, pretty much the same end result.</p>\n</div>\n<div class=\"paragraph\">\n<p>I will elaborate this topic in following days.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_dependency_injection_ioc\">Dependency injection / IoC</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_spring_ioc\"><a href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators\" target=\"_blank\" rel=\"noopener\">Spring IoC</a></h3>\n<div class=\"paragraph\">\n<p><a href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators\" target=\"_blank\" rel=\"noopener\">Spring IoC</a> is the most complete and powerful systems I&#8217;ve ever used for <a href=\"https://en.wikipedia.org/wiki/Inversion_of_control\" target=\"_blank\" rel=\"noopener\">IoC</a>, actually, the first time I used Spring professionally was just to deal with <a href=\"https://en.wikipedia.org/wiki/Inversion_of_control\" target=\"_blank\" rel=\"noopener\">IoC</a>. It supports XML configuration files or <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> annotations, I like annotations more, here a simple example from <a href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators\" target=\"_blank\" rel=\"noopener\">Spring IoC</a> documentation:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Spring IoC example</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@Repository</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">JpaMovieFinder</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">MovieFinder</span> </span>{ <b class=\"conum\">(1)</b>\n    <span class=\"hljs-comment\">// implementation elided for clarity</span>\n}\n\n<span class=\"hljs-comment\">//</span>\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SimpleMovieLister</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> MovieFinder movieFinder;\n\n    <span class=\"hljs-meta\">@Autowired</span> <b class=\"conum\">(2)</b>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setMovieFinder</span><span class=\"hljs-params\">(MovieFinder movieFinder)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.movieFinder = movieFinder;\n    }\n\n    <span class=\"hljs-comment\">// ...</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p><code>JpaMovieFinder</code> is instantiated by <a href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators\" target=\"_blank\" rel=\"noopener\">Spring IoC</a></p>\n</li>\n<li>\n<p>With <code>@Autowired</code> annotation <a href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators\" target=\"_blank\" rel=\"noopener\">Spring IoC</a> knows that has to inject <code>movieFinder</code> argument. It should be a class implementing <code>MovieFinder</code></p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_go\">Go</h3>\n<div class=\"paragraph\">\n<p>Neither <a href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go</a> nor <a href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" rel=\"noopener\">Gin framework</a> has any <a href=\"https://en.wikipedia.org/wiki/Inversion_of_control\" target=\"_blank\" rel=\"noopener\">IoC</a> solution, but you can still apply <a href=\"https://en.wikipedia.org/wiki/Dependency_injection\" target=\"_blank\" rel=\"noopener\">Dependency Injection</a> technique to decouple your components and improve the testability of your system.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Dependency injection simple example in <a href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go</a></div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-go\" data-lang=\"go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span>\n\n<span class=\"hljs-comment\">// Greeter interface to greet the caller</span>\n<span class=\"hljs-keyword\">type</span> Greeter <span class=\"hljs-keyword\">interface</span> {\n\tgreet()\n}\n\n<span class=\"hljs-keyword\">type</span> greeterHello <span class=\"hljs-keyword\">struct</span>{}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(g *greeterHello)</span> <span class=\"hljs-title\">greet</span><span class=\"hljs-params\">()</span></span> { <b class=\"conum\">(3)</b>\n\tfmt.Println(<span class=\"hljs-string\">&quot;Hello!&quot;</span>)\n}\n\n<span class=\"hljs-keyword\">type</span> greeterHi <span class=\"hljs-keyword\">struct</span>{}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(g *greeterHi)</span> <span class=\"hljs-title\">greet</span><span class=\"hljs-params\">()</span></span> { <b class=\"conum\">(4)</b>\n\tfmt.Println(<span class=\"hljs-string\">&quot;Hi!&quot;</span>)\n}\n\n<span class=\"hljs-comment\">// App Application representation</span>\n<span class=\"hljs-keyword\">type</span> App <span class=\"hljs-keyword\">struct</span> {\n\tgreeters []Greeter <b class=\"conum\">(1)</b>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(app *App)</span> <span class=\"hljs-title\">startup</span><span class=\"hljs-params\">()</span></span> {\n\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> app.greeters {\n\t\tv.greet()\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tgreeters := []Greeter{ <b class=\"conum\">(2)</b>\n\t\t&amp;greeterHello{},\n\t\t&amp;greeterHi{},\n\t\t&amp;greeterHello{}}\n\n\tapp := &amp;App{greeters}\n\n\tapp.startup()\n}\n\n<span class=\"hljs-comment\">/*\n&lt;1&gt; `App` accepts an array of `Greeter`\n&lt;2&gt; During `App` instantiation we pass different implementations of `Greeter`\n&lt;3&gt; Greeter implementation that prints *Hello!*\n&lt;4&gt; Greeter implementation that prints *Hi!*\n*/</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>It is more verbose, but there is an advantage, there is nothing hidden, everything is explicit and you have full control of instantiation order.</p>\n</div>\n<div class=\"paragraph\">\n<p>As soon as you use <a href=\"https://en.wikipedia.org/wiki/Dependency_injection\" target=\"_blank\" rel=\"noopener\">Dependency Injection</a>, I don&#8217;t have any strong opinion about using <a href=\"https://en.wikipedia.org/wiki/Inversion_of_control\" target=\"_blank\" rel=\"noopener\">IoC</a> system or doing <a href=\"https://en.wikipedia.org/wiki/Dependency_injection\" target=\"_blank\" rel=\"noopener\">Dependency Injection</a> manually.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_testing\">Testing</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_unit_tests\">Unit tests</h3>\n<div class=\"paragraph\">\n<p>For unit tests there are no big differences.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go</a> comes with a standard <a href=\"https://golang.org/pkg/testing/\" target=\"_blank\" rel=\"noopener\">library for testing and benchmarking</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>For <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> there are many well-known unit testing frameworks, but Spring already has quite big support for <a href=\"https://docs.spring.io/spring-batch/docs/current/reference/html/testing.html\" target=\"_blank\" rel=\"noopener\">unit testing</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_integration_tests\">Integration tests</h3>\n<div class=\"sect3\">\n<h4 id=\"_go_2\">Go</h4>\n<div class=\"paragraph\">\n<p>There are no support for Integration Tests in <a href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go</a>, you will have to implement everything by yourself, although it is not difficult, <a href=\"https://kpat.io/2019/06/testing-with-gin/\" target=\"_blank\" rel=\"noopener\">here you can find a simple example</a>.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_spring\">Spring</h4>\n<div class=\"paragraph\">\n<p>On the other hand, <a href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/testing.html\" target=\"_bank\">Spring has a great testing support</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>To write integration tests for <a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\" rel=\"noopener\">REST</a> services, <a href=\"https://spring.io/guides/gs/testing-web/\" target=\"_blank\" rel=\"noopener\">MockMvc</a> is really convenient.</p>\n</div>\n<div class=\"paragraph\">\n<p>I&#8217;ve used <a href=\"https://github.com/carlosvin/covid-rest/blob/master/src/test/java/com/carlosvin/covid/CountriesControllerTest.java\" target=\"_blank\" rel=\"noopener\">MockMvc in the covid-rest project</a>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">MockMvc code snippet from <a href=\"https://github.com/carlosvin/covid-rest/blob/master/src/test/java/com/carlosvin/covid/CountriesControllerTest.java\" target=\"_blank\" rel=\"noopener\">CountriesControllerTest.java</a></div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">\t<span class=\"hljs-meta\">@Autowired</span>\n\t<span class=\"hljs-keyword\">private</span> MockMvc mockMvc; <b class=\"conum\">(1)</b>\n\n\t<span class=\"hljs-meta\">@Test</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getCountries</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n\t\t<span class=\"hljs-keyword\">this</span>.mockMvc.perform(get(<span class=\"hljs-string\">&quot;/countries&quot;</span>)) <b class=\"conum\">(2)</b>\n\t\t\t\t.andDo(print()).andExpect(status().isOk()) <b class=\"conum\">(3)</b>\n\t\t\t\t.andExpect(jsonPath(<span class=\"hljs-string\">&quot;$.*&quot;</span>, hasSize(<span class=\"hljs-number\">144</span>)))\n\t\t\t\t.andExpect(jsonPath(<span class=\"hljs-string\">&quot;$.ES.confirmedCases&quot;</span>,comparesEqualTo(<span class=\"hljs-number\">9191</span>)))\n\t\t\t\t.andExpect(jsonPath(<span class=\"hljs-string\">&quot;$.ES.deathsNumber&quot;</span>, comparesEqualTo(<span class=\"hljs-number\">309</span>)))\n\t\t\t\t.andExpect(jsonPath(<span class=\"hljs-string\">&quot;$.ES.countryCode&quot;</span>, comparesEqualTo(<span class=\"hljs-string\">&quot;ES&quot;</span>)))\n\t\t\t\t.andExpect(jsonPath(<span class=\"hljs-string\">&quot;$.ES.countryName&quot;</span>, comparesEqualTo(<span class=\"hljs-string\">&quot;Spain&quot;</span>)))\n\t\t\t\t.andExpect(jsonPath(<span class=\"hljs-string\">&quot;$.ES.path&quot;</span>, comparesEqualTo(<span class=\"hljs-string\">&quot;/countries/ES&quot;</span>)))\n\t\t\t\t.andExpect(jsonPath(<span class=\"hljs-string\">&quot;$.VC.countryName&quot;</span>, comparesEqualTo(<span class=\"hljs-string\">&quot;Saint Vincent and the Grenadines&quot;</span>)))\n\t\t\t\t.andDo(document(<span class=\"hljs-string\">&quot;countries/list&quot;</span>, preprocessResponse(prettyPrint(), <span class=\"hljs-keyword\">new</span> CropPreprocessor())));\n\t}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>The Spring test runner injects the MockMvc object.</p>\n</li>\n<li>\n<p>We use MockMvc to call to the endpoint we have created.</p>\n</li>\n<li>\n<p>Then we validate the endpoint response: status code and body.</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_performance\">Performance</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Besides the languages specific differences, the main difference is the performance. The CPU consumption in <a href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go</a> is smaller, but about the memory the difference is really significant, <strong>the order of 30 times smaller fingerprint</strong>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_memory\">Memory</h3>\n<div class=\"paragraph\">\n<p>Here I&#8217;ve found a surprising difference, just by checking the memory consumption in my laptop.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" rel=\"noopener\">Gin framework</a> <code>15.6MB</code></p>\n</li>\n<li>\n<p><a href=\"https://spring.io/guides/gs/rest-service\" target=\"_blank\" rel=\"noopener\">Spring Boot (REST)</a> <code>465.9MB</code></p>\n</li>\n</ul>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/posts/rest-service-go-vs-java/memory-consumption-go-java.png\" alt=\"Memory consumption\">\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_speed\">Speed</h3>\n<div class=\"paragraph\">\n<p>Following the <a href=\"https://www.techempower.com/benchmarks/\" target=\"_blank\" rel=\"noopener\">TechEmpower benchmarks</a>:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" rel=\"noopener\">Gin framework</a> is in 193 position, 9.9%.</p>\n</li>\n<li>\n<p><a href=\"https://spring.io/guides/gs/rest-service\" target=\"_blank\" rel=\"noopener\">Spring Boot (REST)</a> is in 284 position, 4%.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Following the <a href=\"https://github.com/the-benchmarker/web-frameworks\" target=\"_blank\" rel=\"noopener\">The Benchmarker results</a>:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" rel=\"noopener\">Gin framework</a>: position 33.</p>\n</li>\n<li>\n<p><a href=\"https://spring.io/guides/gs/rest-service\" target=\"_blank\" rel=\"noopener\">Spring Boot (REST)</a>: position 68.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_conclusions\">Conclusions</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If I were you, I&#8217;d choose <a href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go</a> if:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>If you value the explicit over implicit, keep in mind that there is a cost, you will most likely have to write more lines of code.</p>\n</li>\n<li>\n<p>If you value the simplicity, <a href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go</a> has a quite reduced set of keywords, which reduces the learning curve and simplifies the code reviews.</p>\n</li>\n<li>\n<p>If RAM memory usage is critical for your project, actually I&#8217;d just keep away from <a href=\"https://spring.io/guides/gs/rest-service\" target=\"_blank\" rel=\"noopener\">Spring Boot (REST)</a>.</p>\n</li>\n<li>\n<p>If the project you are going to work on is a distributed system, specially if it is based on <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\" target=\"_blank\" rel=\"noopener\">HTTP</a>.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>"}