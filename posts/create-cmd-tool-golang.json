{"entry":{"title":"Easily creating a golang command line tool","lang":"en","summary":"Let's see how to easily and quickly create a command line tool in golang","slug":"create-cmd-tool-golang","keywords":["Golang","cmd","tools"],"filename":"create-cmd-tool-golang.adoc","modified":1613260800000,"created":1613260800000,"author":"Carlos Martin Sanchez","previewimage":"https://golang.org/lib/godoc/images/go-logo-blue.svg","otherLangs":[],"path":"/posts/create-cmd-tool-golang/en","url":"https://carlosvin.github.io/posts/create-cmd-tool-golang/en"},"html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_flags\">Flags</a></li>\n<li><a href=\"#_viper\">Viper</a></li>\n<li><a href=\"#_meta_viper\">Meta-Viper</a></li>\n</ul>\n</div>\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"https://golang.org/\" target=\"_blank\" rel=\"noopener\">Golang</a> is the one of the most useful technologies I&#8217;ve recently learned. <a href=\"https://golang.org/\" target=\"_blank\" rel=\"noopener\">Golang</a> has a pretty nice support for networking, command line or logging out of the box, you don&#8217;t need any dependency. But there are libraries making developers' life even easier.</p>\n</div>\n<div class=\"paragraph\">\n<p>I&#8217;ve already talked about <a href=\"/posts/rest-service-go-vs-java/\" target=\"blank_\">creating REST service in go</a>, today I&#8217;d like to focus on creating a command line tool.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_flags\">Flags</h2>\n<div class=\"sectionbody\">\n<div class=\"listingblock\">\n<div class=\"title\">Command line tool to read number of lines as an input integer parameter <a href=\"https://golang.org/\" target=\"_blank\" rel=\"noopener\">Golang</a></div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-go\" data-lang=\"go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;flag&quot;</span>\n\t<span class=\"hljs-string\">&quot;fmt&quot;</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\t<span class=\"hljs-keyword\">var</span> nFlag = flag.Int(<span class=\"hljs-string\">&quot;lines&quot;</span>, <span class=\"hljs-number\">1234</span>, <span class=\"hljs-string\">&quot;number of lines&quot;</span>)\n\tflag.Parse()\n\tfmt.Printf(<span class=\"hljs-string\">&quot;Lines %d\\n&quot;</span>, *nFlag)\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>With previous simple code we have already some useful capabilities</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Print help menu</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ cmd --<span class=\"hljs-built_in\">help</span>\n\n&gt; Usage of cmd:\n    -lines int\n        number of lines (default 1234)</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Use default value</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ cmd\n\n&gt; Lines 1234</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Pass a value to the command tool</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ cmd --lines=2\n\n&gt; Lines 2</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Pass an invalid value</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ cmd --lines=asdf\n\n&gt; invalid value <span class=\"hljs-string\">&quot;asdf&quot;</span> <span class=\"hljs-keyword\">for</span> flag -lines: parse error\nUsage of cmd:\n    -lines int\n        number of lines (default 1234)\n<span class=\"hljs-built_in\">exit</span> status 2</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>For a simple command line tool, in most of the cases, we will have enough with the default language support. But if we want to bring more features to the combo like reading configuration from environment variables or from files, then a library like the awesome <a href=\"https://github.com/spf13/viper\" target=\"_blank\" rel=\"noopener\">Viper</a> will come really handy.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_viper\">Viper</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"https://github.com/spf13/viper\" target=\"_blank\" rel=\"noopener\">Viper</a> is very powerful and well documented library widely used from many projects, I will not get into the details or how to use it, because I&#8217;ve created an abstraction to simplify its usage, I named it <a href=\"https://github.com/carlosvin/meta-viper\" target=\"_blank\" rel=\"noopener\">Meta-Viper</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_meta_viper\">Meta-Viper</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"https://github.com/carlosvin/meta-viper\" target=\"_blank\" rel=\"noopener\">Meta-Viper</a> abstracts you of the details of reading configuration from files, environment or flags. This extra simplicity comes with a tradeoff, we are missing some flexibility.</p>\n</div>\n<div class=\"paragraph\">\n<p>Let&#8217;s see some features with an example.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Firstly we have to create a go modules project with the meta-viper dependency</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">go mod init example.com/meta-viper <b class=\"conum\">(1)</b>\n\ngo get github.com/carlosvin/meta-viper <b class=\"conum\">(2)</b></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>Create a go modules project</p>\n</li>\n<li>\n<p>Install the meta-viper dependency</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>Now let&#8217;s create a program that is configurable from files, command line params and environment variables.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">main.go</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-go\" data-lang=\"go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;log&quot;</span>\n\t<span class=\"hljs-string\">&quot;os&quot;</span>\n\n\tconfig <span class=\"hljs-string\">&quot;github.com/carlosvin/meta-viper&quot;</span>\n)\n\n<span class=\"hljs-comment\">// Here is where you define the struct that will hold the configuration values</span>\n<span class=\"hljs-comment\">// cfg_name is the parameter name</span>\n<span class=\"hljs-comment\">// cfg_desc is the parameter description that will be shown in the command line help</span>\n<span class=\"hljs-keyword\">type</span> appConfig <span class=\"hljs-keyword\">struct</span> {\n\tHost      <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`cfg_name:&quot;host&quot; cfg_desc:&quot;Server host&quot;`</span>\n\tPort      <span class=\"hljs-keyword\">int</span>    <span class=\"hljs-string\">`cfg_name:&quot;port&quot; cfg_desc:&quot;Server port&quot;`</span>\n\tSearchAPI <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`cfg_name:&quot;apis.search&quot; cfg_desc:&quot;Search API endpoint&quot;`</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\t<span class=\"hljs-comment\">// Instantiate the structure with default values</span>\n\tcfg := &amp;appConfig{\n\t\tHost:      <span class=\"hljs-string\">&quot;localhost&quot;</span>,\n\t\tPort:      <span class=\"hljs-number\">6000</span>,\n\t\tSearchAPI: <span class=\"hljs-string\">&quot;google&quot;</span>,\n\t}\n\n\t<span class=\"hljs-comment\">// Meta-Viper instance is loading the configuration from wherever is available: files, env, or input params</span>\n\t_, err := config.New(cfg, os.Args)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\tlog.Printf(<span class=\"hljs-string\">&quot;Loaded Configuration %v...&quot;</span>, cfg)\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Now let&#8217;s see some examples how this command line tool is able to load configuration.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Print usage (help)</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ cmd --<span class=\"hljs-built_in\">help</span>\n\nUsage of flagsConfig:\n    --apis.search string    Search API endpoint (default <span class=\"hljs-string\">&quot;google&quot;</span>)\n    --config string         Configuration name\n    --config-dirs strings   Configuration directories search paths (default [.,config,configs,cfg])\n    --host string           Server host (default <span class=\"hljs-string\">&quot;localhost&quot;</span>)\n    --port int              Server port (default 6000)\npflag: <span class=\"hljs-built_in\">help</span> requested\n<span class=\"hljs-built_in\">exit</span> status 2</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Run with default values</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ cmd\n\n2021/02/15 23:12:48 No configuration name has been specified, so no configuration file will be loaded. Using flags and environment variables.\n2021/02/15 23:12:48 Loaded Configuration &amp;{localhost 6000 google}...</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Read the port from environment variable and host from input param</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ PORT=9999 cmd --host=myhost\n\n2021/02/15 23:15:47 No configuration name has been specified, so no configuration file will be loaded. Using flags and environment variables.\n2021/02/15 23:15:47 Loaded Configuration &amp;{myhost 9999 google}...</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The last example will aggregate all the possible sources of configuration, it will extend the previous one adding configuration from a file. So let&#8217;s create a configuration file:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">the-config.json</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-json\" data-lang=\"json\">{\n    <span class=\"hljs-attr\">&quot;apis&quot;</span>: {\n        <span class=\"hljs-attr\">&quot;search&quot;</span>: <span class=\"hljs-string\">&quot;duckduckgo&quot;</span>\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Read configuration from the-config.json file, from environment and from input params</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ PORT=9999 cmd --host=myhost --config=the-config\n\n2021/02/15 23:22:17 Loaded Configuration &amp;{myhost 9999 duckduckgo}...</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Tip</div>\n</td>\n<td class=\"content\">\nHere you can find a <a href=\"https://github.com/carlosvin/meta-viper/tree/master/examples/multi-env\" target=\"_blank\" rel=\"noopener\">multi-environment example</a> a little bit more complete.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>"}