{"entry":{"title":"Configure Viper using Struct","slug":"readme","keywords":[],"filename":"README.adoc","modified":null,"created":null,"author":"Carlos Martin Sanchez","previewimage":"icons/icon-192x192.png","otherLangs":[],"path":"/posts/readme","url":"https://carlosvin.github.io/posts/readme"},"html":"<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Meta-Viper is a wrapper over <a href=\"https://github.com/spf13/viper\" target=\"_blank\" rel=\"noopener\">viper</a>, it uses a <a href=\"https://golang.org/ref/spec#Tag\" target=\"_blank\" rel=\"noopener\">Go tagged struct</a> to:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Initialize <a href=\"https://github.com/spf13/viper\" target=\"_blank\" rel=\"noopener\">viper</a>'s configuration.</p>\n</li>\n<li>\n<p>Load application configuration on that same struct.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>You can find examples at <a href=\"./examples\">./examples</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><a class=\"image\" href=\"https://pkg.go.dev/github.com/carlosvin/meta-viper\"><img src=\"https://pkg.go.dev/badge/github.com/carlosvin/meta-viper\" alt=\"meta viper\"></a></span></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_usage\">Usage</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_define_the_struct_holding_your_application_config\">Define the struct holding your application config</h3>\n<div class=\"paragraph\">\n<p>Meta-Viper will try to load the configuration in that struct from configuration files, environment variables or flags.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Example</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-go\" data-lang=\"go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;fmt&quot;</span>\n\t<span class=\"hljs-string\">&quot;os&quot;</span>\n\n\tconfig <span class=\"hljs-string\">&quot;github.com/carlosvin/meta-viper/pkg&quot;</span>\n)\n\n<span class=\"hljs-keyword\">type</span> appConfig <span class=\"hljs-keyword\">struct</span> {\n\tHost      <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`cfg_name:&quot;host&quot; cfg_desc:&quot;Server host&quot;`</span>\n\tPort      <span class=\"hljs-keyword\">int</span>    <span class=\"hljs-string\">`cfg_name:&quot;port&quot; cfg_desc:&quot;Server port&quot;`</span>\n\tSearchAPI <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`cfg_name:&quot;apis.search&quot; cfg_desc:&quot;Search API endpoint&quot;`</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    cfg := &amp;appConfig{ <b class=\"conum\">(1)</b>\n        Host: <span class=\"hljs-string\">&quot;localhost&quot;</span>,\n        Port: <span class=\"hljs-number\">6000</span>,\n        SearchAPI: <span class=\"hljs-string\">&quot;https://google.es&quot;</span>,\n    }\n\n    _, err := config.New(cfg, os.Args) <b class=\"conum\">(2)</b>\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n        <span class=\"hljs-built_in\">panic</span>(err)\n    }\n    log.Printf(<span class=\"hljs-string\">&quot;Loaded Configuration %v...&quot;</span>, cfg)\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>We instantiate the declared struct. As you can see you can optionally specify default values.</p>\n</li>\n<li>\n<p>It loads the configuration in the passed struct <code>cfg</code>. The <code>os.Args</code> are required to parse the application flags.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>Let&#8217;s focus on one application configuration attribute to explain the example. Meta-Viper will allow you to load the config into <code>Host</code> structure attribute in 3 different ways:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Using flags</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">./your-program --host=my.host</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Using environment variables</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">HOST=my.host ./your-program</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Loading the data from a file in json, yaml or toml format</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">./your-program --config=qa <b class=\"conum\">(1)</b></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>Following the qa configuration file content</p>\n</li>\n</ol>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">qa.json</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-json\" data-lang=\"json\">{\n    <span class=\"hljs-attr\">&quot;host&quot;</span>: <span class=\"hljs-string\">&quot;qa.host&quot;</span>,\n    <span class=\"hljs-attr\">&quot;port&quot;</span>: <span class=\"hljs-number\">8000</span>,\n    <span class=\"hljs-attr\">&quot;apis&quot;</span>: {\n        <span class=\"hljs-attr\">&quot;search&quot;</span>: <span class=\"hljs-string\">&quot;https://search.api/&quot;</span>\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nYou can combine flags, environment variables and configuration files.\n</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_tags\">Tags</h3>\n<div class=\"sect3\">\n<h4 id=\"_cfg_name\">cfg_name</h4>\n<div class=\"paragraph\">\n<p>Required tag to specify the configuration parameter name.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_cfg_description\">cfg_description</h4>\n<div class=\"paragraph\">\n<p>Optional tag to describe how to use the configuration parameter.</p>\n</div>\n</div>\n</div>\n</div>\n</div>"}