{"sectids":"","toc-placement":"auto","notitle":"","stylesheet":"","webfonts":"","prewrap":"","attribute-undefined":"drop-line","attribute-missing":"skip","iconfont-remote":"","caution-caption":"Caution","important-caption":"Important","note-caption":"Note","tip-caption":"Tip","warning-caption":"Warning","example-caption":"Example","figure-caption":"Figure","table-caption":"Table","toc-title":"Table of Contents","section-refsig":"Section","part-refsig":"Part","chapter-refsig":"Chapter","appendix-refsig":"Appendix","appendix-caption":"Appendix","untitled-label":"Untitled","version-label":"Version","last-update-label":"Last updated","docfile":"serialization-java-serializable-externalizable.es.adoc","docdir":"","docfilesuffix":".adoc","docname":"serialization-java-serializable-externalizable.es","embedded":"","asciidoctor":"","asciidoctor-version":"2.0.10","safe-mode-name":"secure","safe-mode-secure":"","safe-mode-level":20,"max-include-depth":64,"user-home":".","backend":"html5","max-attribute-value-size":4096,"linkcss":"","doctype":"article","htmlsyntax":"html","backend-html5-doctype-article":"","doctype-article":"","backend-html5":"","outfilesuffix":".html","filetype":"html","filetype-html":"","basebackend-html-doctype-article":"","basebackend-html":"","basebackend":"html","stylesdir":".","iconsdir":"./images/icons","localdate":"2020-04-26","localyear":"2020","localtime":"21:26:44 +0200","localdatetime":"2020-04-26 21:26:44 +0200","docdate":"2020-04-19","docyear":"2020","doctime":"10:46:31 +0200","docdatetime":"2020-04-19 10:46:31 +0200","doctitle":"Distintas formas de serialización en Java: Comparación de rendimiento","date":"2014/05/13 17:00:00","lang":"es","toc":"","description":"Comparación de rendimientos entre distintas formas de serialización en Java","keywords":["Java","Performance"],"java":"https://www.java.com[Java,window=_blank]","json":"https://www.json.org[JSON,window=_blank]","xml":"https://en.wikipedia.org/wiki/XML[XML,window=_blank]","serializable":"https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html[Serializable,window=_blank]","externalizable":"https://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html[Externalizable,window=_blank]","authorcount":0,"title":"Distintas formas de serialización en Java: Comparación de rendimiento","summary":"Comparación de rendimientos entre distintas formas de serialización en Java","html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_serializable\">Serializable</a></li>\n<li><a href=\"#_externalizable\">Externalizable</a></li>\n<li><a href=\"#_pruebas_de_rendimiento_serializable_vs_externalizable\">Pruebas de Rendimiento (Serializable vs Externalizable)</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_implementando_el_interfaz_serializable\">Implementando el interfaz Serializable</a></li>\n<li><a href=\"#_utilizando_el_interfaz_externalizable_mal\">Utilizando el interfaz Externalizable (mal)</a></li>\n<li><a href=\"#_utilizando_el_interfaz_externalizable_correctamente\">Utilizando el interfaz Externalizable (correctamente)</a></li>\n<li><a href=\"#_analizando_los_resultados\">Analizando los resultados</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Hace poco, he tenido que serializar/deserializar unos datos en <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a>, hacía mucho que no lo hacía en formato binario directamente (ultimamente he utilizado <a href=\"https://www.json.org\" target=\"_blank\" rel=\"noopener\">JSON</a> o <a href=\"https://en.wikipedia.org/wiki/XML\" target=\"_blank\" rel=\"noopener\">XML</a>). Recordaba haber serializado objetos implementando el interfaz <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\" target=\"_blank\" rel=\"noopener\">Serializable</a>, pero había visto por Internet otra forma implementando el interfaz <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html\" target=\"_blank\" rel=\"noopener\">Externalizable</a>, ¿cuál interfaz utilizo? Pues depende lo que quieras y necesites, como todo.</p>\n</div>\n<div class=\"paragraph\">\n<p>Veamos cuándo utilizar <a href=\"#_serializable\">Serializable</a> o <a href=\"#_externalizable\">Externalizable</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_serializable\">Serializable</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Cuando quieras escribir poco código, es la forma fácil.</p>\n</li>\n<li>\n<p>Pero tiene algunas restricciones: El objeto a serializar debe implementar el constructor por defecto. Debe hacerse responsable de los atributos no accesibles de la clase padre.</p>\n</li>\n<li>\n<p>Cuando no te importe mucho el rendimiento, como veremos en la sección <a href=\"#_pruebas_de_rendimiento_serializable_vs_externalizable\">Pruebas de Rendimiento (Serializable vs Externalizable)</a>.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_externalizable\">Externalizable</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Vas a tener que implementar tú mismo los métodos de serialización.</p>\n</li>\n<li>\n<p>Cuando no puedas utilizar <a href=\"#_serializable\">Serializable</a>.</p>\n</li>\n<li>\n<p>Cuando quieras obtener un mejor rendimiento, como veremos en la sección <a href=\"#_pruebas_de_rendimiento_serializable_vs_externalizable\">Pruebas de Rendimiento (Serializable vs Externalizable)</a>.</p>\n</li>\n<li>\n<p>Si tienes que encargarte de la serialización de los atributos de la clase padre, te recomiendo utilizar <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html\" target=\"_blank\" rel=\"noopener\">Externalizable</a>, porque evitamos una sobrescritura extraña de métodos privados.</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeObject</span><span class=\"hljs-params\">(ObjectOutputStream oos)</span>\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readObject</span><span class=\"hljs-params\">(ObjectInputStream ois)</span></span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_pruebas_de_rendimiento_serializable_vs_externalizable\">Pruebas de Rendimiento (Serializable vs Externalizable)</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>El interfaz <a href=\"#_serializable\">Serializable</a> utilizando la introspección de <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a>, adivina los tipos de los atributos de las clases que va a serializar/deserializar, pero esta \"magia\" tiene una penalización en el rendimiento.</p>\n</div>\n<div class=\"paragraph\">\n<p>Al utilizar el interfaz <a href=\"#_externalizable\">Externalizable</a> somos nosotros los que decidimos cómo serializar/deserializar los objetos, es decir, tenemos que escribir nosotros el código que hace esto. Hemos perdido comodidad, pero evitamos que <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> haga algunas tareas y, si sobrescribimos correctamente los métodos del interfaz <a href=\"#_externalizable\">Externalizable</a>, conseguiremos una mejora de rendimiento.</p>\n</div>\n<div class=\"paragraph\">\n<p>Para saber cuánto es la diferencia de rendimiento, he escrito un <a href=\"https://github.com/carlosvin/serializations-performance-java\" target=\"_blank\" rel=\"noopener\">pequeño ejemplo en el que se serializa un objeto con dos colecciones con 100000 emails y 100000 teléfonos</a>. He contemplado 3 casos:</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_implementando_el_interfaz_serializable\">Implementando el interfaz Serializable</h3>\n<div class=\"paragraph\">\n<p>Como dijimos más arriba, cuando implementamos el interfaz <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\" target=\"_blank\" rel=\"noopener\">Serializable</a>, <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> tiene que adivinar ciertas cosas, en este proceso sacrifica algo de rendimiento (es el que más tarda), a cambio ĺo único que tenemos que hacer es que nuestra clase implemente el interfaz <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\" target=\"_blank\" rel=\"noopener\">Serializable</a>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Contacts</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Serializable</span> </span>{\n  <span class=\"hljs-comment\">// ...</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>1133 milisegundos en serializar</p>\n</li>\n<li>\n<p>506 milisegundos en deserializar</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_utilizando_el_interfaz_externalizable_mal\">Utilizando el interfaz Externalizable (mal)</h3>\n<div class=\"paragraph\">\n<p>En este caso somos nosotros los encargados de \"decir\" a <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> cómo debe serializar/deserializar, pero debemos ser cuidadosos, de lo contrario podemos quedarnos con lo peor de los dos mundos, por ejemplo: Si simplemente serializamos/deserializamos los atributos de la clase, y estos son atributos complejos (como colecciones), <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> también tiene que adivinar bastantes cosas y también sacrificamos algo de rendimiento y además hemos tenido que escribir más código.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readExternal</span><span class=\"hljs-params\">(ObjectInput in)</span> <span class=\"hljs-keyword\">throws</span> IOException, ClassNotFoundException </span>{\n  setEmails((Set&lt;String&gt;) in.readObject());\n  setPhones((Set&lt;String&gt;) in.readObject());\n}\n\n<span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeExternal</span><span class=\"hljs-params\">(ObjectOutput out)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n  out.writeObject(emails);\n  out.writeObject(phones);\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>737 milisegundos en serializar</p>\n</li>\n<li>\n<p>367 milisegundos en deserializar</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_utilizando_el_interfaz_externalizable_correctamente\">Utilizando el interfaz Externalizable (correctamente)</h3>\n<div class=\"paragraph\">\n<p>Si serializamos/deserializamos uno por uno los elementos de las colecciones, ahorramos aún más tiempo, porque <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> está serializando tipos más simples (en este caso java.lang.String).</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readExternal</span><span class=\"hljs-params\">(ObjectInput in)</span> <span class=\"hljs-keyword\">throws</span> IOException, ClassNotFoundException </span>{\n  emails.clear();\n  phones.clear();\n  <span class=\"hljs-keyword\">int</span> nEmails = in.readInt();\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nEmails; i++) {\n    emails.add(in.readUTF());\n  }\n  <span class=\"hljs-keyword\">int</span> nPhones = in.readInt();\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nPhones; i++) {\n    phones.add(in.readUTF());\n  }\n}\n\n<span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeExternal</span><span class=\"hljs-params\">(ObjectOutput out)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n  out.writeInt(emails.size());\n  <span class=\"hljs-keyword\">for</span> (String e : emails) {\n    out.writeUTF(e);\n  }\n  out.writeInt(phones.size());\n  <span class=\"hljs-keyword\">for</span> (String p : phones) {\n    out.writeUTF(p);\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>204 milisegundos en serializar</p>\n</li>\n<li>\n<p>92 milisegundos en deserializar</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Hemos ganado rendimiento a costa de escribir un poco más de código.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_analizando_los_resultados\">Analizando los resultados</h3>\n<div class=\"paragraph\">\n<p>Por el hecho de utilizar un interfaz u otro, no ganamos rendimiento.</p>\n</div>\n<div class=\"paragraph\">\n<p>Ganamos rendimiento porque el interfaz <a href=\"#_externalizable\">Externalizable</a> nos \"obliga\" a implementar parte de la serialización y quitamos esta carga a <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Aunque como hemos visto en <a href=\"#_utilizando_el_interfaz_externalizable_mal\">Utilizando el interfaz Externalizable (mal)</a>, si no tenemos cuidado, conseguiremos una mejora poco significativa a costa de complicar nuestro código fuente.</p>\n</div>\n<div class=\"paragraph\">\n<p>A continuación os dejo los enlaces a:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"http://carlosvin.github.io/serializations-performance-java/classes/com.github.carlosvin.contacts.SerializationTest.html\">Resultados de los tests</a>.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/carlosvin/serializations-performance-java/\">Código en github</a>.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>","slug":"serialization-java-serializable-externalizable"}