{"sectids":"","toc-placement":"auto","notitle":"","stylesheet":"","webfonts":"","prewrap":"","attribute-undefined":"drop-line","attribute-missing":"skip","iconfont-remote":"","caution-caption":"Caution","important-caption":"Important","note-caption":"Note","tip-caption":"Tip","warning-caption":"Warning","example-caption":"Example","figure-caption":"Figure","table-caption":"Table","toc-title":"Table of Contents","section-refsig":"Section","part-refsig":"Part","chapter-refsig":"Chapter","appendix-refsig":"Appendix","appendix-caption":"Appendix","untitled-label":"Untitled","version-label":"Version","last-update-label":"Last updated","docfile":"react-typescript-parcel.es.adoc","docdir":"","docfilesuffix":".adoc","docname":"react-typescript-parcel.es","embedded":"","asciidoctor":"","asciidoctor-version":"2.0.10","safe-mode-name":"secure","safe-mode-secure":"","safe-mode-level":20,"max-include-depth":64,"user-home":".","backend":"html5","max-attribute-value-size":4096,"linkcss":"","doctype":"article","htmlsyntax":"html","backend-html5-doctype-article":"","doctype-article":"","backend-html5":"","outfilesuffix":".html","filetype":"html","filetype-html":"","basebackend-html-doctype-article":"","basebackend-html":"","basebackend":"html","stylesdir":".","iconsdir":"./images/icons","localdate":"2020-04-19","localyear":"2020","localtime":"11:48:22 +0200","localdatetime":"2020-04-19 11:48:22 +0200","docdate":"2020-04-19","docyear":"2020","doctime":"10:46:31 +0200","docdatetime":"2020-04-19 10:46:31 +0200","doctitle":"SPA: React + Typescript + Parcel","date":"2019/01/01 13:30:02","modified":"2019/07/10 13:30:02","tags":"React, Typescript, Parcel, SPA","lang":"es","link":"https://github.com/carlosvin/react-typescript-parcel-template","description":"proyecto de ejemplo en el que se muestra cómo crear una aplicación web de página única (SPA) con React, Typescript y Parcel.","toc":"","parcel":"https://parceljs.org[Parcel,window=_blank]","react":"https://reactjs.org[React,window=_blank]","typescript":"https://www.typescriptlang.org/[Typescript,window=_blank]","webpack":"https://webpack.js.org/[Webpack,window=_blank]","cra":"https://facebook.github.io/create-react-app/[create-react-app,window=_blank]","authorcount":0,"title":"SPA: React + Typescript + Parcel","summary":"proyecto de ejemplo en el que se muestra cómo crear una aplicación web de página única (SPA) con React, Typescript y Parcel.","html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_leer_antes_parcel_no_es_tan_maduro_como_webpack\">Leer antes: Parcel no es tan maduro como Webpack</a></li>\n<li><a href=\"#_inicio_rápido\">Inicio Rápido</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_servidor_de_desarrollo\">Servidor de Desarrollo</a></li>\n<li><a href=\"#_generar_un_paquete_listo_para_producción\">Generar un paquete listo para producción</a></li>\n</ul>\n</li>\n<li><a href=\"#_creación_del_proyecto_paso_a_paso\">Creación del proyecto paso a paso</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_añadir_dependencias\">Añadir dependencias</a></li>\n<li><a href=\"#_código_fuente_de_la_aplicación\">Código fuente de la aplicación</a></li>\n<li><a href=\"#_comandos_para_construir_el_proyecto\">Comandos para construir el proyecto</a></li>\n<li><a href=\"#_configurar_typescript_opcional\">Configurar Typescript (opcional)</a></li>\n</ul>\n</li>\n<li><a href=\"#_código_fuente_completo\">Código fuente completo</a></li>\n</ul>\n</div>\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Estaba a punto de empezar otro proyecto personal para crear una aplicación web de página única (<a href=\"https://es.wikipedia.org/wiki/Single-page_application\">SPA - Single Page App</a>) en la que gestionar mi blog de viaje.</p>\n</div>\n<div class=\"paragraph\">\n<p>Tenía claras las tecnologías a utilizar, porque últimamente he trabajado bastante con <a href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener\">React</a> y <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener\">Typescript</a> y me encuentro muy cómodo con esta pareja de tecnologías. Normalmente uso <a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"noopener\">Webpack</a> como empaquetador, pero hace algún tiempo había probado <a href=\"https://parceljs.org\" target=\"_blank\" rel=\"noopener\">Parcel</a> y me encantó lo simple y rápido que era crear un proyecto desde cero utilizando <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener\">Typescript</a> y <a href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener\">React</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>He decidido crear un proyecto base, para poder reutilizarlo la próxima vez que quiera crear una <a href=\"https://es.wikipedia.org/wiki/Single-page_application\">SPA</a> con mis tecnologías frontend favoritas, al menos hasta ahora. De esta forma, la próxima vez que quiera empezar un proyecto nuevo solamente tengo que:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/carlosvin/react-typescript-parcel-template.git</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>O simplemente descargar el <a href=\"https://github.com/carlosvin/react-typescript-parcel-template/archive/1.0.zip\">archivo ZIP con el proyecto</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_leer_antes_parcel_no_es_tan_maduro_como_webpack\">Leer antes: Parcel no es tan maduro como Webpack</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Si quieres crear una aplicación React lista para producción, utiliza <a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"noopener\">Webpack</a> o mejor aún utiliza <a href=\"https://facebook.github.io/create-react-app/\" target=\"_blank\" rel=\"noopener\">create-react-app</a> que viene con todo lo que necesitas para crear una <a href=\"https://developers.google.com/web/progressive-web-apps/\">PWA</a> con React y Typescript, aquí puedes encontrar un ejemplo de una applicación que estoy desarrollando: <a href=\"https://github.com/carlosvin/budget-tracker\" class=\"bare\">https://github.com/carlosvin/budget-tracker</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Parcel esta en desarrollo y para mí todavía hay problemas por los que no lo considero para proyectos serios. Una de las razones es que el soporte para Typescript deja bastante que desear, por ejemplo mira este <a href=\"https://github.com/parcel-bundler/parcel/issues/1378\">problema en github #1378</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Creo que sigue siendo un proyecto prometedor, por la simplicidad y rapided que trae al mundo de los empaquetadores para Javascript, pero de momento no está listo para producción, al menos para aplicaciones desarrolladas con React y Typescript.</p>\n</div>\n<div class=\"paragraph\">\n<p>Volveré a probarlo cuando Parcel 2 esté listo: <a href=\"https://github.com/parcel-bundler/parcel/projects/5\">Estado actual de Parcel 2</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_inicio_rápido\">Inicio Rápido</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_servidor_de_desarrollo\">Servidor de Desarrollo</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/carlosvin/react-typescript-parcel-template.git\n<span class=\"hljs-built_in\">cd</span> react-typescript-parcel-template\nyarn install\nyarn start</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>El último comando <code>yarn start</code>:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Arrancará un servidor de desarrollo en <code>http://localhost:1234</code> con <a href=\"https://en.parceljs.org/hmr.html\">reemplazo de módulos en caliente</a>.</p>\n</li>\n<li>\n<p>Construirá automáticamente el proyecto cada vez que guardemos los cambios.</p>\n</li>\n</ul>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Tip</div>\n</td>\n<td class=\"content\">\nCada vez que guardes tus cambios, verás el resultado en <code><a href=\"http://localhost:1234+\" class=\"bare\">http://localhost:1234+</a></code> sin tener que refrescar la página.\n</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_generar_un_paquete_listo_para_producción\">Generar un paquete listo para producción</h3>\n<div class=\"paragraph\">\n<p>Simplemente ejecuta <code>yarn build</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Las <a href=\"https://en.parceljs.org/production.html#optimisations\">optimizaciones que Parcel aplica por defecto</a> serán aplicadas a los archivos generados, los cuales son guardados en la carpeta <code>dist</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Dentro de la carpeta <code>dist</code> hay un informe sobre el tamaño de los archivos generados y el tamaño de las dependencias: <code>dist/report.html</code>, siempre está bien conocer cuán pesada es tu aplicación.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_creación_del_proyecto_paso_a_paso\">Creación del proyecto paso a paso</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Si simplemente quieres utilizar el proyecto puedes saltarte esta sección, aquí voy a describir paso a paso lo que hice para crear este proyecto base.</p>\n</div>\n<div class=\"paragraph\">\n<p>Comenzamos creando el archivo <code>package.json</code> con el comando <a href=\"https://yarnpkg.com/lang/en/docs/cli/init/\">yarn init</a>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">yarn init</code></pre>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_añadir_dependencias\">Añadir dependencias</h3>\n<div class=\"paragraph\">\n<p>Dependencias <a href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener\">React</a>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">yarn add @types/react @types/react-dom react react-dom</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>El comando anterior modifica el archivo <code>package.json</code> en la sección <code>dependencies</code> e instalará esos paquetes en la carpeta <code>node_modules</code> para que posteriormente puedan ser utilizados por nuestro proyecto.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-json\" data-lang=\"json\">{\n  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"project_name\"</span>,\n  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,\n  <span class=\"hljs-attr\">\"main\"</span>: <span class=\"hljs-string\">\"index.js\"</span>,\n  <span class=\"hljs-attr\">\"license\"</span>: <span class=\"hljs-string\">\"MIT\"</span>,\n  <span class=\"hljs-attr\">\"dependencies\"</span>: {\n    <span class=\"hljs-attr\">\"@types/react\"</span>: <span class=\"hljs-string\">\"^16.7.18\"</span>,\n    <span class=\"hljs-attr\">\"@types/react-dom\"</span>: <span class=\"hljs-string\">\"^16.0.11\"</span>,\n    <span class=\"hljs-attr\">\"react\"</span>: <span class=\"hljs-string\">\"^16.7.0\"</span>,\n    <span class=\"hljs-attr\">\"react-dom\"</span>: <span class=\"hljs-string\">\"^16.7.0\"</span>\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>También necesitamos el compilador de <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener\">Typescript</a> como dependencia de desarrollo, esto significa que cuando empaquetemos nuestra aplicación para producción, estas dependencias de desarrollo no serán incluidas.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">yarn add --dev typescript</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>También necesitamos como dependencia de desarrollo nuestro empaquetador <a href=\"https://parceljs.org/\">Parcel</a>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">yarn add --dev parcel-bundler</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>He añadido una dependencia opcional, se trata del plugin para Parcel, para generar el informe del contenido del paquete. Es muy útil para detectar casos en los que añadimos una dependencia para, por ejemplo, comparar vectores de números, pero resulta que esta librería ocupa más que nuestra propia aplicación. En este caso hay que considerar otras librerías que hagan lo mismo y sean más ligeras.</p>\n</div>\n<div class=\"paragraph\">\n<p>Este plugin es la versión para Parcel de <a href=\"https://github.com/webpack-contrib/webpack-bundle-analyzer\">webpack-bundle-analyzer</a>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">yarn add --dev parcel-plugin-bundle-visualiser</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_código_fuente_de_la_aplicación\">Código fuente de la aplicación</h3>\n<div class=\"paragraph\">\n<p>Primero creamos el punto de entrada de aplicación básica React en el archivo <code>src/index.tsx</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-tsx\" data-lang=\"tsx\">import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nclass App extends React.PureComponent {\n    render() {\n        return &lt;h1&gt;Hello world!&lt;/h1&gt;;\n    }\n}\n\nReactDOM.render(\n    &lt;App /&gt;,\n    document.getElementById(\"app\")\n);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Parcel puede utilizar un archivo <code>index.html</code> como punto de entrada a la aplicación y descubrir qué otros archivos tiene que procesar. Vamos a crear <code>src/index.html</code> como sigue:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-html\" data-lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./index.tsx\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Necesitamos la etiqueta <code>div</code> para que React pueda inyectar el DOM virtual que utiliza para trabajar. La declaración <code>script</code> es utilizada por Parcel para saber que tiene que empezar construyendo el archivo <code>index.tsx</code>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_comandos_para_construir_el_proyecto\">Comandos para construir el proyecto</h3>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>build</code>: Descrito en la sección <em>\"Generar un paquete listo para producción\"</em>.</p>\n</li>\n<li>\n<p><code>start</code>: Descrito en <em>\"Servidor de desarrollo\"</em>.</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-json\" data-lang=\"json\">    <span class=\"hljs-string\">\"scripts\"</span>: {\n        <span class=\"hljs-attr\">\"start\"</span>: <span class=\"hljs-string\">\"parcel src/index.html\"</span>,\n        <span class=\"hljs-attr\">\"build\"</span>: <span class=\"hljs-string\">\"parcel build src/index.html\"</span>\n    }</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Ahora es realmente fácil:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Arrancar el servidor de desarrollo: <code>yarn start</code>.</p>\n</li>\n<li>\n<p>Generar un paquete para producción: <code>yarn build</code>.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Hay otra forma descrita en la <a href=\"https://en.parceljs.org/getting_started.html\">documentación de Parcel</a> que se basa en instalar Parcel de forma global en tu sistema.</p>\n</div>\n<div class=\"paragraph\">\n<p>Yo he optado por añadir Parcel como parte del proyecto, de esta forma el proyecto es menos dependiente del sistema y puedes utilizar diferentes versiones de Parcel en distintos proyectos.</p>\n</div>\n<div class=\"paragraph\">\n<p>No instalar Parcel globalmente en tu sistema tiene un pequeño inconveniente, no puedes ejecutar directamente desde consola <code>parcel index.html</code>, porque Parcel está instalado en la carpeta <code>node_modules</code> de tu proyecto.</p>\n</div>\n<div class=\"paragraph\">\n<p>Pero digo que es un pequeño inconveniente, porque hay una forma de ejecutar aplicaciones instaladas en <code>node_modules</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">npx parcel index.html</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Yo normalemente prefiero definir los comandos de construcción en el archivo <code>package.json</code>, porque así queda documentado en el código la forma en que debemos construir el proyecto.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_configurar_typescript_opcional\">Configurar Typescript (opcional)</h3>\n<div class=\"listingblock\">\n<div class=\"title\">Crear un archivo <code>tsconfig.json</code></div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-json\" data-lang=\"json\">{\n    <span class=\"hljs-attr\">\"compilerOptions\"</span>: {\n        <span class=\"hljs-attr\">\"outDir\"</span>: <span class=\"hljs-string\">\"./dist/\"</span>,\n        <span class=\"hljs-attr\">\"sourceMap\"</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">\"noImplicitAny\"</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">\"module\"</span>: <span class=\"hljs-string\">\"commonjs\"</span>,\n        <span class=\"hljs-attr\">\"target\"</span>: <span class=\"hljs-string\">\"es5\"</span>,\n        <span class=\"hljs-attr\">\"jsx\"</span>: <span class=\"hljs-string\">\"react\"</span>\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Con esta configuración indicamos al compilador de Typescript lo siguiente:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Los archivos se generan en la carpeta <code>dist</code>.</p>\n</li>\n<li>\n<p>Vamos a generar <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Use_a_source_map\">source maps</a>, así podemos depurar directamente sobre los archivos typescript.</p>\n</li>\n<li>\n<p>No permitir usar el tipo <code>any</code>, por ejemplo, la siguiente declaración no está permitida: <code>const elements: any;</code></p>\n</li>\n<li>\n<p>El código utilizará <a href=\"https://requirejs.org/docs/commonjs.html\">CommonJs</a> como sistema de módulos.</p>\n</li>\n<li>\n<p>El código generado seguirá el estándar <a href=\"https://es.wikipedia.org/wiki/ECMAScript\">ECMAScript</a>.</p>\n</li>\n<li>\n<p>Soportar la sintáxis <a href=\"https://www.typescriptlang.org/docs/handbook/jsx.html\">JSX</a> en los archivos <code>.tsx</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_código_fuente_completo\">Código fuente completo</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>El ejemplo completo se encuentra en: <a href=\"https://github.com/carlosvin/react-typescript-parcel-template\" class=\"bare\">https://github.com/carlosvin/react-typescript-parcel-template</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>También puedes descargarlo directamente en los siguientes formatos:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://github.com/carlosvin/react-typescript-parcel-template/archive/1.0.zip\">zip</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/carlosvin/react-typescript-parcel-template/archive/1.0.tar.gz\">tar.gz</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","slug":"react-typescript-parcel"}