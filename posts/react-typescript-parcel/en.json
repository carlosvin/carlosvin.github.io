{"entry":{"title":"Create SPA: React + Typescript + Parcel","lang":"en","summary":"Example project how to create a Single Page Application with React, Typescript and Parcel.","slug":"react-typescript-parcel","keywords":["React","Typescript","Parcel","SPA"],"filename":"react-typescript-parcel.en.adoc","modified":1562758202000,"created":1546345802000,"author":"Carlos Martin Sanchez","previewimage":"icons/icon-192x192.png","otherLangs":["es"],"path":"/posts/react-typescript-parcel/en","url":"https://carlosvin.github.io/posts/react-typescript-parcel/en"},"html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_read_this_before_parcel_is_not_as_mature_as_webpack\">Read this before: Parcel is not as mature as Webpack</a></li>\n<li><a href=\"#_quick_start\">Quick start</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_development_server\">Development server</a></li>\n<li><a href=\"#_build_production_bundle\">Build production bundle</a></li>\n</ul>\n</li>\n<li><a href=\"#_step_by_step_project_creation\">Step by step project creation</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_add_required_dependencies\">Add required dependencies</a></li>\n<li><a href=\"#_create_application_source_code\">Create application source code</a></li>\n<li><a href=\"#_add_commands_build_the_project\">Add commands build the project</a></li>\n<li><a href=\"#_configure_typescript_optional\">Configure Typescript (optional)</a></li>\n</ul>\n</li>\n<li><a href=\"#_full_source_code\">Full source code</a></li>\n</ul>\n</div>\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I was about to start yet another personal project, it consists of a SPA (Single Page Application) for a travel journal.</p>\n</div>\n<div class=\"paragraph\">\n<p>Some time ago I tried <a href=\"https://parceljs.org\" target=\"_blank\" rel=\"noopener\">Parcel</a>, I really loved how simple it was to create a simple project from scratch, using <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener\">Typescript</a> + <a href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener\">React</a> stack. I’ve decided to create this template or base project, so next time I want to create a new SPA with my favorite frontend stack, I will only have to:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/carlosvin/react-typescript-parcel-template.git</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_read_this_before_parcel_is_not_as_mature_as_webpack\">Read this before: Parcel is not as mature as Webpack</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you want to create a production ready React application, use <a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"noopener\">Webpack</a> or better <a href=\"https://facebook.github.io/create-react-app/\" target=\"_blank\" rel=\"noopener\">create-react-app</a> which bring everything you need to develop a <a href=\"https://developers.google.com/web/progressive-web-apps/\">PWA</a> with React and Typescript. Following you can find an example of an app I am developing using <a href=\"https://facebook.github.io/create-react-app/\" target=\"_blank\" rel=\"noopener\">create-react-app</a>: <a href=\"https://github.com/carlosvin/budget-tracker\" class=\"bare\">https://github.com/carlosvin/budget-tracker</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Parcel is a package bundler under development, not as mature as webpack. There are no go errors for me, at least in regards to Typescript support, see this <a href=\"https://github.com/parcel-bundler/parcel/issues/1378\">issue in github #1378</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>I still think it is a promising project, bringing more simplicity and speed to JS bundlers world, I will give it a try again for serious projects when Parcel 2 is ready, check <a href=\"https://github.com/parcel-bundler/parcel/projects/5\">Parcel 2 development status</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_quick_start\">Quick start</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_development_server\">Development server</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/carlosvin/react-typescript-parcel-template.git\n<span class=\"hljs-built_in\">cd</span> react-typescript-parcel-template\nyarn install\nyarn start</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Last <code>yarn start</code> command will:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>start a development server at <a href=\"http://localhost:1234\" class=\"bare\">http://localhost:1234</a> with <a href=\"https://en.parceljs.org/hmr.html\">hot module replacement</a></p>\n</li>\n<li>\n<p>build automatically development javascript files with source maps</p>\n</li>\n</ul>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Tip</div>\n</td>\n<td class=\"content\">\nEach time you save a file, you will see automatically the result at <code><a href=\"http://localhost:1234\" class=\"bare\">http://localhost:1234</a></code> without refreshing the page\n</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_build_production_bundle\">Build production bundle</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">yarn build</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://en.parceljs.org/production.html#optimisations\">Parcel’s default optimizations</a> will be applied to generated files.</p>\n</div>\n<div class=\"paragraph\">\n<p>Files are saved at <code>dist</code> folder. Inside <code>dist</code> folder there is also a file with information about bundle content sizes: <code>dist/report.html</code>.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_step_by_step_project_creation\">Step by step project creation</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In this section I will describe how I created this project.</p>\n</div>\n<div class=\"paragraph\">\n<p>Firstly, create <code>package.json</code> with <a href=\"https://yarnpkg.com/lang/en/docs/cli/init/\">yarn init</a> command.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">yarn init</code></pre>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_add_required_dependencies\">Add required dependencies</h3>\n<div class=\"paragraph\">\n<p>Add <a href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener\">React</a> dependencies.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">yarn add @types/react @types/react-dom react react-dom</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Previous command modifies <code>package.json</code> file adding <code>dependencies</code> section and will also install React packages in <code>node_modules</code> folder.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-json\" data-lang=\"json\">{\n  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"project_name\"</span>,\n  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,\n  <span class=\"hljs-attr\">\"main\"</span>: <span class=\"hljs-string\">\"index.js\"</span>,\n  <span class=\"hljs-attr\">\"license\"</span>: <span class=\"hljs-string\">\"MIT\"</span>,\n  <span class=\"hljs-attr\">\"dependencies\"</span>: {\n    <span class=\"hljs-attr\">\"@types/react\"</span>: <span class=\"hljs-string\">\"^16.7.18\"</span>,\n    <span class=\"hljs-attr\">\"@types/react-dom\"</span>: <span class=\"hljs-string\">\"^16.0.11\"</span>,\n    <span class=\"hljs-attr\">\"react\"</span>: <span class=\"hljs-string\">\"^16.7.0\"</span>,\n    <span class=\"hljs-attr\">\"react-dom\"</span>: <span class=\"hljs-string\">\"^16.7.0\"</span>\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Add <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener\">Typescript</a> compiler as development dependency.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">yarn add --dev typescript</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>We also need <a href=\"https://parceljs.org/\">Parcel bundler</a>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">yarn add --dev parcel-bundler</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>I’ve added a non-required dependency, it is a plugin to generate a report of generated bundle contents (the parcel version of <a href=\"https://github.com/webpack-contrib/webpack-bundle-analyzer\">webpack-bundle-analyzer</a>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">yarn add --dev parcel-plugin-bundle-visualiser</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_create_application_source_code\">Create application source code</h3>\n<div class=\"paragraph\">\n<p>First we create the React application in <code>src/index.tsx</code> file.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-jsx\" data-lang=\"jsx\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-dom\"</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">PureComponent</span> </span>{\n    render() {\n        <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello world!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>;\n    }\n}\n\nReactDOM.render(\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span></span>,\n    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"app\"</span>)\n);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Parcel can take <code>index.html</code> file as entry file and it figures out how to build the application, so let’s create <code>src/index.html</code> as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-html\" data-lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./index.tsx\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>We need <code>div</code> tag for React to inject the DOM elements. The <code>script</code> declaration is used by Parcel to find entry point to build.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_add_commands_build_the_project\">Add commands build the project</h3>\n<div class=\"paragraph\">\n<p>I’ve added the commands:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>build</code>: Check <em>\"Build production bundle\"</em> section.</p>\n</li>\n<li>\n<p><code>start</code>: Check <em>\"Development server\"</em> section.</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-json\" data-lang=\"json\">    <span class=\"hljs-string\">\"scripts\"</span>: {\n        <span class=\"hljs-attr\">\"start\"</span>: <span class=\"hljs-string\">\"parcel src/index.html\"</span>,\n        <span class=\"hljs-attr\">\"build\"</span>: <span class=\"hljs-string\">\"parcel build src/index.html\"</span>\n    }</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Then to it is really easy to:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>run development server: <code>yarn start</code></p>\n</li>\n<li>\n<p>generate a production bundle: <code>yarn build</code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>There is another approach described in <a href=\"https://en.parceljs.org/getting_started.html\">Parcel documentation</a> that consists of installing Parcel globally.</p>\n</div>\n<div class=\"paragraph\">\n<p>I’ve opted for more isolated approach that affects only project you are working on, you just install Parcel as <code>devDependency</code>. There is a tiny drawback, you can’t just run <code>parcel index.html</code>, because it is not installed in your system, but in <code>node_modules</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>There is a simple way to run any binary installed in <code>node_modules</code>, you can just run <code>npx parcel index.html</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>I like more to define build steps in <code>package.json</code> file, so you can have well defined commands more suited to build your project. You can also use these commands as documentation how to build your project.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_configure_typescript_optional\">Configure Typescript (optional)</h3>\n<div class=\"listingblock\">\n<div class=\"title\">Create a <code>tsconfig.json</code> file</div>\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-json\" data-lang=\"json\">{\n    <span class=\"hljs-attr\">\"compilerOptions\"</span>: {\n        <span class=\"hljs-attr\">\"outDir\"</span>: <span class=\"hljs-string\">\"./dist/\"</span>,\n        <span class=\"hljs-attr\">\"sourceMap\"</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">\"noImplicitAny\"</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">\"module\"</span>: <span class=\"hljs-string\">\"commonjs\"</span>,\n        <span class=\"hljs-attr\">\"target\"</span>: <span class=\"hljs-string\">\"es5\"</span>,\n        <span class=\"hljs-attr\">\"jsx\"</span>: <span class=\"hljs-string\">\"react\"</span>\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>With this configuration, Typescript compiler will:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Generate files in <code>dist</code> folder.</p>\n</li>\n<li>\n<p>Generate <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Use_a_source_map\">source maps</a>.</p>\n</li>\n<li>\n<p>Will not allow to declare <code>any</code> type, for example following declaration is not allowed: <code>const elements: any;</code></p>\n</li>\n<li>\n<p>Generated module code will be <a href=\"https://requirejs.org/docs/commonjs.html\">CommonJs</a>.</p>\n</li>\n<li>\n<p>Generated code will be <a href=\"https://es.wikipedia.org/wiki/ECMAScript\">ECMAScript</a> 5 compliant.</p>\n</li>\n<li>\n<p>Support <a href=\"https://www.typescriptlang.org/docs/handbook/jsx.html\">JSX</a> in <code>.tsx</code> files.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_full_source_code\">Full source code</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You can find full example at: <a href=\"https://github.com/carlosvin/react-typescript-parcel-template\" class=\"bare\">https://github.com/carlosvin/react-typescript-parcel-template</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Or you can directly download the source code:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://github.com/carlosvin/react-typescript-parcel-template/archive/1.0.zip\">zip</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/carlosvin/react-typescript-parcel-template/archive/1.0.tar.gz\">tar.gz</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>"}