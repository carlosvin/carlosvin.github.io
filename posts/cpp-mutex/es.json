{"entry":{"title":"Mutex C++","lang":"es","summary":"Un capa que facilita el uso de los mutex de pthread en C++98 y una mejor solución en C++11","slug":"cpp-mutex","keywords":["C++","pthread","Mutex"],"filename":"cpp-mutex.es.adoc","modified":"2014-04-24 17:50:00","date":"2014-04-24 17:50:00","author":"Carlos Martin Sanchez","previewimage":"icons/icon-192x192.png","otherLangs":["en"]},"html":"<div class=\"paragraph\">\n<p>En <a href=\"https://en.wikipedia.org/wiki/C++11\" target=\"_blank\" rel=\"noopener\">C++11</a> se han introducido muchas mejoras que nos ayudan a desarrollar sistemas multi-hilo. Voy a centrarme en los <a href=\"https://en.wikipedia.org/wiki/Mutex\" target=\"_blank\" rel=\"noopener\">Mutex</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>En las versiones anteriores a <a href=\"https://en.wikipedia.org/wiki/C++11\" target=\"_blank\" rel=\"noopener\">C++11</a> una forma de obtener un <a href=\"https://en.wikipedia.org/wiki/Mutex\" target=\"_blank\" rel=\"noopener\">Mutex</a> es el que nos proporciona la librería <a href=\"\">pthread</a>, pero para utilizarlo debíabos inicializarlo y destruirlo al estilo C, en definitiva, tienes que hacer algo más que lock/unlock cada vez que trabajas con un mutex.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://en.wikipedia.org/wiki/C++11\" target=\"_blank\" rel=\"noopener\">C++11</a> nos proporciona una <a href=\"https://en.cppreference.com/w/cpp/thread/mutex\" target=\"_blank\" rel=\"noopener\">Clase Mutex</a>, que nos abstrae de cosas que no sean lock/unclock.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre tabindex=\"0\" class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;mutex&gt;</span></span>\n\n<span class=\"hljs-built_in\">std</span>::mutex mtx;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">do_something</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i)</span> </span>{\n  mtx.lock();\n  <span class=\"hljs-comment\">// critical section</span>\n  mtx.unlock();\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>En <a href=\"https://en.wikipedia.org/wiki/C++11\" target=\"_blank\" rel=\"noopener\">C++11</a> también puedes utilizar el <a href=\"https://en.wikipedia.org/wiki/Mutex\" target=\"_blank\" rel=\"noopener\">Mutex</a> con una <a href=\"https://en.cppreference.com/w/cpp/thread/lock_guard\" target=\"_blank\" rel=\"noopener\">guarda genérica</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Si sigues trabajando con <a href=\"https://clang.llvm.org/cxx_status.html\" target=\"_blank\" rel=\"noopener\">versiones del compilador anteriores a C++11</a>, hace tiempo me hice un wrapper que te ayuda a abstraerte del mutex de pthread, lo dejo aquí abajo por si a alguien le resulta útil: [gist].</p>\n</div>"}