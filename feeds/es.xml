<?xml version="1.0" encoding="UTF-8" ?>
        <feed xmlns="http://www.w3.org/2005/Atom">
            <title>Carlos dice bla bla</title>
            <subtitle>Qué está pasando por mi cabeza y alrededores</subtitle>
            <link rel="self" href="https://carlosvin.github.io/feeds/es.xml" />
            <link href="https://carlosvin.github.io" />
            <id>https://carlosvin.github.io/</id>
            <updated>2021-01-06T00:00:00.000Z</updated>
            <entry>
            <title>Android Studio Portable Download</title>
            <link href="https://carlosvin.github.io/posts/android-studio-portable-download/es" />
            <link 
				rel="alternate"
				hreflang="en"
				href="https://carlosvin.github.io/posts/android-studio-portable-download/en"/>   
            <id>https://carlosvin.github.io/posts/android-studio-portable-download/es</id>
            <updated>2013-10-20T11:00:00.000Z</updated>
            <summary>Enlace para descargar la última versión portable de Android Studio</summary>
            <content type="html"><![CDATA[<div class="paragraph">
<p>Para quien quiera utilizar <a href="https://developer.android.com/studio">Android Studio</a> sin instalarlo, como un programa "portable", aquí os dejo el enlace a la <a href="https://developer.android.com/studio/preview/">última versión de Android Studio</a>.</p>
</div>]]></content>
            <category term="Android"/>
    <category term="Java"/>
    <category term="Software"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Python's asyncio: What, How, When</title>
            <link href="https://carlosvin.github.io/posts/async-what-how-when/en" />
               
            <id>https://carlosvin.github.io/posts/async-what-how-when/en</id>
            <updated>2014-04-20T11:35:00.000Z</updated>
            <summary>Jesse Jiryu Davis talk about asyncio Python library</summary>
            <content type="html"><![CDATA[<div class="paragraph">
<p>I&#8217;ve been listening a <a href="https://emptysqua.re/blog/">A. Jesse Jiryu Davis</a> talk about the library <a href="https://www.python.org">Python</a>'s <a href="https://docs.python.org/3.4/library/asyncio.html">asycnio</a> library.</p>
</div>
<div class="paragraph">
<p><a href="https://docs.python.org/3.4/library/asyncio.html">Asycnio</a> is a library added to <a href="https://www.python.org">Python</a> 3.4. that provides infrastructure for writing single-threaded concurrent code which let us to save memory.</p>
</div>
<div class="videoblock">
<div class="content">
<iframe src="https://www.youtube.com/embed/9WV7juNmyE8?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>]]></content>
            <category term="Python"/>
    <category term="Asyncio"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Chuletas para desarrolladores</title>
            <link href="https://carlosvin.github.io/posts/cheat-sheets-for-developers/es" />
            <link 
				rel="alternate"
				hreflang="en"
				href="https://carlosvin.github.io/posts/cheat-sheets-for-developers/en"/>   
            <id>https://carlosvin.github.io/posts/cheat-sheets-for-developers/es</id>
            <updated>2019-06-13T00:00:00.000Z</updated>
            <summary>Chuletas, Referencias, Guías rápidas de software, ciencias y lenguajes de programación.</summary>
            <content type="html"><![CDATA[<div class="paragraph">
<p>No se cómo no conocía este sitio, con la cabeza que tengo y lo bien que me habría venido. Se trata de <a href="http://www.cheat-sheets.org/" target="_blank" rel="noopener">cheat-sheets.org</a>, agrupa tarjetas, guías de referencia rápidas, chuletas, etc. de muchísimos lenguajes de programación y software.</p>
</div>]]></content>
            <category term="Tips and Tricks"/>
    <category term="Cheat Sheet"/>
    <category term="Guides"/>
    <category term="Learning"/>
    <category term="Quick References"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Elegir tecnologías para mi nuevo proyeco C++</title>
            <link href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/es" />
            <link 
				rel="alternate"
				hreflang="en"
				href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/en"/>   
            <id>https://carlosvin.github.io/posts/choosing-modern-cpp-stack/es</id>
            <updated>2020-06-13T00:00:00.000Z</updated>
            <summary>Las razones por las que he elegido Meson+Doctest para crear un proyecto en C++. También contiene un ejemplo fácil de ejecutar y de reutilizar como template.</summary>
            <content type="html"><![CDATA[<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_elegir_un_sistema_de_construcción_meson">Elegir un Sistema de Construcción (Meson)</a>
<ul class="sectlevel2">
<li><a href="#_cmake_vs_meson">CMake vs Meson</a></li>
<li><a href="#_otras_comparaciones_entre_sistemas_de_construcción">Otras comparaciones entre sistemas de construcción</a></li>
</ul>
</li>
<li><a href="#_framework_the_pruebas_unitarias">Framework the Pruebas Unitarias</a>
<ul class="sectlevel2">
<li><a href="#_doctest_una_alternativa_a_catch">doctest: Una alternativa a Catch</a></li>
</ul>
</li>
<li><a href="#_ejemplo">Ejemplo</a>
<ul class="sectlevel2">
<li><a href="#_artefactos_del_proyecto">Artefactos del Proyecto</a></li>
<li><a href="#_estructura_del_proyecto_fork_project">Estructura del Proyecto (Fork project)</a></li>
</ul>
</li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Estoy empezando un pequeño proyecto en C++ y antes de nada me han surgido un par de preguntas:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>¿Cómo voy a construirlo?</p>
</li>
<li>
<p>¿Qué framework para pruebas unitarias utilizar?</p>
</li>
</ol>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
Si simplemente quieres comenzar un proyecto en C++, fácil de construir, con una librería y pruebas unitarias listas, simplemente visita el repositorio del proyecto de ejemplo <a href="https://github.com/carlosvin/uuid-cpp" class="bare">https://github.com/carlosvin/uuid-cpp</a> y sigue las <a href="https://github.com/carlosvin/uuid-cpp/blob/master/README.md" target="blank_">instrucciones en el README.md</a>.
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_elegir_un_sistema_de_construcción_meson">Elegir un Sistema de Construcción (<a href="https://mesonbuild.com/" target="_blank" rel="noopener">Meson</a>)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Ya he utilizado antes <a href="https://www.gnu.org/software/make/manual/make.html" target="_blank" rel="noopener">Make</a>, <a href="https://maven.apache.org/" target="_blank" rel="noopener">Maven</a>, <a href="https://scons.org/" target="_blank" rel="noopener">Scons</a>, <a href="https://gradle.org/" target="_blank" rel="noopener">Gradle</a> y <a href="https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html" target="_blank" rel="noopener">Autotools</a>, pero tengo algunas razones para probar algo diferente, hay algunas cosas que no me gustan:</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html" target="_blank" rel="noopener">Autotools</a></dt>
<dd>
<p>No es fácil de configurar y mantener: hay distintos ficheros de configuración y distintos pasos de configuración.</p>
</dd>
<dt class="hdlist1"><a href="https://gradle.org/" target="_blank" rel="noopener">Gradle</a></dt>
<dd>
<p>La construcción de proyectos C++ está todavía en desarrollo, los modelos y APIs están cambiando. No es muy rápido. Puedes ver un ejemplo en este artículo <a href="/posts/gradle-cpp/es">Construir un proyecto Cpp con Gradle</a>.</p>
</dd>
<dt class="hdlist1"><a href="https://www.gnu.org/software/make/manual/make.html" target="_blank" rel="noopener">Make</a></dt>
<dd>
<p>A medida que el proyecto crece los archivos de configuración se van complicando y volviendo poco manejables. La sintáxis no me parece clara (esto es una custión de gustos).</p>
</dd>
<dt class="hdlist1"><a href="https://scons.org/" target="_blank" rel="noopener">Scons</a></dt>
<dd>
<p>Es más lento y un poco más difícil de comprender que <a href="https://mesonbuild.com/" target="_blank" rel="noopener">Meson</a>.</p>
</dd>
<dt class="hdlist1"><a href="https://maven.apache.org/" target="_blank" rel="noopener">Maven</a></dt>
<dd>
<p>Es lento y puedes terminar "<em>Javatizando</em>" la estructura del proyecto.</p>
</dd>
</dl>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
He nombrado solo las cosas que no gustan, pero estos sistemas de construcción tienen otras grandes virtudes, personalmente me encantan <a href="https://gradle.org/" target="_blank" rel="noopener">Gradle</a>, <a href="https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html" target="_blank" rel="noopener">Autotools</a> y <a href="https://maven.apache.org/" target="_blank" rel="noopener">Maven</a> (solo para projectos Java).
</td>
</tr>
</table>
</div>
<div class="sect2">
<h3 id="_cmake_vs_meson"><a href="https://cmake.org/" target="_blank" rel="noopener">CMake</a> vs <a href="https://mesonbuild.com/" target="_blank" rel="noopener">Meson</a></h3>
<div class="paragraph">
<p>Después de descartar los anteriores, estoy considerando <a href="https://mesonbuild.com/" target="_blank" rel="noopener">Meson</a> y <a href="https://cmake.org/" target="_blank" rel="noopener">CMake</a>. Los dos son bastante rápidos:</p>
</div>
<div class="paragraph">
<p>Aunque <a href="https://mesonbuild.com/" target="_blank" rel="noopener">Meson</a> está hecho en <a href="https://python.org/" target="_blank" rel="noopener">Python</a>, simplemente genera projectos <a href="https://ninja-build.org/" target="_blank" rel="noopener">Ninja</a>. La primera vez tenemos que ejecutar <a href="https://mesonbuild.com/" target="_blank" rel="noopener">Meson</a> para configurar el proyecto, el resto de ejecuciones para compilar o ejecutar pruebas, realmente estaremos ejecutando directamente <a href="https://ninja-build.org/" target="_blank" rel="noopener">Ninja</a>.</p>
</div>
<div class="paragraph">
<p><a href="https://cmake.org/" target="_blank" rel="noopener">CMake</a> también puede generar proyectos <a href="https://ninja-build.org/" target="_blank" rel="noopener">Ninja</a> entre otros formatos, <a href="https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html">mira la documentación "CMake generators"</a>.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="https://cmake.org/" target="_blank" rel="noopener">CMake</a></dt>
<dd>
<p>Tiene una gran ventaja sobre <a href="https://mesonbuild.com/" target="_blank" rel="noopener">Meson</a>, es mucho más maduro y es mucho más usado, lo que significa que podrás encontrar muy fácilmente ejemplos, documentación y ayuda en Internet. No importa el tipo de proyecto que estés empezando, lo más seguro es que <a href="https://cmake.org/" target="_blank" rel="noopener">CMake</a> sea una buena elección.</p>
</dd>
<dt class="hdlist1"><a href="https://mesonbuild.com/" target="_blank" rel="noopener">Meson</a></dt>
<dd>
<p>Es un proyecto jóven comparado con <a href="https://cmake.org/" target="_blank" rel="noopener">CMake</a>, pero está creciendo rápido y ya ha sido adoptado por algunos proyectos importantes como <a href="https://www.gnome.org/" target="_blank" rel="noopener">Gnome</a>, donde han comenzado una iniciativa para <a href="https://wiki.gnome.org/Initiatives/GnomeGoals/MesonPorting">migrar desde Autotools a Meson</a>.</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p><strong>Finalmente he elegido</strong> <a href="https://mesonbuild.com/" target="_blank" rel="noopener">Meson</a> porque:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>La sintáxis es muy clara para mí, cuando leo un archivo <span class="title-ref">meson.build</span> entiendo rápidamente lo ue está pasando durante el proceso de construcción.</p>
</li>
<li>
<p>Es rápido, aunque está escrito en <a href="https://python.org/" target="_blank" rel="noopener">Python</a> utiliza <a href="https://ninja-build.org/" target="_blank" rel="noopener">Ninja</a> para construir el proyecto. La primera vez tienes que utilizar <a href="https://mesonbuild.com/" target="_blank" rel="noopener">Meson</a> para configurar el proyecto, pero para construir y probar el proyecto relmente estamos ejecutando <a href="https://ninja-build.org/" target="_blank" rel="noopener">Ninja</a>.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">Pasos para compilar y ejectuar tests</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">$ meson build . <b class="conum">(1)</b>
$ <span class="hljs-built_in">cd</span> build
$ ninja build   <b class="conum">(2)</b>
$ ninja <span class="hljs-built_in">test</span>    <b class="conum">(3)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>Primera vez, configuración del proyecto</p>
</li>
<li>
<p>Cada vez que construyes el projecto</p>
</li>
<li>
<p>Cada vez que ejecutas tests</p>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="_otras_comparaciones_entre_sistemas_de_construcción">Otras comparaciones entre sistemas de construcción</h3>
<div class="paragraph">
<p>He encontrado un par de comparaciones interesantes entre algunos de los sistemas de construcción en C++, aunque puede que no sean del todo imparciales porque han sido realizadas por <a href="https://mesonbuild.com/" target="_blank" rel="noopener">Meson</a> y <a href="https://scons.org/" target="_blank" rel="noopener">Scons</a>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://bitbucket.org/scons/scons/wiki/SconsVsOtherBuildTools">C++ build systems comparison from Scons</a>.</p>
</li>
<li>
<p><a href="https://mesonbuild.com/Simple-comparison.html">C++ build systems comparison from Meson</a>.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_framework_the_pruebas_unitarias">Framework the Pruebas Unitarias</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Anteriorment he utilizado algunas librerías del tipo <a href="https://en.wikipedia.org/wiki/XUnit" target="_blank" rel="noopener">xUnit</a> como <a href="https://github.com/unittest-cpp/unittest-cpp">UnitTest++</a>, <a href="https://cpputest.github.io/">CppUTest</a> o <a href="https://github.com/google/googletest">Google Test</a> que encaja perfectamente con <a href="https://github.com/google/googletest/tree/master/googlemock">Google Mock</a>.</p>
</div>
<div class="paragraph">
<p>Si quires una apuesta segura que cumpla tus expectativas, te recomiendo <a href="https://github.com/google/googletest">Google Test</a>.</p>
</div>
<div class="paragraph">
<p>Pero hace algún tiempo encontré un framework de pruebas con algunas características no tan comunes en librerías de pruebas C++ y que resultaba realmente fácil de utilizar, estoy hablando de <a href="https://github.com/philsquared/Catch" target="_blank" rel="noopener">Catch</a>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Es simplemente un fichero de cabeceras C++ sin dependencias adicionales, por lo que resulta realmente rápido comenzar (wget y utilizar el fichero descargado desde tus pruebas).</p>
</li>
<li>
<p>Puedes utilizar el estilo normal de pruebas unitarias o el estilo <a href="https://en.wikipedia.org/wiki/Behavior-driven_development" target="_blank" rel="noopener">BDD</a>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Si quieres saber más sobre <a href="https://github.com/philsquared/Catch" target="_blank" rel="noopener">Catch</a>, te recomiendo que directamente lo pruebes, el siguiente ejemplo, es cuestión de dos minutos <a href="https://github.com/philsquared/Catch/blob/master/docs/tutorial.md#writing-tests">simple example up and running</a>. Puedes también leer algunos artículos como <a href="https://github.com/philsquared/Catch/blob/master/docs/why-catch.md">Why do we need yet another C test framework?] o https://blog.coldflake.com/posts/Testing-C-with-a-new-Catch/[Testing C++ With A New Catch</a>.</p>
</div>
<div class="sect2">
<h3 id="_doctest_una_alternativa_a_catch"><a href="https://github.com/onqtam/doctest" target="_blank" rel="noopener">doctest</a>: Una alternativa a <a href="https://github.com/philsquared/Catch" target="_blank" rel="noopener">Catch</a></h3>
<div class="paragraph">
<p>Hay otro framework de pruebas llamado <a href="https://github.com/onqtam/doctest" target="_blank" rel="noopener">doctest</a>, con los mismos principios que <a href="https://github.com/philsquared/Catch" target="_blank" rel="noopener">Catch</a>, pero promete ser más rápido y ligero (<a href="https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md">resultados de las comparaciones de rendimiento</a>) que <a href="https://github.com/philsquared/Catch" target="_blank" rel="noopener">Catch</a>.</p>
</div>
<div class="paragraph">
<p><a href="https://github.com/onqtam/doctest" target="_blank" rel="noopener">doctest</a> fue diseñado basándose en los puntos fuertes de <a href="https://github.com/philsquared/Catch" target="_blank" rel="noopener">Catch</a>, pero hay algunas <a href="https://github.com/onqtam/doctest/blob/master/doc/markdown/faq.md#how-is-doctest-different-from-catch">diferencias</a>.</p>
</div>
<div class="paragraph">
<p>No es fácil decidirse por uno, los dos son muy parecidos, puedes comprobar las diferencias a continuación:</p>
</div>
<div class="listingblock">
<div class="title">Differencias entre la rama usando <a href="https://github.com/onqtam/doctest" target="_blank" rel="noopener">doctest</a> y la rama usando <a href="https://github.com/philsquared/Catch" target="_blank" rel="noopener">Catch</a></div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-diff" data-lang="diff"><span class="hljs-meta">@@ -1,12 +1,12 @@</span>
<span class="hljs-deletion">-#define CATCH_CONFIG_MAIN // It tells Catch to provide a main() - only do this in one cpp file</span>
<span class="hljs-addition">+#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN</span>

<span class="hljs-deletion">-#include &quot;catch.hpp&quot;</span>
<span class="hljs-addition">+#include &quot;doctest.h&quot;</span>
#include &quot;Uuid.h&quot;
#include &lt;string&gt;

constexpr int MAX_ITERS = 100;

<span class="hljs-deletion">-TEST_CASE(&quot;Uuid&quot;, &quot;[uuid]&quot;)</span>
<span class="hljs-addition">+TEST_CASE(&quot;Uuid&quot;)</span>
{
for (int i = 0; i &lt; MAX_ITERS; i++)
{
<span class="hljs-meta">@@ -26,7 +26,7 @@</span> TEST_CASE(&quot;Uuid&quot;, &quot;[uuid]&quot;)

// BDD style

<span class="hljs-deletion">-SCENARIO(&quot;UUID creation&quot;, &quot;[Uuid]&quot;)</span>
<span class="hljs-addition">+SCENARIO(&quot;UUID creation&quot;)</span>
{

GIVEN(&quot;A random UUID &quot;)</code></pre>
</div>
</div>
<div class="paragraph">
<p>Finalmente he elegido <a href="https://github.com/onqtam/doctest" target="_blank" rel="noopener">doctest</a> simplemente porque es más rápido: <a href="https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md">resultados de las comparaciones de rendimiento</a>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
He creado el proyecto de ejemplo utilizando ambos frameworks, puedes encontrarlos en diferentes ramas del repositorio: <a href="https://github.com/carlosvin/uuid-cpp/tree/doctest">rama doctest</a> or <a href="https://github.com/carlosvin/uuid-cpp/tree/catch">rama catch</a>.
</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_ejemplo">Ejemplo</h2>
<div class="sectionbody">
<div class="paragraph">
<p>He creado un ejemplo para ilustrar este artículo: <a href="https://github.com/carlosvin/uuid-cpp" class="bare">https://github.com/carlosvin/uuid-cpp</a>.</p>
</div>
<div class="paragraph">
<p>Consiste en una implementación básica de un generador pseudo-aleatorio de <a href="https://en.wikipedia.org/wiki/Universally_unique_identifier" target="_blank" rel="noopener">UUID</a>, está basado en <a href="https://www.cplusplus.com/reference/random/mt19937" target="_blank" rel="noopener">mt19937</a> que no es criptográficamente seguro.</p>
</div>
<div class="sect2">
<h3 id="_artefactos_del_proyecto">Artefactos del Proyecto</h3>
<div class="paragraph">
<p>Cuando instalemos el proyecto, <a href="https://mesonbuild.com/" target="_blank" rel="noopener">Meson</a> (<a href="https://ninja-build.org/" target="_blank" rel="noopener">Ninja</a> realmente) generará una serie de artefactos en nuestro sistema.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Librería compartida: <code>libuuid</code>.</p>
</li>
<li>
<p>Fichero de cabeceras para que los desarrolladores puedan usar la librería: <code>include/Uuid.h</code>.</p>
</li>
<li>
<p>Fichero ejecutable <code>uuidgen</code> (Generador de <a href="https://en.wikipedia.org/wiki/Universally_unique_identifier" target="_blank" rel="noopener">UUID</a>).</p>
</li>
<li>
<p>Ejecutable de las pruebas unitarias (no será instalado).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Si ejecutamos <code>ninja install</code> en Linux obtendremos los siguientes ficheros:</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">/usr/<span class="hljs-built_in">local</span>/lib/libuuid.so
/usr/<span class="hljs-built_in">local</span>/include/Uuid.h
/usr/<span class="hljs-built_in">local</span>/bin/uuidgen</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_estructura_del_proyecto_fork_project">Estructura del Proyecto (<a href="https://github.com/carlosvin/uuid-cpp">Fork project</a>)</h3>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="https://github.com/carlosvin/uuid-cpp/blob/master/meson.build">meson.build</a></dt>
<dd>
<p>Fichero principal de configuración para construir el proyecto.
Lo utilizamos para especificar las propiedades y subdirectorios del proyecto.</p>
</dd>
</dl>
</div>
<div class="listingblock">
<div class="title">meson.build</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-python" data-lang="python">project(
    <span class="hljs-string">&#x27;cpp-meson-example&#x27;</span>, <span class="hljs-comment"># project name</span>
    <span class="hljs-string">&#x27;cpp&#x27;</span>, <span class="hljs-comment"># C++ project, e.g: for C project</span>
    version : <span class="hljs-string">&#x27;1.0.0&#x27;</span>,
    license : <span class="hljs-string">&#x27;MIT&#x27;</span>,
    default_options : [<span class="hljs-string">&#x27;cpp_std=c++11&#x27;</span>]) <span class="hljs-comment"># compile for C++</span>

<span class="hljs-comment"># it will be referred from subdir projects</span>
inc = include_directories(<span class="hljs-string">&#x27;include&#x27;</span>)

<span class="hljs-comment"># meson will try to find a meson.build file inside following directories</span>
subdir(<span class="hljs-string">&#x27;include&#x27;</span>)
subdir(<span class="hljs-string">&#x27;src&#x27;</span>)
subdir(<span class="hljs-string">&#x27;test&#x27;</span>)</code></pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="https://github.com/carlosvin/uuid-cpp/blob/master/include/">include</a></dt>
<dd>
<div class="dlist">
<dl>
<dt class="hdlist1">meson.build</dt>
<dd>
<p>Archivo de configuración para construir este directorio, no hay mucho que hacer aquí, simplemente indicamos qué ficheros de cabeceras han de ser instalados</p>
</dd>
</dl>
</div>
</dd>
</dl>
</div>
<div class="listingblock">
<div class="title">include/meson.build</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-python" data-lang="python"><span class="hljs-comment"># Select header files to be installed</span>
install_headers(<span class="hljs-string">&#x27;Uuid.h&#x27;</span>)</code></pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="https://github.com/carlosvin/uuid-cpp/blob/master/include/Uuid.h">Uuid.h</a></dt>
<dd>
<p>Archivos de cabeceras, es el interfaz que expone la librería y que será incluido por los usuarios de la misma.</p>
</dd>
</dl>
</div>
<div class="listingblock">
<div class="title">include/Uuid.h</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-cpp" data-lang="cpp"><span class="hljs-keyword">namespace</span> ids {

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Uuid</span> {</span>
    <span class="hljs-keyword">private</span>:
    <span class="hljs-comment">// ...</span></code></pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="https://github.com/carlosvin/uuid-cpp/blob/master/src">src</a></dt>
<dd>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="https://github.com/carlosvin/uuid-cpp/blob/master/src/meson.build">meson.build (src)</a></dt>
<dd>
<p>Declara 2 artefactos de salida: La librería <code>libuuid</code> y el ejecutable <code>uuidgen</code>.</p>
</dd>
</dl>
</div>
</dd>
</dl>
</div>
<div class="listingblock">
<div class="title">src/meson.build</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-python" data-lang="python">libuuid = shared_library(
    <span class="hljs-string">&#x27;uuid&#x27;</span>, <b class="conum">(1)</b>
    <span class="hljs-string">&#x27;Uuid.cpp&#x27;</span>, <b class="conum">(2)</b>
    include_directories : inc, <b class="conum">(3)</b>
    install : true) <b class="conum">(4)</b>

uuidgen = executable(
    <span class="hljs-string">&#x27;uuidgen&#x27;</span>, <b class="conum">(5)</b>
    <span class="hljs-string">&#x27;main.cpp&#x27;</span>, <b class="conum">(6)</b>
    include_directories : inc, <b class="conum">(7)</b>
    link_with : libuuid, <b class="conum">(8)</b>
    install : true) <b class="conum">(9)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>library name</p>
</li>
<li>
<p>source files to be compile</p>
</li>
<li>
<p>previously declared include directories in root <code>meson.build</code></p>
</li>
<li>
<p><code>libuuid</code> will be part of project installation</p>
</li>
<li>
<p>executable name</p>
</li>
<li>
<p>source files to compile</p>
</li>
<li>
<p>previously declared include directories in root <code>meson.build</code></p>
</li>
<li>
<p>linking executable with shared previously declared shared library <code>libuuid</code></p>
</li>
<li>
<p><code>uuidgen</code> executable be part of project installation</p>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="https://github.com/carlosvin/uuid-cpp/blob/master/src/main.cpp">main.cpp</a></dt>
<dd>
<p>Código fuente del ejecutable de la aplicación: <code>uuidgen</code></p>
</dd>
</dl>
</div>
</li>
</ol>
</div>
<div class="listingblock">
<div class="title">src/main.cpp</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-cpp" data-lang="cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Uuid.h&quot;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span>

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>
</span>{
    ids::Uuid uuid;
    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; uuid.to_str() &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}</code></pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="https://github.com/carlosvin/uuid-cpp/blob/master/src/Uuid.cpp">Uuid.cpp</a></dt>
<dd>
<p>Implementación de la clase declarada en el fichero de cabeceras <code>Uuid.h</code>.</p>
</dd>
</dl>
</div>
<div class="listingblock">
<div class="title">src/Uuid.cpp</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-cpp" data-lang="cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Uuid.h&quot;</span></span>

Uuid::Uuid()
{ <span class="hljs-comment">// ...</span></code></pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="https://github.com/carlosvin/uuid-cpp/blob/master/test/">test</a></dt>
<dd>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="https://github.com/carlosvin/uuid-cpp/blob/master/test/meson.build">meson.build (test)</a></dt>
<dd>
<p>Archivo de configuración para construir y ejecutar las pruebas unitarias.</p>
</dd>
</dl>
</div>
</dd>
</dl>
</div>
<div class="listingblock">
<div class="title">test/meson.build</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-python" data-lang="python">testexe = executable(
    <span class="hljs-string">&#x27;testexe&#x27;</span>, <b class="conum">(1)</b>
    <span class="hljs-string">&#x27;uuid_test.cpp&#x27;</span>, <b class="conum">(2)</b>
    include_directories : inc, <b class="conum">(3)</b>
    link_with : libuuid) <b class="conum">(4)</b>

test(<span class="hljs-string">&#x27;Uuid test&#x27;</span>, testexe) <b class="conum">(5)</b>

test(<span class="hljs-string">&#x27;Uuid test with args and env&#x27;</span>, testexe, args : [<span class="hljs-string">&#x27;arg1&#x27;</span>, <span class="hljs-string">&#x27;arg2&#x27;</span>], env : [<span class="hljs-string">&#x27;FOO=bar&#x27;</span>]) <b class="conum">(6)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>test executable name</p>
</li>
<li>
<p>tests source files to be compiled</p>
</li>
<li>
<p>declared include directories in root <code>meson.build</code></p>
</li>
<li>
<p>link test executable with previously declared shared library <code>libuuid</code></p>
</li>
<li>
<p>test execution</p>
</li>
<li>
<p>we can specify other test execution passing arguments or environment variables</p>
<div class="dlist">
<dl>
<dt class="hdlist1">doctest.h</dt>
<dd>
<p>Librería <a href="https://github.com/onqtam/doctest" target="_blank" rel="noopener">doctest</a> en un único fichero de cabeceras. Puedes tratar de automatizar el proceso de instalación de la librería, yo por el momento la he instalado manualmente, ya que es un proceso muy sencillo:</p>
</dd>
</dl>
</div>
</li>
</ol>
</div>
<div class="listingblock">
<div class="title">Añadir <a href="https://github.com/onqtam/doctest" target="_blank" rel="noopener">doctest</a> al proyecto</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash"><span class="hljs-built_in">cd</span> <span class="hljs-built_in">test</span>
wget https://raw.githubusercontent.com/onqtam/doctest/master/doctest/doctest.h</code></pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="https://github.com/carlosvin/uuid-cpp/blob/master/test/uuid_test.cpp">uuid_test.cpp</a></dt>
<dd>
<p>Implementación de las pruebas unitarias.</p>
</dd>
</dl>
</div>
<div class="listingblock">
<div class="title">test/uuid_test.cpp</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-cpp" data-lang="cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN</span>

<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;doctest.h&quot;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Uuid.h&quot;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span>

<span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">int</span> MAX_ITERS = <span class="hljs-number">100</span>;

TEST_CASE(<span class="hljs-string">&quot;Uuid&quot;</span>)
{
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; MAX_ITERS; i++)
    {
        ids::Uuid uuid;
        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> uuid_str{uuid.to_str()};

        INFO(uuid_str);

        <span class="hljs-comment">// If assertion fails test execution is stopped</span>
        REQUIRE(uuid_str.size() == <span class="hljs-number">36</span>);

        <span class="hljs-comment">// If assertion fails test execution continues</span>
        CHECK(uuid.most &gt; <span class="hljs-number">0</span>);
        CHECK(uuid.least &gt; <span class="hljs-number">0</span>);
    }
}

<span class="hljs-comment">// BDD style</span>

SCENARIO(<span class="hljs-string">&quot;UUID creation&quot;</span>)
{

    GIVEN(<span class="hljs-string">&quot;A random UUID &quot;</span>)
    {

        ids::Uuid uuid;
        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> uuid_str{uuid.to_str()};

        REQUIRE(uuid_str.size() == <span class="hljs-number">36</span>);

        WHEN(<span class="hljs-string">&quot;get the most and least&quot;</span>)
        {
            THEN(<span class="hljs-string">&quot;should be more than 0&quot;</span>)
            {
                CHECK(uuid.most &gt; <span class="hljs-number">0</span>);
                CHECK(uuid.least &gt; <span class="hljs-number">0</span>);
            }
        }
    }
}</code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
Puedes encontrar las instrucciones para construir y ejecutar el proyecto de ejemplo en: <a href="https://github.com/carlosvin/uuid-cpp#how-to-build-the-example" class="bare">https://github.com/carlosvin/uuid-cpp#how-to-build-the-example</a>
</td>
</tr>
</table>
</div>
</div>
</div>
</div>]]></content>
            <category term="C++"/>
    <category term="Unit Testing"/>
    <category term="Build System"/>
    <category term="Build Software"/>
    <category term="Meson"/>
    <category term="Catch"/>
    <category term="doctest"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Mutex C++</title>
            <link href="https://carlosvin.github.io/posts/cpp-mutex/es" />
            <link 
				rel="alternate"
				hreflang="en"
				href="https://carlosvin.github.io/posts/cpp-mutex/en"/>   
            <id>https://carlosvin.github.io/posts/cpp-mutex/es</id>
            <updated>2014-04-24T15:50:00.000Z</updated>
            <summary>Un capa que facilita el uso de los mutex de pthread en C++98 y una mejor solución en C++11</summary>
            <content type="html"><![CDATA[<div class="paragraph">
<p>En <a href="https://en.wikipedia.org/wiki/C++11" target="_blank" rel="noopener">C++11</a> se han introducido muchas mejoras que nos ayudan a desarrollar sistemas multi-hilo. Voy a centrarme en los <a href="https://en.wikipedia.org/wiki/Mutex" target="_blank" rel="noopener">Mutex</a>.</p>
</div>
<div class="paragraph">
<p>En las versiones anteriores a <a href="https://en.wikipedia.org/wiki/C++11" target="_blank" rel="noopener">C++11</a> una forma de obtener un <a href="https://en.wikipedia.org/wiki/Mutex" target="_blank" rel="noopener">Mutex</a> es el que nos proporciona la librería <a href="">pthread</a>, pero para utilizarlo debíabos inicializarlo y destruirlo al estilo C, en definitiva, tienes que hacer algo más que lock/unlock cada vez que trabajas con un mutex.</p>
</div>
<div class="paragraph">
<p><a href="https://en.wikipedia.org/wiki/C++11" target="_blank" rel="noopener">C++11</a> nos proporciona una <a href="https://en.cppreference.com/w/cpp/thread/mutex" target="_blank" rel="noopener">Clase Mutex</a>, que nos abstrae de cosas que no sean lock/unclock.</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-cpp" data-lang="cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;mutex&gt;</span></span>

<span class="hljs-built_in">std</span>::mutex mtx;

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">do_something</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>{
  mtx.lock();
  <span class="hljs-comment">// critical section</span>
  mtx.unlock();
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>En <a href="https://en.wikipedia.org/wiki/C++11" target="_blank" rel="noopener">C++11</a> también puedes utilizar el <a href="https://en.wikipedia.org/wiki/Mutex" target="_blank" rel="noopener">Mutex</a> con una <a href="https://en.cppreference.com/w/cpp/thread/lock_guard" target="_blank" rel="noopener">guarda genérica</a>.</p>
</div>
<div class="paragraph">
<p>Si sigues trabajando con <a href="https://clang.llvm.org/cxx_status.html" target="_blank" rel="noopener">versiones del compilador anteriores a C++11</a>, hace tiempo me hice un wrapper que te ayuda a abstraerte del mutex de pthread, lo dejo aquí abajo por si a alguien le resulta útil: [gist].</p>
</div>]]></content>
            <category term="C++"/>
    <category term="pthread"/>
    <category term="Mutex"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Alineación de una Estructura C++ en Memoria</title>
            <link href="https://carlosvin.github.io/posts/cpp-pragma-pack/es" />
            <link 
				rel="alternate"
				hreflang="en"
				href="https://carlosvin.github.io/posts/cpp-pragma-pack/en"/>   
            <id>https://carlosvin.github.io/posts/cpp-pragma-pack/es</id>
            <updated>2012-11-26T11:00:00.000Z</updated>
            <summary>Comprendiendo cómo funciona la directiva C++ pragma pack y cómo afecta a la alineación de la memoria</summary>
            <content type="html"><![CDATA[<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_estructura_de_ejemplo">Estructura de ejemplo</a></li>
<li><a href="#_la_directiva_pragma_pack_en_struct_c">La directiva #pragma pack en struct C++</a></li>
<li><a href="#_rendimiento">Rendimiento</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Un struct de C++ es un elemento que permite agrupar elementos de tipos distintos con alguna relación entre ellos. Esto permite manipular todos los elementos en bloque mediante una única referencia. Podemos considerarlo como una clase con visibilidad publica por defecto para sus atributos y funciones.</p>
</div>
<div class="paragraph">
<p>Si alguna vez nos interesa trabajar a un nivel más bajo, nos puede resultar útil entender cómo se mapea una estructura en memoria y cómo controlar este mapeo.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_estructura_de_ejemplo">Estructura de ejemplo</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Esta estructura estará compuesta por dos campos, un entero (4 bytes) y un booleano (un byte). En C++ queda de la siguiente forma:</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-c++" data-lang="c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SampleStruct</span>
{</span>
    <span class="hljs-keyword">bool</span> flag;
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> timeout;
};</code></pre>
</div>
</div>
<div class="paragraph">
<p>Si hacemos un <code>sizeof</code> de una instancia de la estructura deberíamos obtener un tamaño de 5 bytes. Y la memoria quedaría de la siguiente forma:</p>
</div>
<div id="5-bytes" class="imageblock center">
<div class="content">
<img src="/images/c-mem-struct/5b.png" alt="5Bytes" width="200" height="auto">
</div>
<div class="title">Figure 1. Estructura de 5 bytes que realmente ocupa 5 bytes en memoria</div>
</div>
<div class="paragraph">
<p><strong>Pero</strong> no es tan sencillo, a continuación veremos que no nos podemos olvidar de la alineación de la memoria que hace el compilador en ese sistema y veremos cómo controlarlo para no encontrarnos con tamaños inesperados, ya que esto depende del compilador del sistema.</p>
</div>
<div class="paragraph">
<p>Por ejemplo, si en mi máquina hago un <code>sizeof</code> de la estructura de ejemplo, <strong>obtengo un tamaño de 8 bytes</strong>. Lo que está sucediendo es que el compilador reserva más memoria al final de la estructura para que cuadre en bloques de 2n Bytes. La memoria realmente queda de la siguiente forma:</p>
</div>
<div id="8-bytes" class="imageblock center">
<div class="content">
<img src="/images/c-mem-struct/8b.png" alt="5Bytes" width="200" height="auto">
</div>
<div class="title">Sin pragma: Estructura de 5 Bytes que realmente ocupa 8 Bytes en memoria</div>
</div>
<div class="listingblock">
<div class="title">Fragmento de código que imprime el tamaño de la estructura y el de cada uno de sus atributos, en este caso 4 + 1 no es 5</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-c++" data-lang="c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span>  <span class="hljs-meta-string">&lt;iostream&gt;</span></span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SampleStruct</span>
{</span>
    <span class="hljs-keyword">bool</span> flag;
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> timeout;
};

<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span> <span class="hljs-params">(<span class="hljs-keyword">size_t</span> sz, <span class="hljs-keyword">size_t</span> sz_flag, <span class="hljs-keyword">size_t</span> sz_timeout)</span>
</span>{
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\tflag: &quot;</span> &lt;&lt; sz_flag &lt;&lt; <span class="hljs-string">&quot; Bytes&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\t+&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ttimeout: &quot;</span> &lt;&lt; sz_timeout &lt;&lt; <span class="hljs-string">&quot; Bytes&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\t=&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; sz_timeout + sz_flag &lt;&lt; <span class="hljs-string">&quot; Bytes&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
    <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">&quot;sizeof struct:  &quot;</span> &lt;&lt; sz &lt;&lt; <span class="hljs-string">&quot; Bytes&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
}

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span>
</span>{
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;SampleStruct&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
    print (<span class="hljs-keyword">sizeof</span>(SampleStruct), <span class="hljs-keyword">sizeof</span>(SampleStruct::flag), <span class="hljs-keyword">sizeof</span>(SampleStruct::timeout));
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot; -- &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;

    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title"><a href="https://coliru.stacked-crooked.com/a/c7deb3df49bebd40">Ejecutando el código sin la directiva pragma</a>, tenemos que nuestra estructura ocupa 8 bytes en lugar de 5 bytes.</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">SampleStruct
flag: 1 Bytes
+
timeout: 4 Bytes
=
5 Bytes
sizeof struct:  8 Bytes
--</code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
Si queremos conocer el tamaño exacto de las estructuras que vamos a utilizar, tenemos que especificar al compilador la forma de alinear la estructura en memoria, para ello utilizaremos la directiva <code>#pragma pack(n)</code>.
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_la_directiva_pragma_pack_en_struct_c">La directiva #pragma pack en struct C++</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Se trata de una directiva del preprocesador que indica al compilador cómo debe realizar la alineación de la memoria.</p>
</div>
<div class="listingblock">
<div class="title">Ejemplo con diferentes configuraciones de alineamiento de memoria</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-c++" data-lang="c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span> <span class="hljs-params">(<span class="hljs-keyword">size_t</span> sz, <span class="hljs-keyword">size_t</span> sz_flag, <span class="hljs-keyword">size_t</span> sz_timeout)</span>
</span>{
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot; flag: &quot;</span> &lt;&lt; sz_flag &lt;&lt; <span class="hljs-string">&quot; Bytes&quot;</span>&lt;&lt; <span class="hljs-built_in">endl</span>;
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot; +&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot; timeout: &quot;</span> &lt;&lt; sz_timeout &lt;&lt; <span class="hljs-string">&quot;Bytes&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot; =&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; sz_timeout + sz_flag &lt;&lt; <span class="hljs-string">&quot;Bytes&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot; sizeof struct:  &quot;</span> &lt;&lt; sz &lt;&lt; <span class="hljs-string">&quot; Bytes&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
}

<span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> pack (1)</span>
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SampleStructPack1</span>
{</span>
    <span class="hljs-keyword">bool</span> flag;
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> timeout;
};
<span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> pack(0)</span>

<span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> pack (2)</span>
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SampleStructPack2</span>
{</span>
    <span class="hljs-keyword">bool</span> flag;
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> timeout;
};
<span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> pack(0)</span>

<span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> pack (4)</span>
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SampleStructPack4</span>
{</span>
    <span class="hljs-keyword">bool</span> flag;
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> timeout;
};
<span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> pack(0)</span>


<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SampleStruct</span>
{</span>
    <span class="hljs-keyword">bool</span> flag;
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> timeout;
};


<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span>
</span>{

    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;SampleStructPack1&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
    print (<span class="hljs-keyword">sizeof</span>(SampleStructPack1), <span class="hljs-keyword">sizeof</span>(SampleStructPack1::flag), <span class="hljs-keyword">sizeof</span>(SampleStructPack1::timeout));
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot; -- &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;

    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;SampleStructPack2&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
    print (<span class="hljs-keyword">sizeof</span>(SampleStructPack2), <span class="hljs-keyword">sizeof</span>(SampleStructPack2::flag), <span class="hljs-keyword">sizeof</span>(SampleStructPack2::timeout));

    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;SampleStructPack4&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
    print (<span class="hljs-keyword">sizeof</span>(SampleStructPack4), <span class="hljs-keyword">sizeof</span>(SampleStructPack4::flag), <span class="hljs-keyword">sizeof</span>(SampleStructPack4::timeout));

    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;SampleStruct&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
    print (<span class="hljs-keyword">sizeof</span>(SampleStruct), <span class="hljs-keyword">sizeof</span>(SampleStruct::flag), <span class="hljs-keyword">sizeof</span>(SampleStruct::timeout));
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot; -- &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;

    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title"><a href="https://coliru.stacked-crooked.com/a/7c18ee6585e57366">Ejecutando el código con las directivas pragma</a>, tenemos distintos resultados dependiendo del valor de pragma.</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">SampleStructPack1 <b class="conum">(1)</b>
 flag: 1 Bytes
 +
 timeout: 4Bytes
 =
 5Bytes
 sizeof struct:  5 Bytes
 --

SampleStructPack2 <b class="conum">(2)</b>
 flag: 1 Bytes
 +
 timeout: 4Bytes
 =
 5Bytes
 sizeof struct:  6 Bytes

SampleStructPack4 <b class="conum">(3)</b>
 flag: 1 Bytes
 +
 timeout: 4Bytes
 =
 5Bytes
 sizeof struct:  8 Bytes

SampleStruct <b class="conum">(4)</b>
 flag: 1 Bytes
 +
 timeout: 4Bytes
 =
 5Bytes
 sizeof struct:  8 Bytes</code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>SampleStructPack1 <code>#pragma pack (1)</code>: Reserva bloques de memoria de un byte, nuestra estructura se ha ajustado perfectamente; en este caso sí que <code>4 + 1 = 5</code>.</p>
</li>
<li>
<p>SampleStructPack2 <code>#pragma pack (2)</code>: Ahora el mínimo tamaño del bloque de memoria es de 2 bytes. Para el entero, hay un ajuste exacto porque necesita 2 bloques que 2 bytes para alojar sus 4 bytes. Para el caso del booleano, necesita un bloque de 1 byte, pero como mínimo tiene que asignar un bloque de 2 bytes, por eso en total reserva 6 bytes, <code>4 + 2 = 6</code>.</p>
</li>
<li>
<p>SampleStructPack4 <code>#pragma pack (4)</code>: Es el mismo caso que el anterior, aunque en el caso del booleano, hay un mayor "desperdicio" de memoria. Necesita 1 byte, pero reserva 4 bytes que es tamaño mínimo de bloque de memoria que puede asignar el compilador.</p>
</li>
<li>
<p>SampleStruct (default compiler alignment): Como vemos se comporta exactamente igual que <code>#pragma pack (4)</code>, podemos deducir que la alineación por defecto del compilador que estamos utilizando es de 4 bytes.</p>
</li>
</ol>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<div class="title">Important</div>
</td>
<td class="content">
¿Por qué no utilizamos siempre la alineación de memoria más ajustada (<code>#pragma pack (1)</code>) para aprovechar mejor la memoria?
</td>
</tr>
</table>
</div>
<div class="admonitionblock warning">
<table>
<tr>
<td class="icon">
<div class="title">Warning</div>
</td>
<td class="content">
Porque perderemos rendimiento.
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_rendimiento">Rendimiento</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Vamos a hacer una prueba simple de rendimiento, en la que se va a reservar el mismo número de elementos en arrays para cada tipo de estructura.</p>
</div>
<div class="paragraph">
<p>Este es el resultado:</p>
</div>
<div class="listingblock">
<div class="title"><a href="https://coliru.stacked-crooked.com/a/954ad542659c7591">Resultados de la prueba de rendimiento</a>.</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">SampleStructPack1: 500000000000000000 bytes allocated <span class="hljs-keyword">in</span> 94311 nanoseconds
SampleStructPack2: 600000000000000000 bytes allocated <span class="hljs-keyword">in</span> 1777 nanoseconds
SampleStructPack4: 800000000000000000 bytes allocated <span class="hljs-keyword">in</span> 1519 nanoseconds</code></pre>
</div>
</div>
<div class="paragraph">
<p>Como vemos cuanto más ajustada es la alineación de memoria, más tiempo se tarda en reservar y liberar.</p>
</div>
<div class="paragraph">
<p>A continuación pego el código de la prueba de rendimiento.</p>
</div>
<div class="listingblock">
<div class="title">Código de las pruebas de rendimiento</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-c++" data-lang="c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;chrono&gt;</span></span>

<span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> pack (1)</span>
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SampleStructPack1</span>
{</span>
    <span class="hljs-keyword">bool</span> flag;
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> timeout;
};
<span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> pack(0)</span>

<span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> pack (2)</span>
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SampleStructPack2</span>
{</span>
    <span class="hljs-keyword">bool</span> flag;
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> timeout;
};
<span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> pack(0)</span>

<span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> pack (4)</span>
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SampleStructPack4</span>
{</span>
    <span class="hljs-keyword">bool</span> flag;
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> timeout;
};
<span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> pack(0)</span>


<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SampleStruct</span>
{</span>
    <span class="hljs-keyword">bool</span> flag;
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> timeout;
};

<span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">long</span> MAX_ELEMENTS = <span class="hljs-number">100000000000000000</span>;
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>::chrono;

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">allocate1</span><span class="hljs-params">()</span>
</span>{
    SampleStructPack1 elements [MAX_ELEMENTS];
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;SampleStructPack1: &quot;</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(elements) &lt;&lt; <span class="hljs-string">&quot; bytes allocated&quot;</span>;
}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">allocate2</span><span class="hljs-params">()</span>
</span>{
    SampleStructPack2 elements [MAX_ELEMENTS];
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;SampleStructPack2: &quot;</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(elements) &lt;&lt; <span class="hljs-string">&quot; bytes allocated&quot;</span>;
}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">allocate4</span><span class="hljs-params">()</span>
</span>{
    SampleStructPack4 elements [MAX_ELEMENTS];
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;SampleStructPack4: &quot;</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(elements) &lt;&lt; <span class="hljs-string">&quot; bytes allocated&quot;</span>;
}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">chrono1</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-keyword">auto</span> begin = high_resolution_clock::now() ;
    allocate1();
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot; in &quot;</span> &lt;&lt; duration_cast&lt;nanoseconds&gt;(high_resolution_clock::now() - begin).count() &lt;&lt; <span class="hljs-string">&quot; nanoseconds&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">chrono2</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-keyword">auto</span> begin = high_resolution_clock::now() ;
    allocate2();
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot; in &quot;</span> &lt;&lt; duration_cast&lt;nanoseconds&gt;(high_resolution_clock::now() - begin).count() &lt;&lt; <span class="hljs-string">&quot; nanoseconds&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">chrono4</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-keyword">auto</span> begin = high_resolution_clock::now() ;
    allocate4();
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot; in &quot;</span> &lt;&lt; duration_cast&lt;nanoseconds&gt;(high_resolution_clock::now() - begin).count() &lt;&lt; <span class="hljs-string">&quot; nanoseconds&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
}


<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span>
</span>{
    chrono1();
    chrono2();
    chrono4();

    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}</code></pre>
</div>
</div>
</div>
</div>]]></content>
            <category term="C++"/>
    <category term="Performance"/>
    <category term="Compilers"/>
    <category term="Memory"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Crear un plugin para Maven: default lifecycle</title>
            <link href="https://carlosvin.github.io/posts/creating-custom-maven-plugin-default/es" />
            <link 
				rel="alternate"
				hreflang="en"
				href="https://carlosvin.github.io/posts/creating-custom-maven-plugin-default/en"/>   
            <id>https://carlosvin.github.io/posts/creating-custom-maven-plugin-default/es</id>
            <updated>2020-05-09T13:00:00.000Z</updated>
            <summary>Cómo crear un plugin Maven personalizado que sobrescribe el ciclo de vida de compilación predeterminado</summary>
            <content type="html"><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Ya expliqué en el articulo <a href="/posts/creating-custom-maven-plugin">cómo crear un plugin para Maven</a> which <a href="https://maven.apache.org/ref/3.5.3/maven-core/lifecycles.html#site_Lifecycle">que sobrescribe el ciclo de vida "site"</a>.</p>
</div>
<div class="paragraph">
<p>He creado otro ejemplo que demuestra cómo sobrescribir <a href="https://maven.apache.org/ref/3.5.3/maven-core/lifecycles.html#default_Lifecycle">el ciclo de via que utliza Maven por defecto</a>. Éste es utilizado para construir, probar, empaquetar y distribuir un proyecto software, por ejemplo, estamos utilizando el ciclo de vida por defecto cuando ejecutamos <code>mvn install</code> en un proyecto del tipo <code>jar</code>.</p>
</div>
<div class="paragraph">
<p>Puedes encontrar el código fuente del ejemplo en <a href="https://github.com/carlosvin/lifecycle-maven-plugin" class="bare">https://github.com/carlosvin/lifecycle-maven-plugin</a>.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
También he creado un <a href="https://maven.apache.org/guides/introduction/introduction-to-archetypes.html" target="_blank" rel="noopener">arquetipo (archetype)</a> de forma que fácilmente puedes probar el ejemplo.
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_generar_un_proyecto_de_ejemplo">Generar un proyecto de ejemplo</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="title">Generar un proyecto utilizando el arquetipo</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">mvn archetype:generate \
  -DarchetypeGroupId=com.github.carlosvin.archetype \
  -DartifactId=lifecycle-maven-plugin-archetype \
  -DarchetypeVersion=0.6</code></pre>
</div>
</div>
</div>
</div>]]></content>
            <category term="Maven"/>
    <category term="Java"/>
    <category term="Build Systems"/>
    <category term="Maven Plugins"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Example how to create custom Maven Plugin</title>
            <link href="https://carlosvin.github.io/posts/creating-custom-maven-plugin/en" />
               
            <id>https://carlosvin.github.io/posts/creating-custom-maven-plugin/en</id>
            <updated>2018-03-11T18:00:00.000Z</updated>
            <summary>Example to understand Maven plugins concepts and how to create a custom Maven plugin from scratch</summary>
            <content type="html"><![CDATA[<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_maven_plugin_concepts">Maven plugin concepts</a></li>
<li><a href="#_create_your_custom_plugin_site_lifecycle">Create your custom plugin (Site Lifecycle)</a>
<ul class="sectlevel2">
<li><a href="#_project_structure">Project structure</a></li>
<li><a href="#_dependency_injection">Dependency Injection</a></li>
<li><a href="#_write_a_custom_mojo">Write a custom Mojo</a></li>
</ul>
</li>
<li><a href="#_unit_tests">Unit tests</a></li>
<li><a href="#_integration_tests">Integration tests</a>
<ul class="sectlevel2">
<li><a href="#_how_does_invoker_plugin_work">How does Invoker Plugin work?</a></li>
<li><a href="#_configure_invoker_plugin">Configure Invoker Plugin</a></li>
<li><a href="#_create_an_integration_test_project">Create an Integration Test Project</a></li>
</ul>
</li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Maven has lots of plugins to assist you in project construction, testing, packaging and deployment. For example if you want to compile C++ code instead of Java, you can use <a href="https://www.mojohaus.org/maven-native/native-maven-plugin/">native-maven-plugin</a>. But what if you need something more specific? Then you can create a custom Maven plugin.</p>
</div>
<div class="paragraph">
<p>I will explain how to create a simple custom maven plugin to generate static blog site from Markdown files. I know we can already do that with <a href="https://maven.apache.org/plugins/maven-site-plugin/examples/creating-content.html">maven-site-plugin</a> since version 3.3, I will just use it for learning purposes.</p>
</div>
<div class="paragraph">
<p>You can find the source code of this example at <a href="https://github.com/carlosvin/blog-maven-plugin" class="bare">https://github.com/carlosvin/blog-maven-plugin</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_maven_plugin_concepts">Maven plugin concepts</h2>
<div class="sectionbody">
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="https://maven.apache.org/plugin-developers/index.html" target="_blank" rel="noopener">Mojo</a></dt>
<dd>
<p>An executable goal in Maven, e.g: <code>mvn your-plugin:your-mojo</code> will execute a maven goal <code>your-mojo</code> declared as part of <code>your-plugin</code>.</p>
</dd>
<dt class="hdlist1">Goal</dt>
<dd>
<p>It is equivalent to <a href="https://maven.apache.org/plugin-developers/index.html" target="_blank" rel="noopener">Mojo</a> execution.</p>
</dd>
<dt class="hdlist1">Lifecycle</dt>
<dd>
<p>It is a well-defined sequence of phases. Each phase consists of a sequence of goals. Let&#8217;s see an example of lifecycle, e.g: <code>FooLifecycle</code> has <code>clean</code>, <code>prepare</code> and <code>assemble</code> phases. Each of those phases has one of more goals. <strong>FooLifecycle</strong>:</p>
<div class="dlist">
<dl>
<dt class="hdlist1">clean</dt>
<dd>
<div class="dlist">
<dl>
<dt class="hdlist1"><strong>rmSources</strong></dt>
<dd>
<p>a goal to remove source files</p>
</dd>
<dt class="hdlist1"><strong>rmBuild</strong></dt>
<dd>
<p>a goal to remove files in cache directory</p>
</dd>
</dl>
</div>
</dd>
<dt class="hdlist1">prepare</dt>
<dd>
<div class="dlist">
<dl>
<dt class="hdlist1"><strong>installDependencies</strong></dt>
<dd>
<p>a goal to download dependencies for the project</p>
</dd>
</dl>
</div>
</dd>
<dt class="hdlist1">assemble</dt>
<dd>
<div class="dlist">
<dl>
<dt class="hdlist1"><strong>build</strong></dt>
<dd>
<p>a goal to compile source files</p>
</dd>
</dl>
</div>
</dd>
</dl>
</div>
</dd>
</dl>
</div>
<div class="paragraph">
<p>To define a custom life-cycle similar to previous one, we will use <code>src/main/resources/META-INF/plexus/components.xml</code>, we will speak about that file in following sections. Normally is enough to override <a href="https://maven.apache.org/ref/3.5.3/maven-core/lifecycles.html">predefined lifecycles</a>, in this example, we will override <strong>site life-cycle</strong>.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
You can find an introduction to Maven life-cycles at <a href="https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html" class="bare">https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html</a>
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_create_your_custom_plugin_site_lifecycle">Create your custom plugin (Site Lifecycle)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The plugin we are about to explain will <a href="https://maven.apache.org/ref/3.5.3/maven-core/lifecycles.html#site_Lifecycle">override site lifecycle</a>, which has only 2 default phases, so when we run <code>mvn site</code> using our new custom plugin it will execute the goals we are about to create.</p>
</div>
<div class="paragraph">
<p>Our plugin will work with <code>md</code> (for <a href="https://commonmark.org/" target="_blank" rel="noopener">Markdown</a>) file bindings: It will build and deploy the project using <a href="https://maven.apache.org/plugins/maven-deploy-plugin/">maven deployment plugin</a>.</p>
</div>
<div class="sect2">
<h3 id="_project_structure">Project structure</h3>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>src/main/java</code></dt>
<dd>
<p>Where Java source code is</p>
</dd>
<dt class="hdlist1"><code>src/main/resources/META-INF/plexus/components.xml</code></dt>
<dd>
<p>file to create/override maven lifecycles and artifact types. Here we can specify which goals will be executed when for an artifact type, for example, we can say that for an artifact of type <code>whatever</code> when we run <code>mvn foo</code> it will verify the files, run tests, run linter, compile and zip al generated files.</p>
</dd>
<dt class="hdlist1"><code>src/test/java</code></dt>
<dd>
<p>Unit tests folder.</p>
</dd>
<dt class="hdlist1"><code>src/it</code></dt>
<dd>
<p>Folder with all integration tests. Those integration tests are running actual projects and checking that outputs are as expected.</p>
</dd>
<dt class="hdlist1"><code>pom.xml</code></dt>
<dd>
<p>File to with Maven project description <a href="https://maven.apache.org/guides/introduction/introduction-to-the-pom.html">(Project Object Model)</a></p>
</dd>
</dl>
</div>
</div>
<div class="sect2">
<h3 id="_dependency_injection">Dependency Injection</h3>
<div class="paragraph">
<p>Maven has finally chosen <a href="https://maven.apache.org/maven-jsr330.html" target="_blank" rel="noopener">JSR-330</a> as <a href="https://javax-inject.github.io/javax-inject/">dependency injection standard</a> (previously it was Plexus Annotations API).</p>
</div>
<div class="paragraph">
<p>To use dependency injection with Maven we have to:</p>
</div>
<div class="paragraph">
<p>Add <code>javax.inject</code> dependency to <code>pom.xml</code>, so we can use <code>@Inject</code>, <code>@Named</code>, and <code>@Singleton</code> annotations in plugin implementation Java code.</p>
</div>
<div class="listingblock">
<div class="title">pom.xml</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.inject<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.inject<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Set up the <code>sisu-maven-plugin</code> to index the <a href="https://maven.apache.org/maven-jsr330.html" target="_blank" rel="noopener">JSR-330</a> components you want made available to Maven.</p>
</div>
<div class="listingblock">
<div class="title">pom.xml</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.eclipse.sisu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sisu-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>generate-index<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>main-index<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Add annotations to your Mojo, e.g:</p>
</div>
<div class="listingblock">
<div class="title">BuildMojo.java</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-java" data-lang="java"><span class="hljs-meta">@Mojo(name = &quot;build&quot;, defaultPhase = LifecyclePhase.COMPILE)</span> <b class="conum">(1)</b>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BuildMojo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractMojo</span> </span>{

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> FileSetManager fileSetManager;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MdToHtml mdToHtml;


    <span class="hljs-meta">@Inject</span> <b class="conum">(2)</b>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BuildMojo</span><span class="hljs-params">(FileSetManager fileSetManager, MdToHtml mdToHtml)</span> </span>{
        <span class="hljs-keyword">this</span>.fileSetManager = fileSetManager;
        <span class="hljs-keyword">this</span>.mdToHtml = mdToHtml;
        <span class="hljs-comment">//</span>
    }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>This annotation is not a dependency injection one, we will explain later what it is for.</p>
</li>
<li>
<p>It will inject an instance of FileSetManager and MdToHtml.</p>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="_write_a_custom_mojo">Write a custom <a href="https://maven.apache.org/plugin-developers/index.html" target="_blank" rel="noopener">Mojo</a></h3>
<div class="paragraph">
<p>It is quite straightforward to implement a <a href="https://maven.apache.org/plugin-developers/index.html" target="_blank" rel="noopener">Mojo</a> class, we have to:</p>
</div>
<div class="sect3">
<h4 id="_1_implement_mojo_interface">1. Implement Mojo interface</h4>
<div class="paragraph">
<p>Your <a href="https://maven.apache.org/plugin-developers/index.html" target="_blank" rel="noopener">Mojo</a> class has to implement <code>org.apache.maven.plugin.Mojo</code>, although it is more convenient to extend <code>org.apache.maven.plugin.AbstractMojo</code>, an abstract class to provide most of the infrastructure required to implement a Mojo except for execute method. That interface and class are described at <a href="https://maven.apache.org/developers/mojo-api-specification.html">Mojo API</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-java" data-lang="java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BuildMojo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractMojo</span> </span>{
    <span class="hljs-comment">// ...</span>
}</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_2_configure_mojo_with_java_5_annotations">2. Configure Mojo with Java 5 annotations</h4>
<div class="paragraph">
<p>Annotate <a href="https://maven.apache.org/plugin-developers/index.html" target="_blank" rel="noopener">Mojo</a> class with <code>@Mojo</code> and input parameters with <code>@Parameter</code>. Those annotations belong to another set of annotations to configure Mojos, <a href="https://maven.apache.org/plugin-tools/maven-plugin-plugin/examples/using-annotations.html">Plugin Tools Java5 Annotations</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-java" data-lang="java"><span class="hljs-comment">/**
* Generate HTML files from Markdown files
*/</span>
<span class="hljs-meta">@Mojo(name = &quot;build&quot;, defaultPhase = LifecyclePhase.COMPILE)</span> <b class="conum">(1)</b>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BuildMojo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractMojo</span> </span>{

    <span class="hljs-comment">/**
    * Output directory path where HTML files are generated
    */</span>
    <span class="hljs-meta">@Parameter( <b class="conum">(2)</b>
      defaultValue = &quot;${project.reporting.outputDirectory}&quot;, <b class="conum">(3)</b>
      property = &quot;siteOutputDirectory&quot;, <b class="conum">(4)</b>
      required = true)</span>
    <span class="hljs-keyword">private</span> File outputDirectory;

    <span class="hljs-comment">/**
    * A specific &lt;code&gt;fileSet&lt;/code&gt; rule to select files and directories.
    * Fileset spec: https://maven.apache.org/shared/file-management/fileset.html
    */</span>
    <span class="hljs-meta">@Parameter</span>
    <span class="hljs-keyword">private</span> FileSet inputFiles;
    <span class="hljs-comment">//</span>
}</code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>Configures Mojo name and default life-cycle phase. To execute the Mojo in this example we will use <code>mvn site:build</code>: <em>site</em> is the plugin name and <em>build</em> is <code>name</code> parameter.</p>
</li>
<li>
<p>We use <code>@Parameter</code> annotation to pass configuration parameters to Mojo.</p>
</li>
<li>
<p>You can use properties placeholder or any String. If the parameter type is not a String, then Maven will try to cast it.</p>
</li>
<li>
<p>It allows configuration of the Mojo parameter from the command line by referencing a system property that the user sets via the -D option. E.g: <code>mvn site:build -DsiteOutputDirectory=/var/www/html</code> will set siteOutputDirectory attribute to <code>/var/www/html</code>.</p>
</li>
</ol>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
More info in <a href="https://maven.apache.org/guides/plugin/guide-java-plugin-development.html#Parameters">Maven Plugin development guide in Parametera section</a>.
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_3_implement_execute_method">3. Implement <em>execute</em> method</h4>
<div class="paragraph">
<p>As I have explained before at <a href="#_1_implement_mojo_interface">1. Implement Mojo interface</a>, our <a href="https://maven.apache.org/plugin-developers/index.html" target="_blank" rel="noopener">Mojo</a> class extends <code>org.apache.maven.plugin.AbstractMojo</code> which has one unimplemented method from <code>org.apache.maven.plugin.Mojo</code> interface. In that method we are going to implement the Maven goal logic.</p>
</div>
<div class="paragraph">
<p><a href="https://maven.apache.org/plugin-developers/index.html" target="_blank" rel="noopener">Mojo</a> class instance is called from <a href="https://maven.apache.org" target="_blank" rel="noopener">Maven</a> execution life-cycle by invoking <code>execute()</code> method. Before calling <code>execute()</code>, <a href="https://maven.apache.org" target="_blank" rel="noopener">Maven</a> has performed some other tasks related with the Mojo:</p>
</div>
<div class="listingblock">
<div class="title"><a href="https://maven.apache.org" target="_blank" rel="noopener">Maven</a> instantiates Mojo and injects dependencies (<a href="#dependency-injection">Dependency Injection</a>).</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-java" data-lang="java">Mojo mojo = <span class="hljs-keyword">new</span> BuildMojo(fileSetManager, mdToHtml);</code></pre>
</div>
</div>
<div class="paragraph">
<p><a href="https://maven.apache.org" target="_blank" rel="noopener">Maven</a> configures the <a href="https://maven.apache.org/plugin-developers/index.html" target="_blank" rel="noopener">Mojo</a> by assigning values to parameters.</p>
</div>
<div class="paragraph">
<p>I will simplify <code>execute</code> method implementation in the <a href="https://github.com/carlosvin/blog-maven-plugin">sample project in github</a>, because it is more complicated and this complexity is not relevant for learning purposes.</p>
</div>
<div class="paragraph">
<p><a href="https://maven.apache.org" target="_blank" rel="noopener">Maven</a> calls execute method: <code>mojo.execute()</code>.</p>
</div>
<div class="listingblock">
<div class="title">BuildMojo.java</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-java" data-lang="java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> MojoExecutionException </span>{ <b class="conum">(1)</b>
    <span class="hljs-keyword">if</span> (inputFiles == <span class="hljs-keyword">null</span>) {
        setDefaultInput();
    }
    inputDirPath = Paths.get(inputFiles.getDirectory());

    String[] includedFiles = fileSetManager.getIncludedFiles(inputFiles); <b class="conum">(2)</b>

    outputDirPath = outputDirectory.toPath();
    <span class="hljs-keyword">if</span> (includedFiles == <span class="hljs-keyword">null</span> || includedFiles.length == <span class="hljs-number">0</span>) {
        getLog().warn(<span class="hljs-string">&quot;SKIP: There are no input files. &quot;</span> + getInputFilesToString()); <b class="conum">(3)</b>
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">if</span> (!outputDirectory.exists()) { <b class="conum">(4)</b>
            outputDirectory.mkdirs();
        }
        <span class="hljs-keyword">try</span> {
            <span class="hljs-keyword">for</span> (String f : includedFiles) {
                convertToHtml(Paths.get(f), outputDirectory); <b class="conum">(5)</b>
            }
        } <span class="hljs-keyword">catch</span> (InterruptedException e) {
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MojoExecutionException(e.getLocalizedMessage(), e); <b class="conum">(6)</b>
        }
    }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>If there is any error during execution, it should throw MojoExecutionException.</p>
</li>
<li>
<p>A way to get all selected files from <a href="https://maven.apache.org/shared/file-management/fileset.html">FileSet</a>.</p>
</li>
<li>
<p>AbstractMojo supplies logger functionality.</p>
</li>
<li>
<p>If output directory doesn&#8217;t exist, it will be created.</p>
</li>
<li>
<p>It converts each file Markdown to HTML.</p>
</li>
<li>
<p>Convert thrown exception to MojoExecutionException.</p>
</li>
</ol>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_unit_tests">Unit tests</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In the example we use <a href="https://junit.org/junit4/">JUnit 4</a>, but you can use any other testing framework.</p>
</div>
<div class="paragraph">
<p>Firstly, you have to add the unit test library dependency to <code>pom.xml</code>.</p>
</div>
<div class="listingblock">
<div class="title">pom.xml</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Then you just have to write your unit tests under <code>src/test/java</code> folder: <a href="https://github.com/carlosvin/blog-maven-plugin/blob/master/src/test/java/com/maven/plugins/blog/PathsTest.java">src/test/java/com/maven/plugins/blog/PathsTest.java</a>.</p>
</div>
<div class="paragraph">
<p>To run the unit tests you just need to execute <code>mvn test</code>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_integration_tests">Integration tests</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The 2 most popular ways to perform integration tests on custom maven plugins are using <a href="https://maven.apache.org/surefire/maven-failsafe-plugin">maven-failsafe-plugin</a> or <a href="https://maven.apache.org/plugins/maven-invoker-plugin">maven-invoker-plugin</a>.</p>
</div>
<div class="paragraph">
<p>I&#8217;ve chosen <a href="https://maven.apache.org/plugins/maven-invoker-plugin">maven-invoker-plugin</a> because for me it is more straightforward. There is <a href="https://stackoverflow.com/questions/40010745/maven-invoker-plugin-vs-maven-failsafe-plugin-which-to-use-for-integration-test">an answer at stackoverflow where they explain thoroughly the differences between them</a>.</p>
</div>
<div class="sect2">
<h3 id="_how_does_invoker_plugin_work">How does Invoker Plugin work?</h3>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>We create projects to use our custom plugin under <code>src/it</code> folder, so our plugin will be applied to test projects.</p>
</li>
<li>
<p>Invoker plugin will simulate a previously configured <a href="https://maven.apache.org" target="_blank" rel="noopener">Maven</a> execution.</p>
</li>
<li>
<p>After Maven execution, A validation script will check if our plugin outputs are the expected ones. For example, if our plugin is supposed to generate a file named <code>foo.file</code>, verification plugin will check if that file exists, if it doesn&#8217;t, integration test will fail.</p>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="_configure_invoker_plugin">Configure Invoker Plugin</h3>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-invoker-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">postBuildHookScript</span>&gt;</span>verify<span class="hljs-tag">&lt;/<span class="hljs-name">postBuildHookScript</span>&gt;</span> <b class="conum">(3)</b>
        <span class="hljs-tag">&lt;<span class="hljs-name">showVersion</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">showVersion</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">streamLogs</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">streamLogs</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">noLog</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">noLog</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">showErrors</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">showErrors</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>integration-test<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>install<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span> <b class="conum">(1)</b>
                <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>run<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span> <b class="conum">(2)</b>
            <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p><code>invoker:install</code> will be executed during the phase pre-integration-test and will install the main project artifact into target/local-repo.</p>
</li>
<li>
<p><code>invoker:run</code> will be executed during the integration-test phase and it will execute all defined integration tests under <code>src/it</code> folder.</p>
</li>
<li>
<p>It configures invoker plugin to execute validation script after integration test project execution. This script may be written with either BeanShell or Groovy (verify.groovy or verify.bsh).</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>We have used other properties to show errors, show maven log and save it to a file.</p>
</div>
<div class="paragraph">
<p>You can check all <code>invoker:run</code> configuration properties at <a href="https://maven.apache.org/plugins/maven-invoker-plugin/run-mojo.html" class="bare">https://maven.apache.org/plugins/maven-invoker-plugin/run-mojo.html</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_create_an_integration_test_project">Create an Integration Test Project</h3>
<div class="paragraph">
<p>It is a project we use to execute custom plugin goals, so we can validate if it produces the expected output.</p>
</div>
<div class="paragraph">
<p>There are 3 important files matching with <a href="http://wiki.c2.com/?ArrangeActAssert" target="_blank" rel="noopener">AAA</a> phases ("Arrange-Act-Assert").</p>
</div>
<div class="sect3">
<h4 id="_arrange_pom_xml">Arrange: pom.xml</h4>
<div class="paragraph">
<p>This file is a project using our custom plugin.</p>
</div>
<div class="paragraph">
<p><a href="https://github.com/carlosvin/blog-maven-plugin/blob/master/src/it/md-html/pom.xml">src/it/md-html/pom.xml</a></p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-xml" data-lang="xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
<span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.maven.plugins.it<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>simple-it<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>@project.groupId@<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>@project.artifactId@<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>@project.version@<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>It is a very simple pom file where we use placeholders to reference to our plugin under test. When invoker plugin executes following pom file, firstly will replace those placeholders to reference to the latest version sof our custom plugin which was recently installed in the local repository:</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-xml" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>blog<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In that way invoker plugin ensures it is testing the latest version of current project.</p>
</div>
</div>
<div class="sect3">
<h4 id="_act_invoker_properties">Act: invoker.properties</h4>
<div class="paragraph">
<p>It configures how test project will be executed.</p>
</div>
<div class="listingblock">
<div class="title"><a href="https://github.com/carlosvin/blog-maven-plugin/blob/master/src/it/md-html/invoker.properties">src/it/md-html/invoker.properties</a></div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-properties" data-lang="properties"><span class="hljs-meta">invoker.goals</span> = <span class="hljs-string">blog:build</span>
<span class="hljs-meta">invoker.name</span> = <span class="hljs-string">Test build MD</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>It will execute <code>mvn blog:build</code>, a goal defined in our custom plugin under example or what is the same, it will execute <a href="https://github.com/carlosvin/blog-maven-plugin/blob/master/src/main/java/com/maven/plugins/blog/BuildMojo.java" target="_blank" rel="noopener">Build Mojo</a> described in section <a href="#_write_a_custom_mojo">Write a custom Mojo</a>.</p>
</div>
</div>
<div class="sect3">
<h4 id="_assert_verify_groovy">Assert: verify.groovy</h4>
<div class="paragraph">
<p>It is the script to check that plugin execution generated the expected results.</p>
</div>
<div class="paragraph">
<p>Verification script, it is checking if <code>target/site/README.html</code> file was generated by the plugin.</p>
</div>
<div class="listingblock">
<div class="title"><a href="https://github.com/carlosvin/blog-maven-plugin/blob/master/src/it/md-html/verify.groovy">src/it/md-html/verify.groovy</a></div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-groovy" data-lang="groovy">File generated = <span class="hljs-keyword">new</span> File( basedir, <span class="hljs-string">&quot;target/site/README.html&quot;</span> );

<span class="hljs-keyword">assert</span> generated.isFile()</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>]]></content>
            <category term="Maven"/>
    <category term="Java"/>
    <category term="Build Systems"/>
    <category term="maven-site-plugin"/>
    <category term="Maven Plugins"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Parameterized Tests in Cypress</title>
            <link href="https://carlosvin.github.io/posts/cypress-parametrized-dynamic-tests/en" />
               
            <id>https://carlosvin.github.io/posts/cypress-parametrized-dynamic-tests/en</id>
            <updated>2021-01-06T00:00:00.000Z</updated>
            <summary>How to write parameterized tests in Cypress</summary>
            <content type="html"><![CDATA[<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_explicit_input_data_set">Explicit input data set</a></li>
<li><a href="#_generated_input_data_set">Generated input data set</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress</a> is a testing framework for anything running on a web browser. I am using it to test this site and I&#8217;ve talked before about it in the post <a href="https://carlosvin.github.io/posts/this-is-sapper/en#_testing">"This is Sapper"</a>.</p>
</div>
<div class="paragraph">
<p>In this post I won&#8217;t explain how to use <a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress</a>, they have a pretty nice documentation: <a href="https://docs.cypress.io/guides/getting-started/installing-cypress.html" target="_blank" rel="noopener">Getting started with Cypress</a>.</p>
</div>
<div class="paragraph">
<p>I will stick to the parameterized tests topic.</p>
</div>
<div class="paragraph">
<p><strong>Parameterized tests</strong>: Also known as dynamic tests, it is an useful technique where you can specify an input dataset and the test case will be repeated for each element in the dataset.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_explicit_input_data_set">Explicit input data set</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Since sometimes you can’t run the test for all the possible inputs, you can select a set of meaningful data to test.</p>
</div>
<div class="listingblock">
<div class="title">Example checking that the relevant pages in the site have valid HTML syntax</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-javascript" data-lang="javascript">describe(<span class="hljs-string">&#x27;validate pages&#x27;</span>, <span class="hljs-function">() =&gt;</span> {
    [ <b class="conum">(1)</b>
        <span class="hljs-string">&quot;/&quot;</span>,
        <span class="hljs-string">&quot;/categories&quot;</span>,
        <span class="hljs-string">&quot;/categories/sapper&quot;</span>,
        <span class="hljs-string">&quot;/posts/creating-custom-maven-plugin-default&quot;</span>,
        <span class="hljs-string">&quot;/posts/choosing-modern-cpp-stack&quot;</span>,
        <span class="hljs-string">&quot;/posts/cpp-mutex&quot;</span>,
        <span class="hljs-string">&quot;/posts/cpp-pragma-pack&quot;</span>,
        <span class="hljs-string">&quot;/posts/creating-custom-maven-plugin&quot;</span>,
        <span class="hljs-string">&quot;/posts/delete-html-tags-py-django&quot;</span>,
        <span class="hljs-string">&quot;/posts/gradle-cpp&quot;</span>,
        <span class="hljs-string">&quot;/posts/java-embedded-db-performance-comparison&quot;</span>,
        <span class="hljs-string">&quot;/posts/react-typescript-parcel&quot;</span>,
        <span class="hljs-string">&quot;/posts/pwa-lessons-learned-cra&quot;</span>,
    ].forEach(<span class="hljs-function">(<span class="hljs-params">url</span>) =&gt;</span> { <b class="conum">(2)</b>
        it(<span class="hljs-string">`should be valid HTML <span class="hljs-subst">${url}</span>`</span>, <span class="hljs-function">() =&gt;</span> { <b class="conum">(3)</b>
            cy.visit(url)
            cy.htmlvalidate()
        })
    })
})</code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>List with relevant pages to validate</p>
</li>
<li>
<p>Iterate over the list of pages</p>
</li>
<li>
<p>Test case execution for selected page</p>
</li>
</ol>
</div>
<div class="imageblock">
<div class="content">
<img src="/posts/cypress-parametrized-dynamic-tests/html-validation.png" alt="Test results" width="100%">
</div>
<div class="title">Figure 1. Test results</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_generated_input_data_set">Generated input data set</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Instead of explicitly define a data set, you can generate it, for example, creating a random data set.</p>
</div>
<div class="listingblock">
<div class="title">Example checking that any generated random number is less than 0</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-javascript" data-lang="javascript">describe(<span class="hljs-string">&#x27;random&#x27;</span>, <span class="hljs-function">() =&gt;</span> {
    <span class="hljs-keyword">const</span> inputData = <span class="hljs-built_in">Array</span>.from(<span class="hljs-built_in">Array</span>(<span class="hljs-number">100</span>)).map(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> <span class="hljs-built_in">Math</span>.random()) <b class="conum">(1)</b>
    inputData.forEach(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> { <b class="conum">(2)</b>
        it(<span class="hljs-string">`should be valid <span class="hljs-subst">${x}</span>`</span>, <span class="hljs-function">() =&gt;</span> { <b class="conum">(3)</b>
		    expect(x).to.be.lessThan(<span class="hljs-number">1</span>)
        })
    })
})</code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>It generates an array of 100 random numbers</p>
</li>
<li>
<p>Iterate over the generated array</p>
</li>
<li>
<p>Test case execution</p>
</li>
</ol>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="/posts/cypress-parametrized-dynamic-tests/random-validation.png" alt="Test results">
</div>
<div class="title">Figure 2. Test results</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
Please check the <a href="https://github.com/cypress-io/cypress-example-recipes/tree/master/examples/fundamentals__dynamic-tests">cypress official examples to learn more about dynamic/parameterized testing</a>.
</td>
</tr>
</table>
</div>
</div>
</div>]]></content>
            <category term="Testing"/>
    <category term="Cypress"/>
    <category term="Javascript"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Depurar librería generada con libtool</title>
            <link href="https://carlosvin.github.io/posts/debug-libtool-lib/es" />
               
            <id>https://carlosvin.github.io/posts/debug-libtool-lib/es</id>
            <updated>2013-02-01T14:30:00.000Z</updated>
            <summary>Cómo depurar un librería generada con libtool</summary>
            <content type="html"><![CDATA[<div class="paragraph">
<p>Cuando vamos a depurar un ejecutable que utiliza una librería generada con <a href="https://www.gnu.org/software/libtool/libtool.html" target="_blank" rel="noopener">libtool</a><sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup>, es posible que nos encontremos con el siguiente error:</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">$ gdb ./tests-mylib
<span class="hljs-string">&quot;tests-mylib&quot;</span>: not <span class="hljs-keyword">in</span> executable format: File format not recognized</code></pre>
</div>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><code>libmylib.so</code></dt>
<dd>
<p>es una librería dinámica generada con <a href="https://www.gnu.org/software/libtool/libtool.html" target="_blank" rel="noopener">libtool</a>.</p>
</dd>
<dt class="hdlist1"><code>tests-mylib</code></dt>
<dd>
<p>es un ejecutable que utiliza la librería mylib.</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>Para los que estéis pensando que se me ha olvidado poner la opción de compilación <code>-g</code>, este error ocurre aunque utilicemos <code>-g</code>.</p>
</div>
<div class="paragraph">
<p>El error es debido a que estamos intentando ejecutar un script generado por <a href="https://www.gnu.org/software/libtool/libtool.html" target="_blank" rel="noopener">libtool</a>, es una envoltura sobre el programa real, para facilitar la ejecución de éste <sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnotedef_2" title="View footnote.">2</a>]</sup>.</p>
</div>
<div class="listingblock">
<div class="title">Para poder depurar nuestro programa de prueba <code>tests-mylib</code></div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">libtool --mode=execute gdb tests-mylib</code></pre>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnotedef_1">
<a href="#_footnoteref_1">1</a>. Herramienta que pertenece a la <a href="">Autotools</a> usada para crear bibliotecas de software portables.
</div>
<div class="footnote" id="_footnotedef_2">
<a href="#_footnoteref_2">2</a>. Más información en <a href="https://www.gnu.org/software/libtool/manual/libtool.html#Debugging-executables">documentación de libtool</a>
</div>
</div>]]></content>
            <category term="C++"/>
    <category term="Autotools"/>
    <category term="GNU"/>
    <category term="Tips and Tricks"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Eliminar etiquetas HTML</title>
            <link href="https://carlosvin.github.io/posts/delete-html-tags-py-django/es" />
               
            <id>https://carlosvin.github.io/posts/delete-html-tags-py-django/es</id>
            <updated>2012-10-02T09:30:00.000Z</updated>
            <summary>Cómo eliminar etiquetas HTML utilizando Python o más fácil aún, utilizando Django</summary>
            <content type="html"><![CDATA[<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_con_python">Con Python</a></li>
<li><a href="#_django">Django</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>A continuación veremos cómo eliminar las etiquetas HTML de una cadena de caracteres.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_con_python">Con <a href="https://www.python.org">Python</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Función encargada de eliminar las etiquetas HTML:</p>
</div>
<div class="listingblock">
<div class="title">main.py</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-python" data-lang="python"><span class="hljs-keyword">import</span> re

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">strip_tags</span>(<span class="hljs-params">value</span>):</span>
    <span class="hljs-keyword">return</span> re.sub(<span class="hljs-string">r&#x27;&lt;[^&gt;]*?&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, value)</code></pre>
</div>
</div>
<div class="paragraph">
<p>Vamos a hacer una prueba un fragmento de HTML a la función <code>strip_tags</code>:</p>
</div>
<div class="listingblock">
<div class="title">main.py</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-python" data-lang="python"><span class="hljs-keyword">import</span> re

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">strip_tags</span>(<span class="hljs-params">value</span>):</span>
    <span class="hljs-keyword">return</span> re.sub(<span class="hljs-string">r&#x27;&lt;[^&gt;]*?&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, value)

html_text = <span class="hljs-string">&quot;&quot;&quot;
    &lt;!DOCTYPE HTML&gt;
    &lt;html&gt;
        &lt;head&gt;
            &lt;title&gt;Title&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;
            &lt;p&gt;Paragraph&lt;/p&gt;
        &lt;/body&gt;
    &lt;/html&gt;&quot;&quot;&quot;</span>

print(strip_tags(html_text))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Si ejecutamos el script tenemos como resultado:</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">Title

Paragraph</code></pre>
</div>
</div>
<div class="paragraph">
<p>Si con <a href="https://www.python.org">Python</a> ha sido fácil, vamos a ver con <a href="https://www.djangoproject.com">Django</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_django"><a href="https://www.djangoproject.com">Django</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://www.djangoproject.com">Django</a> una ofrece función para esto: <a href="https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.strip_tags">strip_tags</a>.</p>
</div>
<div class="paragraph">
<p>Antes, solo hay que instalar la librería: <code>pip install django</code>.</p>
</div>
<div class="listingblock">
<div class="title">main.py</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-python" data-lang="python"><span class="hljs-keyword">from</span> django.utils.html <span class="hljs-keyword">import</span> strip_tags

html_text = <span class="hljs-string">&quot;&quot;&quot;
    &lt;!DOCTYPE HTML&gt;
    &lt;html&gt;
        &lt;head&gt;
            &lt;title&gt;Title&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;
            &lt;p&gt;Paragraph&lt;/p&gt;
        &lt;/body&gt;
    &lt;/html&gt;&quot;&quot;&quot;</span>

<span class="hljs-built_in">print</span> (strip_tags(html_text))</code></pre>
</div>
</div>
</div>
</div>]]></content>
            <category term="Python"/>
    <category term="Django"/>
    <category term="HTML"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Configuración de proxy para Git</title>
            <link href="https://carlosvin.github.io/posts/git-proxy-config/es" />
            <link 
				rel="alternate"
				hreflang="en"
				href="https://carlosvin.github.io/posts/git-proxy-config/en"/>   
            <id>https://carlosvin.github.io/posts/git-proxy-config/es</id>
            <updated>2012-11-15T11:00:00.000Z</updated>
            <summary>Cómo configurar git para que funcione a través de un proxy</summary>
            <content type="html"><![CDATA[<div class="paragraph">
<p>A veces resulta tedioso trabajar desde una red con proxy, al menos para mí, pierdo un montón de tiempo configurando software para que se actualice y funcione correctamente.</p>
</div>
<div class="paragraph">
<p>Esta es una descripción más o menos genérica de como hacer que <a href="https://git-scm.com" class="bare">https://git-scm.com</a> utilice un proxy determinado:</p>
</div>
<div class="listingblock">
<div class="title">para http</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">git config --global http.proxy http://&lt;nombre de usuario&gt;:&lt;password&gt;@&lt;direccion_ip&gt;:&lt;puerto&gt;</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">para https</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">git config --global https.proxy http://&lt;nombre de usuario&gt;:&lt;password&gt;@&lt;direccion_ip&gt;:&lt;puerto&gt;</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">para deshabilitar el uso del proxy</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">git config --global --<span class="hljs-built_in">unset</span> http.proxy</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>nombre de usuario</code>: nombre de usuario para autenticarse en el servidor de proxy.</p>
</li>
<li>
<p><code>password</code>: password para identificarse en el servidor proxy.</p>
</li>
<li>
<p><code>direccion_ip</code>: dirección de servidor de proxy.</p>
</li>
<li>
<p><code>puerto</code>: en el que está escuchando el servidor proxy.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Más información en <a href="https://git-scm.com/book/es/Personalizando-Git-Configuraci%C3%B3n-de-Git">la documentación oficial de Git</a>.</p>
</div>]]></content>
            <category term="Git"/>
    <category term="Proxy"/>
    <category term="Tips and Tricks"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Construir un proyecto C++ con Gradle</title>
            <link href="https://carlosvin.github.io/posts/gradle-cpp/es" />
            <link 
				rel="alternate"
				hreflang="en"
				href="https://carlosvin.github.io/posts/gradle-cpp/en"/>   
            <id>https://carlosvin.github.io/posts/gradle-cpp/es</id>
            <updated>2014-09-25T00:00:00.000Z</updated>
            <summary>Cómo construir un proyecto típico C++ utilizando Gradle</summary>
            <content type="html"><![CDATA[<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_introducción">Introducción</a></li>
<li><a href="#_un_caso_práctico">Un caso práctico</a>
<ul class="sectlevel2">
<li><a href="#_estructura_del_proyecto">Estructura del proyecto</a></li>
<li><a href="#_la_aplicación_c">La Aplicación C++</a></li>
<li><a href="#_construyendo_con_gradle">Construyendo con Gradle</a></li>
<li><a href="#_pruébalo_tú_mism">Pruébalo tú mism@</a></li>
</ul>
</li>
<li><a href="#_conclusiones">Conclusiones</a></li>
</ul>
</div>
<div class="sect1">
<h2 id="_introducción">Introducción</h2>
<div class="sectionbody">
<div class="paragraph">
<p>La construcción, gestión de dependencias y distribución de mis proyectos es algo que cada vez me preocupa más, me gustaría encontrar una herramienta que unificara este proceso y fuese independiente del lenguaje, lo más parecido con lo que he trabajado ha sido <a href="https://www.scons.org" target="_blank" rel="noopener">SCons</a>, <a href="https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction" target="_blank" rel="noopener">Autotools</a>, <a href="https://ant.apache.org" target="_blank" rel="noopener">Ant</a>, <a href="https://maven.apache.org" target="_blank" rel="noopener">Maven</a> y últimamente <a href="https://www.gradle.org" target="_blank" rel="noopener">Gradle</a>.</p>
</div>
<div class="paragraph">
<p>Llevo un tiempo haciendo algunas cosas con <a href="https://www.gradle.org" target="_blank" rel="noopener">Gradle</a>, pero siempre centrado en proyectos <a href="https://www.java.com" target="_blank" rel="noopener">Java</a> <span class="line-through">utilizándolo como reemplazo a <a href="https://maven.apache.org" target="_blank" rel="noopener">Maven</a>, porque que es más sencillo de usar y más rápido</span>. Actualizacion 2020: <a href="https://www.gradle.org" target="_blank" rel="noopener">Gradle</a> sigue siendo más rápido que <a href="https://maven.apache.org" target="_blank" rel="noopener">Maven</a>, pero al final sigo utilizando <a href="https://maven.apache.org" target="_blank" rel="noopener">Maven</a> para proyectos profesionales por la estabilidad de su API y sus ciclos de vida más restrictivos.
También lo he utilizado en projectos <a href="https://developer.android.com/studio/build" target="_blank" rel="noopener">Android</a> y he sufrido <a href="https://developer.android.com/sdk/installing/studio-build.html" target="_blank" rel="noopener">Android Studio + Gradle</a> en sus fases tempranas, actualmente está todo mucho más documentado y funciona muy bien.</p>
</div>
<div class="paragraph">
<p>Antes de nada hay que decir que la construcción de proyectos C/C++ y Objective-C con <a href="https://www.gradle.org" target="_blank" rel="noopener">Gradle</a> se encuentra en fase de <a href="https://docs.gradle.org/current/userguide/feature_lifecycle.html#sec:incubating_state" target="_blank" rel="noopener">incubación</a>, aunque ya permite realizar algunas tareas avanzadas como:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Generación de múltiples artefactos dentro del mismo proyecto, esto es varias librerías o ejecutables.</p>
</li>
<li>
<p>Gestionar las dependencias entre estos artefactos (sin versiones).</p>
</li>
<li>
<p>Generar distintos "sabores" de aplicaciones, por ejemplo: podremos generar una aplicación "Community" y otra con más características habilitadas llamada "Enterprise".</p>
</li>
<li>
<p>Permite generar binarios para distintas plataformas, esto depende de las cadenas de herramientas (<a href="https://en.wikipedia.org/wiki/Toolchain" target="_blank" rel="noopener">Toolchain</a>) que tengamos instaladas en la máquina de compilación.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Como decía todavía tiene limitaciones, aunque están trabajando en ello <a href="https://blog.gradle.org/state-and-future-of-the-gradle-software-model#a-way-forward">si consiguen lo que tienen planeado</a>, <span class="line-through">y si lo consiguen,  dejaré <a href="https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction" target="_blank" rel="noopener">Autotools</a> (me arrepentiré de haber dicho esto)</span>. Actualización 2000: Realmente, unos años más tarde, no estoy utilizando <a href="https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction" target="_blank" rel="noopener">Autotools</a> ni tampoco <a href="https://www.gradle.org" target="_blank" rel="noopener">Gradle</a>, estoy usando <a href="https://mesonbuild.com/">Meson</a> y considerando <a href="https://docs.bazel.build/versions/master/tutorial/cpp.html">Bazel</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_un_caso_práctico">Un caso práctico</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Básicamente he sacado todo el ejemplo de <a href="https://docs.gradle.org/current/userguide/native_software.html">la guia de construcción de software native de Gradle</a> y lo he adaptado a un caso en el que hay varias plataformas y quiero generar dos versiones distintas de mi software "Community" y "Enterprise".</p>
</div>
<div class="paragraph">
<p>La aplicación es un ejecutable y una librería dinámica. El ejecutable hace uso de esta librería. Ya está, solo quiero mostrar lo que nos permite hacer <a href="https://www.gradle.org" target="_blank" rel="noopener">Gradle</a>.</p>
</div>
<div class="paragraph">
<p>También nos permitirá generar una versión para distribuir (producción) y otra para depurar (desarrollo).</p>
</div>
<div class="paragraph">
<p>Todo el código se encuentra en <a href="https://github.com/carlosvin/cpp_gradle" class="bare">https://github.com/carlosvin/cpp_gradle</a>.</p>
</div>
<div class="sect2">
<h3 id="_estructura_del_proyecto">Estructura del proyecto</h3>
<div class="paragraph">
<p>Podemos crear la estructura que queramos, pero resulta más fácil seguir la que recomienda <a href="https://www.gradle.org" target="_blank" rel="noopener">Gradle</a>, para no tener que especificar donde está el código fuente. Ésta es la estructura del proyecto:</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">gradle-cpp</dt>
<dd>
<p>Directorio raíz.</p>
<div class="dlist">
<dl>
<dt class="hdlist1">build.gradle</dt>
<dd>
<p>Fichero donde se configura el proyecto <a href="https://www.gradle.org" target="_blank" rel="noopener">Gradle</a>, el equivalente al build.xml de <a href="https://ant.apache.org" target="_blank" rel="noopener">Ant</a>, al <a href="https://www.gnu.org/software/make/manual/html_node/Makefiles.html:" target="_blank" rel="noopener">Makefile</a> de C/C++ o al pom.xml de <a href="https://maven.apache.org" target="_blank" rel="noopener">Maven</a>.</p>
</dd>
<dt class="hdlist1">src</dt>
<dd>
<p>Carpeta donde va todo el código fuente</p>
<div class="dlist">
<dl>
<dt class="hdlist1">hello</dt>
<dd>
<p>Carpeta que contiene el módulo que va a ser la librería hello.</p>
</dd>
</dl>
</div>
</dd>
<dt class="hdlist1">cpp</dt>
<dd>
<p>Carpeta donde van los fuentes C++.</p>
<div class="dlist">
<dl>
<dt class="hdlist1">Hello.cpp</dt>
<dd>
<p> Implementación de la clase Hello.</p>
</dd>
</dl>
</div>
</dd>
<dt class="hdlist1">headers</dt>
<dd>
<p>Carpeta donde van los ficheros de cabeceras.
Hello.h:::: Declaración de la Clase Hello.</p>
<div class="dlist">
<dl>
<dt class="hdlist1">Msg.h</dt>
<dd>
<p>Declaración de constantes.</p>
</dd>
</dl>
</div>
</dd>
</dl>
</div>
</dd>
<dt class="hdlist1">main</dt>
<dd>
<p>Carpeta que contiene el módulo que será el ejecutable que utilice la librería hello.</p>
<div class="dlist">
<dl>
<dt class="hdlist1">cpp</dt>
<dd>
<p>Carpeta donde van los fuentes C++.</p>
<div class="dlist">
<dl>
<dt class="hdlist1">main.cpp</dt>
<dd>
<p>Código fuente con la función main.</p>
</dd>
</dl>
</div>
</dd>
<dt class="hdlist1">build</dt>
<dd>
<p>Carpeta que crea Gradle automáticamente donde deja todos los resultados sus ejecuciones, en ella encontraremos informes de resultados de pruebas, binarios compilados, paquetes para distribuir, etc.</p>
</dd>
</dl>
</div>
</dd>
</dl>
</div>
</div>
<div class="sect2">
<h3 id="_la_aplicación_c">La Aplicación C++</h3>
<div class="paragraph">
<p>Va a consistir en un ejecutable que hará uso de la funcionalidad de la librería ’hello’.</p>
</div>
<div class="listingblock">
<div class="title">main.cpp</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-cpp" data-lang="cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Hello.h&quot;</span></span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> ** argv)</span>
</span>{
    <span class="hljs-function">Hello <span class="hljs-title">hello</span> <span class="hljs-params">(<span class="hljs-string">&quot;Pepito&quot;</span>)</span></span>;
    hello.sayHello(<span class="hljs-number">10</span>);
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Esta librería permite saludar `n`<sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup> veces a una persona especificada en su constructor.</p>
</div>
<div class="listingblock">
<div class="title">Hello.h</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-cpp" data-lang="cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span>
{</span>
    <span class="hljs-keyword">private</span>:
        <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * who;
    <span class="hljs-keyword">public</span>:
        Hello(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * who);
        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> n = <span class="hljs-number">1</span>)</span></span>;
};</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_construyendo_con_gradle">Construyendo con Gradle</h3>
<div class="sect3">
<h4 id="_caso_básico">Caso básico</h4>
<div class="paragraph">
<p>Lo único que necesitamos para construir nuestra aplicación con <a href="https://www.gradle.org" target="_blank" rel="noopener">Gradle</a> es: tener <a href="https://www.gradle.org" target="_blank" rel="noopener">Gradle</a><sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnotedef_2" title="View footnote.">2</a>]</sup> y el fichero <code>build.gradle</code>.</p>
</div>
<div class="listingblock">
<div class="title">build.gradle</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-groovy" data-lang="groovy">apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;cpp&#x27;</span>

model {
  components {
    hello(NativeLibrarySpec) {}
    main(NativeExecutableSpec) {
      binaries.all {
        lib <span class="hljs-attr">library:</span> <span class="hljs-string">&quot;hello&quot;</span>
      }
    }
  }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Con este fichero tan simple, conseguiremos compilar e instalar nuestra aplicación, en modo Debug para la plataforma donde estamos ejecutando <a href="https://www.gradle.org" target="_blank" rel="noopener">Gradle</a>, en mi caso es Linux X64.</p>
</div>
<div class="paragraph">
<p>Si ejecutamos desde la raíz de nuestro proyecto <code>gradle task</code>, podremos ver todas las tareas que podemos hacer.</p>
</div>
<div class="paragraph">
<p>En nuestro caso, solo queremos nuestra aplicación compilada y lista para funcionar, así que ejecutaremos: <code>gradle installMainExecutable</code>.</p>
</div>
<div class="paragraph">
<p>Una vez que ha terminado, podemos ejecutar el programa llamando al script `build/install/mainExecutable/main`<sup class="footnote">[<a id="_footnoteref_3" class="footnote" href="#_footnotedef_3" title="View footnote.">3</a>]</sup>.</p>
</div>
<div class="listingblock">
<div class="title">Output</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">$ build/install/mainExecutable/main
1.  Hello Mr. Pepito (Community)
2.  Hello Mr. Pepito (Community)
3.  Hello Mr. Pepito (Community)
4.  Hello Mr. Pepito (Community)
5.  Hello Mr. Pepito (Community)
6.  Hello Mr. Pepito (Community)
7.  Hello Mr. Pepito (Community)
8.  Hello Mr. Pepito (Community)
9.  Hello Mr. Pepito (Community)
10. Hello Mr. Pepito (Community)</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_distintos_sabores">Distintos “Sabores”</h4>
<div class="paragraph">
<p>Con unas pocas líneas más, podemos generar distintas versiones de la misma aplicación, en nuestro ejemplo vamos a generar una versión “Community” y otra “Enterprise”.</p>
</div>
<div class="listingblock">
<div class="title">build.gradle</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-groovy" data-lang="groovy">apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;cpp&#x27;</span>

model {
  flavors {
      community
      enterprise
  }

  components {
    hello(NativeLibrarySpec) {
      binaries.all {
        <span class="hljs-keyword">if</span> (flavor == flavors.enterprise) {
          cppCompiler.define <span class="hljs-string">&quot;ENTERPRISE&quot;</span>
        }
      }
    }
    main(NativeExecutableSpec) {
      binaries.all {
        lib <span class="hljs-attr">library:</span> <span class="hljs-string">&quot;hello&quot;</span>
        }
    }
  }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Además tenemos que preparar nuestra aplicación para utilizar estos parámetros de compilación.</p>
</div>
<div class="listingblock">
<div class="title">Msg.h</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-cpp" data-lang="cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> ENTERPRISE</span>
<span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * EDITION = <span class="hljs-string">&quot;Enterprise&quot;</span>;

<span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span>
<span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * EDITION = <span class="hljs-string">&quot;Community&quot;</span>;

<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>De esta forma se utiliza una cadena u otra en función del “sabor” con que compilemos.</p>
</div>
<div class="paragraph">
<p>Si ahora ejecutamos <code>gradle clean task</code> en la raíz de nuestro proyecto, veremos que tenemos más tareas disponibles, antes teníamos <code>installMainExecutable</code> y ahora ha sido reemplazada por <code>installCommunityMainExecutable</code> y <code>installEnterpriseMainExecutable</code>.</p>
</div>
<div class="paragraph">
<p>Si ejecutamos estas dos tareas, tendremos nuestra aplicación instalada en los dos sabores.</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash"><span class="hljs-variable">$gradle</span> installEnterpriseMainExecutable installCommunityMainExecutable

:compileEnterpriseHelloSharedLibraryHelloCpp
:linkEnterpriseHelloSharedLibrary
:enterpriseHelloSharedLibrary
:compileEnterpriseMainExecutableMainCpp
:linkEnterpriseMainExecutable
:enterpriseMainExecutable
:installEnterpriseMainExecutable
:compileCommunityHelloSharedLibraryHelloCpp
:linkCommunityHelloSharedLibrary
:communityHelloSharedLibrary
:compileCommunityMainExecutableMainCpp
:linkCommunityMainExecutable
:communityMainExecutable
:installCommunityMainExecutable

BUILD SUCCESSFUL
Total time: 9.414 secs</code></pre>
</div>
</div>
<div class="paragraph">
<p>Ahora podemos ejecutar nuestra aplicación en los dos sabores:</p>
</div>
<div class="listingblock">
<div class="title">Community</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">$ build/install/mainExecutable/community/main
1.      Hello Mr. Pepito        (Community)
2.      Hello Mr. Pepito        (Community)
3.      Hello Mr. Pepito        (Community)
4.      Hello Mr. Pepito        (Community)
5.      Hello Mr. Pepito        (Community)
6.      Hello Mr. Pepito        (Community)
7.      Hello Mr. Pepito        (Community)
8.      Hello Mr. Pepito        (Community)
9.      Hello Mr. Pepito        (Community)
10.     Hello Mr. Pepito        (Community)</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Enterprise</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">$ build/install/mainExecutable/enterprise/main
1.      Hello Mr. Pepito        (Enterprise)
2.      Hello Mr. Pepito        (Enterprise)
3.      Hello Mr. Pepito        (Enterprise)
4.      Hello Mr. Pepito        (Enterprise)
5.      Hello Mr. Pepito        (Enterprise)
6.      Hello Mr. Pepito        (Enterprise)
7.      Hello Mr. Pepito        (Enterprise)
8.      Hello Mr. Pepito        (Enterprise)
9.      Hello Mr. Pepito        (Enterprise)
10.     Hello Mr. Pepito        (Enterprise)</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_release_o_debug">Release o Debug</h4>
<div class="paragraph">
<p>Por defecto <a href="https://www.gradle.org" target="_blank" rel="noopener">Gradle</a> compila nuestra aplicación en modo Debug, pero podemos añadir el modo Release para que active algunas optimizaciones<sup class="footnote">[<a id="_footnoteref_4" class="footnote" href="#_footnotedef_4" title="View footnote.">4</a>]</sup>.</p>
</div>
<div class="listingblock">
<div class="title">build.gradle</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-groovy" data-lang="groovy">apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;cpp&#x27;</span>
model {
    buildTypes {
        debug
        release
    }

<span class="hljs-comment">// ... the rest of file below doesn&#x27;t change</span>
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Si ahora ejecutamos <code>gradle clean task</code> veremos que tenemos más tareas, se habrán desdoblado las que teníamos, por ejemplo <code>installCommunityMainExecutable</code> se habrá desdoblado en <code>installDebugCommunityMainExecutable</code> y <code>installReleaseCommunityMainExecutable</code>.</p>
</div>
</div>
<div class="sect3">
<h4 id="_multi_plataforma">Multi-plataforma</h4>
<div class="paragraph">
<p>También tenemos las posibilidad de utilizar las características de compilación cruzada que nos ofrecen los compiladores y generar componentes nativos para otras plataformas. El proceso es el mismo, simplemente tenemos que dar te alta las plataformas que vamos a soportar.</p>
</div>
<div class="paragraph">
<p>Esto solo funcionará si en nuestro sistema tenemos instalada la cadena de herramientas (<a href="https://en.wikipedia.org/wiki/Toolchain" target="_blank" rel="noopener">Toolchain</a>) necesaria, es decir, si en un sistema de 64 bits queremos compilar para 32 bits, tendremos que tener instaladas las librerías necesarias para 32 bits.</p>
</div>
<div class="listingblock">
<div class="title">build.gradle</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-groovy" data-lang="groovy">apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;cpp&#x27;</span>

model {
  buildTypes {
    debug
    release
  }

  platforms {
    x86 {
      architecture <span class="hljs-string">&quot;x86&quot;</span>
    }
    x64 {
      architecture <span class="hljs-string">&quot;x86_64&quot;</span>
    }
    itanium {
      architecture <span class="hljs-string">&quot;ia-64&quot;</span>
    }
  }

  flavors {
    community
    enterprise
  }

  components {
    hello(NativeLibrarySpec) {
      binaries.all {
        <span class="hljs-keyword">if</span> (flavor == flavors.enterprise) {
          cppCompiler.define <span class="hljs-string">&quot;ENTERPRISE&quot;</span>
        }
      }
    }
    main(NativeExecutableSpec) {
      binaries.all {
        lib <span class="hljs-attr">library:</span> <span class="hljs-string">&quot;hello&quot;</span>
      }
    }
  }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Ejecutando <code>gradle clean task</code> podremos ver las distintas opciones de construción que tenemos, en nuestro caso veremos que podemos construir distintas versiones de nuestra aplicación en distintos sabores, para distintas plataformas en Debug o Release.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_pruébalo_tú_mism">Pruébalo tú mism@</h3>
<div class="paragraph">
<p>El proyecto se encuentra en <a href="https://github.com/carlosvin/cpp_gradle" class="bare">https://github.com/carlosvin/cpp_gradle</a>.</p>
</div>
<div class="paragraph">
<p>Para poder probar necesitas:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Tener instalado <a href="https://www.java.com" target="_blank" rel="noopener">Java</a> a partir de la versión 6.</p>
</li>
<li>
<p>Tener algún compilador instalado (por ejemplo <a href="https://gcc.gnu.org/" target="_blank" rel="noopener">GCC</a>)</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Solo tienes que seguir los siguientes pasos:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><code>git clone <a href="mailto:git@github.com">git@github.com</a>:carlosvin/cpp_gradle.git</code></p>
</li>
<li>
<p><code>cd cpp_gradle</code></p>
</li>
<li>
<p><code>./gradlew task</code> o <code>./gradlew.bat task</code> si estás en Windows. De esta forma verás todas las tareas que te ofrece <a href="https://www.gradle.org" target="_blank" rel="noopener">Gradle</a> para este proyecto. La primera vez tardará un poco porque se descarga una versión de <a href="https://www.gradle.org" target="_blank" rel="noopener">Gradle</a>.</p>
</li>
<li>
<p>Si estás en una máquina de 64 bits, por ejemplo utiliza este comando para compilar e instalar la aplicación <code>./gradlew installX64ReleaseEnterpriseMainExecutable</code>.</p>
</li>
<li>
<p>Ejecuta la aplicación que acabas de construir <code>build/install/mainExecutable/x64ReleaseEnterprise/main</code></p>
</li>
</ol>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusiones">Conclusiones</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Con una configuración mínima, tenemos muchas posibilidades de construcción de aplicaciones nativas multi-plataforma.</p>
</div>
<div class="paragraph">
<p>Tiene un futuro prometedor, veremos como termina.</p>
</div>
<div class="paragraph">
<p>Podemos utilizar otras características de <a href="https://www.gradle.org" target="_blank" rel="noopener">Gradle</a> y aplicarlas a nuestros proyectos C++, como análisis estáticos de código, generación de informes (pruebas, cobertura, calidad, etc.), fácil incorporación a sistemas de integración continua.</p>
</div>
<div class="paragraph">
<p><a href="https://www.gradle.org" target="_blank" rel="noopener">Gradle</a> para C++ es una característica que actualmente está en desarrollo, por lo que no hay que olvidar que:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>No debemos utilizar en entornos reales de desarrollo, puede acarrear muchos dolores de cabeza.</p>
</li>
<li>
<p>La forma de definir el fichero build.gradle para esta característica puede cambiar.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Todo el ejemplo se encuentra en <a href="https://github.com/carlosvin/cpp_gradle" class="bare">https://github.com/carlosvin/cpp_gradle</a>. Os recomiendo que lo descarguéis y probéis lo sencillo que resulta.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Si encontráis algún problema en el ejemplo, escribir un comentario, abrir un defecto o corregirlo vosotros mismos en <a href="https://github.com/carlosvin/cpp_gradle" class="bare">https://github.com/carlosvin/cpp_gradle</a>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Más información en <a href="https://docs.gradle.org/current/userguide/native_software.html">Getting Started Gradle Native</a>.</p>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnotedef_1">
<a href="#_footnoteref_1">1</a>. n es un número entero positivo
</div>
<div class="footnote" id="_footnotedef_2">
<a href="#_footnoteref_2">2</a>. Realmente no es necesario tener instalado Gradle, si utilizamos el wrapper, pero esto no lo vamos a tratar hoy, <a href="https://docs.gradle.org/current/userguide/gradle_wrapper.html">si queréis más información</a>.
</div>
<div class="footnote" id="_footnotedef_3">
<a href="#_footnoteref_3">3</a>. .bat en Windows y sin extensión en Linux
</div>
<div class="footnote" id="_footnotedef_4">
<a href="#_footnoteref_4">4</a>. También podemos definir el tipo de optimizaciones que vamos a utilizar.
</div>
</div>]]></content>
            <category term="Gradle"/>
    <category term="C++"/>
    <category term="Build Software"/>
    <category term="Build System"/>
    <category term="Dependency Management"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Bases de Datos Embebidas Java: Comparación de Rendimiento</title>
            <link href="https://carlosvin.github.io/posts/java-embedded-db-performance-comparison/es" />
               
            <id>https://carlosvin.github.io/posts/java-embedded-db-performance-comparison/es</id>
            <updated>2014-06-07T16:09:00.000Z</updated>
            <summary>Comparación de rendimiento en Java entre tres bases de datos embebidas: Derby/JavaDB, Sqlite y ObjectDB</summary>
            <content type="html"><![CDATA[<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_bases_de_datos_embebidas">Bases de datos embebidas</a>
<ul class="sectlevel2">
<li><a href="#_sqlitedb">SqliteDB</a></li>
<li><a href="#_derbydb_o_javadb">DerbyDB o JavaDB</a></li>
<li><a href="#_objectdb">ObjectDb</a></li>
</ul>
</li>
<li><a href="#_los_tests">Los Tests</a>
<ul class="sectlevel2">
<li><a href="#_las_bases_de_datos_jdbc">Las Bases de Datos JDBC</a></li>
<li><a href="#_el_código_fuente">El código fuente</a></li>
<li><a href="#_resultados_de_los_tests">Resultados de los tests</a></li>
</ul>
</li>
</ul>
</div>
<div class="sect1">
<h2 id="_bases_de_datos_embebidas">Bases de datos embebidas</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Se trata de bases de datos que carecen de servidor, están inscrustadas en la propia aplicación y suelen estar almacenadas en ficheros locales. Esto último unido a que suelen tener un modo de funcionamiento en el que mantienen los datos en memoria hace que puedan tener un rendimiento muy alto.</p>
</div>
<div class="paragraph">
<p>Eso sí, este gran grado acoplamiento a la aplicación, hace que tengan peor rendimiento cuando se comparten entre varias aplicaciones debido a colisiones de acceso.</p>
</div>
<div class="paragraph">
<p>Otra ventaja es que no tenemos que encargarnos de mantener y gestionar un servidor de bases de datos.</p>
</div>
<div class="paragraph">
<p>Voy a hacer una comparativa de rendimiento entre 3 bases de datos embebidas <a href="https://es.wikipedia.org/wiki/ACID" target="_blank" rel="noopener">ACID</a> (transaccionales), las <a href="https://es.wikipedia.org/wiki/NoSQL" target="_blank" rel="noopener">NoSQL</a> no entran en esta comparativa que están en otra liga de rendimiento.</p>
</div>
<div class="paragraph">
<p>Contenidos</p>
</div>
<div class="sect2">
<h3 id="_sqlitedb"><a href="https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/SqliteDB.java" target="_blank" rel="noopener">SqliteDB</a></h3>
<div class="paragraph">
<p>Se trata de una librería escrita en <a href="https://es.wikipedia.org/wiki/ANSI_C" target="_blank" rel="noopener">ANSI C</a>, de menos de 500KB, multi-plataforma, sin dependencias externas, almacena todo el contenido de la base de datos en un solo fichero.</p>
</div>
<div class="paragraph">
<p>Es la que da mejor rendimiento en los <a href="#_resultados_de_los_tests">Resultados de los tests</a>.</p>
</div>
<div class="paragraph">
<p>Se puede utilizar desde C y C++, pero también <a href="https://es.wikipedia.org/wiki/Sqlite#Lenguajes_de_programaci.C3.B3n" target="_blank" rel="noopener">desde otros lenguajes de programación</a> (PHP, Python, Java, .NET &#8230;&#8203;).</p>
</div>
<div class="paragraph">
<p>En el caso de <a href="https://es.wikipedia.org/wiki/Java_(lenguaje_de_programaci%C3%B3n)" target="_blank" rel="noopener">Java</a> podemos gestionar esta base de datos a través de <a href="https://es.wikipedia.org/wiki/Java_Database_Connectivity" target="_blank" rel="noopener">JDBC</a>. Podemos obtener la librería de <a href="https://bitbucket.org/xerial/sqlite-jdbc" class="bare">https://bitbucket.org/xerial/sqlite-jdbc</a>.</p>
</div>
<div class="paragraph">
<p>Veamos un ejemplo de la inserción de una serie de objetos de la clase <a href="https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/domain/Price.java" target="_blank" rel="noopener">Price.java</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-java" data-lang="java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcDb</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DB</span> </span>{

    <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Column</span> </span>{
        INSTRUMENT,
        MARKET,
        PRICE,
        DATE;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TABLE_NAME = <span class="hljs-string">&quot;PRICES&quot;</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SQL_INSERT = <span class="hljs-string">&quot;INSERT INTO &quot;</span> + TABLE_NAME
            + <span class="hljs-string">&quot; (INSTRUMENT, MARKET, PRICE, DATE) VALUES (?,?,?,?)&quot;</span>;

    <span class="hljs-comment">// ...</span>

    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(Price p, PreparedStatement preparedStatement)</span> <span class="hljs-keyword">throws</span> SQLException </span>{
        preparedStatement.setString(<span class="hljs-number">1</span>, p.getInstrument());
        preparedStatement.setString(<span class="hljs-number">2</span>, p.getMarket());
        preparedStatement.setDouble(<span class="hljs-number">3</span>, p.getPrice());
        preparedStatement.setTimestamp(<span class="hljs-number">4</span>, <span class="hljs-keyword">new</span> Timestamp(p.getDate().getTime()));
        preparedStatement.addBatch();
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(Price... prices)</span> <span class="hljs-keyword">throws</span> SQLException </span>{
        PreparedStatement preparedStatement = conn.prepareStatement(SQL_INSERT);
        <span class="hljs-keyword">for</span> (Price p : prices) {
            insert(p, preparedStatement);
        }
        preparedStatement.executeBatch();
        preparedStatement.close();
        conn.commit();
    }

    <span class="hljs-comment">// ...</span>
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_derbydb_o_javadb"><a href="https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/DerbyDB.java" target="_blank" rel="noopener">DerbyDB</a> o <a href="https://www.oracle.com/technetwork/es/java/javadb/overview/index.html" target="_blank" rel="noopener">JavaDB</a></h3>
<div class="paragraph">
<p><a href="https://www.oracle.com/technetwork/es/java/javadb/overview/index.html" target="_blank" rel="noopener">JavaDB</a> es una distribución de Oracle de la base de datos de código libre <a href="https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/DerbyDB.java" target="_blank" rel="noopener">DerbyDB</a>. Soporta el estándar <a href="https://es.wikipedia.org/wiki/SQL" target="_blank" rel="noopener">ANSI/ISO SQL</a> a través de <a href="https://es.wikipedia.org/wiki/Java_Database_Connectivity" target="_blank" rel="noopener">JDBC</a> y <a href="https://es.wikipedia.org/wiki/Java_EE" target="_blank" rel="noopener">Java EE</a>. Estas librerías están incluidas en el <a href="https://es.wikipedia.org/wiki/Java_Development_Kit" target="_blank" rel="noopener">JDK</a>.</p>
</div>
<div class="paragraph">
<p>Almacena la base de datos en multiples archivos, lo que puede resultar útil para escalar el almacenamiento.</p>
</div>
<div class="paragraph">
<p>Solo podemos utilizarlo en <a href="https://es.wikipedia.org/wiki/Java_(lenguaje_de_programaci%C3%B3n)" target="_blank" rel="noopener">Java</a>, no desde otros lenguajes.</p>
</div>
<div class="paragraph">
<p>Como veremos más adelante ha sido la más lenta en los <a href="#_resultados_de_los_tests">Resultados de los tests</a>.</p>
</div>
<div class="paragraph">
<p>La implementación de ejemplo de una inserción de una serie de objetos de la clase <a href="https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/domain/Price.java" target="_blank" rel="noopener">Price.java</a>, es exactamente la misma que la que hemos hecho más arriba en <a href="https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/SqliteDB.java" target="_blank" rel="noopener">SqliteDB</a>, esto es una de las bondades de <a href="https://es.wikipedia.org/wiki/Java_Database_Connectivity" target="_blank" rel="noopener">JDBC</a>, que nos permite obtener una conexión para una base de datos específica, pero a partir de ahí casi siempre nos podemos olvidar de la base de datos con la que trabajamos, siempre y cuando soporte nuestras consultas <a href="https://es.wikipedia.org/wiki/SQL" target="_blank" rel="noopener">SQL</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_objectdb"><a href="https://www.objectdb.com/" target="_blank" rel="noopener">ObjectDb</a></h3>
<div class="paragraph">
<p>Es una <a href="https://es.wikipedia.org/wiki/Base_de_datos_orientada_a_objetos">base de datos orientada a objetos</a> que nos permite acceso <a href="https://es.wikipedia.org/wiki/Java_Persistence_API" target="_blank" rel="noopener">JPA</a>, un estándar de Java que persigue no perder las ventajas de la orientación a objetos; esto se suele perder cuando nos acercamos a la capa de persistencia.</p>
</div>
<div class="paragraph">
<p>Resulta realmente sencillo realizar acciones típicas de una base de datos, abstrayéndonos del SQL, por ejemplo veamos cómo quedaría una inserción de un array de objetos de la clase Price con <a href="https://www.objectdb.com/" target="_blank" rel="noopener">ObjectDb</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-java" data-lang="java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(Price... prices)</span> <span class="hljs-keyword">throws</span> SQLException </span>{
    em.getTransaction().begin();
    <span class="hljs-keyword">for</span> (Price p : prices) {
        em.persist(p);
    }
    em.getTransaction().commit();
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Si a esta facilidad de uso, le unimos que los <a href="#_resultados_de_los_tests">Resultados de los tests</a> de rendimiento han sido muy buenos (cerca de <a href="https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/SqliteDB.java" target="_blank" rel="noopener">SqliteDB</a>), puedo decir que he descubierto una base de datos embebida a tener muy en cuenta en futuros proyectos <a href="https://es.wikipedia.org/wiki/Java_(lenguaje_de_programaci%C3%B3n)" target="_blank" rel="noopener">Java</a>, eso sí, al igual que con <a href="https://www.oracle.com/technetwork/es/java/javadb/overview/index.html" target="_blank" rel="noopener">JavaDB</a>, solo nos sirve si vamos a programar en <a href="https://es.wikipedia.org/wiki/Java_(lenguaje_de_programaci%C3%B3n)" target="_blank" rel="noopener">Java</a>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_los_tests">Los Tests</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Simplemente consisten en realizar repetidamente una serie operaciones <a href="https://es.wikipedia.org/wiki/CRUD" target="_blank" rel="noopener">CRUD</a>. Para cada base de datos, el test realiza una serie de inserciones, selects, actualizaciones y borrado de objetos de la clase Precio.</p>
</div>
<div class="paragraph">
<p>He utilizado 100000 instancias de la clase <a href="https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/domain/Price.java" target="_blank" rel="noopener">Price.java</a>, las mismas para cada tipo de base de datos.</p>
</div>
<div class="paragraph">
<p>Para esto he creado una interfaz <a href="https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/DB.java" target="_blank" rel="noopener">DB.java</a> que compartirán cada una de las implementaciones para cada base de datos.</p>
</div>
<div class="listingblock">
<div class="title">DB.java</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-java" data-lang="java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DB</span> </span>{

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(Price... prices)</span> <span class="hljs-keyword">throws</span> SQLException</span>;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createTable</span><span class="hljs-params">()</span></span>;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteAll</span><span class="hljs-params">()</span></span>;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(Price... prices)</span> <span class="hljs-keyword">throws</span> SQLException</span>;

    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;Price&gt; <span class="hljs-title">selectAll</span><span class="hljs-params">()</span></span>;

}</code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_las_bases_de_datos_jdbc">Las Bases de Datos JDBC</h3>
<div class="paragraph">
<p>Solo cambian los datos necesarios para obtener el driver y la conexión a la base de datos, por eso toda la lógica está en la clase <a href="https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/JdbcDb.java" target="_blank" rel="noopener">JdbcDb</a> de la que heredan <a href="https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/SqliteDB.java" target="_blank" rel="noopener">SqliteDB</a> y <a href="https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/DerbyDB.java" target="_blank" rel="noopener">DerbyDB</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_el_código_fuente">El código fuente</h3>
<div class="paragraph">
<p>Podéis descargar el código fuente de <a href="https://github.com/carlosvin/java_embedded_databases" class="bare">https://github.com/carlosvin/java_embedded_databases</a>.</p>
</div>
<div class="paragraph">
<p>Se trata de un proyecto <a href="https://www.gradle.org" target="_blank" rel="noopener">Gradle</a>, por lo que para ejecutar los tests solo tenéis que ejecutar: <code>grade test</code>.</p>
</div>
<div class="paragraph">
<p><a href="https://www.gradle.org" target="_blank" rel="noopener">Gradle</a> descargará automáticamente las librerías necesarias, compilará y ejecutará los tests.</p>
</div>
<div class="paragraph">
<p>También podéis ver directamente la ejecución en <a href="https://travis-ci.org/carlosvin/java_embedded_databases" class="bare">https://travis-ci.org/carlosvin/java_embedded_databases</a>.</p>
</div>
<div class="paragraph">
<p><a href="https://travis-ci.org/carlosvin/java_embedded_databases"><span class="image"><img src="https://travis-ci.org/carlosvin/java_embedded_databases.svg" alt="image"></span></a></p>
</div>
</div>
<div class="sect2">
<h3 id="_resultados_de_los_tests">Resultados de los tests</h3>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">db.DbTest &gt; testSqliteDB STANDARD_OUT
    Testing with 100000 elements
    100000 Prices SqliteDB, total time 3455 ms <b class="conum">(1)</b>
    	Insert:	 1508 ms
    	Select:	 605 ms
    	Update:	 1319 ms
    	Delete:	 23 ms
    ----------------------------------------------
db.DbTest &gt; testObjectDB STANDARD_OUT
    Testing with 100000 elements
    100000 Prices ObjectDB, total time 6467 ms <b class="conum">(2)</b>
    	Insert:	 2579 ms
    	Select:	 1126 ms
    	Update:	 1698 ms
    	Delete:	 1064 ms
    ----------------------------------------------
db.DbTest &gt; testDerbyDB STANDARD_OUT
    Testing with 100000 elements
    100000 Prices DerbyDB, total time 24808 ms <b class="conum">(3)</b>
    	Insert:	 11467 ms
    	Select:	 695 ms
    	Update:	 6983 ms
    	Delete:	 5663 ms</code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p><a href="https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/SqliteDB.java" target="_blank" rel="noopener">SqliteDB</a> es el más rápido.</p>
</li>
<li>
<p><a href="https://www.objectdb.com/" target="_blank" rel="noopener">ObjectDb</a> es dos veces más lento que <a href="https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/SqliteDB.java" target="_blank" rel="noopener">SqliteDB</a>.</p>
</li>
<li>
<p><a href="https://www.oracle.com/technetwork/es/java/javadb/overview/index.html" target="_blank" rel="noopener">JavaDB</a> o <a href="https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/DerbyDB.java" target="_blank" rel="noopener">DerbyDB</a> es el más lento, unas 8 veces más lento que <a href="https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/SqliteDB.java" target="_blank" rel="noopener">SqliteDB</a></p>
</li>
</ol>
</div>
</div>
</div>
</div>]]></content>
            <category term="Java"/>
    <category term="database"/>
    <category term="embedded"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Eliminar paquetes huérfanos en Linux</title>
            <link href="https://carlosvin.github.io/posts/linux-remove-orphaned-files/es" />
            <link 
				rel="alternate"
				hreflang="en"
				href="https://carlosvin.github.io/posts/linux-remove-orphaned-files/en"/>   
            <id>https://carlosvin.github.io/posts/linux-remove-orphaned-files/es</id>
            <updated>2012-10-02T11:30:02.000Z</updated>
            <summary>Cómo eliminar los paquetes que se han instalado automáticamente y que ya no se utilizan</summary>
            <content type="html"><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Cuando instalamos un paquete en las distribuciones Linux (en las que yo conozco), se instalan otros paquetes (dependencias). Si en el futuro desinstalas ese paquete, esas dependencias pueden quedar instaladas en el sistema, aunque no serán usadas por nadie, simplemente ocuparán espacio en disco. Estas dependencias son llamadas paquetes huérfanos.</p>
</div>
<div class="paragraph">
<p>Veamos cómo desinstalar paquetes huérfanos.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_archlinux"><a href="https://archlinux.org/" target="_blank" rel="noopener">Archlinux</a></h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">pacman -Rsn $(pacman -Qdtq)</code></pre>
</div>
</div>
<div class="paragraph">
<p>El funcionamiento es muy sencillo:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>la sentencia <code>pacman -Qdt</code> da un listado de todos los paquetes huérfanos</p>
</li>
<li>
<p><code>pacman -Rsn</code> elimina los paquetes listados</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_debian"><a href="https://debian.org/" target="_blank" rel="noopener">Debian</a></h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">apt-get remove --purge $(deborphan)</code></pre>
</div>
</div>
</div>
</div>]]></content>
            <category term="Linux"/>
    <category term="Archlinux"/>
    <category term="Debian"/>
    <category term="Tips and Tricks"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Normalizar texto en Python</title>
            <link href="https://carlosvin.github.io/posts/normalize-text-py/es" />
               
            <id>https://carlosvin.github.io/posts/normalize-text-py/es</id>
            <updated>2012-10-02T16:00:00.000Z</updated>
            <summary>Evitar problemas con textos que contienen caractéres no ASCII</summary>
            <content type="html"><![CDATA[<div class="paragraph">
<p>En muchos idiomas, como es el caso del español, hay caracteres que no tienen representación <a href="https://es.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener">ASCII</a>, como por ejemplo la <strong>á</strong>, que sí que tiene representación en <a href="https://es.wikipedia.org/wiki/Unicode" target="_blank" rel="noopener">Unicode</a>.</p>
</div>
<div class="paragraph">
<p>Para evitar problemas o por simplificar, se ha dado una equivalencia entre los caracteres <a href="https://es.wikipedia.org/wiki/Unicode" target="_blank" rel="noopener">Unicode</a> y los <a href="https://es.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener">ASCII</a>. A continuación os pondré un trozo de código en <a href="https://www.python.org" target="_blank" rel="noopener">Python</a> que hace esta conversión.</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-python" data-lang="python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span>
<span class="hljs-keyword">from</span> unicodedata <span class="hljs-keyword">import</span> normalize

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">normalize_text</span> (<span class="hljs-params"> text </span>):</span>
  <span class="hljs-keyword">return</span> normalize(<span class="hljs-string">&#x27;NFKD&#x27;</span>, text) <b class="conum">(1)</b>
    .encode(<span class="hljs-string">&#x27;ASCII&#x27;</span>, <span class="hljs-string">&#x27;ignore&#x27;</span>) <b class="conum">(2)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>Especificamos la forma normal que aplicamos en la normalización. En este caso <code>NFKD</code>. Más información sobre <a href="https://en.wikipedia.org/wiki/Unicode_equivalence#Normal_forms" target="_blank" rel="noopener">Tipos de formas normales</a>.</p>
</li>
<li>
<p>Confertimos el resultado de la normalización a <a href="https://es.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener">ASCII</a>. En caso de que un carácter sea erróneo simplemente será ignorado.</p>
</li>
</ol>
</div>
<div class="listingblock">
<div class="title">Ejecutando la función</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-python" data-lang="python"><span class="hljs-meta">&gt;&gt;&gt; </span>normalize_text ( <span class="hljs-string">&#x27;aáaá eéeé iíií oóoó ñnñn AÀAÀ&#x27;</span> )
<span class="hljs-string">b&#x27;aaaa eeee iiii oooo nnnn AAAA&#x27;</span></code></pre>
</div>
</div>]]></content>
            <category term="Python"/>
    <category term="Tips and Tricks"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Crear una PWA con Create React App: Lecciones aprendidas</title>
            <link href="https://carlosvin.github.io/posts/pwa-lessons-learned-cra/es" />
            <link 
				rel="alternate"
				hreflang="en"
				href="https://carlosvin.github.io/posts/pwa-lessons-learned-cra/en"/>   
            <id>https://carlosvin.github.io/posts/pwa-lessons-learned-cra/es</id>
            <updated>2020-06-10T00:00:00.000Z</updated>
            <summary>Lecciones aprendidas durante el desarrollo de una PWA utlizando Create React App: Budget Tracker</summary>
            <content type="html"><![CDATA[<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_tecnologías_escogidas_para_crear_budget_tracker">Tecnologías escogidas para crear Budget Tracker</a></li>
<li><a href="#_create_react_application_cra">Create React Application: CRA</a>
<ul class="sectlevel2">
<li><a href="#_service_worker">Service worker</a></li>
<li><a href="#_web_worker">Web worker</a></li>
<li><a href="#_webpack">Webpack</a></li>
</ul>
</li>
<li><a href="#_firebase">Firebase</a>
<ul class="sectlevel2">
<li><a href="#_inconvenientes">Inconvenientes</a></li>
<li><a href="#_alternativas_a_firebase">Alternativas a Firebase</a></li>
</ul>
</li>
<li><a href="#_librería_de_componentes_de_interfaz_de_usuario_material_ui">Librería de componentes de interfaz de usuario: Material UI</a></li>
<li><a href="#_librerías_de_gráficas">Librerías de gráficas</a></li>
<li><a href="#_conclusión">Conclusión</a>
<ul class="sectlevel2">
<li><a href="#_no_utilices_cra_si">No utilices CRA si</a></li>
<li><a href="#_no_utilices_firestore_si">No utilices Firestore si</a></li>
<li><a href="#_no_elijas_la_mejor_librería_de_gráficos">No elijas la mejor librería de gráficos</a></li>
</ul>
</li>
<li><a href="#_y_ahora_qué">¿Y ahora qué?</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Empezé trabajando con <a href="https://reactjs.org" target="_blank" rel="noopener">React</a> hace unos años, siempre he comenzado los proyectos desde cero, sin utilizar ninguna plantilla o generador de proyectos. En lo que ser refiere a los empaquetadores, normalmente utilizo <a href="https://webpack.js.org" target="_blank" rel="noopener">Webpack</a> en el trabajo o <a href="https://parceljs.org">Parcel</a> en proyectos personales.</p>
</div>
<div class="paragraph">
<p>Hace unos meses, quería comenzar un proyecto personal para hacer un seguimiento de mis gastos durante mi año sabático, <a href="https://btapp.netlify.com" target="_blank" rel="noopener">Budget Tracker</a> lo llamé. Llevaba un poco de prisa, porque en ese momento llevaba ya unos 4 meses viajando y quería centrarme cuanto antes en implementar la funcionalidad principal y tener algo funcionando cuanto antes, un <a href="https://en.wikipedia.org/wiki/Minimum_viable_product">MVP</a> (minimum viable product), estaba en la situación perfecta para probar <a href="https://create-react-app.dev" target="_blank" rel="noopener">Create React App</a> o <a href="https://create-react-app.dev" target="_blank" rel="noopener">CRA</a>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<a href="https://create-react-app.dev" target="_blank" rel="noopener">CRA</a> te permite crear una <a href="https://developers.google.com/web/progressive-web-apps/" target="_blank" rel="noopener">PWA</a> en <a href="https://reactjs.org" target="_blank" rel="noopener">React</a> lista para producción en un momento, lo que es impresionante. Solo tienes el esqueleto de la aplicación, tampoco hace milagros, el resto lo tienes que programar tú. <a href="https://create-react-app.dev" target="_blank" rel="noopener">CRA</a> se encarga de la gestión de dependencias de desarrollo y configuración de el empaquetador, <a href="https://webpack.js.org" target="_blank" rel="noopener">Webpack</a> en este caso.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Como decía antes, quería implementar la lógica del programa cuanto antes, así que junto con la utilización de <a href="https://create-react-app.dev" target="_blank" rel="noopener">CRA</a>, tambien tomé otras decisiones y atajos, condicionados por la necesidad de acelerar el proceso de desarrollo, hablaré sobre todas estas decisiones a lo largo de este artículo.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_tecnologías_escogidas_para_crear_budget_tracker">Tecnologías escogidas para crear <a href="https://btapp.netlify.com" target="_blank" rel="noopener">Budget Tracker</a></h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p><a href="https://create-react-app.dev" target="_blank" rel="noopener">CRA</a></p>
</li>
<li>
<p><a href="https://reactjs.org" target="_blank" rel="noopener">React</a></p>
</li>
<li>
<p><a href="https://www.typescriptlang.org" target="_blank" rel="noopener">Typescript</a></p>
</li>
<li>
<p><a href="https://material-ui.com" target="_blank" rel="noopener">Material UI</a></p>
</li>
<li>
<p><span class="line-through"><a href="https://formidable.com/open-source/victory">Victory</a></span> <a href="https://frappe.io/charts" target="_blank" rel="noopener">Frappe charts</a></p>
</li>
<li>
<p><a href="https://firebase.google.com/docs/firestore" target="_blank" rel="noopener">Firestore</a></p>
</li>
<li>
<p><a href="https://firebase.google.com/docs/auth" target="_blank" rel="noopener">Firebase Authentication</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Estoy bastante contento con el resultado, pero teniendo en cuenta lo aprendido durante el desarrollo de este proyecto, <strong>en el futuro y con el tiempo suficiente, lo más seguro es que no volviese a elegir este mismo conjunto</strong>.</p>
</div>
<div class="paragraph">
<p>Puedes evaluar el resultado de usar este conjunto de tecnologías abriendo <a href="https://btapp.netlify.com" target="_blank" rel="noopener">Budget Tracker</a>.</p>
</div>
<div class="paragraph">
<p>A continuación, haré un análisis más detallado de algunos de los beneficios e inconvenientes de las decisiones y atajos que tomé durante el desarrollo de <a href="https://btapp.netlify.com" target="_blank" rel="noopener">Budget Tracker</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_create_react_application_cra">Create React Application: <a href="https://create-react-app.dev" target="_blank" rel="noopener">CRA</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://create-react-app.dev" target="_blank" rel="noopener">Create React App</a> no ofrece soporte para <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="noopener">Web Workers</a> ni permite modificar la implementación del <a href="https://developers.google.com/web/fundamentals/primers/service-workers" target="_blank" rel="noopener">Service Worker</a> sin <a href="https://stackoverflow.com/questions/49737652/what-does-eject-do-in-create-react-app">expulsar (eject)</a> la configuración.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
¿Qué significa explusar o &#8220;eject&#8221; en <a href="https://create-react-app.dev" target="_blank" rel="noopener">CRA</a>? Básicamente es que la configuración de tu proyecto ya no está gestionada por <a href="https://create-react-app.dev" target="_blank" rel="noopener">CRA</a>, por lo que tienes que te tienes que hacer cargo de ella, mantener las dependencias y configuración de todos los aspectos de tu proyecto como las pruebas, el análisis estático de código, la configuración de Babel y la lista continúa.
</td>
</tr>
</table>
</div>
<div class="sect2">
<h3 id="_service_worker">Service worker</h3>
<div class="paragraph">
<p>Es posible que necesites modificar el comportamiento de tu <a href="https://developers.google.com/web/fundamentals/primers/service-workers" target="_blank" rel="noopener">Service Worker</a> para enviar/recibir <a href="https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage">mensajes post</a>, para realizar <a href="https://wicg.github.io/BackgroundSync/spec/">sincronización en segundo plano</a> o <a href="https://developer.mozilla.org/en/docs/Web/API/notification">mostrar notificaciones web</a>. En ese caso tendrá que <a href="https://stackoverflow.com/questions/49737652/what-does-eject-do-in-create-react-app">extraer tu proyecto (eject)</a> y mantener la configuración por tí misma/mismo, lo cual puede suponer algún que otro dolor de cabeza innecesario.</p>
</div>
<div class="paragraph">
<p>Hay <a href="https://www.freecodecamp.org/news/how-to-customize-service-workers-with-create-react-app-4424dda6210c/">otras opciones para evitar extraer CRA</a>, pero son un poco complicadas para mi gusto.</p>
</div>
</div>
<div class="sect2">
<h3 id="_web_worker">Web worker</h3>
<div class="paragraph">
<p>Cuando necesitas ejecutar algún procesamiento sin bloquear el hilo principal, puedes enviarlo a un <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="noopener">Web Workers</a>, lo malo es que tampoco están soportados por <a href="https://create-react-app.dev" target="_blank" rel="noopener">CRA</a>. El <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="noopener">Web Workers</a> también puebe comunicarse con el hilo principal usando <a href="https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage">mensajes post</a> y también puede mostrar <a href="https://medium.com/young-coder/a-simple-introduction-to-web-workers-in-javascript-b3504f9d9d1c">notificaciones web</a>.</p>
</div>
<div class="paragraph">
<p>También hay <a href="https://medium.com/@danilog1905/how-to-use-web-workers-with-react-create-app-and-not-ejecting-in-the-attempt-3718d2a1166b">otras opciones para evitar extraer la configuración de CRA</a>, pero requieren un poco de trabajo extra.</p>
</div>
</div>
<div class="sect2">
<h3 id="_webpack">Webpack</h3>
<div class="paragraph">
<p><a href="https://webpack.js.org" target="_blank" rel="noopener">Webpack</a> es el empaquetador utilizado por <a href="https://create-react-app.dev" target="_blank" rel="noopener">CRA</a>. Cuando utilizas <a href="https://create-react-app.dev" target="_blank" rel="noopener">CRA</a>, no necesitas saber mucho sobre éste, pero cuando tienes que <a href="https://stackoverflow.com/questions/49737652/what-does-eject-do-in-create-react-app">extraer tu proyecto (eject)</a>, entonces tendrás que lidiar con el <a href="https://webpack.js.org/configuration/">archivo de configuracion de Webpack</a>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_firebase">Firebase</h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://btapp.netlify.com" target="_blank" rel="noopener">Budget Tracker</a> permite sincronizar tus presupuestos entre distintos dispositivos, por lo que esta aplicación necesita un lado <a href="https://en.wikipedia.org/wiki/Front_and_back_ends">backend</a> para gestionar la autenticación y guardar/leer los datos. Consideré dos opciones: <a href="https://firebase.google.com/" target="_blank" rel="noopener">Firebase</a> implementar una API <a href="https://en.wikipedia.org/wiki/Representational_state_transfer">REST</a>.</p>
</div>
<div class="paragraph">
<p>Elegí <a href="https://firebase.google.com/" target="_blank" rel="noopener">Firebase</a> porque no hay que implementar nada en el lado servidor, sólo hay que configurar los <a href="https://support.google.com/firebase/answer/6400716?hl=en">métodos de autenticación</a> y las <a href="https://firebase.google.com/docs/firestore/security/get-started">reglas de seguridad</a> en <a href="https://firebase.google.com/docs/firestore" target="_blank" rel="noopener">Firestore</a>.</p>
</div>
<div class="paragraph">
<p>Pero <a href="https://firebase.google.com/" target="_blank" rel="noopener">Firebase</a> viene con algunos inconvenientes que debes conocer antes de elegirlo.</p>
</div>
<div class="sect2">
<h3 id="_inconvenientes">Inconvenientes</h3>
<div class="sect3">
<h4 id="_tamaño_de_la_librería">Tamaño de la librería</h4>
<div class="paragraph">
<p>Me sorprendió mucho la primera vez que analicé el tamaño de la aplicación <a href="https://btapp.netlify.com" target="_blank" rel="noopener">Budget Tracker</a> justo después de integrarla con <a href="https://firebase.google.com/" target="_blank" rel="noopener">Firebase</a>, <strong>¡creció un 39%!</strong>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>27% por la librería <a href="https://firebase.google.com/docs/firestore" target="_blank" rel="noopener">Firestore</a>.</p>
</li>
<li>
<p>12% por la librería <a href="https://firebase.google.com/docs/auth" target="_blank" rel="noopener">Firebase Authentication</a>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Afortunadamente <a href="https://btapp.netlify.com" target="_blank" rel="noopener">Budget Tracker</a> está implementado particionando el código (<a href="https://reactjs.org/docs/code-splitting.html">code-splitting</a>), lo que permite cargar solo las partes necesarias de la aplicación, así que, la experiencia de usuario no se vió gravemente afectada. Lo malo es que el usuario, en algún momento, tendrá que descargar ese <strong>39% extra</strong> (<strong>539KB</strong>).</p>
</div>
</div>
<div class="sect3">
<h4 id="_no_realmente_primero_offline">No realmente primero offline</h4>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<div class="title">Important</div>
</td>
<td class="content">
Esto no es relevante, si para tu caso de uso no tienes que vincular los datos al usuario.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p><a href="https://firebase.google.com/docs/firestore" target="_blank" rel="noopener">Firestore</a> necesita un usuario identificado para realizar lecturas y escrituras, pero <a href="https://firebase.google.com/docs/auth/web/anonymous-auth">permite trabajar con usuarios anónimos</a>, esta característica es muy interesante si no quieres forzar al usuario a identificarse para utilizar la aplicación.</p>
</div>
<div class="paragraph">
<p>Otra característica muy útil es que <a href="https://firebase.google.com/docs/firestore/manage-data/enable-offline">soporta modo offline</a>, lo que permite guardar y leer información cuando no hay conexión a Internet.</p>
</div>
<div class="paragraph">
<p>Los usuarios anónimos junto con el modo offline, casi permiten tener una aplicación que funcione completamente offline.</p>
</div>
<div class="paragraph">
<p>Entonces… ¿Qué es esto de <a href="#_no_realmente_primero_offline">No realmente primero offline</a>? Esto significa, que la primera vez que la aplicación es abierta, <a href="https://firebase.google.com/" target="_blank" rel="noopener">Firebase</a> necesita identificar al usuario, para ello, en este momento, el dispositivo del usuario debe estar conectado a Internet, en este caso, <strong>debes considerar el siguiente escenario</strong>:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>La <a href="https://developers.google.com/web/progressive-web-apps/" target="_blank" rel="noopener">PWA</a> está instalada en tu dispositivo.</p>
</li>
<li>
<p>El usuario no está identificado.</p>
</li>
<li>
<p>El dipositivo no tiene acceso a Internet.</p>
</li>
<li>
<p>El usuario abre la <a href="https://developers.google.com/web/progressive-web-apps/" target="_blank" rel="noopener">PWA</a> e intenta guardar o leer datos.</p>
</li>
<li>
<p><strong>La información no se podrá guardar correctamente</strong>, porque se desconoce el usuario al que pertenece esta información y tampoco se puede vincular a un usuario anónimo, porque se necesita conexión para crearlo.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Esto no es un problema importane, la aplicación funcionará perfectamente en la mayoría de casos. Si, aún así quieres resolver este caso, a continuación explicaré cómo lo he solucionado en <a href="https://btapp.netlify.com" target="_blank" rel="noopener">Budget Tracker</a>.</p>
</div>
<div class="sect4">
<h5 id="_convertir_budget_tracker_como_offline_first">Convertir Budget Tracker como offline first</h5>
<div class="paragraph">
<p>Antes de nada, me gustaría remarcar que esto <strong>podría no ser necesario para tu caso de uso</strong>, porque sólo ocurrirá la primera vez que arranque la aplicación y no tenga conexión a Internet. En el caso de <a href="https://btapp.netlify.com" target="_blank" rel="noopener">Budget Tracker</a> me aseguré de que funcionase en todo momento en modo offline porque traía otros beneficios que más adelante enumeraré.</p>
</div>
<div class="sect5">
<h6 id="_detalles_de_implementación">Detalles de implementación</h6>
<div class="ulist">
<ul>
<li>
<p>Crear dos capas de persistencia: Local (<a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API" target="_blank" rel="noopener">IndexedDB</a>) y Remota (<a href="https://firebase.google.com/docs/firestore" target="_blank" rel="noopener">Firestore</a>).</p>
</li>
<li>
<p>Guardar los datos siempre de forma local, independientemente de si el usuario está identificado o no.</p>
</li>
<li>
<p>Si hay un usuario que ya está identificado, después de actuar sobre el almacenamiento local, realizar exactamente la misma acción sobre la capa de almacenamiento remoto <a href="https://firebase.google.com/docs/firestore" target="_blank" rel="noopener">Firestore</a> de forma asíncrona.</p>
</li>
</ul>
</div>
</div>
<div class="sect5">
<h6 id="_beneficios">Beneficios</h6>
<div class="ulist">
<ul>
<li>
<p>Si el usuario no se ha identificado, <a href="https://btapp.netlify.com" target="_blank" rel="noopener">Budget Tracker</a> no cargará la librería cliente de <a href="https://firebase.google.com/docs/firestore" target="_blank" rel="noopener">Firestore</a>. Como ya comenté antes, ésta supone un 27% del tamaño de la aplicación.</p>
</li>
<li>
<p>Las escrituras y lecturas son algo más rápidas, porque el almacenamiento primario es local.</p>
</li>
<li>
<p><strong>Aclaración</strong>: La interación con <a href="https://firebase.google.com/docs/firestore" target="_blank" rel="noopener">Firestore</a> también es rápida, porque también almacena la información localmente, pero también hace unas cuantas cosas más que simplemente interactuar con <a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API" target="_blank" rel="noopener">IndexedDB</a> y necesitas un usuario identificado.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Puedes encontrar un <a href="https://github.com/carlosvin/budget-tracker/blob/master/doc/preformance.md#desktop-slow-clear-storage-0-budgets-1">informe más detallado sobre el rendimiento</a>, donde se analizan tres escenarios diferentes:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><a href="https://firebase.google.com/docs/firestore" target="_blank" rel="noopener">Firestore</a> como única capa de persistencia.</p>
</li>
<li>
<p>Dos capas de persistencia, una local (<a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API" target="_blank" rel="noopener">IndexedDB</a>) y otra remota (<a href="https://firebase.google.com/docs/firestore" target="_blank" rel="noopener">Firestore</a>),</p>
</li>
<li>
<p>Igual que la anterior, pero se interactúa con <a href="https://firebase.google.com/docs/firestore" target="_blank" rel="noopener">Firestore</a> desde un service worker.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>En general, se obtienen mejores resultados con la opción 2.</p>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_modelo_de_datos">Modelo de Datos</h4>
<div class="paragraph">
<p>La API de <a href="https://firebase.google.com/docs/firestore" target="_blank" rel="noopener">Firestore</a> es fácil e intuitiva, me encanta, pero no asumas que tendrá todas las características que ofrecen otras bases de datos documentales o relacionales (SQL).</p>
</div>
<div class="paragraph">
<p>Comprueba que las <a href="https://googleapis.github.io/google-cloud-dotnet/docs/Google.Cloud.Firestore/datamodel.html">limitaciones de Firestore</a> encajan con tu modelo de datos, o si no es demasiado tarde, diseña tu modelo de datos siguiendo la guía de <a href="https://cloud.google.com/firestore/docs/best-practices">buenas prácticas de Firestore</a>.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_alternativas_a_firebase">Alternativas a Firebase</h3>
<div class="paragraph">
<p>A parte de implementar una API <a href="https://en.wikipedia.org/wiki/Representational_state_transfer">REST</a> para tu aplicación, hay otros servicios similares a <a href="https://firebase.google.com/" target="_blank" rel="noopener">Firebase</a> con un tamaño menor de la librería cliente y otras características que pueden adaptarse mejor a tus necesidades.</p>
</div>
<div class="paragraph">
<p>Algunas alternativas a considerar:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Basado en <a href="http://couchdb.apache.org/">Apache CouchDB</a>: <a href="https://pouchdb.com">PouchDB</a>, <a href="https://en.wikipedia.org/wiki/Cloudant">Cloudant</a>.</p>
</li>
<li>
<p>Basado en <a href="https://parseplatform.org/">Parse server</a>: <a href="https://www.back4app.com">back4apps</a>.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_librería_de_componentes_de_interfaz_de_usuario_material_ui">Librería de componentes de interfaz de usuario: <a href="https://material-ui.com" target="_blank" rel="noopener">Material UI</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Elegí <a href="https://material-ui.com" target="_blank" rel="noopener">Material UI</a>.</p>
</div>
<div class="quoteblock">
<blockquote>
Componentes de React para un desarrollo web más rápido y sencillo. Construya su propio sistema de diseño, o empiece con Material Design.
</blockquote>
<div class="attribution">
&#8212; https://material-ui.com[Material UI
</div>
</div>
<div class="paragraph">
<p>Hay dos razones principales por las que elegí una libreria de componentes UI:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Es laborioso crear tus propios componentes de interfaz de usuario que sean accesibles, que se adapten correctamente a distintos dispositivos y con un diseño estéticamente correcto.</p>
</li>
<li>
<p><a href="https://material-ui.com" target="_blank" rel="noopener">Material UI</a> tiene un conjunto de iconos SVG, <a href="https://material-ui.com/components/material-icons/">Material Icons</a>. Esto me venía muy bien para <a href="https://btapp.netlify.com" target="_blank" rel="noopener">Budget Tracker</a>, porque permite crear categorías para gastos y asignar un icono a éstas categorías.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Hay algunos <strong>problemas</strong>, no muy importantes en mi opinión, quizá el que me resulta más molesto es el primero:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://jestjs.io/docs/en/snapshot-testing">Jest Snapshots</a> + <a href="https://material-ui.com" target="_blank" rel="noopener">Material UI</a>: Los <a href="https://jestjs.io/docs/en/snapshot-testing">Jest Snapshots</a> guardan también las classes CSS utilizadas por <a href="https://material-ui.com" target="_blank" rel="noopener">Material UI</a>, pero el orden de estas clases podría no ser determinístico, por lo que el resultado de una prueba podría ser satisfactorio en tu portátil, pero podría fallar en cualquier otro sitio, como en la máquina donde se ejecuta el servidor de integración continua (<a href="https://en.wikipedia.org/wiki/Continuous_integration">CI</a>). Están trabajando en solucionar <a href="https://github.com/mui-org/material-ui/issues/14357">este problema, más información en Github</a>.</p>
</li>
<li>
<p>Rendimiento: Hay algunos <a href="https://github.com/mui-org/material-ui/issues?utf8=%E2%9C%93&amp;q=is%3Aissue+is%3Aopen+performance">problemas de rendimiento en Github</a>. A lo largo de los últimos meses, mientras he utilizado esta librería, puedo decir que el equipo de desarrollo está trabajando duro en mejorar esta librería y supongo que los solucionarán pronto.</p>
</li>
<li>
<p>Las librerías de componentes de interfaz de usuario son complejas y hacen muchas cosas, por ello la mayoría son bastante pesadas. <a href="https://bundlephobia.com/result?p=@material-ui/core@4.5.2">El tamaño de Material UI reducido son 304.2kB</a>. Puedes encontrar <a href="https://material-ui.com/guides/minimizing-bundle-size">recomendaciones para reducir el tamaño de tu aplicación al utilizar Material UI en su documentación</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_librerías_de_gráficas">Librerías de gráficas</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Muchas de las librerías que he encontrado son muy potentes y completas, pero también ocupan bastante, entre otras cosas porque dependen en otras librerías como <a href="https://d3js.org/">D3</a>.</p>
</div>
<div class="paragraph">
<p>Inicialmente elegí <a href="https://formidable.com/open-source/victory">Victory</a>, pero me dí cuenta de que sólamente necesitaba gráficos para mostrar porcentajes y series temporales. Otro hecho relevante es que <a href="https://formidable.com/open-source/victory">Victory</a> tiene un <a href="https://bundlephobia.com/result?p=victory@33.1.2">tamaño de 468KB</a> y yo no estaba utilizando la mayor parte de ese código.</p>
</div>
<div class="paragraph">
<p>Después de una búsqueda rápida en Internet, encontré otras alternativas mucho más ligeras y más que suficientes para mis necesidades:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://frappe.io/charts" target="_blank" rel="noopener">Frappe charts</a>: <a href="https://bundlephobia.com/result?p=frappe-charts@1.3.0">63KB</a>.</p>
</li>
<li>
<p><a href="https://gionkunz.github.io/chartist-js">Chartist</a>: <a href="https://bundlephobia.com/result?p=chartist@0.11.4">39KB</a>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Probé las dos y me encantaron las dos, finalmente elegí <a href="https://frappe.io/charts" target="_blank" rel="noopener">Frappe charts</a> porque su esquema de colores se ajusta mejor al tema de <a href="https://btapp.netlify.com" target="_blank" rel="noopener">Budget Tracker</a>.</p>
</div>
<div class="paragraph">
<p>Ambas librerías traen más tipos de gráficos que los de ejes de coordenadas XY o gráfico de barras. Echa un vistazo a sus sitios web si quieres saber un poco más.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusión">Conclusión</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Intentaré llegar a una conclusión algo mejor que <em>"Depende"</em>, <em>"Tu caso de uso te dirá"</em>, etc. Dicho esto, depende de lo que necesites :p.</p>
</div>
<div class="paragraph">
<p>Ya en serio, voy a listar las conclusiones en la forma <em>"No utilices … si …"</em>.</p>
</div>
<div class="sect2">
<h3 id="_no_utilices_cra_si">No utilices CRA si</h3>
<div class="ulist">
<ul>
<li>
<p>Si tienes que modificar el <a href="https://developers.google.com/web/fundamentals/primers/service-workers" target="_blank" rel="noopener">Service Worker</a> para realizar <a href="https://developers.google.com/web/updates/2015/12/background-sync">Background sync</a> o para <a href="https://developer.mozilla.org/en/docs/Web/API/notification">mostrar notificaciones web</a>.</p>
</li>
<li>
<p>Si tienes que utilizar <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="noopener">Web Workers</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_no_utilices_firestore_si">No utilices Firestore si</h3>
<div class="ulist">
<ul>
<li>
<p>Si esperas que tu aplicación sea utilizada por muchos usuarios y no tienes idea de la cantidad de lecturas y escrituras que necesitas por usuario, te podrías llevar un sorpresa en la factura que te pase Google. <a href="https://firebase.google.com/docs/firestore" target="_blank" rel="noopener">Firestore</a> escala perfectamente, pero tu presupuesto quizá no.</p>
</li>
<li>
<p>Si el tamaño de tu aplicación web es algo crítico. Recuerda que el tamaño de tu aplicación, si se trata de una <a href="https://developers.google.com/web/progressive-web-apps/" target="_blank" rel="noopener">PWA</a>, no es tan importante, porque los archivos normalmente estará cacheados para que la aplicación pueda abrirse offline.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_no_elijas_la_mejor_librería_de_gráficos">No elijas la mejor librería de gráficos</h3>
<div class="paragraph">
<p>Antes de nada, analiza qué tipos de gráficos necesitas. En muchos casos, es más que suficiente con gráficos XY, de tarta o de barras. Puedes fácilmente reducir el tamaño de tu aplicación utilizando librerías como <a href="https://frappe.io/charts" target="_blank" rel="noopener">Frappe charts</a> or <a href="https://gionkunz.github.io/chartist-js">Chartist</a></p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
Simplemente asegúrate de que tus requisitos son compatibles con las limitaciones o problemas de los que acabo de hablar. Si no estás segura o seguro, las <a href="#_tecnologías_escogidas_para_crear_budget_tracker">Tecnologías escogidas para crear Budget Tracker</a> debería ser suficiente para cualquier <a href="https://developers.google.com/web/progressive-web-apps/" target="_blank" rel="noopener">PWA</a>.
</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_y_ahora_qué">¿Y ahora qué?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Mi próxima apuesta para el lado <a href="https://en.wikipedia.org/wiki/Front_and_back_ends">frontend</a> es {Svelte}/{Sapper}. Es un proyecto prometedor que ha cambiado el paradigma de framework en tiempo de ejecución a framework en tiempo de compilación. Hasta ahora, los resultados en proyectos pequeños son impresionantes, sobre todo en lo relacionado con el tamaño de la aplicación generada y con lo fácil e intuitivo que resulta el desarrollo con {Svelte}.</p>
</div>
<div class="paragraph">
<p>He creado una sencilla <a href="https://developers.google.com/web/progressive-web-apps/" target="_blank" rel="noopener">PWA</a> para <a href="https://currency-loss.netlify.com">calcular el dinero que pierdes</a> cuando vas a una casa de cambio: <a href="https://currency-loss.netlify.com">currency-loss.netlify.com</a>.</p>
</div>
<div class="paragraph">
<p>Terminé esta aplicación en pocas horas gracias a {Svelte}.</p>
</div>
</div>
</div>]]></content>
            <category term="React"/>
    <category term="Typescript"/>
    <category term="CRA"/>
    <category term="PWA"/>
    <category term="Create React App"/>
    <category term="Firebase"/>
    <category term="Firestore"/>
    <category term="Svelte"/>
    <category term="Sapper"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>SPA: React + Typescript + Parcel</title>
            <link href="https://carlosvin.github.io/posts/react-typescript-parcel/es" />
            <link 
				rel="alternate"
				hreflang="en"
				href="https://carlosvin.github.io/posts/react-typescript-parcel/en"/>   
            <id>https://carlosvin.github.io/posts/react-typescript-parcel/es</id>
            <updated>2019-07-10T11:30:02.000Z</updated>
            <summary>Proyecto de ejemplo en el que se muestra cómo crear una aplicación web de página única (SPA) con React, Typescript y Parcel.</summary>
            <content type="html"><![CDATA[<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_leer_antes_parcel_no_es_tan_maduro_como_webpack">Leer antes: Parcel no es tan maduro como Webpack</a></li>
<li><a href="#_inicio_rápido">Inicio Rápido</a>
<ul class="sectlevel2">
<li><a href="#_servidor_de_desarrollo">Servidor de Desarrollo</a></li>
<li><a href="#_generar_un_paquete_listo_para_producción">Generar un paquete listo para producción</a></li>
</ul>
</li>
<li><a href="#_creación_del_proyecto_paso_a_paso">Creación del proyecto paso a paso</a>
<ul class="sectlevel2">
<li><a href="#_añadir_dependencias">Añadir dependencias</a></li>
<li><a href="#_código_fuente_de_la_aplicación">Código fuente de la aplicación</a></li>
<li><a href="#_comandos_para_construir_el_proyecto">Comandos para construir el proyecto</a></li>
<li><a href="#_configurar_typescript_opcional">Configurar Typescript (opcional)</a></li>
</ul>
</li>
<li><a href="#_código_fuente_completo">Código fuente completo</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Estaba a punto de empezar otro proyecto personal para crear una aplicación web de página única (<a href="https://es.wikipedia.org/wiki/Single-page_application">SPA - Single Page App</a>) en la que gestionar mi blog de viaje.</p>
</div>
<div class="paragraph">
<p>Tenía claras las tecnologías a utilizar, porque últimamente he trabajado bastante con <a href="https://reactjs.org" target="_blank" rel="noopener">React</a> y <a href="https://www.typescriptlang.org/" target="_blank" rel="noopener">Typescript</a> y me encuentro muy cómodo con esta pareja de tecnologías. Normalmente uso <a href="https://webpack.js.org/" target="_blank" rel="noopener">Webpack</a> como empaquetador, pero hace algún tiempo había probado <a href="https://parceljs.org" target="_blank" rel="noopener">Parcel</a> y me encantó lo simple y rápido que era crear un proyecto desde cero utilizando <a href="https://www.typescriptlang.org/" target="_blank" rel="noopener">Typescript</a> y <a href="https://reactjs.org" target="_blank" rel="noopener">React</a>.</p>
</div>
<div class="paragraph">
<p>He decidido crear un proyecto base, para poder reutilizarlo la próxima vez que quiera crear una <a href="https://es.wikipedia.org/wiki/Single-page_application">SPA</a> con mis tecnologías frontend favoritas, al menos hasta ahora. De esta forma, la próxima vez que quiera empezar un proyecto nuevo solamente tengo que:</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">git <span class="hljs-built_in">clone</span> https://github.com/carlosvin/react-typescript-parcel-template.git</code></pre>
</div>
</div>
<div class="paragraph">
<p>O simplemente descargar el <a href="https://github.com/carlosvin/react-typescript-parcel-template/archive/1.0.zip">archivo ZIP con el proyecto</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_leer_antes_parcel_no_es_tan_maduro_como_webpack">Leer antes: Parcel no es tan maduro como Webpack</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Si quieres crear una aplicación React lista para producción, utiliza <a href="https://webpack.js.org/" target="_blank" rel="noopener">Webpack</a> o mejor aún utiliza <a href="https://facebook.github.io/create-react-app/" target="_blank" rel="noopener">create-react-app</a> que viene con todo lo que necesitas para crear una <a href="https://developers.google.com/web/progressive-web-apps/">PWA</a> con React y Typescript, aquí puedes encontrar un ejemplo de una applicación que estoy desarrollando: <a href="https://github.com/carlosvin/budget-tracker" class="bare">https://github.com/carlosvin/budget-tracker</a>.</p>
</div>
<div class="paragraph">
<p>Parcel esta en desarrollo y para mí todavía hay problemas por los que no lo considero para proyectos serios. Una de las razones es que el soporte para Typescript deja bastante que desear, por ejemplo mira este <a href="https://github.com/parcel-bundler/parcel/issues/1378">problema en github #1378</a>.</p>
</div>
<div class="paragraph">
<p>Creo que sigue siendo un proyecto prometedor, por la simplicidad y rapided que trae al mundo de los empaquetadores para Javascript, pero de momento no está listo para producción, al menos para aplicaciones desarrolladas con React y Typescript.</p>
</div>
<div class="paragraph">
<p>Volveré a probarlo cuando Parcel 2 esté listo: <a href="https://github.com/parcel-bundler/parcel/projects/5">Estado actual de Parcel 2</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_inicio_rápido">Inicio Rápido</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_servidor_de_desarrollo">Servidor de Desarrollo</h3>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">git <span class="hljs-built_in">clone</span> https://github.com/carlosvin/react-typescript-parcel-template.git
<span class="hljs-built_in">cd</span> react-typescript-parcel-template
yarn install
yarn start</code></pre>
</div>
</div>
<div class="paragraph">
<p>El último comando <code>yarn start</code>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Arrancará un servidor de desarrollo en <code>http://localhost:1234</code> con <a href="https://en.parceljs.org/hmr.html">reemplazo de módulos en caliente</a>.</p>
</li>
<li>
<p>Construirá automáticamente el proyecto cada vez que guardemos los cambios.</p>
</li>
</ul>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
Cada vez que guardes tus cambios, verás el resultado en <code><a href="http://localhost:1234+" class="bare">http://localhost:1234+</a></code> sin tener que refrescar la página.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_generar_un_paquete_listo_para_producción">Generar un paquete listo para producción</h3>
<div class="paragraph">
<p>Simplemente ejecuta <code>yarn build</code>.</p>
</div>
<div class="paragraph">
<p>Las <a href="https://en.parceljs.org/production.html#optimisations">optimizaciones que Parcel aplica por defecto</a> serán aplicadas a los archivos generados, los cuales son guardados en la carpeta <code>dist</code>.</p>
</div>
<div class="paragraph">
<p>Dentro de la carpeta <code>dist</code> hay un informe sobre el tamaño de los archivos generados y el tamaño de las dependencias: <code>dist/report.html</code>, siempre está bien conocer cuán pesada es tu aplicación.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_creación_del_proyecto_paso_a_paso">Creación del proyecto paso a paso</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Si simplemente quieres utilizar el proyecto puedes saltarte esta sección, aquí voy a describir paso a paso lo que hice para crear este proyecto base.</p>
</div>
<div class="paragraph">
<p>Comenzamos creando el archivo <code>package.json</code> con el comando <a href="https://yarnpkg.com/lang/en/docs/cli/init/">yarn init</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">yarn init</code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_añadir_dependencias">Añadir dependencias</h3>
<div class="paragraph">
<p>Dependencias <a href="https://reactjs.org" target="_blank" rel="noopener">React</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">yarn add @types/react @types/react-dom react react-dom</code></pre>
</div>
</div>
<div class="paragraph">
<p>El comando anterior modifica el archivo <code>package.json</code> en la sección <code>dependencies</code> e instalará esos paquetes en la carpeta <code>node_modules</code> para que posteriormente puedan ser utilizados por nuestro proyecto.</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-json" data-lang="json">{
  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;project_name&quot;</span>,
  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,
  <span class="hljs-attr">&quot;main&quot;</span>: <span class="hljs-string">&quot;index.js&quot;</span>,
  <span class="hljs-attr">&quot;license&quot;</span>: <span class="hljs-string">&quot;MIT&quot;</span>,
  <span class="hljs-attr">&quot;dependencies&quot;</span>: {
    <span class="hljs-attr">&quot;@types/react&quot;</span>: <span class="hljs-string">&quot;^16.7.18&quot;</span>,
    <span class="hljs-attr">&quot;@types/react-dom&quot;</span>: <span class="hljs-string">&quot;^16.0.11&quot;</span>,
    <span class="hljs-attr">&quot;react&quot;</span>: <span class="hljs-string">&quot;^16.7.0&quot;</span>,
    <span class="hljs-attr">&quot;react-dom&quot;</span>: <span class="hljs-string">&quot;^16.7.0&quot;</span>
  }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>También necesitamos el compilador de <a href="https://www.typescriptlang.org/" target="_blank" rel="noopener">Typescript</a> como dependencia de desarrollo, esto significa que cuando empaquetemos nuestra aplicación para producción, estas dependencias de desarrollo no serán incluidas.</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">yarn add --dev typescript</code></pre>
</div>
</div>
<div class="paragraph">
<p>También necesitamos como dependencia de desarrollo nuestro empaquetador <a href="https://parceljs.org/">Parcel</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">yarn add --dev parcel-bundler</code></pre>
</div>
</div>
<div class="paragraph">
<p>He añadido una dependencia opcional, se trata del plugin para Parcel, para generar el informe del contenido del paquete. Es muy útil para detectar casos en los que añadimos una dependencia para, por ejemplo, comparar vectores de números, pero resulta que esta librería ocupa más que nuestra propia aplicación. En este caso hay que considerar otras librerías que hagan lo mismo y sean más ligeras.</p>
</div>
<div class="paragraph">
<p>Este plugin es la versión para Parcel de <a href="https://github.com/webpack-contrib/webpack-bundle-analyzer">webpack-bundle-analyzer</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">yarn add --dev parcel-plugin-bundle-visualiser</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_código_fuente_de_la_aplicación">Código fuente de la aplicación</h3>
<div class="paragraph">
<p>Primero creamos el punto de entrada de aplicación básica React en el archivo <code>src/index.tsx</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-jsx" data-lang="jsx"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;
<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">PureComponent</span> </span>{
    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> {
        <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello world!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;
    }
}

ReactDOM.render(
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>,
    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;app&quot;</span>)
);</code></pre>
</div>
</div>
<div class="paragraph">
<p>Parcel puede utilizar un archivo <code>index.html</code> como punto de entrada a la aplicación y descubrir qué otros archivos tiene que procesar. Vamos a crear <code>src/index.html</code> como sigue:</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-html" data-lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./index.tsx&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Necesitamos la etiqueta <code>div</code> para que React pueda inyectar el DOM virtual que utiliza para trabajar. La declaración <code>script</code> es utilizada por Parcel para saber que tiene que empezar construyendo el archivo <code>index.tsx</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_comandos_para_construir_el_proyecto">Comandos para construir el proyecto</h3>
<div class="ulist">
<ul>
<li>
<p><code>build</code>: Descrito en la sección <em>"Generar un paquete listo para producción"</em>.</p>
</li>
<li>
<p><code>start</code>: Descrito en <em>"Servidor de desarrollo"</em>.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-json" data-lang="json">    <span class="hljs-string">&quot;scripts&quot;</span>: {
        <span class="hljs-attr">&quot;start&quot;</span>: <span class="hljs-string">&quot;parcel src/index.html&quot;</span>,
        <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;parcel build src/index.html&quot;</span>
    }</code></pre>
</div>
</div>
<div class="paragraph">
<p>Ahora es realmente fácil:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Arrancar el servidor de desarrollo: <code>yarn start</code>.</p>
</li>
<li>
<p>Generar un paquete para producción: <code>yarn build</code>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Hay otra forma descrita en la <a href="https://en.parceljs.org/getting_started.html">documentación de Parcel</a> que se basa en instalar Parcel de forma global en tu sistema.</p>
</div>
<div class="paragraph">
<p>Yo he optado por añadir Parcel como parte del proyecto, de esta forma el proyecto es menos dependiente del sistema y puedes utilizar diferentes versiones de Parcel en distintos proyectos.</p>
</div>
<div class="paragraph">
<p>No instalar Parcel globalmente en tu sistema tiene un pequeño inconveniente, no puedes ejecutar directamente desde consola <code>parcel index.html</code>, porque Parcel está instalado en la carpeta <code>node_modules</code> de tu proyecto.</p>
</div>
<div class="paragraph">
<p>Pero digo que es un pequeño inconveniente, porque hay una forma de ejecutar aplicaciones instaladas en <code>node_modules</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">npx parcel index.html</code></pre>
</div>
</div>
<div class="paragraph">
<p>Yo normalemente prefiero definir los comandos de construcción en el archivo <code>package.json</code>, porque así queda documentado en el código la forma en que debemos construir el proyecto.</p>
</div>
</div>
<div class="sect2">
<h3 id="_configurar_typescript_opcional">Configurar Typescript (opcional)</h3>
<div class="listingblock">
<div class="title">Crear un archivo <code>tsconfig.json</code></div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-json" data-lang="json">{
    <span class="hljs-attr">&quot;compilerOptions&quot;</span>: {
        <span class="hljs-attr">&quot;outDir&quot;</span>: <span class="hljs-string">&quot;./dist/&quot;</span>,
        <span class="hljs-attr">&quot;sourceMap&quot;</span>: <span class="hljs-literal">true</span>,
        <span class="hljs-attr">&quot;noImplicitAny&quot;</span>: <span class="hljs-literal">true</span>,
        <span class="hljs-attr">&quot;module&quot;</span>: <span class="hljs-string">&quot;commonjs&quot;</span>,
        <span class="hljs-attr">&quot;target&quot;</span>: <span class="hljs-string">&quot;es5&quot;</span>,
        <span class="hljs-attr">&quot;jsx&quot;</span>: <span class="hljs-string">&quot;react&quot;</span>
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Con esta configuración indicamos al compilador de Typescript lo siguiente:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Los archivos se generan en la carpeta <code>dist</code>.</p>
</li>
<li>
<p>Vamos a generar <a href="https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Use_a_source_map">source maps</a>, así podemos depurar directamente sobre los archivos typescript.</p>
</li>
<li>
<p>No permitir usar el tipo <code>any</code>, por ejemplo, la siguiente declaración no está permitida: <code>const elements: any;</code></p>
</li>
<li>
<p>El código utilizará <a href="https://requirejs.org/docs/commonjs.html">CommonJs</a> como sistema de módulos.</p>
</li>
<li>
<p>El código generado seguirá el estándar <a href="https://es.wikipedia.org/wiki/ECMAScript">ECMAScript</a>.</p>
</li>
<li>
<p>Soportar la sintáxis <a href="https://www.typescriptlang.org/docs/handbook/jsx.html">JSX</a> en los archivos <code>.tsx</code>.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_código_fuente_completo">Código fuente completo</h2>
<div class="sectionbody">
<div class="paragraph">
<p>El ejemplo completo se encuentra en: <a href="https://github.com/carlosvin/react-typescript-parcel-template" class="bare">https://github.com/carlosvin/react-typescript-parcel-template</a>.</p>
</div>
<div class="paragraph">
<p>También puedes descargarlo directamente en los siguientes formatos:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://github.com/carlosvin/react-typescript-parcel-template/archive/1.0.zip">zip</a></p>
</li>
<li>
<p><a href="https://github.com/carlosvin/react-typescript-parcel-template/archive/1.0.tar.gz">tar.gz</a></p>
</li>
</ul>
</div>
</div>
</div>]]></content>
            <category term="React"/>
    <category term="Typescript"/>
    <category term="Parcel"/>
    <category term="SPA"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Sistema de Ficheros en C++17</title>
            <link href="https://carlosvin.github.io/posts/recursive-directory-iterator/es" />
            <link 
				rel="alternate"
				hreflang="en"
				href="https://carlosvin.github.io/posts/recursive-directory-iterator/en"/>   
            <id>https://carlosvin.github.io/posts/recursive-directory-iterator/es</id>
            <updated>2017-05-28T07:00:00.000Z</updated>
            <summary>Vamos a analizar con un ejemplo la forma de recorrer directorios de manera recursiva a partir de C++17</summary>
            <content type="html"><![CDATA[<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_introducción">Introducción</a></li>
<li><a href="#_comenzar_a_utilizar_característica_experimental_filesystem_c17_g">Comenzar a utilizar característica experimental filesystem C&#43;&#43;17 (g++)</a></li>
<li><a href="#_características_de_filesystem_c17">Características de filesystem C&#43;&#43;17</a>
<ul class="sectlevel2">
<li><a href="#_stdfilesystempath">std::filesystem::path</a></li>
<li><a href="#_separador_de_directorios">Separador de directorios</a></li>
<li><a href="#_operador_de_separador_de_directorios">Operador de separador de directorios</a></li>
<li><a href="#_crear_y_borrar_directorios">Crear y borrar directorios</a></li>
</ul>
</li>
<li><a href="#_ejemplo_completo_iterar_recursivamente_por_directorios">Ejemplo completo: Iterar Recursivamente por Directorios</a>
<ul class="sectlevel2">
<li><a href="#_c11">C&#43;&#43;11</a></li>
<li><a href="#_c17">C&#43;&#43;17</a></li>
</ul>
</li>
</ul>
</div>
<div class="sect1">
<h2 id="_introducción">Introducción</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A partir de C&#43;&#43;17 se añadirán nuevas abstracciones sobre el sistema de ficheros. De momento están disponibles como parte de las <a href="https://en.cppreference.com/w/cpp/experimental">Características Experimentales de C&#43;&#43;</a>. Si queréis profundizar aquí está el <a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4100.pdf" target="_blank" rel="noopener">borrador final de la Especificación Técnica del Sistema de Ficheros</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_comenzar_a_utilizar_característica_experimental_filesystem_c17_g">Comenzar a utilizar característica experimental filesystem C&#43;&#43;17 (g++)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Simplemente debemos "decir" al compilador que:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>estamos escribiendo código C&#43;&#43;17 (<code>-c++1z</code>) y</p>
</li>
<li>
<p>que añada la librería estándar con la librería filesystem (<code>-lstdc++fs</code>).</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">g++ -std=c++1z main.cpp -lstdc++fs &amp;&amp; ./a.out</code></pre>
</div>
</div>
<div class="paragraph">
<p>Veamos un ejemplo muy simple utilizando la clase <code>std::filesystem::path</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-cpp" data-lang="cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;experimental/filesystem&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span>

<span class="hljs-keyword">namespace</span> fs = <span class="hljs-built_in">std</span>::experimental::filesystem;
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>
</span>{
    fs::path aPath {<span class="hljs-string">&quot;./path/to/file.txt&quot;</span>};

    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Parent path: &quot;</span> &lt;&lt; aPath.parent_path() &lt;&lt; <span class="hljs-built_in">endl</span>;
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Filename: &quot;</span> &lt;&lt; aPath.filename() &lt;&lt; <span class="hljs-built_in">endl</span>;
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Extension: &quot;</span> &lt;&lt; aPath.extension() &lt;&lt; <span class="hljs-built_in">endl</span>;

    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title"><a href="https://coliru.stacked-crooked.com/a/9f8bebb8b7f0fbe7" target="_blank" rel="noopener">Resultado de compilar y ejecutar el ejemplo anterior C&#43;&#43;17</a></div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">$ g++ -std=c++1z main.cpp -lstdc++fs &amp;&amp; ./a.out
$ ./a.out

Parent path: <span class="hljs-string">&quot;./path/to&quot;</span>
Filename: <span class="hljs-string">&quot;file.txt&quot;</span>
Extension: <span class="hljs-string">&quot;.txt&quot;</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_características_de_filesystem_c17">Características de filesystem C&#43;&#43;17</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A continuación vamos a analizar algunas características que nos proporciona <a href="https://en.cppreference.com/w/cpp/filesystem" target="_blank" rel="noopener">std::filesystem</a> con ejemplos en C&#43;&#43;11 y C&#43;&#43;17, de esta forma podremos hacernos una idea de las utilidades que esta nueva librería nos trae y cómo efectivamente ayuda al desarrollador a escribir código más claro y seguro.</p>
</div>
<div class="sect2">
<h3 id="_stdfilesystempath">std::filesystem::path</h3>
<div class="paragraph">
<p>Más arriba ya hemos visto un pequeño <a href="https://coliru.stacked-crooked.com/a/9f8bebb8b7f0fbe7" target="_blank" rel="noopener">ejemplo de uso de clase std::filesystem::path</a>. Ésta abstracción nos proporciona una ruta a ficheros y directorios multi-plataforma, utilizando el separador de directorios correspondiente a la plataforma en la que trabajamos <code>\</code> en sistemas basados en Windows y <code>/</code> en sistemas basados en Unix.</p>
</div>
</div>
<div class="sect2">
<h3 id="_separador_de_directorios">Separador de directorios</h3>
<div class="paragraph">
<p>Si quisiéramos que nuestro software utilizase el separador de directorios correcto para una plataforma, en C&#43;&#43;11 podríamos utilizar una macro de compilación condicional:</p>
</div>
<div class="listingblock">
<div class="title">Separador de directorios independiente de la plataforma en C&#43;&#43;11</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-cpp" data-lang="cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> _WIN32</span>
<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> SEP = <span class="hljs-string">&quot;\\&quot;</span>;
<span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span>
<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> SEP = <span class="hljs-string">&quot;/&quot;</span>;
<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span>

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Separator in my system &quot;</span> &lt;&lt; SEP &lt;&lt; <span class="hljs-built_in">endl</span>;
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><a href="https://coliru.stacked-crooked.com/a/5023ee989105fc54" target="_blank" rel="noopener">Compilar y ejecutar: ejemplo separador C&#43;&#43;11</a>.</p>
</div>
<div class="listingblock">
<div class="title">Separador de directorios independiente de la plataforma en C&#43;&#43;17. Más sencillo y claro.</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-cpp" data-lang="cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;experimental/filesystem&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span>

<span class="hljs-keyword">namespace</span> fs = <span class="hljs-built_in">std</span>::experimental::filesystem;
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Separator in my system &quot;</span> &lt;&lt; fs::path::preferred_separator &lt;&lt; <span class="hljs-built_in">endl</span>;
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><a href="https://coliru.stacked-crooked.com/a/1f2f63b3f5597d05" target="_blank" rel="noopener">Compilar y ejecutar: ejemplo separador C&#43;&#43;17</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_operador_de_separador_de_directorios">Operador de separador de directorios</h3>
<div class="paragraph">
<p><a href="https://en.cppreference.com/w/cpp/filesystem/path">std::filesystem::path</a> implementa el operador <code>/</code>, el cual nos permite concatenar fácilmente rutas a ficheros o directorios.</p>
</div>
<div class="paragraph">
<p>Si quisiéramos construir rutas a directorios en C&#43;&#43;11, tendríamos que implementar cierta lógica extra para detectar que no añadimos separadores extra y para utilizar el separador correcto:</p>
</div>
<div class="listingblock">
<div class="title">Concatenar paths en C&#43;&#43;11</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-cpp" data-lang="cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> _WIN32</span>
<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> SEP = <span class="hljs-string">&quot;\\&quot;</span>;
<span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span>
<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> SEP = <span class="hljs-string">&quot;/&quot;</span>;
<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span>

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-built_in">string</span> root {<span class="hljs-string">&quot;/&quot;</span>};
    <span class="hljs-built_in">string</span> dir {<span class="hljs-string">&quot;var/www/&quot;</span>};
    <span class="hljs-built_in">string</span> index {<span class="hljs-string">&quot;index.html&quot;</span>};

    <span class="hljs-built_in">string</span> pathToIndex{};
    pathToIndex.append(root).append(SEP).append(dir).append(SEP).append(index);

    <span class="hljs-built_in">cout</span> &lt;&lt; pathToIndex &lt;&lt; <span class="hljs-built_in">endl</span>;
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title"><a href="https://coliru.stacked-crooked.com/a/290b278ec1de9573" target="_blank" rel="noopener">Compilar y ejecutar: ejemplo concatenar rutas C&#43;&#43;11</a></div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">//var/www//index.html</code></pre>
</div>
</div>
<div class="paragraph">
<p>Como vemos el resultado no es del todo correcto, deberíamos comprobar si las partes de la ruta ya contienen separador, para no añadirlo.</p>
</div>
<div class="paragraph">
<p>Toda esta lógica ya está implementada en <a href="https://en.cppreference.com/w/cpp/filesystem/path">std::filesystem::path</a>, así que el código en C&#43;&#43;17 sería algo así:</p>
</div>
<div class="listingblock">
<div class="title">Concatenar paths en C&#43;&#43;17</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-cpp" data-lang="cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;experimental/filesystem&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span>

<span class="hljs-keyword">namespace</span> fs = <span class="hljs-built_in">std</span>::experimental::filesystem;
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>
</span>{
    fs::path root {<span class="hljs-string">&quot;/&quot;</span>};
    fs::path dir {<span class="hljs-string">&quot;var/www/&quot;</span>};
    fs::path index {<span class="hljs-string">&quot;index.html&quot;</span>};

    fs::path pathToIndex = root / dir / index;

    <span class="hljs-built_in">cout</span> &lt;&lt; pathToIndex &lt;&lt; <span class="hljs-built_in">endl</span>;
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title"><a href="https://coliru.stacked-crooked.com/a/a24d50875b4daad1">Compilar y ejecutar: ejemplo concatenar rutas C&#43;&#43;17</a>.</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash"><span class="hljs-string">&quot;/var/www/index.html&quot;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Aquí el código es más limpio y el resultado es simplemente correcto, no hay separadores duplicados.</p>
</div>
</div>
<div class="sect2">
<h3 id="_crear_y_borrar_directorios">Crear y borrar directorios</h3>
<div class="paragraph">
<p><a href="https://en.cppreference.com/w/cpp/filesystem" target="_blank" rel="noopener">std::filesystem</a> introduce algunas facilidades para crear y borrar directorios y ficheros, primero vamos a ver una de las formas de hacerlo en C&#43;&#43;11.</p>
</div>
<div class="listingblock">
<div class="title">Crear y borrar directorios anidados en C&#43;&#43;11</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-cpp" data-lang="cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-keyword">auto</span> opts = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;
    mkdir(<span class="hljs-string">&quot;sandbox&quot;</span>, opts);
    mkdir(<span class="hljs-string">&quot;sandbox/a&quot;</span>, opts);
    mkdir(<span class="hljs-string">&quot;sandbox/a/b&quot;</span>, opts);
    mkdir(<span class="hljs-string">&quot;sandbox/c&quot;</span>, opts);
    mkdir(<span class="hljs-string">&quot;sandbox/c/d&quot;</span>, opts);

    system(<span class="hljs-string">&quot;ls -la sandbox/*&quot;</span>);

    remove(<span class="hljs-string">&quot;sandbox/c/d&quot;</span>);
    remove(<span class="hljs-string">&quot;sandbox/a/b&quot;</span>);
    remove(<span class="hljs-string">&quot;sandbox/c&quot;</span>);
    remove(<span class="hljs-string">&quot;sandbox/a&quot;</span>);
    remove(<span class="hljs-string">&quot;sandbox&quot;</span>);

    system(<span class="hljs-string">&quot;ls -la&quot;</span>);

    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title"><a href="https://coliru.stacked-crooked.com/a/26f4763ec5b42adb">Compilar y ejecutar: crear y borrar directorios C&#43;&#43;11</a>.</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">g++-4.9 -std=c++11 main.cpp -lm &amp;&amp; ./a.out
sandbox/a:
total 12
drwxr-xr-x 3 2001 2000 4096 May 28 12:27 .
drwxr-xr-x 4 2001 2000 4096 May 28 12:27 ..
drwxr-xr-x 2 2001 2000 4096 May 28 12:27 b

sandbox/c:
total 12
drwxr-xr-x 3 2001 2000 4096 May 28 12:27 .
drwxr-xr-x 4 2001 2000 4096 May 28 12:27 ..
drwxr-xr-x 2 2001 2000 4096 May 28 12:27 d
total 8012
drwxrwxrwx 2 2001 2000    4096 May 28 12:27 .
drwxrwxrwx 3 2002 2000 8175616 May 28 12:27 ..
-rwxr-xr-x 1 2001 2000    8168 May 28 12:27 a.out
-rw-rw-rw- 1 2001 2000     517 May 28 12:27 main.cpp</code></pre>
</div>
</div>
<div class="paragraph">
<p>Para crear y borrar directorios anidados, debemos hacerlo uno por uno. Podemos escribir este fragmento de código con menos líneas, pero aún así tendremos que tener cuidado del orden en el que creamos/borramos los directorios.</p>
</div>
<div class="listingblock">
<div class="title">En C&#43;&#43;17 podemos borrar y crear directorios anidados con una sola llamada.</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-cpp" data-lang="cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;experimental/filesystem&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span>

<span class="hljs-keyword">namespace</span> fs = <span class="hljs-built_in">std</span>::experimental::filesystem;
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>
</span>{
    fs::create_directories(<span class="hljs-string">&quot;sandbox/a/b&quot;</span>);
    fs::create_directories(<span class="hljs-string">&quot;sandbox/c/d&quot;</span>);
    system(<span class="hljs-string">&quot;ls -la sandbox/*&quot;</span>);

    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Were directories removed? &quot;</span> &lt;&lt; fs::remove_all(<span class="hljs-string">&quot;sandbox&quot;</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;
    system(<span class="hljs-string">&quot;ls -la&quot;</span>);

    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title"><a href="https://coliru.stacked-crooked.com/a/62c2d22fa0e7144c">Compilar y ejecutar: crear y borrar directorios C&#43;&#43;17</a>.</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">g++ -std=c++1z -fconcepts -fgnu-tm  -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;&amp; ./a.out
sandbox/a:
total 12
drwxr-xr-x 3 2001 2000 4096 May 28 16:45 .
drwxr-xr-x 4 2001 2000 4096 May 28 16:45 ..
drwxr-xr-x 2 2001 2000 4096 May 28 16:45 b

sandbox/c:
total 12
drwxr-xr-x 3 2001 2000 4096 May 28 16:45 .
drwxr-xr-x 4 2001 2000 4096 May 28 16:45 ..
drwxr-xr-x 2 2001 2000 4096 May 28 16:45 d
Were directories removed? 1
total 10132
drwxrwxrwx 2 2001 2000    4096 May 28 16:45 .
drwxrwxrwx 3 2002 2000 8175616 May 28 16:45 ..
-rwxr-xr-x 1 2001 2000 2170976 May 28 16:45 a.out
-rw-rw-rw- 1 2001 2000     393 May 28 16:45 main.cpp</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_ejemplo_completo_iterar_recursivamente_por_directorios">Ejemplo completo: Iterar Recursivamente por Directorios</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Vamos a ver un ejemplo algo más completo, consiste en iterar recursivamente a través de directorios, filtrando los ficheros por extension.</p>
</div>
<div class="sect2">
<h3 id="_c11">C&#43;&#43;11</h3>
<div class="paragraph">
<p>Este es el ejemplo en C&#43;&#43;11, sin filtrar por extension, para evitar complicarlo:</p>
</div>
<div class="listingblock">
<div class="title">filesystem.11.cpp</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-cpp" data-lang="cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;dirent.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt; // std::ofstream</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;memory&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;system_error&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> UP_DIR = <span class="hljs-string">&quot;..&quot;</span>;
<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> CURRENT_DIR = <span class="hljs-string">&quot;.&quot;</span>;
<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> SEP = <span class="hljs-string">&quot;/&quot;</span>;


<span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">path</span><span class="hljs-params">(<span class="hljs-built_in">initializer_list</span>&lt;<span class="hljs-built_in">string</span>&gt; parts)</span>
</span>{
    <span class="hljs-built_in">string</span> pathTmp {};
    <span class="hljs-built_in">string</span> separator = <span class="hljs-string">&quot;&quot;</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp; part: parts)
    {
        pathTmp.append(separator).append(part);
        separator = SEP;
    }
    <span class="hljs-keyword">return</span> pathTmp;
}

<span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">getDirectoryFiles</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; dir, <span class="hljs-keyword">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; &amp; extensions)</span>
</span>{
    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; files;
    <span class="hljs-function"><span class="hljs-built_in">shared_ptr</span>&lt;DIR&gt; <span class="hljs-title">directory_ptr</span><span class="hljs-params">(opendir(dir.c_str()), [](DIR* dir){ dir &amp;&amp; closedir(dir); })</span></span>;
    <span class="hljs-keyword">if</span> (!directory_ptr)
    {
        <span class="hljs-keyword">throw</span> system_error(error_code(errno, system_category()), <span class="hljs-string">&quot;Error opening : &quot;</span> + dir);
    }

    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span> *<span class="hljs-title">dirent_ptr</span>;</span>
    <span class="hljs-keyword">while</span> ((dirent_ptr = readdir(directory_ptr.get())) != <span class="hljs-literal">nullptr</span>)
    {
        <span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> fileName {dirent_ptr-&gt;d_name};
        <span class="hljs-keyword">if</span> (dirent_ptr-&gt;d_type == DT_DIR)
        {
            <span class="hljs-keyword">if</span> (CURRENT_DIR != fileName &amp;&amp; UP_DIR != fileName)
            {
                <span class="hljs-keyword">auto</span> subFiles = getDirectoryFiles(path({dir, fileName}), extensions);
                files.insert(end(files), begin(subFiles), end(subFiles));
            }
        }
        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dirent_ptr-&gt;d_type == DT_REG)
        {
            <span class="hljs-comment">// here we should check also if filename has an extension in extensions vector</span>
            files.push_back(path({dir, fileName}));
        }
    }
    <span class="hljs-keyword">return</span> files;
}

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span>
</span>{
    <span class="hljs-keyword">auto</span> opt = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;
    mkdir(<span class="hljs-string">&quot;sandbox&quot;</span>, opt);
    mkdir(<span class="hljs-string">&quot;sandbox/a&quot;</span>, opt);
    mkdir(<span class="hljs-string">&quot;sandbox/a/b&quot;</span>, opt);

	<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; e_files = {
	    <span class="hljs-string">&quot;./sandbox/a/b/file1.rst&quot;</span>,
	    <span class="hljs-string">&quot;./sandbox/a/b/file1.txt&quot;</span>,
	    <span class="hljs-string">&quot;./sandbox/a/file2.RST&quot;</span>,
	    <span class="hljs-string">&quot;./sandbox/file3.md&quot;</span>,
	    <span class="hljs-string">&quot;./sandbox/will_be.ignored&quot;</span>
	};

	<span class="hljs-comment">// create files</span>
	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;f: e_files)
	{
		<span class="hljs-function">ofstream <span class="hljs-title">of</span><span class="hljs-params">(f, ofstream::out)</span></span>;
		of &lt;&lt; <span class="hljs-string">&quot;test&quot;</span>;
	}

    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;filtered files: &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;f: getDirectoryFiles(<span class="hljs-string">&quot;.&quot;</span>, {<span class="hljs-string">&quot;.rst&quot;</span>, <span class="hljs-string">&quot;.RST&quot;</span>, <span class="hljs-string">&quot;.md&quot;</span>})){
	    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; f &lt;&lt; <span class="hljs-built_in">endl</span>;
	}

    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title"><a href="https://coliru.stacked-crooked.com/a/af4228e039a281b3" target="_blank" rel="noopener">Compilar y ejecutar el ejemplo C&#43;&#43;11</a>.</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">g++ -std=c++11 -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;&amp; ./a.out
filtered files:
	./main.cpp
	./sandbox/file3.md
	./sandbox/will_be.ignored
	./sandbox/a/b/file1.rst
	./sandbox/a/b/file1.txt
	./sandbox/a/file2.RST
	./a.out</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_c17">C&#43;&#43;17</h3>
<div class="paragraph">
<p>El siguiente ejemplo filtra los ficheros por extension.</p>
</div>
<div class="listingblock">
<div class="title">filesystem.17.cpp</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash"><span class="hljs-comment">#include &lt;dirent.h&gt;</span>
<span class="hljs-comment">#include &lt;cstring&gt;</span>
<span class="hljs-comment">#include &lt;iostream&gt;</span>
<span class="hljs-comment">#include &lt;fstream&gt; // std::ofstream</span>
<span class="hljs-comment">#include &lt;vector&gt;</span>
<span class="hljs-comment">#include &lt;memory&gt;</span>
<span class="hljs-comment">#include &lt;system_error&gt;</span>
<span class="hljs-comment">#include &lt;sys/stat.h&gt;</span>

using namespace std;

const string UP_DIR = <span class="hljs-string">&quot;..&quot;</span>;
const string CURRENT_DIR = <span class="hljs-string">&quot;.&quot;</span>;
const string SEP = <span class="hljs-string">&quot;/&quot;</span>;


string path(initializer_list&lt;string&gt; parts)
{
    string pathTmp {};
    string separator = <span class="hljs-string">&quot;&quot;</span>;
    <span class="hljs-keyword">for</span> (auto &amp; part: parts)
    {
        pathTmp.append(separator).append(part);
        separator = SEP;
    }
    <span class="hljs-built_in">return</span> pathTmp;
}

vector&lt;string&gt; getDirectoryFiles(const string&amp; dir, const vector&lt;string&gt; &amp; extensions)
{
    vector&lt;string&gt; files;
    shared_ptr&lt;DIR&gt; directory_ptr(opendir(dir.c_str()), [](DIR* dir){ dir &amp;&amp; closedir(dir); });
    <span class="hljs-keyword">if</span> (!directory_ptr)
    {
        throw system_error(error_code(errno, system_category()), <span class="hljs-string">&quot;Error opening : &quot;</span> + dir);
    }

    struct dirent *dirent_ptr;
    <span class="hljs-keyword">while</span> ((dirent_ptr = readdir(directory_ptr.get())) != nullptr)
    {
        const string fileName {dirent_ptr-&gt;d_name};
        <span class="hljs-keyword">if</span> (dirent_ptr-&gt;d_type == DT_DIR)
        {
            <span class="hljs-keyword">if</span> (CURRENT_DIR != fileName &amp;&amp; UP_DIR != fileName)
            {
                auto subFiles = getDirectoryFiles(path({dir, fileName}), extensions);
                files.insert(end(files), begin(subFiles), end(subFiles));
            }
        }
        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dirent_ptr-&gt;d_type == DT_REG)
        {
            // here we should check also <span class="hljs-keyword">if</span> filename has an extension <span class="hljs-keyword">in</span> extensions vector
            files.push_back(path({dir, fileName}));
        }
    }
    <span class="hljs-built_in">return</span> files;
}

int <span class="hljs-function"><span class="hljs-title">main</span></span> ()
{
    auto opt = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;
    mkdir(<span class="hljs-string">&quot;sandbox&quot;</span>, opt);
    mkdir(<span class="hljs-string">&quot;sandbox/a&quot;</span>, opt);
    mkdir(<span class="hljs-string">&quot;sandbox/a/b&quot;</span>, opt);

	vector&lt;string&gt; e_files = {
	    <span class="hljs-string">&quot;./sandbox/a/b/file1.rst&quot;</span>,
	    <span class="hljs-string">&quot;./sandbox/a/b/file1.txt&quot;</span>,
	    <span class="hljs-string">&quot;./sandbox/a/file2.RST&quot;</span>,
	    <span class="hljs-string">&quot;./sandbox/file3.md&quot;</span>,
	    <span class="hljs-string">&quot;./sandbox/will_be.ignored&quot;</span>
	};

	// create files
	<span class="hljs-keyword">for</span> (auto &amp;f: e_files)
	{
		ofstream of(f, ofstream::out);
		of &lt;&lt; <span class="hljs-string">&quot;test&quot;</span>;
	}

    cout &lt;&lt; <span class="hljs-string">&quot;filtered files: &quot;</span> &lt;&lt; <span class="hljs-string">endl;
	for (auto &amp;f: getDirectoryFiles(&quot;.&quot;, {&quot;.rst&quot;, &quot;.RST&quot;, &quot;.md&quot;})){
	    cout &lt;&lt; &quot;\t&quot; &lt;&lt; f &lt;&lt; endl</span>;
	}

    <span class="hljs-built_in">return</span> 0;
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title"><a href="https://coliru.stacked-crooked.com/a/af4228e039a281b3" target="_blank" rel="noopener">Compilar y ejecutar el ejemplo C&#43;&#43;17</a>.</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">g++ -std=c++11 -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;&amp; ./a.out
filtered files:
	./main.cpp
	./sandbox/file3.md
	./sandbox/will_be.ignored
	./sandbox/a/b/file1.rst
	./sandbox/a/b/file1.txt
	./sandbox/a/file2.RST
	./a.out</code></pre>
</div>
</div>
</div>
</div>
</div>]]></content>
            <category term="C++"/>
    <category term="C++11"/>
    <category term="C++17"/>
    <category term="IO"/>
    <category term="Filesystem"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Convertir archivos en formato Windows a formato Unix</title>
            <link href="https://carlosvin.github.io/posts/recursive-dos-unix/es" />
            <link 
				rel="alternate"
				hreflang="en"
				href="https://carlosvin.github.io/posts/recursive-dos-unix/en"/>   
            <id>https://carlosvin.github.io/posts/recursive-dos-unix/es</id>
            <updated>2016-02-12T09:34:00.000Z</updated>
            <summary>Convertir archivos en formato Windows a formato Unix</summary>
            <content type="html"><![CDATA[<div class="paragraph">
<p>Si alguna vez has programado desde un entorno Windows para entornos Unix, seguramente habrás tenido este problema: Los archivos que instalas en tu entorno Unix tienen formato Windows.</p>
</div>
<div class="paragraph">
<p>Hay un forma bastante sencilla de convertir todos los archivos que tienes en un directorio de formato Windows a Unix.</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">find . -<span class="hljs-built_in">type</span> f -print0 | xargs -0 dos2unix</code></pre>
</div>
</div>
<div class="paragraph">
<p>Lo he sacado, como no, de <a href="https://stackoverflow.com/questions/11929461/how-can-i-run-dos2unix-on-an-entire-directory" class="bare">https://stackoverflow.com/questions/11929461/how-can-i-run-dos2unix-on-an-entire-directory</a></p>
</div>]]></content>
            <category term="Useful Commands"/>
    <category term="Unix"/>
    <category term="Windows"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Eliminar/Reemplazar signos de puntuación en Python</title>
            <link href="https://carlosvin.github.io/posts/remove-replace-punctuation-py/es" />
            <link 
				rel="alternate"
				hreflang="en"
				href="https://carlosvin.github.io/posts/remove-replace-punctuation-py/en"/>   
            <id>https://carlosvin.github.io/posts/remove-replace-punctuation-py/es</id>
            <updated>2012-10-23T13:00:00.000Z</updated>
            <summary>Un pequeño ejemplo de cómo eliminar signos de puntuación de una cadena de caractéres en Python</summary>
            <content type="html"><![CDATA[<div class="paragraph">
<p>A continuación muestro una forma de eliminar los signos de puntuación de una cadena de caractéres en Python. Los signos de puntuación son reemplazados por caracteres en blanco.</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-python" data-lang="python"><span class="hljs-keyword">import</span> re, string

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove_punctuation</span> (<span class="hljs-params"> text </span>):</span>
  <span class="hljs-keyword">return</span> re.sub(<span class="hljs-string">&#x27;[%s]&#x27;</span> % re.escape(string.punctuation), <span class="hljs-string">&#x27; &#x27;</span>, text)</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Ejecutando un ejemplo</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">&gt;&gt;&gt; remove_punctuation (<span class="hljs-string">&quot;El perro, de San Roque, no tiene rabo; ni nunca lo ha tenido.&quot;</span>)
<span class="hljs-string">&#x27;El perro  de San Roque  no tiene rabo  ni nunca lo ha tenido &#x27;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Si queremos hacer la función más general, para reemplazar los signos de puntuación por cualquier otra cadena, simplemente hay que hacer la siguiente modificación en la función.</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-python" data-lang="python"><span class="hljs-keyword">import</span> re, string

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">replace_punctuation</span> (<span class="hljs-params"> text, replace </span>):</span>
  <span class="hljs-keyword">return</span> re.sub(<span class="hljs-string">&#x27;[%s]&#x27;</span> % re.escape(string.punctuation), replace, text)</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Ejecutando el código de arriba:</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">&gt;&gt;&gt; replace_punctuation (<span class="hljs-string">&quot;El perro, de San Roque, no tiene rabo; ni nunca lo ha tenido.&quot;</span>, <span class="hljs-string">&#x27;[stop]&#x27;</span>)
<span class="hljs-string">&#x27;El perro[stop] de San Roque[stop] no tiene rabo[stop] ni nunca lo ha tenido[stop]&#x27;</span></code></pre>
</div>
</div>]]></content>
            <category term="Python"/>
    <category term="Tips and Tricks"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Golang over Java for REST services</title>
            <link href="https://carlosvin.github.io/posts/rest-service-go-vs-java/en" />
               
            <id>https://carlosvin.github.io/posts/rest-service-go-vs-java/en</id>
            <updated>2020-11-01T00:00:00.000Z</updated>
            <summary>Why I'd pick Golang over Java to create any new distributed system. I am going to compare a REST service implementation in Java vs the implementation in Golang</summary>
            <content type="html"><![CDATA[<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_actual_project_examples">Actual project examples</a></li>
<li><a href="#_the_ecosystems">The Ecosystems</a></li>
<li><a href="#_routing">Routing</a>
<ul class="sectlevel2">
<li><a href="#_go_without_framework">Go - Without framework</a></li>
<li><a href="#_go_gin_framework">Go - Gin Framework</a></li>
<li><a href="#_java_spring_io">Java + Spring.io</a></li>
</ul>
</li>
<li><a href="#_validations">Validations</a>
<ul class="sectlevel2">
<li><a href="#_go_gin_framework_2">Go - Gin Framework</a></li>
<li><a href="#_java_spring_io_2">Java + Spring.io</a></li>
<li><a href="#_filtering_and_middleware">Filtering and Middleware</a></li>
</ul>
</li>
<li><a href="#_dependency_injection_ioc">Dependency injection / IoC</a>
<ul class="sectlevel2">
<li><a href="#_spring_ioc">Spring IoC</a></li>
<li><a href="#_go">Go</a></li>
</ul>
</li>
<li><a href="#_testing">Testing</a>
<ul class="sectlevel2">
<li><a href="#_unit_tests">Unit tests</a></li>
<li><a href="#_integration_tests">Integration tests</a></li>
</ul>
</li>
<li><a href="#_performance">Performance</a>
<ul class="sectlevel2">
<li><a href="#_memory">Memory</a></li>
<li><a href="#_speed">Speed</a></li>
</ul>
</li>
<li><a href="#_conclusions">Conclusions</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Lately I&#8217;ve been working with two different technology stacks almost in parallel, in both cases we were using them to develop <a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="noopener">REST</a> services.</p>
</div>
<div class="paragraph">
<p>During this time I&#8217;ve come up with some conclusions and opinions I&#8217;d like to share.</p>
</div>
<div class="paragraph">
<p>A disclaimer, few months ago, I had several years of experience with Java and 0 days of professional experience with Golang.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_actual_project_examples">Actual project examples</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Few months ago I created <a href="https://covid-rest.appspot.com/docs" target="_blank" rel="noopener">an API to extract and structure COVID-19 data</a> from <a href="https://www.ecdc.europa.eu/en/publications-data/download-todays-data-geographic-distribution-covid-19-cases-worldwide" target="_blank" rel="noopener">ECDC website</a>. I developed it in <a href="https://spring.io/guides/gs/rest-service" target="_blank" rel="noopener">Spring Boot (REST)</a>.</p>
</div>
<div class="paragraph">
<p>Few months later I had the luck of work on my first professional project in <a href="https://golang.org" target="_blank" rel="noopener">Go</a> and I decided to create a port of <a href="https://covid-rest.appspot.com/docs" target="_blank" rel="noopener">the API to extract COVID-19 data</a> in <a href="https://golang.org" target="_blank" rel="noopener">Go</a>, just for learning and for fun.</p>
</div>
<div class="paragraph">
<p>Now we have two REST services, almost functionally identical, but developed in two different tech stacks, so we can easily compare some relevant aspects of both.</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 1. Source code for the 2 REST services implementations</caption>
<colgroup>
<col style="width: 50%;">
<col style="width: 50%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><a href="https://www.java.com" target="_blank" rel="noopener">Java</a> + <a href="https://spring.io/guides/gs/rest-service" target="_blank" rel="noopener">Spring Boot (REST)</a></th>
<th class="tableblock halign-left valign-top"><a href="https://golang.org" target="_blank" rel="noopener">Go</a> + <a href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener">Gin framework</a></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/carlosvin/covid-rest" class="bare">https://github.com/carlosvin/covid-rest</a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/carlosvin/covid-rest-go" class="bare">https://github.com/carlosvin/covid-rest-go</a></p></td>
</tr>
</tbody>
</table>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
I actually created that <a href="https://covid-rest.appspot.com/docs">COVID-19 data REST API</a> to be the data source for the <a href="https://covid-stats-pwa.netlify.app" target="_blank" rel="noopener">COVID19-Stats App</a>, a <a href="https://web.dev/progressive-web-apps" target="_blank" rel="noopener">PWA</a> built with <a href="https://svelte.dev" target="_blank" rel="noopener">Svelte</a>, but that&#8217;s another topic.
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_the_ecosystems">The Ecosystems</h2>
<div class="sectionbody">
<div class="paragraph">
<p>If you want to create a <a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="noopener">REST</a> service just in plain Java you will have extra work to do, in Golang a little bit less. That&#8217;s why we use framework, because they&#8217;ve already solved many common problems for us.</p>
</div>
<div class="paragraph">
<p>For this comparison I am going to use <a href="https://spring.io/guides/gs/rest-service" target="_blank" rel="noopener">Spring Boot (REST)</a> for <a href="https://www.java.com" target="_blank" rel="noopener">Java</a> and <a href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener">Gin framework</a> for <a href="https://golang.org" target="_blank" rel="noopener">Go</a>, but in both languages there are a lot of production ready nice options.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_routing">Routing</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_go_without_framework">Go - Without framework</h3>
<div class="paragraph">
<p>Go uses the concept of <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" target="_blank" rel="noopener">HTTP</a> multiplexer or router. You can specify routes using patterns and link those routes to handlers. The router will decide which handler has to execute the request based on the path received.</p>
</div>
<div class="listingblock">
<div class="title">router.go file</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-go" data-lang="go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">&quot;log&quot;</span>
	<span class="hljs-string">&quot;net/http&quot;</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	router := http.NewServeMux()
	router.Handle(<span class="hljs-string">&quot;/redirect&quot;</span>, http.RedirectHandler(<span class="hljs-string">&quot;https://carlosvin.github.io/&quot;</span>, <span class="hljs-number">307</span>))
	router.HandleFunc(<span class="hljs-string">&quot;/hello&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> {
		w.Write([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;Hello world!&quot;</span>))
	})
	log.Println(<span class="hljs-string">&quot;Listening...&quot;</span>)
	http.ListenAndServe(<span class="hljs-string">&quot;:3000&quot;</span>, router)
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Source code is already quite simple, but there might more complex routing use cases.</p>
</div>
</div>
<div class="sect2">
<h3 id="_go_gin_framework">Go - Gin Framework</h3>
<div class="paragraph">
<p>Happily there are frameworks that help us to keep our base code simple, for example when we need to extract path parameters, which is quite common use case in <a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="noopener">REST</a> <a href="https://en.wikipedia.org/wiki/Application_programming_interface" target="_blank" rel="noopener">API</a>s, we can use a routing library, I&#8217;ve used <a href="https://github.com/gorilla/mux" target="_blank" rel="noopener">Gorilla Mux</a> and <a href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener">Gin framework</a> and I liked more <a href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener">Gin framework</a>.</p>
</div>
<div class="listingblock">
<div class="title"><a href="https://github.com/carlosvin/covid-rest-go/blob/master/main.go">Full example</a></div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-go" data-lang="go"><span class="hljs-keyword">import</span> (
	<span class="hljs-string">&quot;github.com/carlosvin/covid-rest-go/handlers&quot;</span>
	<span class="hljs-string">&quot;github.com/carlosvin/covid-rest-go/readers&quot;</span>
	<span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {

	<span class="hljs-comment">// ...</span>

	r := gin.Default()
	r.GET(<span class="hljs-string">&quot;/countries&quot;</span>, router.Countries)
	r.GET(<span class="hljs-string">&quot;/countries/:code&quot;</span>, router.Country)
	r.GET(<span class="hljs-string">&quot;/countries/:code/dates&quot;</span>, router.CountryDates)
	r.GET(<span class="hljs-string">&quot;/countries/:code/dates/:date&quot;</span>, router.CountryDate)
	r.Run()
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title"><a href="https://github.com/carlosvin/covid-rest-go/blob/master/handlers/countries.go">And this is a handler example</a>, the router.Countries one</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-go" data-lang="go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *routerImpl)</span> <span class="hljs-title">Countries</span><span class="hljs-params">(c *gin.Context)</span></span> {
	c.JSON(<span class="hljs-number">200</span>, r.countries())
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_java_spring_io">Java + Spring.io</h3>
<div class="paragraph">
<p>The <a href="https://spring.io/guides/gs/rest-service" target="_blank" rel="noopener">Spring Boot (REST)</a> is based on the concept of Controller, it is implemented using annotations on the class and methods.</p>
</div>
<div class="listingblock">
<div class="title"><a href="https://github.com/carlosvin/covid-rest/blob/master/src/main/java/com/carlosvin/covid/controllers/CountriesController.java" target="_blank" rel="noopener">CountriesController.java</a></div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-java" data-lang="java"><span class="hljs-meta">@Validated</span>
<span class="hljs-meta">@RestController</span> <b class="conum">(1)</b>
<span class="hljs-meta">@RequestMapping(&quot;/countries&quot;)</span> <b class="conum">(2)</b>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CountriesController</span> </span>{

	<span class="hljs-comment">// Some source code is not shown, you can find the complete example in the repository</span>

	<span class="hljs-meta">@GetMapping(&quot;/{country}/dates/{isoDateStr}&quot;)</span>  <b class="conum">(3)</b>
	<span class="hljs-function"><span class="hljs-keyword">public</span> DateStatsDto <span class="hljs-title">getDateByCountry</span><span class="hljs-params">(<span class="hljs-meta">@Size(min = 2, max = 2)</span> <span class="hljs-meta">@PathVariable</span> String country, <span class="hljs-meta">@Size(min = 10, max = 20)</span> <span class="hljs-meta">@PathVariable</span> String isoDateStr)</span> <span class="hljs-keyword">throws</span> NotFoundException </span>{
		<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DateStatsDto(service.getDate(country, DateUtils.convert(isoDateStr)));
	}
}</code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>Declare the class as Controller so it is registered in <a href="https://spring.io/guides/gs/rest-service" target="_blank" rel="noopener">Spring Boot (REST)</a></p>
</li>
<li>
<p>Controller base path definition</p>
</li>
<li>
<p>Handler definition for a nested path under the main controller path. <a href="https://spring.io/guides/gs/rest-service" target="_blank" rel="noopener">Spring Boot (REST)</a> makes easy to extract path variables defined in the route, you can directly use them as method arguments.</p>
</li>
</ol>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_validations">Validations</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_go_gin_framework_2">Go - Gin Framework</h3>
<div class="paragraph">
<p><a href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener">Gin framework</a> uses an external validation package <a href="https://godoc.org/github.com/go-playground/validator">validator</a>, besides that it is fully integrated with <a href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener">Gin framework</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-go" data-lang="go"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> {
	Name  <span class="hljs-keyword">string</span> <span class="hljs-string">`validate:&quot;required&quot;`</span> <b class="conum">(1)</b>
	Email <span class="hljs-keyword">string</span> <span class="hljs-string">`validate:&quot;required,email&quot;`</span>
}

err := validate.Struct(user) <b class="conum">(2)</b>
validationErrors := err.(validator.ValidationErrors) <b class="conum">(3)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>The validation system uses <a href="https://golang.org" target="_blank" rel="noopener">Go</a> tags, it is not the same as <a href="https://www.java.com" target="_blank" rel="noopener">Java</a> annotations, but in the validation case, it works in pretty same way as annotations.</p>
</li>
<li>
<p>Executes the validation explicitly</p>
</li>
<li>
<p>Extracts validation errors</p>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="_java_spring_io_2">Java + Spring.io</h3>
<div class="paragraph">
<p>You can enable the validation in the controller level, then in the handlers you can also specify the type of validation. Let&#8217;s explain it using the previous example:</p>
</div>
<div class="listingblock">
<div class="title"><a href="https://github.com/carlosvin/covid-rest/blob/master/src/main/java/com/carlosvin/covid/controllers/CountriesController.java" target="_blank" rel="noopener">CountriesController.java</a></div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-java" data-lang="java"><span class="hljs-meta">@Validated</span> <b class="conum">(1)</b>
<span class="hljs-meta">@RestController</span>
<span class="hljs-meta">@RequestMapping(&quot;/countries&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CountriesController</span> </span>{

	<span class="hljs-comment">// Some source code is not shown, you can find the complete example in the repository</span>

	<span class="hljs-meta">@GetMapping(&quot;/{country}/dates/{isoDateStr}&quot;)</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> DateStatsDto <span class="hljs-title">getDateByCountry</span><span class="hljs-params">(
		<span class="hljs-meta">@Size(min = 2, max = 2)</span> <span class="hljs-meta">@PathVariable</span> String country, <b class="conum">(2)</b>
		<span class="hljs-meta">@Size(min = 10, max = 20)</span> <span class="hljs-meta">@PathVariable</span> String isoDateStr)</span> <span class="hljs-keyword">throws</span> NotFoundException </span>{
		<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DateStatsDto(service.getDate(country, DateUtils.convert(isoDateStr)));
	}
}</code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>Declare the class as Controller so it is registered in <a href="https://spring.io/guides/gs/rest-service" target="_blank" rel="noopener">Spring Boot (REST)</a></p>
</li>
<li>
<p><code>@Size</code> validates that the input argument country has 2 characters</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>The validation system is more powerful than you can see in this code snippet, for example adding <code>@Valid</code> annotation opens the door to complex types validation.</p>
</div>
</div>
<div class="sect2">
<h3 id="_filtering_and_middleware">Filtering and Middleware</h3>
<div class="paragraph">
<p>Different approaches, pretty much the same end result.</p>
</div>
<div class="paragraph">
<p>I will elaborate this topic in following days.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_dependency_injection_ioc">Dependency injection / IoC</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_spring_ioc"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators" target="_blank" rel="noopener">Spring IoC</a></h3>
<div class="paragraph">
<p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators" target="_blank" rel="noopener">Spring IoC</a> is the most complete and powerful systems I&#8217;ve ever used for <a href="https://en.wikipedia.org/wiki/Inversion_of_control" target="_blank" rel="noopener">IoC</a>, actually, the first time I used Spring professionally was just to deal with <a href="https://en.wikipedia.org/wiki/Inversion_of_control" target="_blank" rel="noopener">IoC</a>. It supports XML configuration files or <a href="https://www.java.com" target="_blank" rel="noopener">Java</a> annotations, I like annotations more, here a simple example from <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators" target="_blank" rel="noopener">Spring IoC</a> documentation:</p>
</div>
<div class="listingblock">
<div class="title">Spring IoC example</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-java" data-lang="java"><span class="hljs-meta">@Repository</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JpaMovieFinder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MovieFinder</span> </span>{ <b class="conum">(1)</b>
    <span class="hljs-comment">// implementation elided for clarity</span>
}

<span class="hljs-comment">//</span>

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleMovieLister</span> </span>{

    <span class="hljs-keyword">private</span> MovieFinder movieFinder;

    <span class="hljs-meta">@Autowired</span> <b class="conum">(2)</b>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMovieFinder</span><span class="hljs-params">(MovieFinder movieFinder)</span> </span>{
        <span class="hljs-keyword">this</span>.movieFinder = movieFinder;
    }

    <span class="hljs-comment">// ...</span>
}</code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p><code>JpaMovieFinder</code> is instantiated by <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators" target="_blank" rel="noopener">Spring IoC</a></p>
</li>
<li>
<p>With <code>@Autowired</code> annotation <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators" target="_blank" rel="noopener">Spring IoC</a> knows that has to inject <code>movieFinder</code> argument. It should be a class implementing <code>MovieFinder</code></p>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="_go">Go</h3>
<div class="paragraph">
<p>Neither <a href="https://golang.org" target="_blank" rel="noopener">Go</a> nor <a href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener">Gin framework</a> has any <a href="https://en.wikipedia.org/wiki/Inversion_of_control" target="_blank" rel="noopener">IoC</a> solution, but you can still apply <a href="https://en.wikipedia.org/wiki/Dependency_injection" target="_blank" rel="noopener">Dependency Injection</a> technique to decouple your components and improve the testability of your system.</p>
</div>
<div class="listingblock">
<div class="title">Dependency injection simple example in <a href="https://golang.org" target="_blank" rel="noopener">Go</a></div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-go" data-lang="go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>

<span class="hljs-comment">// Greeter interface to greet the caller</span>
<span class="hljs-keyword">type</span> Greeter <span class="hljs-keyword">interface</span> {
	greet()
}

<span class="hljs-keyword">type</span> greeterHello <span class="hljs-keyword">struct</span>{}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(g *greeterHello)</span> <span class="hljs-title">greet</span><span class="hljs-params">()</span></span> { <b class="conum">(3)</b>
	fmt.Println(<span class="hljs-string">&quot;Hello!&quot;</span>)
}

<span class="hljs-keyword">type</span> greeterHi <span class="hljs-keyword">struct</span>{}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(g *greeterHi)</span> <span class="hljs-title">greet</span><span class="hljs-params">()</span></span> { <b class="conum">(4)</b>
	fmt.Println(<span class="hljs-string">&quot;Hi!&quot;</span>)
}

<span class="hljs-comment">// App Application representation</span>
<span class="hljs-keyword">type</span> App <span class="hljs-keyword">struct</span> {
	greeters []Greeter <b class="conum">(1)</b>
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(app *App)</span> <span class="hljs-title">startup</span><span class="hljs-params">()</span></span> {
	<span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> app.greeters {
		v.greet()
	}
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	greeters := []Greeter{ <b class="conum">(2)</b>
		&amp;greeterHello{},
		&amp;greeterHi{},
		&amp;greeterHello{}}

	app := &amp;App{greeters}

	app.startup()
}

<span class="hljs-comment">/*
&lt;1&gt; `App` accepts an array of `Greeter`
&lt;2&gt; During `App` instantiation we pass different implementations of `Greeter`
&lt;3&gt; Greeter implementation that prints *Hello!*
&lt;4&gt; Greeter implementation that prints *Hi!*
*/</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>It is more verbose, but there is an advantage, there is nothing hidden, everything is explicit and you have full control of instantiation order.</p>
</div>
<div class="paragraph">
<p>As soon as you use <a href="https://en.wikipedia.org/wiki/Dependency_injection" target="_blank" rel="noopener">Dependency Injection</a>, I don&#8217;t have any strong opinion about using <a href="https://en.wikipedia.org/wiki/Inversion_of_control" target="_blank" rel="noopener">IoC</a> system or doing <a href="https://en.wikipedia.org/wiki/Dependency_injection" target="_blank" rel="noopener">Dependency Injection</a> manually.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_testing">Testing</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_unit_tests">Unit tests</h3>
<div class="paragraph">
<p>For unit tests there are no big differences.</p>
</div>
<div class="paragraph">
<p><a href="https://golang.org" target="_blank" rel="noopener">Go</a> comes with a standard <a href="https://golang.org/pkg/testing/" target="_blank" rel="noopener">library for testing and benchmarking</a>.</p>
</div>
<div class="paragraph">
<p>For <a href="https://www.java.com" target="_blank" rel="noopener">Java</a> there are many well-known unit testing frameworks, but Spring already has quite big support for <a href="https://docs.spring.io/spring-batch/docs/current/reference/html/testing.html" target="_blank" rel="noopener">unit testing</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_integration_tests">Integration tests</h3>
<div class="sect3">
<h4 id="_go_2">Go</h4>
<div class="paragraph">
<p>There are no support for Integration Tests in <a href="https://golang.org" target="_blank" rel="noopener">Go</a>, you will have to implement everything by yourself, although it is not difficult, <a href="https://kpat.io/2019/06/testing-with-gin/" target="_blank" rel="noopener">here you can find a simple example</a>.</p>
</div>
</div>
<div class="sect3">
<h4 id="_spring">Spring</h4>
<div class="paragraph">
<p>On the other hand, <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/testing.html" target="_bank">Spring has a great testing support</a>.</p>
</div>
<div class="paragraph">
<p>To write integration tests for <a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="noopener">REST</a> services, <a href="https://spring.io/guides/gs/testing-web/" target="_blank" rel="noopener">MockMvc</a> is really convenient.</p>
</div>
<div class="paragraph">
<p>I&#8217;ve used <a href="https://github.com/carlosvin/covid-rest/blob/master/src/test/java/com/carlosvin/covid/CountriesControllerTest.java" target="_blank" rel="noopener">MockMvc in the covid-rest project</a>.</p>
</div>
<div class="listingblock">
<div class="title">MockMvc code snippet from <a href="https://github.com/carlosvin/covid-rest/blob/master/src/test/java/com/carlosvin/covid/CountriesControllerTest.java" target="_blank" rel="noopener">CountriesControllerTest.java</a></div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-java" data-lang="java">	<span class="hljs-meta">@Autowired</span>
	<span class="hljs-keyword">private</span> MockMvc mockMvc; <b class="conum">(1)</b>

	<span class="hljs-meta">@Test</span>
	<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getCountries</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{
		<span class="hljs-keyword">this</span>.mockMvc.perform(get(<span class="hljs-string">&quot;/countries&quot;</span>)) <b class="conum">(2)</b>
				.andDo(print()).andExpect(status().isOk()) <b class="conum">(3)</b>
				.andExpect(jsonPath(<span class="hljs-string">&quot;$.*&quot;</span>, hasSize(<span class="hljs-number">144</span>)))
				.andExpect(jsonPath(<span class="hljs-string">&quot;$.ES.confirmedCases&quot;</span>,comparesEqualTo(<span class="hljs-number">9191</span>)))
				.andExpect(jsonPath(<span class="hljs-string">&quot;$.ES.deathsNumber&quot;</span>, comparesEqualTo(<span class="hljs-number">309</span>)))
				.andExpect(jsonPath(<span class="hljs-string">&quot;$.ES.countryCode&quot;</span>, comparesEqualTo(<span class="hljs-string">&quot;ES&quot;</span>)))
				.andExpect(jsonPath(<span class="hljs-string">&quot;$.ES.countryName&quot;</span>, comparesEqualTo(<span class="hljs-string">&quot;Spain&quot;</span>)))
				.andExpect(jsonPath(<span class="hljs-string">&quot;$.ES.path&quot;</span>, comparesEqualTo(<span class="hljs-string">&quot;/countries/ES&quot;</span>)))
				.andExpect(jsonPath(<span class="hljs-string">&quot;$.VC.countryName&quot;</span>, comparesEqualTo(<span class="hljs-string">&quot;Saint Vincent and the Grenadines&quot;</span>)))
				.andDo(document(<span class="hljs-string">&quot;countries/list&quot;</span>, preprocessResponse(prettyPrint(), <span class="hljs-keyword">new</span> CropPreprocessor())));
	}</code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>The Spring test runner injects the MockMvc object.</p>
</li>
<li>
<p>We use MockMvc to call to the endpoint we have created.</p>
</li>
<li>
<p>Then we validate the endpoint response: status code and body.</p>
</li>
</ol>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_performance">Performance</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Besides the languages specific differences, the main difference is the performance. The CPU consumption in <a href="https://golang.org" target="_blank" rel="noopener">Go</a> is smaller, but about the memory the difference is really significant, <strong>the order of 30 times smaller fingerprint</strong>.</p>
</div>
<div class="sect2">
<h3 id="_memory">Memory</h3>
<div class="paragraph">
<p>Here I&#8217;ve found a surprising difference, just by checking the memory consumption in my laptop.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener">Gin framework</a> <code>15.6MB</code></p>
</li>
<li>
<p><a href="https://spring.io/guides/gs/rest-service" target="_blank" rel="noopener">Spring Boot (REST)</a> <code>465.9MB</code></p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="/posts/rest-service-go-vs-java/memory-consumption-go-java.png" alt="Memory consumption">
</div>
</div>
</div>
<div class="sect2">
<h3 id="_speed">Speed</h3>
<div class="paragraph">
<p>Following the <a href="https://www.techempower.com/benchmarks/" target="_blank" rel="noopener">TechEmpower benchmarks</a>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener">Gin framework</a> is in 193 position, 9.9%.</p>
</li>
<li>
<p><a href="https://spring.io/guides/gs/rest-service" target="_blank" rel="noopener">Spring Boot (REST)</a> is in 284 position, 4%.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Following the <a href="https://github.com/the-benchmarker/web-frameworks" target="_blank" rel="noopener">The Benchmarker results</a>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener">Gin framework</a>: position 33.</p>
</li>
<li>
<p><a href="https://spring.io/guides/gs/rest-service" target="_blank" rel="noopener">Spring Boot (REST)</a>: position 68.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusions">Conclusions</h2>
<div class="sectionbody">
<div class="paragraph">
<p>If I were you, I&#8217;d choose <a href="https://golang.org" target="_blank" rel="noopener">Go</a> if:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>If you value the explicit over implicit, keep in mind that there is a cost, you will most likely have to write more lines of code.</p>
</li>
<li>
<p>If you value the simplicity, <a href="https://golang.org" target="_blank" rel="noopener">Go</a> has a quite reduced set of keywords, which reduces the learning curve and simplifies the code reviews.</p>
</li>
<li>
<p>If RAM memory usage is critical for your project, actually I&#8217;d just keep away from <a href="https://spring.io/guides/gs/rest-service" target="_blank" rel="noopener">Spring Boot (REST)</a>.</p>
</li>
<li>
<p>If the project you are going to work on is a distributed system, specially if it is based on <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" target="_blank" rel="noopener">HTTP</a>.</p>
</li>
</ul>
</div>
</div>
</div>]]></content>
            <category term="REST"/>
    <category term="API"/>
    <category term="Web Services"/>
    <category term="Java"/>
    <category term="Golang"/>
    <category term="Gingonic"/>
    <category term="Spring"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Creando REST URLs</title>
            <link href="https://carlosvin.github.io/posts/rest-urls/es" />
            <link 
				rel="alternate"
				hreflang="en"
				href="https://carlosvin.github.io/posts/rest-urls/en"/>   
            <id>https://carlosvin.github.io/posts/rest-urls/es</id>
            <updated>2015-07-26T16:00:00.000Z</updated>
            <summary>Crear REST API: URLs</summary>
            <content type="html"><![CDATA[<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_fundamentos_rest">Fundamentos REST</a>
<ul class="sectlevel2">
<li><a href="#_verbos_rest">Verbos REST</a></li>
<li><a href="#_acceso_a_recursos">Acceso a Recursos</a></li>
<li><a href="#_modificar_recursos">Modificar Recursos</a></li>
<li><a href="#_borrar_recursos">Borrar Recursos</a></li>
<li><a href="#_crear_recursos">Crear Recursos</a></li>
<li><a href="#_colecciones">Colecciones</a></li>
</ul>
</li>
<li><a href="#_típico_error">Típico error</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Las primeras veces que me puse a diseñar una <a href="https://en.wikipedia.org/wiki/Application_programming_interface" target="_blank" rel="noopener">API</a> <a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="noopener">REST</a> cometí unos cuantos errores, por supuesto. A continuación os voy a contar algunos de los errores que cometí y lo que he entendido hasta hoy sobre la construcción de <a href="https://en.wikipedia.org/wiki/Uniform_resource_locator" target="_blank" rel="noopener">URL</a>s <a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="noopener">REST</a> con ejemplos.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_fundamentos_rest">Fundamentos <a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="noopener">REST</a></h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>Utilizamos <a href="https://en.wikipedia.org/wiki/Uniform_resource_locator" target="_blank" rel="noopener">URL</a>s para acceder a recursos.</p>
</li>
<li>
<p>Utilizamos <em>verbos</em> para modificar recursos.</p>
</li>
<li>
<p>Nuestros <em>verbos</em> están proporcionados por el protocolo <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" target="_blank" rel="noopener">HTTP</a>.</p>
</li>
<li>
<p>Los <em>verbos</em> tienen un equivalente directo con las operaciones <a href="https://en.wikipedia.org/wiki/CRUD" target="_blank" rel="noopener">CRUD</a><sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup>.</p>
</li>
<li>
<p>Para acceder a un recurso existente necesitamos su identificador.</p>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="_verbos_rest">Verbos <a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="noopener">REST</a></h3>
<div class="hdlist">
<table>
<tr>
<td class="hdlist1">
POST
</td>
<td class="hdlist2">
<p>(<strong>Create</strong>) Utilizado para <strong>crear</strong> nuevos recursos.</p>
</td>
</tr>
<tr>
<td class="hdlist1">
GET
</td>
<td class="hdlist2">
<p>(<strong>Read</strong>) Utilizado para <strong>leer</strong> un recursos existentes en el sistema.</p>
</td>
</tr>
<tr>
<td class="hdlist1">
PUT
</td>
<td class="hdlist2">
<p>(<strong>Update</strong>) Utilizado para <strong>actualizar</strong> recursos existentes.</p>
</td>
</tr>
<tr>
<td class="hdlist1">
DELETE
</td>
<td class="hdlist2">
<p>(<strong>Delete</strong>) Utilizado para <strong>borrar</strong> recursos existentes.</p>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>En una tabla quedará más claro</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 33.3333%;">
<col style="width: 33.3333%;">
<col style="width: 33.3334%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Verbo <a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="noopener">REST</a></th>
<th class="tableblock halign-left valign-top">Acción <a href="https://en.wikipedia.org/wiki/CRUD" target="_blank" rel="noopener">CRUD</a></th>
<th class="tableblock halign-left valign-top">Debe exisitir el recurso</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">POST</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Crear</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">No</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">GET</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Leer</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Sí</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">PUT</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Actualizar</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Sí</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">DELETE</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Borrar</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Sí</p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect2">
<h3 id="_acceso_a_recursos">Acceso a Recursos</h3>
<div class="paragraph">
<p>Un recurso es <em>a lo que quieres acceder</em>. Por ejemplo, un coche.</p>
</div>
<div class="paragraph">
<p>Para poder acceder a un coche no es suficiente con esta información, no puedes ir a un concesionario y preguntar por un coche en general, tienes que decir qué coche quieres. Así que llegas al concesionario y dices:</p>
</div>
<div class="paragraph">
<p><em>Hola, buenos días. Quiero información sobre el Fiat Bravo 1.9 Emotion 120CV</em>.</p>
</div>
<div class="paragraph">
<p>De esta forma el dependiente sabe cuál es y te puede dar la información.</p>
</div>
<div class="paragraph">
<p>"Fiat Bravo 1.9 Emotion 120CV" es nuestro <strong>identificador</strong>.</p>
</div>
<div class="paragraph">
<p>Trasladando el ejemplo a las <a href="https://en.wikipedia.org/wiki/Application_programming_interface" target="_blank" rel="noopener">API</a>s <a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="noopener">REST</a>:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>GET   https://tiendadecoches.es/api/coches/fiat-bravo-19-emotion-120cv</pre>
</div>
</div>
<div class="paragraph">
<p>De esta forma nuestra <a href="https://en.wikipedia.org/wiki/Application_programming_interface" target="_blank" rel="noopener">API</a> nos puede proporcionar información del coche.</p>
</div>
<div class="paragraph">
<p>Esto es un ejemplo muy simplificado, pero realmente cuando accedemos a un recurso concreto solemos utilizar algo que lo identifique de forma unívoca. Una práctica común y recomendable es utilizar <a href="https://en.wikipedia.org/wiki/Universally_unique_identifier" target="_blank" rel="noopener">UUID</a>.</p>
</div>
<div class="literalblock">
<div class="content">
<pre>GET  https://tiendadecoches.es/api/coches/cce05bee-386b-11e5-a151-feff819cdc9f</pre>
</div>
</div>
<div class="paragraph">
<p>Pero nuestra <a href="https://en.wikipedia.org/wiki/Application_programming_interface" target="_blank" rel="noopener">API</a>, al igual que una tienda, no tiene por qué ser tan estricta, podemos preguntar por los coches que tienen ciertas caracteríticas, podemos ir al concesionario y decir:</p>
</div>
<div class="paragraph">
<p><em>Hola buenos días, quiero un Fiat Bravo</em>.</p>
</div>
<div class="paragraph">
<p>Y el dependiente, amablemente, te mostrará todos los Fiat Bravo que tiene. Veamos cómo podemos decir esto a nuestra <a href="https://en.wikipedia.org/wiki/Application_programming_interface" target="_blank" rel="noopener">API</a>.</p>
</div>
<div class="literalblock">
<div class="content">
<pre>GET  https://tiendadecoches.es/api/coches/?marca=fiat&amp;modelo=bravo</pre>
</div>
</div>
<div class="paragraph">
<p>Nuestra <a href="https://en.wikipedia.org/wiki/Application_programming_interface" target="_blank" rel="noopener">API</a> nos devolverá todos los coches que son marca Fiat y modelo Bravo.</p>
</div>
<div class="paragraph">
<p>Marca y modelo en este caso son lo que llamamos <strong>parámetros de consulta</strong> (query parameters).</p>
</div>
<div class="paragraph">
<p>Como os habréis dado cuenta durante el ejemplo, para obtener información de un recurso siempre hemos utilizado el <em>verbo</em> <strong>GET</strong>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_modificar_recursos">Modificar Recursos</h3>
<div class="paragraph">
<p>Nuestra <a href="https://en.wikipedia.org/wiki/Application_programming_interface" target="_blank" rel="noopener">API</a> también nos puede permitir modificar un recurso, al igual que para pedir información, para modificar un recurso necesitamos especificar qué recurso queremos modificar, así que necesitamos otra vez un <em>identificador</em>.</p>
</div>
<div class="paragraph">
<p>Antes queríamos información (leer) y utilizábamos nuestro verbo GET, ahora lo único que cambia es el verbo, queremos <strong>modificar</strong> así que utilizamos el verbo equivalente que nos proporciona el protocolo <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" target="_blank" rel="noopener">HTTP</a>: <strong>PUT</strong>.</p>
</div>
<div class="literalblock">
<div class="content">
<pre>PUT   https://tiendadecoches.es/api/coches/cce05bee-386b-11e5-a151-feff819cdc9f</pre>
</div>
</div>
<div class="paragraph">
<p>Pero nos falta algo, tenemos que decir qué queremos cambiar del coche, por ejemplo, imaginemos que queremos cambiar la cilintrada y poner 100CV.</p>
</div>
<div class="paragraph">
<p>Tenemos que enviar la nueva cilindrada a esta <a href="https://en.wikipedia.org/wiki/Uniform_resource_locator" target="_blank" rel="noopener">URL</a> <a href="https://tiendadecoches.es/api/coches/cce05bee-386b-11e5-a151-feff819cdc9f" class="bare">https://tiendadecoches.es/api/coches/cce05bee-386b-11e5-a151-feff819cdc9f</a> por <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" target="_blank" rel="noopener">HTTP</a> utilizando el verbo <strong>PUT</strong>.</p>
</div>
<div class="paragraph">
<p>El protocolo <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" target="_blank" rel="noopener">HTTP</a> nos permite enviar información en un mensaje PUT, así que solo nos falta pensar en el formato en que lo vamos a enviar.</p>
</div>
<div class="paragraph">
<p>Podemos enviarlo en <a href="https://en.wikipedia.org/wiki/JSON" target="_blank" rel="noopener">JSON</a> o <a href="">XML</a> o como queramos, solo tenemos que estar seguros de que el formato que enviamos es lo que espera recibir el servidor.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Cuando definimos una <a href="https://en.wikipedia.org/wiki/Application_programming_interface" target="_blank" rel="noopener">API</a> <a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="noopener">REST</a> tenemos que definir también el formato en que vamos a enviar los datos.
</td>
</tr>
</table>
</div>
<div class="listingblock">
<div class="title">Ejemplo en <a href="https://en.wikipedia.org/wiki/JSON" target="_blank" rel="noopener">JSON</a></div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-json" data-lang="json">{ cilindrada: <span class="hljs-number">100</span> }</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_borrar_recursos">Borrar Recursos</h3>
<div class="paragraph">
<p>Continuando con el ejemplo de los coches, imaginemos que ahora somos el concesionario, y que ya no queremos vender más ese Fiat Bravo (concretamente el cce05bee-386b-11e5-a151-feff819cdc9f). Seguiremos manteniendo la <a href="https://en.wikipedia.org/wiki/Uniform_resource_locator" target="_blank" rel="noopener">URL</a> que identifica el recurso, pero cambiamos el verbo, no queremos leer (GET), ni modificar (PUT), queremos <strong>borrar (DELETE)</strong>.</p>
</div>
<div class="literalblock">
<div class="content">
<pre>DELETE   https://tiendadecoches.es/api/coches/cce05bee-386b-11e5-a151-feff819cdc9f</pre>
</div>
</div>
<div class="paragraph">
<p>En el caso del borrado, no hay que proporcionar ninguna información adicional, con el verbo (DELETE) y el recurso es suficiente.</p>
</div>
</div>
<div class="sect2">
<h3 id="_crear_recursos">Crear Recursos</h3>
<div class="paragraph">
<p>Y nos queda último verbo, <strong>crear (POST)</strong>. En este caso no hay que identificar el recurso, porque no existe todavía.</p>
</div>
<div class="literalblock">
<div class="content">
<pre>POST   https://tiendadecoches.es/api/coches/</pre>
</div>
</div>
<div class="paragraph">
<p>Lo que sí que tenemos que enviar son los datos del recurso que vamos a crear.</p>
</div>
<div class="paragraph">
<p>En nuestro ejemplo, queremos crear un coche, así que ponemos toda la información necesaria para crear un coche dentro de la llamada POST de <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" target="_blank" rel="noopener">HTTP</a>, algo muy parecido como hemos hecho en el apartado <a href="#_modificar_recursos">Modificar Recursos</a>, pero en este caso mandamos <strong>toda la información necesaria</strong>, no solo la cilindrada.</p>
</div>
<div class="listingblock">
<div class="title">Ejemplo en <a href="https://en.wikipedia.org/wiki/JSON" target="_blank" rel="noopener">JSON</a></div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-json" data-lang="json">{
  <span class="hljs-attr">&quot;marca&quot;</span>: <span class="hljs-string">&quot;Fiat&quot;</span>,
  <span class="hljs-attr">&quot;modelo&quot;</span>: <span class="hljs-string">&quot;Bravo&quot;</span>
  <span class="hljs-string">&quot;anio&quot;</span>: <span class="hljs-number">2010</span>
  <span class="hljs-string">&quot;puertas&quot;</span>: <span class="hljs-number">5</span>,
  <span class="hljs-attr">&quot;cilindrada&quot;</span>: <span class="hljs-number">120</span>,
  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;Emotion&quot;</span>,
  <span class="hljs-attr">&quot;climatizador&quot;</span>: <span class="hljs-literal">true</span>,
  <span class="hljs-attr">&quot;ac&quot;</span>: <span class="hljs-literal">false</span>,
  <span class="hljs-attr">&quot;fuel&quot;</span>: <span class="hljs-string">&quot;Diesel&quot;</span>
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Podemos delegar en el sistema, para que cuando pidamos la creación de un recurso nuevo, nos asigne un nuevo <strong>identificador</strong>, o simplemente enviarlo con el resto de información:</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-json" data-lang="json">{
<span class="hljs-attr">&quot;identificador&quot;</span>: <span class="hljs-string">&quot;cce05bee-386b-11e5-a151-feff819cdc9f&quot;</span>
<span class="hljs-string">&quot;marca&quot;</span>: <span class="hljs-string">&quot;Fiat&quot;</span>,
<span class="hljs-attr">&quot;modelo&quot;</span>: <span class="hljs-string">&quot;Bravo&quot;</span>
<span class="hljs-string">&quot;anio&quot;</span>: <span class="hljs-number">2010</span>
<span class="hljs-string">&quot;puertas&quot;</span>: <span class="hljs-number">5</span>,
<span class="hljs-attr">&quot;cilindrada&quot;</span>: <span class="hljs-number">120</span>,
<span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;Emotion&quot;</span>,
<span class="hljs-attr">&quot;climatizador&quot;</span>: <span class="hljs-literal">true</span>,
<span class="hljs-attr">&quot;ac&quot;</span>: <span class="hljs-literal">false</span>,
<span class="hljs-attr">&quot;fuel&quot;</span>: <span class="hljs-string">&quot;Diesel&quot;</span>
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_colecciones">Colecciones</h3>
<div class="paragraph">
<p>Algo que no quiero pasar por alto, porque al menos para mí no fue obvio, es el manejo de colecciones. Realmente ya está explicado, porque todas las acciones que hemos visto previamente sobre los coches, estaba aplicando realmente a una colección de coches.</p>
</div>
<div class="paragraph">
<p>Pero, ¿qué pasa si un recurso tiene a su vez una colección? Siguiendo con los coches, un coche puede tener una lista de aceites con los que puede funcionar, así que nuestra <a href="https://en.wikipedia.org/wiki/Application_programming_interface" target="_blank" rel="noopener">API</a> debería permitir obtener, modificar, borrar o crear elementos en la lista.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Para el ejemplo asumiremos que el identificador del aceite es el atributo tipo.
</td>
</tr>
</table>
</div>
<div class="sect3">
<h4 id="_añadir_un_elemento_a_la_colección">Añadir un elemento a la colección</h4>
<div class="paragraph">
<p>Si queremos añadir un elemento a la colección de coches lo que vamos a hacer es crear un nuevo coche, así que estamos en el caso de <a href="#_crear_recursos">Crear Recursos</a>.</p>
</div>
<div class="paragraph">
<p>Para añadir un nuevo aceite al coche cce05bee-386b-11e5-a151-feff819cdc9f, que ya existe:</p>
</div>
<div class="listingblock">
<div class="title">Petición</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-http" data-lang="http">POST   https://tiendadecoches.es/api/coches/cce05bee-386b-11e5-a151-feff819cdc9f/aceites/</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Respuesta</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-json" data-lang="json">{
  <span class="hljs-attr">&quot;tipo&quot;</span>: <span class="hljs-string">&quot;5W30&quot;</span>,
  <span class="hljs-attr">&quot;otros_datos&quot;</span>: <span class="hljs-string">&quot;este es el mejor del mundo para este coche&quot;</span>
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Si queremos añadir otro aceite:</p>
</div>
<div class="listingblock">
<div class="title">Petición</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-http" data-lang="http">POST   https://tiendadecoches.es/api/coches/cce05bee-386b-11e5-a151-feff819cdc9f/aceites/</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Respuesta</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-json" data-lang="json">{
  <span class="hljs-attr">&quot;tipo&quot;</span>: <span class="hljs-string">&quot;10W30&quot;</span>,
  <span class="hljs-attr">&quot;otros_datos&quot;</span>: <span class="hljs-string">&quot;otras cosas sobre aceites de coche&quot;</span>,
}</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_modificar_un_elemento_de_la_colección">Modificar un elemento de la colección</h4>
<div class="paragraph">
<p>Si queremos modificar los datos del aceite <em>5W30</em> del coche <em>cce05bee-386b-11e5-a151-feff819cdc9f</em>:</p>
</div>
<div class="listingblock">
<div class="title">Petición</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-http" data-lang="http">PUT   https://tiendadecoches.es/api/coches/cce05bee-386b-11e5-a151-feff819cdc9f/aceites/5W30/</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Respuesta</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-json" data-lang="json">{
  <span class="hljs-attr">&quot;tipo&quot;</span>: <span class="hljs-string">&quot;5W30&quot;</span>,
  <span class="hljs-attr">&quot;otros_datos&quot;</span>: <span class="hljs-string">&quot;este ya no es el mejor del mundo para este coche&quot;</span>
}</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_borrar_un_elemento_de_la_colección">Borrar un elemento de la colección</h4>
<div class="paragraph">
<p>Para borrar un aceite <em>10W30</em> del coche <em>cce05bee-386b-11e5-a151-feff819cdc9f</em>:</p>
</div>
<div class="listingblock">
<div class="title">Petición</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-http" data-lang="http">DELETE   https://tiendadecoches.es/api/coches/cce05bee-386b-11e5-a151-feff819cdc9f/aceites/10W30</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_leer_un_elemento_de_la_colección">Leer un elemento de la colección</h4>
<div class="paragraph">
<p>Para obtener la información del aceite <em>10W30</em> del coche <em>cce05bee-386b-11e5-a151-feff819cdc9f</em>:</p>
</div>
<div class="listingblock">
<div class="title">Petición</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-http" data-lang="http">GET   https://tiendadecoches.es/api/coches/cce05bee-386b-11e5-a151-feff819cdc9f/aceites/10W30</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_listar_elementos_de_la_colección">Listar elementos de la colección</h4>
<div class="paragraph">
<p>Como hemos visto en <a href="#_leer_un_elemento_de_la_colección">Leer un elemento de la colección</a>, podemos obtener información de cualquier elemento de la colección, pero también podemos obtener varios elementos de la colección, ordenarlos, paginarlos y aplicar cualquier tipo de acciones típicas de una colección.</p>
</div>
<div class="paragraph">
<p>Podemos obtener todos los aceites soportados por el coche <em>cce05bee-386b-11e5-a151-feff819cdc9f</em>, es tan simple como:</p>
</div>
<div class="listingblock">
<div class="title">Petición</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-http" data-lang="http">GET   https://tiendadecoches.es/api/coches/cce05bee-386b-11e5-a151-feff819cdc9f/aceites/</code></pre>
</div>
</div>
<div class="paragraph">
<p>Pero también podemos proporcionar otras funcionalidades en nuestra <a href="https://en.wikipedia.org/wiki/Application_programming_interface" target="_blank" rel="noopener">API</a>, como obtener los resultados ordenados:</p>
</div>
<div class="listingblock">
<div class="title">Petición</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-http" data-lang="http">GET   https://tiendadecoches.es/api/coches/cce05bee-386b-11e5-a151-feff819cdc9f/aceites/?ordenar_por=tipo&amp;orden=ascendente</code></pre>
</div>
</div>
<div class="paragraph">
<p>Podemos pedir al <a href="https://en.wikipedia.org/wiki/Application_programming_interface" target="_blank" rel="noopener">API</a> que nos devuelva los 10 primeros aceites del coche <em>cce05bee-386b-11e5-a151-feff819cdc9f</em>:</p>
</div>
<div class="listingblock">
<div class="title">Petición</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-http" data-lang="http">GET   https://tiendadecoches.es/api/coches/cce05bee-386b-11e5-a151-feff819cdc9f/aceites/?numero_de_elementos=10</code></pre>
</div>
</div>
<div class="paragraph">
<p>Cuando no queremos mostrar toda la lista completa, podemos proporcionar un sistema de paginación:</p>
</div>
<div class="listingblock">
<div class="title">Petición</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-http" data-lang="http">GET   https://tiendadecoches.es/api/coches/cce05bee-386b-11e5-a151-feff819cdc9f/aceites/?pagina=3&amp;numero_de_elementos=3</code></pre>
</div>
</div>
<div class="paragraph">
<p>En la petición de arriba, estamos diciendo que nos devuelva la página 3 de los aceites del coche <em>cce05bee-386b-11e5-a151-feff819cdc9f</em> y que nos muestre 3 aceites por página. Si quisiéramos ir a la página siguiente:</p>
</div>
<div class="listingblock">
<div class="title">Petición</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-http" data-lang="http">GET   https://tiendadecoches.es/api/coches/cce05bee-386b-11e5-a151-feff819cdc9f/aceites/?pagina=4&amp;numero_de_elementos=3</code></pre>
</div>
</div>
<div class="paragraph">
<p>Todas estas funcionalidades, son posibles gracias a los <strong>parámetros de consulta</strong>.</p>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_típico_error">Típico error</h2>
<div class="sectionbody">
<div class="paragraph">
<p>La primera vez que intenté diseñar un <a href="https://en.wikipedia.org/wiki/Application_programming_interface" target="_blank" rel="noopener">API</a> <a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="noopener">REST</a> lo que hice fué otra cosa, era una <a href="https://en.wikipedia.org/wiki/Application_programming_interface" target="_blank" rel="noopener">API</a>, pero no <a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="noopener">REST</a>.</p>
</div>
<div class="paragraph">
<p>Mi principal error fue en la construción de las <a href="https://en.wikipedia.org/wiki/Uniform_resource_locator" target="_blank" rel="noopener">URL</a>s, incluí <em>verbos</em> sin tener en cuenta que los verbos ya me los proporcionaba el protocolo <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" target="_blank" rel="noopener">HTTP</a>.</p>
</div>
<div class="paragraph">
<p>Por ejemplo, creaba <a href="https://en.wikipedia.org/wiki/Uniform_resource_locator" target="_blank" rel="noopener">URL</a>s del tipo:</p>
</div>
<div class="listingblock">
<div class="title">Incorrecto</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-http" data-lang="http">POST    https://example.com/api/coches/seat-ibiza/borrar-rueda/3</code></pre>
</div>
</div>
<div class="paragraph">
<p>Cuando lo correcto sería</p>
</div>
<div class="listingblock">
<div class="title">Correcto</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-http" data-lang="http">DELETE  https://example.com/api/coches/seat-ibiza/ruedas/3</code></pre>
</div>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnotedef_1">
<a href="#_footnoteref_1">1</a>. Create, Read, Update, Delete
</div>
</div>]]></content>
            <category term="REST"/>
    <category term="API"/>
    <category term="Web Services"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Contenedores Docker multi-dominio</title>
            <link href="https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/es" />
            <link 
				rel="alternate"
				hreflang="en"
				href="https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/en"/>   
            <id>https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/es</id>
            <updated>2016-11-23T20:00:00.000Z</updated>
            <summary>Cómo crear varios contenedores Docker con diferentes dominios en la misma máquina.</summary>
            <content type="html"><![CDATA[<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_caso_de_uso">Caso de Uso</a></li>
<li><a href="#_cómo_configurar_un_proxy_inverso_multi_dominio">Cómo configurar un Proxy Inverso Multi-Dominio</a>
<ul class="sectlevel2">
<li><a href="#_estructura_del_proyecto_de_ejemplo">Estructura del proyecto de ejemplo</a></li>
<li><a href="#_configuración_de_la_arquitectura_docker_compose">Configuración de la arquitectura (docker-compose)</a></li>
<li><a href="#_configuración_de_la_imágen_de_la_aplicación">Configuración de la imágen de la aplicación</a></li>
<li><a href="#_añadiendo_los_nombres_de_dominio_a_tu_configuración">Añadiendo los nombres de dominio a tu configuración</a></li>
<li><a href="#_todo_listo">¡Todo listo!</a></li>
</ul>
</li>
</ul>
</div>
<div class="sect1">
<h2 id="_caso_de_uso">Caso de Uso</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Tenemos varias aplicaciones servidoras a la vez en un mismo entorno de desarrollo, cada una encapsulada en un contenedor, llamémosles de ahora en adelante <strong>"Contenedor A"</strong> y <strong>"Contenedor B"</strong>.</p>
</div>
<div class="paragraph">
<p>Utilizando docker estas aplicaciones tienen la misma dirección IP en nuestra máquina, una forma de distinguirlas es cambiando el puerto que exponen.</p>
</div>
<div class="imageblock center">
<div class="content">
<img src="/images/docker-multidomain/ip.png" alt="ip">
</div>
</div>
<div class="paragraph">
<p>Aplicaciones exponiendo la misma dirección IP utilizando diferentes puertos para diferenciar las aplicaciones.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Si queremos llamar a la <strong>"aplicación A"</strong> haremos algo así: <code>GET <a href="http://10.20.30.40:8080/colors/red" class="bare">http://10.20.30.40:8080/colors/red</a></code>.</p>
</li>
<li>
<p>Si queremos llamar a la <strong>"aplicación B"</strong> haremos algo así: <code>GET <a href="http://10.20.30.40:8081/fruits/tomato" class="bare">http://10.20.30.40:8081/fruits/tomato</a></code>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Pero esto es un poco confuso, ¿8080 sigfica que accedemos a las "aplicación A" y 8081 significa "aplicación B"?</p>
</div>
<div class="paragraph">
<p>Sería mucho más sencillo de recordar algo así:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Si queremos llamar a la "aplicación A" haremos algo así: <code>GET <a href="http://a.domain.com/colors/red" class="bare">http://a.domain.com/colors/red</a></code>.</p>
</li>
<li>
<p>Si queremos llamar a la "aplicación B" haremos algo así: <code>GET <a href="http://b.domain.com/fruits/tomato" class="bare">http://b.domain.com/fruits/tomato</a></code>.</p>
</li>
</ul>
</div>
<div class="imageblock center">
<div class="content">
<img src="/images/docker-multidomain/domain.png" alt="domain">
</div>
</div>
<div class="paragraph">
<p>Diferenciando aplicaciones por nombre de dominio</p>
</div>
<div class="paragraph">
<p>Obtener este valor semántico extra es más sencillo de lo que parece.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_cómo_configurar_un_proxy_inverso_multi_dominio">Cómo configurar un Proxy Inverso Multi-Dominio</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Dije que era fácil porque no vamos a tener que hacer casi nada, ya que otro contenedor hará casi todo el trabajo por nosotros. Vamos a utilizar <a href="https://github.com/jwilder/nginx-proxy" target="_blank" rel="noopener">nginx-proxy</a>, que generará automáticamente las configuraciones necesarias para <a href="https://www.nginx.com" target="_blank" rel="noopener">NGINX</a>.</p>
</div>
<div class="paragraph">
<p>Así que al final no tendremos 2 contenedores, sino también tendremos un tercero que hará las veces de proxy.</p>
</div>
<div class="imageblock center">
<div class="content">
<img src="/images/docker-multidomain/proxy.png" alt="domain">
</div>
</div>
<div class="paragraph">
<p>Los 2 contenedores y el proxy.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Puedes descargar el ejemplo completo desde: <a href="https://github.com/carlosvin/docker-reverse-proxy-multi-domain" class="bare">https://github.com/carlosvin/docker-reverse-proxy-multi-domain</a>.
</td>
</tr>
</table>
</div>
<div class="sect2">
<h3 id="_estructura_del_proyecto_de_ejemplo">Estructura del proyecto de ejemplo</h3>
<div class="dlist">
<dl>
<dt class="hdlist1">docker-compose.yaml</dt>
<dd>
<p>Archivo con la configuración descrita en la imágen previa.</p>
</dd>
<dt class="hdlist1">a</dt>
<dd>
<p>Directorio para la aplicación A.</p>
<div class="dlist">
<dl>
<dt class="hdlist1">Dockerfile</dt>
<dd>
<p>Archivo con la configuración del contenedor A.</p>
</dd>
</dl>
</div>
</dd>
<dt class="hdlist1">b</dt>
<dd>
<p>Directorio para la aplicación B.</p>
<div class="dlist">
<dl>
<dt class="hdlist1">Dockerfile</dt>
<dd>
<p>Archivo con la configuración del contenedor B.</p>
</dd>
</dl>
</div>
</dd>
</dl>
</div>
<div class="paragraph">
<p><a href="https://github.com/carlosvin/docker-reverse-proxy-multi-domain" target="_blank" rel="noopener">Ver proyecto</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_configuración_de_la_arquitectura_docker_compose">Configuración de la arquitectura (docker-compose)</h3>
<div class="paragraph">
<p>La parte más importante es la configuración de las relaciones entre los contenedores.</p>
</div>
<div class="listingblock">
<div class="title">docker-reverse-proxy-multi-domain/docker-compose.yaml</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-yaml" data-lang="yaml"><span class="hljs-attr">a:</span>
  <span class="hljs-attr">build:</span> <span class="hljs-string">a</span> <b class="conum">(4)</b>
  <span class="hljs-attr">environment:</span>
    <span class="hljs-attr">VIRTUAL_HOST:</span> <span class="hljs-string">a.domain.com</span> <b class="conum">(1)</b>
  <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>

<span class="hljs-attr">b:</span>
  <span class="hljs-attr">build:</span> <span class="hljs-string">b</span> <b class="conum">(5)</b>
  <span class="hljs-attr">environment:</span>
    <span class="hljs-attr">VIRTUAL_HOST:</span>  <span class="hljs-string">b.domain.com</span> <b class="conum">(2)</b>
  <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>

<span class="hljs-attr">nginx-proxy:</span> <b class="conum">(3)</b>
  <span class="hljs-attr">image:</span> <span class="hljs-string">jwilder/nginx-proxy</span>
  <span class="hljs-attr">ports:</span>
    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;80:80&quot;</span>
    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;443:443&quot;</span>
  <span class="hljs-attr">volumes:</span>
    <span class="hljs-bullet">-</span> <span class="hljs-string">/var/run/docker.sock:/tmp/docker.sock:ro</span>

  <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>
  <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span></code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>Configuramos el nombre de dominio que queremos utilizar para la aplicación a.</p>
</li>
<li>
<p>Lo mismo para la aplicación b.</p>
</li>
<li>
<p>A partir de aquí configuramos el proxy (esta es la parte de copiar y pegar).</p>
</li>
<li>
<p>Indicamos a docker-compose que tiene que construir las imágenes dentro del directorio indicado.</p>
</li>
<li>
<p>Por ejemplo, aquí, estamos indicando que docker-compose tiene que construir la imágen docker utilizando ./b/Dockerfile.</p>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="_configuración_de_la_imágen_de_la_aplicación">Configuración de la imágen de la aplicación</h3>
<div class="paragraph">
<p>A continuación vamos a comentar la configuración de la imágen del contenedor para la aplicación A.</p>
</div>
<div class="listingblock">
<div class="title">a/Dockerfile</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-docker" data-lang="docker"><span class="hljs-keyword">FROM</span> httpd:<span class="hljs-number">2.4</span> <b class="conum">(1)</b>
<span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;A&lt;/h1&gt;App A works!&lt;/body&gt;&lt;/html&gt;&quot;</span> &gt; /usr/<span class="hljs-built_in">local</span>/apache2/htdocs/index.html </span><b class="conum">(2)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>Importamos una imágen con un servidor apache.</p>
</li>
<li>
<p>Servimos un archivo que muestra "Host A" como página por defecto.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>La configuración para la aplicación B, es prácticamente la misma:</p>
</div>
<div class="listingblock">
<div class="title">b/Dockerfile</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-docker" data-lang="docker"><span class="hljs-keyword">FROM</span> httpd:<span class="hljs-number">2.4</span>
<span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;B&lt;/h1&gt;App B works!&lt;/body&gt;&lt;/html&gt;&quot;</span> &gt; /usr/<span class="hljs-built_in">local</span>/apache2/htdocs/index.html</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_añadiendo_los_nombres_de_dominio_a_tu_configuración">Añadiendo los nombres de dominio a tu configuración</h3>
<div class="paragraph">
<p>En Linux simplemente tenemos mapear la dirección local a los nombres de dominio que hayas elegido, en nuestro ejemplo es <code>a.domain.com</code> y <code>b.domain.com</code>.</p>
</div>
<div class="listingblock">
<div class="title">/etc/hosts</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">127.0.0.1     localhost.localdomain localhost
::1             localhost6.localdomain6 localhost6
127.0.0.1   a.domain.com <b class="conum">(1)</b>
127.0.0.1   b.domain.com</code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>Simplemente he añadido las líneas 4 y 5.</p>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="_todo_listo">¡Todo listo!</h3>
<div class="paragraph">
<p>Ya solo nos queda probar el ejemplo.</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">docker-compose build
docker-compose up</code></pre>
</div>
</div>
<div class="paragraph">
<p>Ya están las tres contenedores arrancados.</p>
</div>
<div class="paragraph">
<p>Ahora podemos abrir nuestro navegador y escribir a.domain.com y nos mostrará el texto <em>App A works!</em>. Si escribimos b.domain.com entonces veremos <em>App B works!</em>.</p>
</div>
<div class="imageblock center">
<div class="content">
<img src="/images/docker-multidomain/a.screenshot.png" alt="App A works!">
</div>
<div class="title">Figure 1. a.domain.com</div>
</div>
<div class="imageblock center">
<div class="content">
<img src="/images/docker-multidomain/b.screenshot.png" alt="App B works!">
</div>
<div class="title">Figure 2. b.domain.com</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
En la mayoría de distribuciones Linux necesitarás privilegios para ejecutar los comandos docker (<code>sudo</code>).
</td>
</tr>
</table>
</div>
</div>
</div>
</div>]]></content>
            <category term="Docker"/>
    <category term="Microservices"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Comparación frameworks REST para RUST</title>
            <link href="https://carlosvin.github.io/posts/rust-rest-framework-comparison/es" />
            <link 
				rel="alternate"
				hreflang="en"
				href="https://carlosvin.github.io/posts/rust-rest-framework-comparison/en"/>   
            <id>https://carlosvin.github.io/posts/rust-rest-framework-comparison/es</id>
            <updated>2016-03-01T19:40:00.000Z</updated>
            <summary>Comparación entre frameworks REST para RUST</summary>
            <content type="html"><![CDATA[<div class="paragraph">
<p>Estoy empezando a hacer mis primeros pinitos con <a href="https://www.rust-lang.org" target="_blank" rel="noopener">Rust</a>, es un lenguage de programación que promete ser tan rápido como <a href="https://en.wikipedia.org/wiki/C%2B%2B" target="_blank" rel="noopener">C/C++</a>, pero más seguro en cuanto a la gestión de memoria ser refiere. Básicamente, no permite al programador hacer "cosas malas" con la memoria como: olvidarse de liberar la memoria o liberar memoria que está siendo utilizada. En estos casos, <a href="https://www.rust-lang.org" target="_blank" rel="noopener">Rust</a> simplemente no compilará.</p>
</div>
<div class="paragraph">
<p>Para aprender he pensado en hacer algún pequeño proyecto, tengo algunas ideas, pero todas pasan por ofrecer una <a href="https://en.wikipedia.org/wiki/Application_programming_interface" target="_blank" rel="noopener">API</a> <a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="noopener">REST</a>, así que me he puesto a buscar frameworks que me faciliten esta tarea y me he llevado una grata sorpresa al encontrar una muy <a href="https://github.com/flosse/rust-web-framework-comparison">buena comparativa con el estado de los frameworks REST para Rust</a>.</p>
</div>]]></content>
            <category term="Frameworks"/>
    <category term="Rustlang"/>
    <category term="Programming Languages"/>
    <category term="REST"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Distintas formas de serialización en Java: Comparación de rendimiento</title>
            <link href="https://carlosvin.github.io/posts/serialization-java-serializable-externalizable/es" />
            <link 
				rel="alternate"
				hreflang="en"
				href="https://carlosvin.github.io/posts/serialization-java-serializable-externalizable/en"/>   
            <id>https://carlosvin.github.io/posts/serialization-java-serializable-externalizable/es</id>
            <updated>2014-05-13T15:00:00.000Z</updated>
            <summary>Comparación de rendimientos entre distintas formas de serialización en Java</summary>
            <content type="html"><![CDATA[<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_serializable">Serializable</a></li>
<li><a href="#_externalizable">Externalizable</a></li>
<li><a href="#_pruebas_de_rendimiento_serializable_vs_externalizable">Pruebas de Rendimiento (Serializable vs Externalizable)</a>
<ul class="sectlevel2">
<li><a href="#_implementando_el_interfaz_serializable">Implementando el interfaz Serializable</a></li>
<li><a href="#_utilizando_el_interfaz_externalizable_mal">Utilizando el interfaz Externalizable (mal)</a></li>
<li><a href="#_utilizando_el_interfaz_externalizable_correctamente">Utilizando el interfaz Externalizable (correctamente)</a></li>
<li><a href="#_analizando_los_resultados">Analizando los resultados</a></li>
</ul>
</li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Hace poco, he tenido que serializar/deserializar unos datos en <a href="https://www.java.com" target="_blank" rel="noopener">Java</a>, hacía mucho que no lo hacía en formato binario directamente (ultimamente he utilizado <a href="https://www.json.org" target="_blank" rel="noopener">JSON</a> o <a href="https://en.wikipedia.org/wiki/XML" target="_blank" rel="noopener">XML</a>). Recordaba haber serializado objetos implementando el interfaz <a href="https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html" target="_blank" rel="noopener">Serializable</a>, pero había visto por Internet otra forma implementando el interfaz <a href="https://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html" target="_blank" rel="noopener">Externalizable</a>, ¿cuál interfaz utilizo? Pues depende lo que quieras y necesites, como todo.</p>
</div>
<div class="paragraph">
<p>Veamos cuándo utilizar <a href="#_serializable">Serializable</a> o <a href="#_externalizable">Externalizable</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_serializable">Serializable</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>Cuando quieras escribir poco código, es la forma fácil.</p>
</li>
<li>
<p>Pero tiene algunas restricciones: El objeto a serializar debe implementar el constructor por defecto. Debe hacerse responsable de los atributos no accesibles de la clase padre.</p>
</li>
<li>
<p>Cuando no te importe mucho el rendimiento, como veremos en la sección <a href="#_pruebas_de_rendimiento_serializable_vs_externalizable">Pruebas de Rendimiento (Serializable vs Externalizable)</a>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_externalizable">Externalizable</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>Vas a tener que implementar tú mismo los métodos de serialización.</p>
</li>
<li>
<p>Cuando no puedas utilizar <a href="#_serializable">Serializable</a>.</p>
</li>
<li>
<p>Cuando quieras obtener un mejor rendimiento, como veremos en la sección <a href="#_pruebas_de_rendimiento_serializable_vs_externalizable">Pruebas de Rendimiento (Serializable vs Externalizable)</a>.</p>
</li>
<li>
<p>Si tienes que encargarte de la serialización de los atributos de la clase padre, te recomiendo utilizar <a href="https://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html" target="_blank" rel="noopener">Externalizable</a>, porque evitamos una sobrescritura extraña de métodos privados.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-java" data-lang="java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeObject</span><span class="hljs-params">(ObjectOutputStream oos)</span>
<span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(ObjectInputStream ois)</span></span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_pruebas_de_rendimiento_serializable_vs_externalizable">Pruebas de Rendimiento (Serializable vs Externalizable)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>El interfaz <a href="#_serializable">Serializable</a> utilizando la introspección de <a href="https://www.java.com" target="_blank" rel="noopener">Java</a>, adivina los tipos de los atributos de las clases que va a serializar/deserializar, pero esta "magia" tiene una penalización en el rendimiento.</p>
</div>
<div class="paragraph">
<p>Al utilizar el interfaz <a href="#_externalizable">Externalizable</a> somos nosotros los que decidimos cómo serializar/deserializar los objetos, es decir, tenemos que escribir nosotros el código que hace esto. Hemos perdido comodidad, pero evitamos que <a href="https://www.java.com" target="_blank" rel="noopener">Java</a> haga algunas tareas y, si sobrescribimos correctamente los métodos del interfaz <a href="#_externalizable">Externalizable</a>, conseguiremos una mejora de rendimiento.</p>
</div>
<div class="paragraph">
<p>Para saber cuánto es la diferencia de rendimiento, he escrito un <a href="https://github.com/carlosvin/serializations-performance-java" target="_blank" rel="noopener">pequeño ejemplo en el que se serializa un objeto con dos colecciones con 100000 emails y 100000 teléfonos</a>. He contemplado 3 casos:</p>
</div>
<div class="sect2">
<h3 id="_implementando_el_interfaz_serializable">Implementando el interfaz Serializable</h3>
<div class="paragraph">
<p>Como dijimos más arriba, cuando implementamos el interfaz <a href="https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html" target="_blank" rel="noopener">Serializable</a>, <a href="https://www.java.com" target="_blank" rel="noopener">Java</a> tiene que adivinar ciertas cosas, en este proceso sacrifica algo de rendimiento (es el que más tarda), a cambio ĺo único que tenemos que hacer es que nuestra clase implemente el interfaz <a href="https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html" target="_blank" rel="noopener">Serializable</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-java" data-lang="java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Contacts</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>{
  <span class="hljs-comment">// ...</span>
}</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>1133 milisegundos en serializar</p>
</li>
<li>
<p>506 milisegundos en deserializar</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_utilizando_el_interfaz_externalizable_mal">Utilizando el interfaz Externalizable (mal)</h3>
<div class="paragraph">
<p>En este caso somos nosotros los encargados de "decir" a <a href="https://www.java.com" target="_blank" rel="noopener">Java</a> cómo debe serializar/deserializar, pero debemos ser cuidadosos, de lo contrario podemos quedarnos con lo peor de los dos mundos, por ejemplo: Si simplemente serializamos/deserializamos los atributos de la clase, y estos son atributos complejos (como colecciones), <a href="https://www.java.com" target="_blank" rel="noopener">Java</a> también tiene que adivinar bastantes cosas y también sacrificamos algo de rendimiento y además hemos tenido que escribir más código.</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-java" data-lang="java"><span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readExternal</span><span class="hljs-params">(ObjectInput in)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>{
  setEmails((Set&lt;String&gt;) in.readObject());
  setPhones((Set&lt;String&gt;) in.readObject());
}

<span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeExternal</span><span class="hljs-params">(ObjectOutput out)</span> <span class="hljs-keyword">throws</span> IOException </span>{
  out.writeObject(emails);
  out.writeObject(phones);
}</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>737 milisegundos en serializar</p>
</li>
<li>
<p>367 milisegundos en deserializar</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_utilizando_el_interfaz_externalizable_correctamente">Utilizando el interfaz Externalizable (correctamente)</h3>
<div class="paragraph">
<p>Si serializamos/deserializamos uno por uno los elementos de las colecciones, ahorramos aún más tiempo, porque <a href="https://www.java.com" target="_blank" rel="noopener">Java</a> está serializando tipos más simples (en este caso java.lang.String).</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-java" data-lang="java"><span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readExternal</span><span class="hljs-params">(ObjectInput in)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>{
  emails.clear();
  phones.clear();
  <span class="hljs-keyword">int</span> nEmails = in.readInt();
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nEmails; i++) {
    emails.add(in.readUTF());
  }
  <span class="hljs-keyword">int</span> nPhones = in.readInt();
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nPhones; i++) {
    phones.add(in.readUTF());
  }
}

<span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeExternal</span><span class="hljs-params">(ObjectOutput out)</span> <span class="hljs-keyword">throws</span> IOException </span>{
  out.writeInt(emails.size());
  <span class="hljs-keyword">for</span> (String e : emails) {
    out.writeUTF(e);
  }
  out.writeInt(phones.size());
  <span class="hljs-keyword">for</span> (String p : phones) {
    out.writeUTF(p);
  }
}</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>204 milisegundos en serializar</p>
</li>
<li>
<p>92 milisegundos en deserializar</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Hemos ganado rendimiento a costa de escribir un poco más de código.</p>
</div>
</div>
<div class="sect2">
<h3 id="_analizando_los_resultados">Analizando los resultados</h3>
<div class="paragraph">
<p>Por el hecho de utilizar un interfaz u otro, no ganamos rendimiento.</p>
</div>
<div class="paragraph">
<p>Ganamos rendimiento porque el interfaz <a href="#_externalizable">Externalizable</a> nos "obliga" a implementar parte de la serialización y quitamos esta carga a <a href="https://www.java.com" target="_blank" rel="noopener">Java</a>.</p>
</div>
<div class="paragraph">
<p>Aunque como hemos visto en <a href="#_utilizando_el_interfaz_externalizable_mal">Utilizando el interfaz Externalizable (mal)</a>, si no tenemos cuidado, conseguiremos una mejora poco significativa a costa de complicar nuestro código fuente.</p>
</div>
<div class="paragraph">
<p>A continuación os dejo los enlaces a:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="http://carlosvin.github.io/serializations-performance-java/classes/com.github.carlosvin.contacts.SerializationTest.html">Resultados de los tests</a>.</p>
</li>
<li>
<p><a href="https://github.com/carlosvin/serializations-performance-java/">Código en github</a>.</p>
</li>
</ul>
</div>
</div>
</div>
</div>]]></content>
            <category term="Java"/>
    <category term="Performance"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>Svelte, a bright future with Snowpack</title>
            <link href="https://carlosvin.github.io/posts/svelte-next-bright-future-with-snowpack/en" />
               
            <id>https://carlosvin.github.io/posts/svelte-next-bright-future-with-snowpack/en</id>
            <updated>2020-10-25T00:00:00.000Z</updated>
            <summary>Echoing Richard Harris announcements in Svelte Summit 2020: Sapper 1.0 never gonna happen, the new Svelte Kit, Snowpack as build tool, Javascript Module System.</summary>
            <content type="html"><![CDATA[<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_sapper_1_0_is_not_going_to_happen">Sapper 1.0 is not going to happen</a></li>
<li><a href="#_snowpack">Snowpack</a></li>
<li><a href="#_example">Example</a>
<ul class="sectlevel2">
<li><a href="#_build">Build</a></li>
</ul>
</li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Today I finally got some time to watch the video <a href="https://www.youtube.com/watch?v=qSfdtmcZ4d0" target="_blank" rel="noopener">Rich Harris: Futuristic Web Development</a> recorded at <a href="https://sveltesummit.com/" target="_blank" rel="noopener">Svelte Summit 2020</a>. If you have 20 minutes, just stop reading and <a href="https://www.youtube.com/watch?v=qSfdtmcZ4d0" target="_blank" rel="noopener">watch it</a>.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
If you have 20 minutes, just stop reading and watch <a href="https://www.youtube.com/watch?v=qSfdtmcZ4d0" target="_blank" rel="noopener">Rich Harris: Futuristic Web Development</a> video.
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_sapper_1_0_is_not_going_to_happen">Sapper 1.0 is not going to happen</h2>
<div class="sectionbody">
<div class="paragraph">
<p>As you might know, this blog is powered by <a href="https://sapper.svelte.dev" target="_blank" rel="noopener">Sapper</a>. I am already quite happy with it, so when I hear this announcement, I felt like when they cancel a TV Series that I am enjoying.</p>
</div>
<div class="paragraph">
<p>Happily, there is a good reason, there is going to be a better <a href="https://sapper.svelte.dev" target="_blank" rel="noopener">Sapper</a>, I think they will call it svelte-kit, it is solving some issues and improving some aspects of <a href="https://sapper.svelte.dev" target="_blank" rel="noopener">Sapper</a>, but the main benefit, in my opinion, is that you won&#8217;t have to choose between <a href="https://sapper.svelte.dev" target="_blank" rel="noopener">Sapper</a> or <a href="https://svelte.dev/" target="_blank" rel="noopener">Svelte</a> when you start a new application, everything will be supported by the <a href="https://svelte.dev/" target="_blank" rel="noopener">Svelte</a> ecosystem.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_snowpack">Snowpack</h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://www.snowpack.dev" target="_blank" rel="noopener">Snowpack</a> will become the default <a href="https://svelte.dev/" target="_blank" rel="noopener">Svelte</a> builder. It is not a regular bundler like <a href="https://webpack.js.org" target="_blank" rel="noopener">Webpack</a> or <a href="https://rollupjs.org/" target="_blank" rel="noopener">Rollup</a>. It relies on <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import" target="_blank" rel="noopener">Javascript modules</a> so your application delegate the modules loading on the web browser; traditionally the chunks are loaded by the bundler (or by source code injected by the bundler).</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_example">Example</h2>
<div class="sectionbody">
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
This example is just a copy from the <a href="https://www.youtube.com/watch?v=qSfdtmcZ4d0" target="_blank" rel="noopener">Rich Harris: Futuristic Web Development</a> video.
</td>
</tr>
</table>
</div>
<div class="listingblock">
<div class="title">How to create the sample project</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">mkdir svelte-next-sample
<span class="hljs-built_in">cd</span> svelte-next-sample
npm init svelte@next
npm install</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Start development server</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">npm run dev

[snowpack] &gt; Listening on http://localhost:3000</code></pre>
</div>
</div>
<div class="paragraph">
<p>You will find many similarities with <a href="https://sapper.svelte.dev" target="_blank" rel="noopener">Sapper</a>, like the <code>routes</code> and <code>components</code> folders.</p>
</div>
<div class="sect2">
<h3 id="_build">Build</h3>
<div class="listingblock">
<div class="title">Build the project for production</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">npm run build</code></pre>
</div>
</div>
<div class="sect3">
<h4 id="_ssr">SSR</h4>
<div class="paragraph">
<p>By default the project is configured with SSR rendering enabled.</p>
</div>
<div class="listingblock">
<div class="title">SSR with nodejs server and client</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">npm run build
...

&gt; Optimizing...
  ✔ server
  ✔ client

&gt; Generating app...
  Using @sveltejs/adapter-node <b class="conum">(1)</b>
  Prerendering static pages...
  ✔ <span class="hljs-keyword">done</span></code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>This is the default adapter to generate SSR application with a nodejs server and a client.</p>
</li>
</ol>
</div>
</div>
<div class="sect3">
<h4 id="_pure_static_site">Pure static site</h4>
<div class="paragraph">
<p>This blog is a pure static website, it doesn&#8217;t require a server. With <a href="https://sapper.svelte.dev" target="_blank" rel="noopener">Sapper</a> we have the option to execute <code>sapper export</code> and it generates the app with no server required.</p>
</div>
<div class="paragraph">
<p>With this new approach, to generate a static site, we just have to use a different adapter:</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">npm i -D @sveltejs/adapter-static</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">svelte.config.js</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-javascript" data-lang="javascript"><span class="hljs-built_in">module</span>.exports = {
	<span class="hljs-attr">adapter</span>: <span class="hljs-string">&#x27;@sveltejs/adapter-static&#x27;</span>
};</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">npm run build

&gt; Generating app...
  Using @sveltejs/adapter-static <b class="conum">(1)</b>
  ✔ <span class="hljs-keyword">done</span></code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>The static adapter is selected</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>But we are not yet done, because the build step is not generating the html file that we can use as entry point. We have to execute one command more: <code>svelte-kit adapt</code>, <a href="https://github.com/carlosvin/carlosvin.github.io/issues/39#issuecomment-774200641" target="_blank" rel="noopener">thanks Joshua for pointing this out</a>.</p>
</div>
<div class="listingblock">
<div class="title">We can add it to the package.json scripts section</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-diff" data-lang="diff">	&quot;scripts&quot;: {
		&quot;dev&quot;: &quot;svelte-kit dev&quot;,
		&quot;build&quot;: &quot;svelte-kit build&quot;,
		&quot;start&quot;: &quot;svelte-kit start&quot;,
<span class="hljs-addition">+		&quot;adapt&quot;: &quot;svelte-kit adapt&quot;</span>
	},</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-bash" data-lang="bash">npm run adapt <b class="conum">(1)</b>
&gt; svelte-kit adapt


&gt; Using @sveltejs/adapter-static
  ✔ <span class="hljs-keyword">done</span>

ls build <b class="conum">(2)</b>
_app  favicon.ico  index.html  robots.txt</code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>It generates the static entry point, index.html in build directory.</p>
</li>
<li>
<p>Listing the content of build directory</p>
</li>
</ol>
</div>
</div>
</div>
</div>
</div>]]></content>
            <category term="Svelte"/>
    <category term="Sapper"/>
    <category term="Snowpack"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
  <entry>
            <title>This is Sapper!</title>
            <link href="https://carlosvin.github.io/posts/this-is-sapper/es" />
            <link 
				rel="alternate"
				hreflang="en"
				href="https://carlosvin.github.io/posts/this-is-sapper/en"/>   
            <id>https://carlosvin.github.io/posts/this-is-sapper/es</id>
            <updated>2020-08-28T00:00:00.000Z</updated>
            <summary>Este blog ha sido migrado desde Nikola a Sapper. En este artículo describiré las principales razones, resultados de pruebas de rendimiento y otras reflexiones sobre la utilización de Sapper y Svelte para generar sitios web estáticos.</summary>
            <content type="html"><![CDATA[<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_por_qué_dejar_nikola">Por qué dejar Nikola?</a></li>
<li><a href="#_por_qué_sapper">Por qué Sapper?</a>
<ul class="sectlevel2">
<li><a href="#_dx_developer_experience">DX: Developer experience</a></li>
<li><a href="#_ux_la_experiencia_de_usuario_con_sapper">UX: La experiencia de usuario con Sapper</a></li>
</ul>
</li>
<li><a href="#_asciidoctor">Asciidoctor</a>
<ul class="sectlevel2">
<li><a href="#_rollup_plugin_asciidoc_al_rescate">rollup-plugin-asciidoc al rescate</a></li>
<li><a href="#_rollup_plugin_glob_al_rescate">rollup-plugin-glob al rescate</a></li>
</ul>
</li>
<li><a href="#_resaltado_de_sintáxis_para_el_código_fuente">Resaltado de sintáxis para el código fuente</a></li>
<li><a href="#_resultado">Resultado</a></li>
<li><a href="#_pruebas">Pruebas</a>
<ul class="sectlevel2">
<li><a href="#_escribiendo_una_prueba">Escribiendo una prueba</a></li>
</ul>
</li>
<li><a href="#_typescript">Typescript</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>He migrado el stack the tecnologías utilizado en mi blog de <a href="https://getnikola.com" target="_blank" rel="noopener">Nikola</a> + <a href="https://en.wikipedia.org/wiki/ReStructuredText" target="_blank" rel="noopener">reStructuredText</a> a <a href="https://sapper.svelte.dev/" target="_blank" rel="noopener">Sapper</a> + <a href="https://asciidoctor.org/" target="_blank" rel="noopener">Asciidoctor</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_por_qué_dejar_nikola">Por qué dejar <a href="https://getnikola.com" target="_blank" rel="noopener">Nikola</a>?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Este blog ha sido generado por <a href="https://getnikola.com" target="_blank" rel="noopener">Nikola</a> desde 2014, cuando el término <a href="https://jamstack.org" target="_blank" rel="noopener">JAMStack</a> ni existía. Funcionó muy bien estos años y tiene todas las características que necesitaba por defecto:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Soporte multi-idioma.</p>
</li>
<li>
<p><a href="https://en.wikipedia.org/wiki/ReStructuredText" target="_blank" rel="noopener">reStructuredText</a>, el cual prefiero sobre <a href="https://en.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">Markdown</a>.</p>
</li>
<li>
<p>Está desarrollado en <a href="https://python.org" target="_blank" rel="noopener">Python</a>, uno de mis lenguajes de programación preferidos.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Pero tuve algunos <strong>problemillas</strong> que me molestaban desde el principio:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>El fichero de configuración estaba un poco hinchado y era algo confuso.</p>
</li>
<li>
<p>No era fácil para mí crear, modificar on encontrar templates que me convenciesen.</p>
</li>
<li>
<p>El rendimiento del sitio era algo mediocre, el último informe que generé con <a href="https://developers.google.com/web/tools/lighthouse" target="_blank" rel="noopener">Lighthouse audits</a> era alrededor de 80, excepto por la sección SEO que era 96.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_por_qué_sapper">Por qué Sapper?</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_dx_developer_experience">DX: Developer experience</h3>
<div class="paragraph">
<p>Ya había utilizado <a href="https://sapper.svelte.dev/" target="_blank" rel="noopener">Sapper</a> para crear algunas pequeñas <a href="https://web.dev/progressive-web-apps" target="_blank" rel="noopener">PWA</a>s <sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup>, aquí puedes encontrar 2 ejemplos que desarrollé con <a href="https://svelte.dev" target="_blank" rel="noopener">Svelte</a> y <a href="https://sapper.svelte.dev/" target="_blank" rel="noopener">Sapper</a>:</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1"><a href="https://currency-loss.netlify.app" target="_blank" rel="noopener">Currency Exchage Loss Calculator</a></dt>
<dd>
<p>Una aplicación útil para viajeros que utilizan casas de cambio. Dependiendo en el cambio que ofrezcan en ese momento y la cantidad de dinero que quieras cambiar, te muestra la cantidad de dinero que estás perdiendo en esta transacción de cambio.</p>
</dd>
<dt class="hdlist1"><a href="https://covid-stats-pwa.netlify.app" target="_blank" rel="noopener">COVID-19 Stats</a></dt>
<dd>
<p>Muestra estadísticas actualizadas sobre el COVID-19 por país y por fecha.</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>Durante la creación de estas <a href="https://web.dev/progressive-web-apps" target="_blank" rel="noopener">PWA</a>s, la experiencia de desarrollo con <a href="https://sapper.svelte.dev/" target="_blank" rel="noopener">Sapper</a>&amp;<a href="https://svelte.dev" target="_blank" rel="noopener">Svelte</a> ha sido bastante impresionante.</p>
</div>
</div>
<div class="sect2">
<h3 id="_ux_la_experiencia_de_usuario_con_sapper">UX: La experiencia de usuario con Sapper</h3>
<div class="paragraph">
<p>Últimament me he encontrado con algunos blogs utilizando <a href="https://sapper.svelte.dev/" target="_blank" rel="noopener">Sapper</a> como el propio blog de <a href="https://sapper.svelte.dev/" target="_blank" rel="noopener">Sapper</a>, <a href="https://www.codingwithjesse.com/blog/statically-generating-a-blog-with-svelte-sapper/" target="_blank" rel="noopener">Coding with Jessie</a> or <a href="https://www.swyx.io/writing/svelte-static/" target="_blank" rel="noopener">swyx.io</a>. La experiencia de usuario me ha parecido similar a Gatsby, quizá algo más ligeros y más originales.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<a href="https://sapper.svelte.dev/" target="_blank" rel="noopener">Sapper</a> está inspirado en <a href="https://nextjs.org/">Next.js</a>, aquí puedes encontrar <a href="https://sapper.svelte.dev/docs#Comparison_with_Next_js">una comparación con este conocido framework</a>.
</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_asciidoctor"><a href="https://asciidoctor.org/" target="_blank" rel="noopener">Asciidoctor</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>No tengo una preferencia clara sobre <a href="https://asciidoctor.org/" target="_blank" rel="noopener">Asciidoctor</a> o <a href="https://en.wikipedia.org/wiki/ReStructuredText" target="_blank" rel="noopener">reStructuredText</a>, estoy cómo con ambos, pero hay más soporte para  <a href="https://asciidoctor.org/" target="_blank" rel="noopener">Asciidoctor</a> en otros lenguajes de programación como <a href="https://en.wikipedia.org/wiki/JavaScript" target="_blank" rel="noopener">JavaScript</a>. Así que, básicamente he cambiado a <a href="https://asciidoctor.org/" target="_blank" rel="noopener">Asciidoctor</a> prque no encontré una librería <a href="https://en.wikipedia.org/wiki/JavaScript" target="_blank" rel="noopener">JavaScript</a> que convirtiese correctamente <a href="https://en.wikipedia.org/wiki/ReStructuredText" target="_blank" rel="noopener">reStructuredText</a> a <a href="https://developer.mozilla.org/en-US/docs/Web/HTML" target="_blank" rel="noopener">HTML</a>.</p>
</div>
<div class="paragraph">
<p>El principal problema de no utilizar <a href="https://en.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">Markdown</a> fue la falta de plugins de <a href="https://rollupjs.org" target="_blank" rel="noopener">Rollup</a> para convertir <a href="https://asciidoctor.org/" target="_blank" rel="noopener">Asciidoctor</a> a <a href="https://developer.mozilla.org/en-US/docs/Web/HTML" target="_blank" rel="noopener">HTML</a>, así que creé uno, <a href="https://github.com/carlosvin/rollup-plugin-asciidoc" target="_blank" rel="noopener">rollup-plugin-asciidoc</a>. La implementación fue muy sencilla, el plugin simplemente utiliza la librería <a href="https://asciidoctor.org/docs/asciidoctor.js/" target="_blank" rel="noopener">Asciidoctor.js</a> para convertir un texto de entrada en formato <a href="https://asciidoctor.org/" target="_blank" rel="noopener">Asciidoctor</a> a <a href="https://developer.mozilla.org/en-US/docs/Web/HTML" target="_blank" rel="noopener">HTML</a>.</p>
</div>
<div class="sect2">
<h3 id="_rollup_plugin_asciidoc_al_rescate"><a href="https://github.com/carlosvin/rollup-plugin-asciidoc" target="_blank" rel="noopener">rollup-plugin-asciidoc</a> al rescate</h3>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
Con <a href="https://github.com/carlosvin/rollup-plugin-asciidoc" target="_blank" rel="noopener">rollup-plugin-asciidoc</a> podemos importar <a href="https://asciidoctor.org/" target="_blank" rel="noopener">Asciidoctor</a> archivos de nuestro blog y <a href="https://rollupjs.org" target="_blank" rel="noopener">Rollup</a> los convertirá a <a href="https://developer.mozilla.org/en-US/docs/Web/HTML" target="_blank" rel="noopener">HTML</a>.
</td>
</tr>
</table>
</div>
<div class="sect3">
<h4 id="_ejemplo">Ejemplo</h4>
<div class="listingblock">
<div class="title">a-blog-post.adoc</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-adoc" data-lang="adoc"><span class="hljs-section">= Post title</span>
<span class="hljs-meta">:date:</span> 2019-11-11

Such a post!</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Con <a href="https://github.com/carlosvin/rollup-plugin-asciidoc" target="_blank" rel="noopener">rollup-plugin-asciidoc</a> podemos importar archivos <a href="https://asciidoctor.org/" target="_blank" rel="noopener">Asciidoctor</a> uno por uno.</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-javascript" data-lang="javascript"><span class="hljs-keyword">import</span> doc <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./a-blog-post.adoc&#x27;</span>;

<span class="hljs-built_in">console</span>.log(doc);</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Salida</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-javascript" data-lang="javascript">{
  <span class="hljs-attr">meta</span>: {
    <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Post title&quot;</span>,
    <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;2019-11-11&quot;</span>
  },
  <span class="hljs-attr">html</span>: <span class="hljs-string">&quot;&lt;p&gt;Such a post!&lt;/p&gt;&quot;</span>
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Pero importar ficheros uno por uno no es útil para un blog donde tenemos muchos archivos, los cuales no queremos importart manualmente uno por uno.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_rollup_plugin_glob_al_rescate"><a href="https://www.npmjs.com/package/rollup-plugin-glob" target="_blank" rel="noopener">rollup-plugin-glob</a> al rescate</h3>
<div class="paragraph">
<p>Con <a href="https://www.npmjs.com/package/rollup-plugin-glob" target="_blank" rel="noopener">rollup-plugin-glob</a> podemos importar todos los ficheros que estén en un directorio por extensión, esto significa que ya tenemos todos los posts de nuestro blog convertidos a <a href="https://developer.mozilla.org/en-US/docs/Web/HTML" target="_blank" rel="noopener">HTML</a> en un par de líneas de código.</p>
</div>
<div class="listingblock">
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-javascript" data-lang="javascript"><span class="hljs-keyword">import</span> allAdoc <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../posts/**/*.adoc&#x27;</span>;

allAdoc.forEach(<span class="hljs-function"><span class="hljs-params">post</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(post));</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Output: List of posts already converted to HTML</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-javascript" data-lang="javascript">{ <span class="hljs-attr">meta</span>: { <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Post title&quot;</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;2019-11-11&quot;</span> },
  <span class="hljs-attr">html</span>: <span class="hljs-string">&quot;&lt;p&gt;Post 1.&lt;/p&gt;&quot;</span>
}
{ <span class="hljs-attr">meta</span>: { <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Post title&quot;</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;2020-02-22&quot;</span> },
  <span class="hljs-attr">html</span>: <span class="hljs-string">&quot;&lt;h2&gt;Title post&lt;/h2&gt;&lt;p&gt;This is a sample post...&lt;/p&gt;&quot;</span>
}
<span class="hljs-comment">// ...</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_resaltado_de_sintáxis_para_el_código_fuente">Resaltado de sintáxis para el código fuente</h2>
<div class="sectionbody">
<div class="paragraph">
<p>El tema principal de mi blog es la Ingeniería del Software, así que el resaltado de sintáxis es uno de los requisitos más importantes que un generador de sitios web estáticos debe cumplir.</p>
</div>
<div class="paragraph">
<p>Al principio utilicé <a href="https://highlightjs.org/usage/" target="_blank" rel="noopener">la librería highlightjs desde un CDN</a>, que consiste en importar un fichero javascript para analizar el código fuente y un fichero CSS para aplicar el resaltado.</p>
</div>
<div class="paragraph">
<p>Más tarde me dí cuenta, de que el trabajo de análisis del código fuente lo podemos hacer tiempo de compilación, cuando convertimos <a href="https://asciidoctor.org/" target="_blank" rel="noopener">Asciidoctor</a> a <a href="https://developer.mozilla.org/en-US/docs/Web/HTML" target="_blank" rel="noopener">HTML</a> en la implementación del <a href="https://github.com/carlosvin/rollup-plugin-asciidoc" target="_blank" rel="noopener">rollup-plugin-asciidoc</a>, de esta forma el usuario no tendrá que descargar el fichero <a href="https://en.wikipedia.org/wiki/JavaScript" target="_blank" rel="noopener">JavaScript</a> ni procesar el código fuente en su navegador.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
Haciendo el resaltado de sintáxis mientra construimos el sitio web, mejoramos el rendimiento del blog y reducimos los datos que el usuario tiene que descargar.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>La generación del resaltado de sintáxis en la construcción del sitio web tiene 2 grandes beneficios:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Reducir el tamaño del sitio web: no necesitamos descargar los 27KB del fichero <a href="https://highlightjs.org/usage/">highlightjs javascript library</a>.</p>
</li>
<li>
<p>Mejora de rendimiento: el análisis del código fuente se hace solo una vez, mientras se construye el sitio web.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_resultado">Resultado</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Todavía hay <a href="https://github.com/carlosvin/carlosvin.github.io/issues">algunos problemas o mejoras que hacer=_blank</a>, pero hasta ahora tenemos un blog con las siguientes características:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Generación automática de <a href="/sitemap.xml">Sitemap</a> and <a href="/feeds">Atom feeds</a>.</p>
</li>
<li>
<p>Soporte multi-idioma (todavía faltan muchas traducciones).</p>
</li>
<li>
<p>Resaltado de código.</p>
</li>
<li>
<p>Puntuación de 100 en <a href="https://developers.google.com/web/tools/lighthouse" target="_blank" rel="noopener">Lighthouse audits</a>, aunque todavía hay algunas páginas con menos de 100.</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="/images/lighthouse-results.webp" alt="lighthouse score" width="95%">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_pruebas">Pruebas</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Soy un ferviente defensor de las pruebas automáticas, no me gusta escribirlas, pero creo que es la mejor forma de saber que todo funciona como se espera.</p>
</div>
<div class="paragraph">
<p>El template de <a href="https://sapper.svelte.dev/" target="_blank" rel="noopener">Sapper</a> trae preconfigurado un test de integración muy simple. Utiliza <a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress</a>, un framework de pruebas E2E <sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnotedef_2" title="View footnote.">2</a>]</sup>, más sencillo que <a href="https://www.selenium.dev/" target="_blank" rel="noopener">Selenium</a>, aunque creo que todavía no podemos hablar de <a href="https://blog.logrocket.com/cypress-io-the-selenium-killer/" target="_blank" rel="noopener">the Selenium Killer</a>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
En muchos casos no puede reemplazar a <a href="https://www.selenium.dev/" target="_blank" rel="noopener">Selenium</a>: La principal razón es que <a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress</a> por diseño no tiene algunas funcionalidades que podrías necesitar, depende del proyecto, como por ejemplo soporte para pruebas en casi cualquier navegador y plataforma, como el proporcionado por <a href="https://www.selenium.dev/documentation/en/grid/components_of_a_grid/" target="_blank" rel="noopener">Selenium grid</a>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>He añadido algunas pruebas para este blog (y añadiré más), como verificar que la información del header es correcta, que funcionan las redirecciones, que los principales flujos de navegación funcionan&#8230;&#8203; Todo ello en un par de hoars, incluyendo correcciones de errores encontrados. Por esto me encanta escribir pruebas con <a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress</a>, por su productividad.</p>
</div>
<div class="sect2">
<h3 id="_escribiendo_una_prueba">Escribiendo una prueba</h3>
<div class="paragraph">
<p>Funciona de forma similar a Selenium:
. Abre una página.
. Accede a un elemento utilizando <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/id" target="_blank" rel="noopener">HTML identifier</a> (<code>#element-id</code>), <a href="https://en.wikipedia.org/wiki/XPath" target="_blank" rel="noopener">XPath</a> (<code>/a[@title='link title']</code>) or <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors" target="_blank" rel="noopener">CSS selector</a> (<code>div &gt; a.cssClass</code>).
. Interactuar con el elemento seleccionado.
. Validar que todo se comporta de forma esperada.</p>
</div>
<div class="paragraph">
<p>Puedes encontrar ejemplos de pruebas en la carpeta <a href="https://github.com/carlosvin/carlosvin.github.io/tree/site/cypress/integration">cypress/integration</a>.</p>
</div>
<div class="listingblock">
<div class="title">Ejemplo simple</div>
<div class="content">
<pre tabindex="0" class="highlight"><code class="language-javascript" data-lang="javascript">it(<span class="hljs-string">&#x27;Header&#x27;</span>, <span class="hljs-function">() =&gt;</span> {
  cy.visit(<span class="hljs-string">&#x27;/posts/this-is-sapper/en&#x27;</span>) <b class="conum">(1)</b>
  cy.get(<span class="hljs-string">&#x27;.subtitle .date&#x27;</span>).contains(<span class="hljs-string">&#x27;28/08/2020&#x27;</span>) <b class="conum">(2)</b>
});</code></pre>
</div>
</div>
<div class="colist arabic">
<ol>
<li>
<p>Navega al path de un post.</p>
</li>
<li>
<p>Comprueba que la fecha que aparece en el subtítulo es correcta.</p>
</li>
</ol>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_typescript">Typescript</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Finalmente <a href="https://svelte.dev/blog/svelte-and-typescript">el soporte de Svelte para Typescript está terminado</a> y después de más trabajo del esperado, he migrado <a href="https://github.com/carlosvin/carlosvin.github.io">este blog utlizando Sapper con Javascript a Sapper con Typescript</a>.
Te animo a que utilices este proyecto como ejemplo o template para tu blog, si encuentras algún problema, el feedback es bienvenido. Hay todavía <a href="https://github.com/carlosvin/carlosvin.github.io/issues">algunos problemas</a>, como averiguar que si utilizar <a href="https://eslint.org/" target="_blank" rel="noopener">eslint</a> o <a href="https://github.com/sveltejs/language-tools" target="_blank" rel="noopener">svelte-check</a> o ambos.</p>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnotedef_1">
<a href="#_footnoteref_1">1</a>. Progressive Web Application
</div>
<div class="footnote" id="_footnotedef_2">
<a href="#_footnoteref_2">2</a>. End to end
</div>
</div>]]></content>
            <category term="Sapper"/>
    <category term="Svelte"/>
    <category term="JAMStack"/>
    <category term="PWA"/>
    <category term="Static Site Generator"/>
            <author><name>Carlos Martin Sanchez</name></author>
        </entry>
        </feed>