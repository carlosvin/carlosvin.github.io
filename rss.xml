<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Carlos says "bla bla"</title><link>https://carlosvin.github.io/</link><description>What is going on in my mind and its surroundings</description><atom:link href="https://carlosvin.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Wed, 17 Apr 2019 03:02:27 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Create SPA: React + Typescript + Parcel</title><link>https://carlosvin.github.io/posts/react-typescript-parcel/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;I was about to start yet another personal project, it consists of a SPA (Single Page Application) for a travel journal.&lt;/p&gt;
&lt;p&gt;Some time ago I tried &lt;a href="https://parceljs.org"&gt;Parcel&lt;/a&gt;, I really loved how simple it was to create a simple project from scratch, using &lt;a href="https://www.typescriptlang.org/"&gt;Typescript&lt;/a&gt; + &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; stack. I've decided to create this template or base project, so next time I want to create a new SPA with my favorite frontend stack, I will only have to:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/carlosvin/react-typescript-parcel-template.git
&lt;/pre&gt;


&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://carlosvin.github.io/posts/react-typescript-parcel/#quick-start"&gt;Quick start&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://carlosvin.github.io/posts/react-typescript-parcel/#development-server"&gt;Development server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://carlosvin.github.io/posts/react-typescript-parcel/#build-production-bundle"&gt;Build production bundle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://carlosvin.github.io/posts/react-typescript-parcel/#step-by-step-project-creation"&gt;Step by step project creation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://carlosvin.github.io/posts/react-typescript-parcel/#add-required-dependencies"&gt;Add required dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://carlosvin.github.io/posts/react-typescript-parcel/#create-application-source-code"&gt;Create application source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://carlosvin.github.io/posts/react-typescript-parcel/#add-commands-build-the-project"&gt;Add commands build the project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://carlosvin.github.io/posts/react-typescript-parcel/#configure-typescript-optional"&gt;Configure Typescript (optional)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://carlosvin.github.io/posts/react-typescript-parcel/#full-source-code"&gt;Full source code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="quick-start"&gt;Quick start&lt;/h2&gt;
&lt;h3 id="development-server"&gt;Development server&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/carlosvin/react-typescript-parcel-template.git
&lt;span class="nb"&gt;cd&lt;/span&gt; react-typescript-parcel-template
yarn install
yarn start
&lt;/pre&gt;


&lt;p&gt;&lt;a href="https://carlosvin.github.io/posts/react-typescript-parcel/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Parcel</category><category>React</category><category>SPA</category><category>Typescript</category><guid>https://carlosvin.github.io/posts/react-typescript-parcel/</guid><pubDate>Tue, 01 Jan 2019 12:30:02 GMT</pubDate></item><item><title>Custom Maven Plugin: Override default build lifecycle</title><link>https://carlosvin.github.io/posts/creating-custom-maven-plugin-default/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;I explained in previous article &lt;a class="reference external" href="https://carlosvin.github.io/posts/creating-custom-maven-plugin/"&gt;Example how to create custom Maven Plugin&lt;/a&gt; which &lt;a class="reference external" href="https://maven.apache.org/ref/3.5.3/maven-core/lifecycles.html#site_Lifecycle"&gt;overrides site lifecycle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have created another example to demonstrate how to override &lt;a class="reference external" href="https://maven.apache.org/ref/3.5.3/maven-core/lifecycles.html#default_Lifecycle"&gt;default Maven build lifecycle&lt;/a&gt;. Default build lifecycle is used to construct your software project, for example, it is executed when you run &lt;tt class="docutils literal"&gt;mvn install&lt;/tt&gt; in &lt;tt class="docutils literal"&gt;jar&lt;/tt&gt; type project.&lt;/p&gt;
&lt;p&gt;You can find source code example at &lt;a class="reference external" href="https://github.com/carlosvin/lifecycle-maven-plugin"&gt;https://github.com/carlosvin/lifecycle-maven-plugin&lt;/a&gt;.&lt;/p&gt;
&lt;div class="admonition hint"&gt;
&lt;p class="first admonition-title"&gt;Hint&lt;/p&gt;
&lt;p class="last"&gt;I've also created an &lt;a class="reference external" href="https://maven.apache.org/guides/introduction/introduction-to-archetypes.html"&gt;archetype&lt;/a&gt; so you can easily create and play with the example.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Create example project just by running following command:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_251e66c5a868466c8e07dca8e8789314-1"&gt;&lt;/a&gt;mvn archetype:generate -DarchetypeGroupId&lt;span class="o"&gt;=&lt;/span&gt;com.github.carlosvin.archetype -DartifactId&lt;span class="o"&gt;=&lt;/span&gt;lifecycle-maven-plugin-archetype -DarchetypeVersion&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.6
&lt;/pre&gt;&lt;/div&gt;</description><category>Build Systems</category><category>Java</category><category>Maven</category><category>Maven Plugins</category><guid>https://carlosvin.github.io/posts/creating-custom-maven-plugin-default/</guid><pubDate>Sat, 12 May 2018 13:00:00 GMT</pubDate></item><item><title>Example how to create custom Maven Plugin</title><link>https://carlosvin.github.io/posts/creating-custom-maven-plugin/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;Maven has lots of plugins to assist you in project construction, testing, packaging and deployment. For example if you want to compile C++ code instead of Java, you can use &lt;a class="reference external" href="https://www.mojohaus.org/maven-native/native-maven-plugin/"&gt;native-maven-plugin&lt;/a&gt; . But what if you need something more specific? Then you can create a custom Maven plugin.&lt;/p&gt;
&lt;p&gt;I will explain how to create a simple custom maven plugin to generate static blog site from Markdown files. I know we can already do that with &lt;a class="reference external" href="https://maven.apache.org/plugins/maven-site-plugin/examples/creating-content.html"&gt;maven-site-plugin&lt;/a&gt; since version 3.3, I will just use it for learning purposes.&lt;/p&gt;
&lt;p&gt;You can find whole source code example at &lt;a class="reference external" href="https://github.com/carlosvin/blog-maven-plugin"&gt;https://github.com/carlosvin/blog-maven-plugin&lt;/a&gt;.&lt;/p&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/creating-custom-maven-plugin/#maven-plugin-concepts" id="id2"&gt;Maven plugin concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/creating-custom-maven-plugin/#create-your-custom-plugin-site-lifecycle" id="id3"&gt;Create your custom plugin (Site Lifecycle)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/creating-custom-maven-plugin/#project-structure" id="id4"&gt;Project structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/creating-custom-maven-plugin/#dependency-injection" id="id5"&gt;Dependency Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/creating-custom-maven-plugin/#write-a-custom-mojo" id="id6"&gt;Write a custom Mojo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/creating-custom-maven-plugin/#implement-mojo-interface" id="id7"&gt;1. Implement Mojo interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/creating-custom-maven-plugin/#configure-mojo-with-java-5-annotations" id="id8"&gt;2. Configure Mojo with Java 5 annotations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/creating-custom-maven-plugin/#implement-execute-method" id="id9"&gt;3. Implement &lt;em&gt;execute&lt;/em&gt; method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/creating-custom-maven-plugin/#unit-tests" id="id10"&gt;Unit tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/creating-custom-maven-plugin/#integration-tests" id="id11"&gt;Integration tests&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/creating-custom-maven-plugin/#how-does-invoker-plugin-work" id="id12"&gt;How does Invoker Plugin work?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/creating-custom-maven-plugin/#configure-invoker-plugin" id="id13"&gt;Configure Invoker Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/creating-custom-maven-plugin/#create-an-integration-test-project" id="id14"&gt;Create an Integration Test Project&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/creating-custom-maven-plugin/#pom-xml-arrange" id="id15"&gt;pom.xml (Arrange)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/creating-custom-maven-plugin/#invoker-properties-act" id="id16"&gt;invoker.properties (Act)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/creating-custom-maven-plugin/#verify-groovy-assert" id="id17"&gt;verify.groovy (Assert)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://carlosvin.github.io/posts/creating-custom-maven-plugin/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Build Systems</category><category>Java</category><category>Maven</category><category>Maven Plugins</category><category>maven-site-plugin</category><guid>https://carlosvin.github.io/posts/creating-custom-maven-plugin/</guid><pubDate>Sun, 11 Mar 2018 18:00:00 GMT</pubDate></item><item><title>Choosing a Modern C++ stack</title><link>https://carlosvin.github.io/posts/choosing-modern-cpp-stack/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;I'm starting a new project in C++, but I've run into a pair of questions before start:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Which build system should I use?&lt;/li&gt;
&lt;li&gt;Which unit testing framework?&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#choosing-build-system-meson" id="id1"&gt;Choosing Build System (Meson)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#cmake-vs-meson" id="id2"&gt;CMake vs Meson&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#unit-testing-framework" id="id3"&gt;Unit Testing Framework&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#doctest-a-catch-alternative" id="id4"&gt;doctest: A Catch alternative&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#example" id="id5"&gt;Example&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#project-output-artifacts" id="id6"&gt;Project output artifacts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#project-structure-fork-project" id="id7"&gt;Project structure (Fork project)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Build Software</category><category>Build System</category><category>C++</category><category>Catch</category><category>doctest</category><category>Meson</category><category>Unit Testing</category><guid>https://carlosvin.github.io/posts/choosing-modern-cpp-stack/</guid><pubDate>Fri, 15 Sep 2017 18:50:00 GMT</pubDate></item><item><title>Filesystem in C++17</title><link>https://carlosvin.github.io/posts/recursive-directory-iterator/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#id4"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since C++17 new filesystem abstractions will be added to C++ environment. So far they are available as
&lt;a class="reference external" href="https://en.cppreference.com/w/cpp/experimental"&gt;Experimental C++ Features&lt;/a&gt;. If you want to dig more about this new library, here it is the &lt;a class="reference external" href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4100.pdf"&gt;final draft of File System Technical Specification&lt;/a&gt;.&lt;/p&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#introduction" id="id4"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#gettting-started-with-experimental-filesystem-features-c-17-g" id="id5"&gt;Gettting started with Experimental Filesystem Features C++17 (g++)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#c-17-filesystem-features" id="id6"&gt;C++17 Filesystem Features&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#std-filesystem-path" id="id7"&gt;std::filesystem::path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#directory-separator" id="id8"&gt;Directory separator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#directory-separator-operator" id="id9"&gt;Directory Separator Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#create-remove-directories" id="id10"&gt;Create/Remove Directories&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#full-example-recursive-directory-iterator" id="id11"&gt;Full example: Recursive Directory Iterator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://carlosvin.github.io/posts/recursive-directory-iterator/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>C++11</category><category>C++17</category><category>Filesystem</category><category>IO</category><guid>https://carlosvin.github.io/posts/recursive-directory-iterator/</guid><pubDate>Sun, 28 May 2017 07:00:00 GMT</pubDate></item><item><title>Multi-Domain Docker Containers</title><link>https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/#use-case" id="id1"&gt;Use case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/#how-to-configure-multi-domain-reverse-proxy" id="id2"&gt;How to Configure Multi-Domain Reverse Proxy&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/#example-project-structure" id="id3"&gt;Example Project Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/#architecture-configuration-docker-compose" id="id4"&gt;Architecture Configuration (docker-compose)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/#application-image-configuration" id="id5"&gt;Application Image Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/#adding-domain-names-to-your-development-environment-configuration" id="id6"&gt;Adding domain names to your development environment configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/#everything-ready" id="id7"&gt;Everything ready!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="use-case"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/#id1"&gt;Use case&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have several server applications in the same development environment, each application is bundled in a Docker container, e.g: "Container A" and "Container B".&lt;/p&gt;
&lt;p&gt;With Docker those applications have the same IP address. One way to differentiate and access to an specific application is exposing different ports.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://carlosvin.github.io/galleries/docker-multidomain/ip.png"&gt;&lt;img alt="/galleries/docker-multidomain/ip.thumbnail.png" src="https://carlosvin.github.io/galleries/docker-multidomain/ip.thumbnail.png"&gt;&lt;/a&gt;
&lt;p class="caption"&gt;Containers exposing the same IP address and different ports&lt;/p&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If we want to call to "Application A" we will do: GET &lt;a class="reference external" href="http://10.20.30.40:8080/colors/red"&gt;http://10.20.30.40:8080/colors/red&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If we want to call to "Application B" we will do: GET &lt;a class="reference external" href="http://10.20.30.40:8081/fruits/tomato"&gt;http://10.20.30.40:8081/fruits/tomato&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But that solution is a little bit confusing, does 8080 mean we are accessing to "application A"?&lt;/p&gt;
&lt;p&gt;It would be simpler and easier to remind something like:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Calling "Application A": GET &lt;a class="reference external" href="http://a.domain.com/colors/red"&gt;http://a.domain.com/colors/red&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Calling "Application B": GET &lt;a class="reference external" href="http://b.domain.com/fruits/tomato"&gt;http://b.domain.com/fruits/tomato&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://carlosvin.github.io/galleries/docker-multidomain/domain.png"&gt;&lt;img alt="/galleries/docker-multidomain/domain.thumbnail.png" src="https://carlosvin.github.io/galleries/docker-multidomain/domain.thumbnail.png"&gt;&lt;/a&gt;
&lt;p class="caption"&gt;Accessing applications by domain name&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Get that extra semantic value is much simpler than I thought at the beginning and you will see below.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>Docker</category><category>Microservices</category><guid>https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/</guid><pubDate>Thu, 24 Nov 2016 20:00:00 GMT</pubDate></item><item><title>Rust web frameworks comparison</title><link>https://carlosvin.github.io/posts/rust-rest-framework-comparison/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;I'm doing some experiments with &lt;a class="reference external" href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; because it is a language that promises to be as fast as &lt;a class="reference external" href="https://en.wikipedia.org/wiki/C%2B%2B"&gt;C/C++&lt;/a&gt;, but safer in regards to memory management. Essentially, it doesn't allow the developer to do "bad things" with the memory like:  forgetting  release the memory that is not going to be used anymore or release memory if the developer is not the owner. In such scenarios, &lt;a class="reference external" href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; won't compile.&lt;/p&gt;
&lt;p&gt;Just for learning I've started a small project that offers a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;REST&lt;/a&gt; &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Application_programming_interface"&gt;API&lt;/a&gt;, so I've started looking for frameworks to ease/speed up the development. I've found a &lt;a class="reference external" href="https://github.com/flosse/rust-web-framework-comparison"&gt;Rust web frameworks comparison&lt;/a&gt;:
&lt;a class="reference external" href="https://github.com/flosse/rust-web-framework-comparison"&gt;https://github.com/flosse/rust-web-framework-comparison&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Frameworks</category><category>Programming Languages</category><category>REST</category><category>Rustlang</category><guid>https://carlosvin.github.io/posts/rust-rest-framework-comparison/</guid><pubDate>Thu, 14 Apr 2016 18:40:00 GMT</pubDate></item><item><title>Convert files formats: Windows to Unix</title><link>https://carlosvin.github.io/posts/recursive-dos-unix/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;If you are developing from a Windows environment to a Unix target environment, most likely you have had this issue:
You install source files in Windows format in your Unix environment.&lt;/p&gt;
&lt;p&gt;There is a way quite simple to convert all your files from Windows to Unix format:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_77b280b8651440dfabbd02965848d41e-1"&gt;&lt;/a&gt;find . -type f -print0 &lt;span class="p"&gt;|&lt;/span&gt; xargs -0 dos2unix
&lt;/pre&gt;&lt;p&gt;I got it, of course, form &lt;a class="reference external" href="https://stackoverflow.com/questions/11929461/how-can-i-run-dos2unix-on-an-entire-directory"&gt;https://stackoverflow.com/questions/11929461/how-can-i-run-dos2unix-on-an-entire-directory&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Unix</category><category>Useful Commands</category><category>Windows</category><guid>https://carlosvin.github.io/posts/recursive-dos-unix/</guid><pubDate>Fri, 12 Feb 2016 09:34:00 GMT</pubDate></item><item><title>REST URLs</title><link>https://carlosvin.github.io/posts/rest-urls/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;First time I designed a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;REST&lt;/a&gt; &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Application_programming_interface"&gt;API&lt;/a&gt; I made several mistakes, of course. Following I'm going to explain common mistakes and what I've learned about &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;REST&lt;/a&gt; &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Uniform_resource_locator"&gt;URL&lt;/a&gt; with examples.&lt;/p&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#rest-basics" id="id3"&gt;REST Basics&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#rest-verbs" id="id4"&gt;REST Verbs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#accessing-to-resources" id="id5"&gt;Accessing to Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#update-resources" id="id6"&gt;Update resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#delete-resources" id="id7"&gt;Delete Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#create-resources" id="id8"&gt;Create Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#collections" id="id9"&gt;Collections&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#add-an-element-to-collection" id="id10"&gt;Add an element to collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#update-a-collection-item" id="id11"&gt;Update a collection item&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#delete-a-collection-item" id="id12"&gt;Delete a collection item&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#read-a-collection-item" id="id13"&gt;Read a collection item&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#list-collection-items" id="id14"&gt;List collection items&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#common-mistake" id="id15"&gt;Common mistake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#video-tutorials" id="id16"&gt;Video Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://carlosvin.github.io/posts/rest-urls/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>API</category><category>REST</category><category>Web Services</category><guid>https://carlosvin.github.io/posts/rest-urls/</guid><pubDate>Sun, 16 Aug 2015 12:00:00 GMT</pubDate></item><item><title>Software Maintenance</title><link>https://carlosvin.github.io/posts/software-maintenance/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;Few days ago at work, I had to fulfill a document where I had to select a type of software maintenance that I was going to apply.&lt;/p&gt;
&lt;p&gt;The fact was I had only two choices, it seemed to me very weird because during my degree I studied 3 or 4 kinds of software maintenance.&lt;/p&gt;
&lt;p&gt;Today I have found my Software Engineering class notes, then the types of Software Maintenance sorted descending by percentage of time spent:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://carlosvin.github.io/posts/software-maintenance/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Software Engineering</category><category>Software Maintenance</category><guid>https://carlosvin.github.io/posts/software-maintenance/</guid><pubDate>Sat, 11 Oct 2014 19:00:00 GMT</pubDate></item></channel></rss>