<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Carlos says "bla bla"</title><link>https://carlosvin.github.io/</link><description>What is going on in my mind and its surroundings</description><atom:link href="https://carlosvin.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 19 Nov 2017 17:00:49 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Choosing a Modern C++ stack</title><link>https://carlosvin.github.io/posts/choosing-modern-cpp-stack/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;I'm starting a new project in C++, but I've run into a pair of questions before start:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Which build system should I use?&lt;/li&gt;
&lt;li&gt;Which unit testing framework?&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#choosing-build-system-meson" id="id2"&gt;Choosing Build System (Meson)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#cmake-vs-meson" id="id3"&gt;CMake vs Meson&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#unit-testing-framework" id="id4"&gt;Unit Testing Framework&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#doctest-a-catch-alternative" id="id5"&gt;doctest: A Catch alternative&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#example" id="id6"&gt;Example&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#project-output-artifacts" id="id7"&gt;Project output artifacts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#project-structure-fork-project" id="id8"&gt;Project structure (Fork project)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Build Software</category><category>Build System</category><category>C++</category><category>Catch</category><category>doctest</category><category>Meson</category><category>Unit Testing</category><guid>https://carlosvin.github.io/posts/choosing-modern-cpp-stack/</guid><pubDate>Fri, 15 Sep 2017 18:50:00 GMT</pubDate></item><item><title>Filesystem in C++17</title><link>https://carlosvin.github.io/posts/recursive-directory-iterator/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#id4"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since C++17 new filesystem abstractions will be added to C++ environment. So far they are available as
&lt;a class="reference external" href="http://en.cppreference.com/w/cpp/experimental"&gt;Experimental C++ Features&lt;/a&gt;. If you want to dig more about this new library, here it is the &lt;a class="reference external" href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4100.pdf"&gt;final draft of File System Technical Specification&lt;/a&gt;.&lt;/p&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#introduction" id="id4"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#gettting-started-with-experimental-filesystem-features-c-17-g" id="id5"&gt;Gettting started with Experimental Filesystem Features C++17 (g++)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#c-17-filesystem-features" id="id6"&gt;C++17 Filesystem Features&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#std-filesystem-path" id="id7"&gt;std::filesystem::path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#directory-separator" id="id8"&gt;Directory separator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#directory-separator-operator" id="id9"&gt;Directory Separator Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#create-remove-directories" id="id10"&gt;Create/Remove Directories&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#full-example-recursive-directory-iterator" id="id11"&gt;Full example: Recursive Directory Iterator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://carlosvin.github.io/posts/recursive-directory-iterator/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>C++11</category><category>C++17</category><category>Filesystem</category><category>IO</category><guid>https://carlosvin.github.io/posts/recursive-directory-iterator/</guid><pubDate>Sun, 28 May 2017 07:00:00 GMT</pubDate></item><item><title>Multi-Domain Docker Containers</title><link>https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/#use-case" id="id1"&gt;Use case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/#how-to-configure-multi-domain-reverse-proxy" id="id2"&gt;How to Configure Multi-Domain Reverse Proxy&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/#example-project-structure" id="id3"&gt;Example Project Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/#architecture-configuration-docker-compose" id="id4"&gt;Architecture Configuration (docker-compose)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/#application-image-configuration" id="id5"&gt;Application Image Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/#adding-domain-names-to-your-development-environment-configuration" id="id6"&gt;Adding domain names to your development environment configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/#everything-ready" id="id7"&gt;Everything ready!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="use-case"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/#id1"&gt;Use case&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have several server applications in the same development environment, each application is bundled in a Docker container, e.g: "Container A" and "Container B".&lt;/p&gt;
&lt;p&gt;With Docker those applications have the same IP address. One way to differentiate and access to an specific application is exposing different ports.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://carlosvin.github.io/galleries/docker-multidomain/ip.png"&gt;&lt;img alt="/galleries/docker-multidomain/ip.thumbnail.png" src="https://carlosvin.github.io/galleries/docker-multidomain/ip.thumbnail.png"&gt;&lt;/a&gt;
&lt;p class="caption"&gt;Containers exposing the same IP address and different ports&lt;/p&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If we want to call to "Application A" we will do: GET &lt;a class="reference external" href="http://10.20.30.40:8080/colors/red"&gt;http://10.20.30.40:8080/colors/red&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If we want to call to "Application B" we will do: GET &lt;a class="reference external" href="http://10.20.30.40:8081/fruits/tomato"&gt;http://10.20.30.40:8081/fruits/tomato&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But that solution is a little bit confusing, does 8080 mean we are accessing to "application A"?&lt;/p&gt;
&lt;p&gt;It would be simpler and easier to remind something like:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Calling "Application A": GET &lt;a class="reference external" href="http://a.domain.com/colors/red"&gt;http://a.domain.com/colors/red&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Calling "Application B": GET &lt;a class="reference external" href="http://b.domain.com/fruits/tomato"&gt;http://b.domain.com/fruits/tomato&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://carlosvin.github.io/galleries/docker-multidomain/domain.png"&gt;&lt;img alt="/galleries/docker-multidomain/domain.thumbnail.png" src="https://carlosvin.github.io/galleries/docker-multidomain/domain.thumbnail.png"&gt;&lt;/a&gt;
&lt;p class="caption"&gt;Accessing applications by domain name&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Get that extra semantic value is much simpler than I thought at the beginning and you will see below.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>Docker</category><category>Microservices</category><guid>https://carlosvin.github.io/posts/reverse-proxy-multidomain-docker/</guid><pubDate>Thu, 24 Nov 2016 20:00:00 GMT</pubDate></item><item><title>Rust web frameworks comparison</title><link>https://carlosvin.github.io/posts/rust-rest-framework-comparison/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;I'm doing some experiments with &lt;a class="reference external" href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; because it is a language that promises to be as fast as &lt;a class="reference external" href="https://en.wikipedia.org/wiki/C%2B%2B"&gt;C/C++&lt;/a&gt;, but safer in regards to memory management. Essentially, it doesn't allow the developer to do "bad things" with the memory like:  forgetting  release the memory that is not going to be used anymore or release memory if the developer is not the owner. In such scenarios, &lt;a class="reference external" href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; won't compile.&lt;/p&gt;
&lt;p&gt;Just for learning I've started a small project that offers a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;REST&lt;/a&gt; &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Application_programming_interface"&gt;API&lt;/a&gt;, so I've started looking for frameworks to ease/speed up the development. I've found a &lt;a class="reference external" href="https://github.com/flosse/rust-web-framework-comparison"&gt;Rust web frameworks comparison&lt;/a&gt;:
&lt;a class="reference external" href="https://github.com/flosse/rust-web-framework-comparison"&gt;https://github.com/flosse/rust-web-framework-comparison&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Frameworks</category><category>Programming Languages</category><category>REST</category><category>Rustlang</category><guid>https://carlosvin.github.io/posts/rust-rest-framework-comparison/</guid><pubDate>Thu, 14 Apr 2016 18:40:00 GMT</pubDate></item><item><title>Convert files formats: Windows to Unix</title><link>https://carlosvin.github.io/posts/recursive-dos-unix/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;If you are developing from a Windows environment to a Unix target environment, most likely you have had this issue:
You install source files in Windows format in your Unix environment.&lt;/p&gt;
&lt;p&gt;There is a way quite simple to convert all your files from Windows to Unix format:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_27075693306948b6beb36be09211f95d-1"&gt;&lt;/a&gt;find . -type f -print0 &lt;span class="p"&gt;|&lt;/span&gt; xargs -0 dos2unix
&lt;/pre&gt;&lt;p&gt;I got it, of course, form &lt;a class="reference external" href="http://stackoverflow.com/questions/11929461/how-can-i-run-dos2unix-on-an-entire-directory"&gt;http://stackoverflow.com/questions/11929461/how-can-i-run-dos2unix-on-an-entire-directory&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Unix</category><category>Useful Commands</category><category>Windows</category><guid>https://carlosvin.github.io/posts/recursive-dos-unix/</guid><pubDate>Fri, 12 Feb 2016 09:34:00 GMT</pubDate></item><item><title>REST URLs</title><link>https://carlosvin.github.io/posts/rest-urls/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;First time I designed a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;REST&lt;/a&gt; &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Application_programming_interface"&gt;API&lt;/a&gt; I made several mistakes, of course. Following I'm going to explain common mistakes and what I've learned about &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;REST&lt;/a&gt; &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Uniform_resource_locator"&gt;URL&lt;/a&gt; with examples.&lt;/p&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#rest-basics" id="id3"&gt;REST Basics&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#rest-verbs" id="id4"&gt;REST Verbs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#accessing-to-resources" id="id5"&gt;Accessing to Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#update-resources" id="id6"&gt;Update resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#delete-resources" id="id7"&gt;Delete Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#create-resources" id="id8"&gt;Create Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#collections" id="id9"&gt;Collections&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#add-an-element-to-collection" id="id10"&gt;Add an element to collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#update-a-collection-item" id="id11"&gt;Update a collection item&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#delete-a-collection-item" id="id12"&gt;Delete a collection item&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#read-a-collection-item" id="id13"&gt;Read a collection item&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#list-collection-items" id="id14"&gt;List collection items&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#common-mistake" id="id15"&gt;Common mistake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/rest-urls/#video-tutorials" id="id16"&gt;Video Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://carlosvin.github.io/posts/rest-urls/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>API</category><category>REST</category><category>Web Services</category><guid>https://carlosvin.github.io/posts/rest-urls/</guid><pubDate>Sun, 16 Aug 2015 12:00:00 GMT</pubDate></item><item><title>C++ Dependency Management: Biicode</title><link>https://carlosvin.github.io/posts/first-biicode-poco/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;I'm interested in building, dependency management, packagin and deployment in regards to software projects. For &lt;a class="reference external" href="http://java.com/en/download/whatis_java.jsp"&gt;Java&lt;/a&gt;, &lt;a class="reference external" href="http://www.scala-lang.org/"&gt;Scala&lt;/a&gt;, &lt;a class="reference external" href="http://www.python.org/"&gt;Python&lt;/a&gt;, and so on is quite easy since there are tools like &lt;a class="reference external" href="http://maven.apache.org/"&gt;Maven&lt;/a&gt;, &lt;a class="reference external" href="http://www.gradle.org/"&gt;Gradle&lt;/a&gt;, &lt;a class="reference external" href="https://pypi.python.org/pypi/pip"&gt;pip&lt;/a&gt;, &lt;a class="reference external" href="http://www.scala-sbt.org/"&gt;Sbt&lt;/a&gt;, etc. But regarding C++_, the best options I've found are &lt;a class="reference external" href="http://maven.apache.org/"&gt;Maven&lt;/a&gt; with &lt;a class="reference external" href="http://maven-nar.github.io/"&gt;Nar&lt;/a&gt; plugin or &lt;a class="reference external" href="http://www.gradle.org/"&gt;Gradle&lt;/a&gt; with &lt;a class="reference external" href="https://gradle.org/docs/current/userguide/nativeBinaries.html"&gt;cpp plugin&lt;/a&gt; (incubation).&lt;/p&gt;
&lt;p&gt;I knew about &lt;a class="reference external" href="https://www.biicode.org/"&gt;Biicode&lt;/a&gt; almost 2 years ago, but I've never found time to test it, until today.&lt;/p&gt;
&lt;p&gt;How does &lt;a class="reference external" href="https://www.biicode.org/"&gt;Biicode&lt;/a&gt; work?&lt;/p&gt;
&lt;p&gt;Firstly we have to &lt;a class="reference external" href="http://docs.biicode.com/c++/installation.html"&gt;install Biicode&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've made tiny example project using logging system from &lt;a class="reference external" href="http://pocoproject.org/"&gt;Poco&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;I've executed this command to create the project, called bii_log.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_7c310a4574b642fdb18da41843d4ac89-1"&gt;&lt;/a&gt;bii new carlovin/bii_log --hello&lt;span class="o"&gt;=&lt;/span&gt;cpp
&lt;/pre&gt;&lt;p&gt;I've created the project under my &lt;a class="reference external" href="https://www.biicode.org/"&gt;Biicode&lt;/a&gt; username, just in case I'd like to publish later.&lt;/p&gt;
&lt;p&gt;Previous command generates the structure of files and directories, although we are going to focus only on:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_433078f708bf4a6582e78ce9f0f615d0-1"&gt;&lt;/a&gt;blocks/carlosvin/bii_log/main.cpp
&lt;a name="rest_code_433078f708bf4a6582e78ce9f0f615d0-2"&gt;&lt;/a&gt;blocks/carlosvin/bii_log/biicode.conf
&lt;/pre&gt;&lt;p&gt;In biicode.conf we are going to configure our dependencies, in this example &lt;a class="reference external" href="http://pocoproject.org/"&gt;Poco&lt;/a&gt; library.&lt;/p&gt;
&lt;pre class="code yaml"&gt;&lt;a name="rest_code_9ae97ce888c3459aa8e4f4a03d752075-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Biicode configuration file&lt;/span&gt;
&lt;a name="rest_code_9ae97ce888c3459aa8e4f4a03d752075-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_9ae97ce888c3459aa8e4f4a03d752075-3"&gt;&lt;/a&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;requirements&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;a name="rest_code_9ae97ce888c3459aa8e4f4a03d752075-4"&gt;&lt;/a&gt;    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;fenix/poco(develop)&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;
&lt;a name="rest_code_9ae97ce888c3459aa8e4f4a03d752075-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_9ae97ce888c3459aa8e4f4a03d752075-6"&gt;&lt;/a&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;parent&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;a name="rest_code_9ae97ce888c3459aa8e4f4a03d752075-7"&gt;&lt;/a&gt;        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;carlosvin/bii_log&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;
&lt;a name="rest_code_9ae97ce888c3459aa8e4f4a03d752075-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_9ae97ce888c3459aa8e4f4a03d752075-9"&gt;&lt;/a&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;includes&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;a name="rest_code_9ae97ce888c3459aa8e4f4a03d752075-10"&gt;&lt;/a&gt;    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Poco/*.h&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;fenix/poco/Foundation/include&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;In [includes] section, we are overriding the path to file headers. If we don't override it we'd had to do something like this:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_d2778b31c08a4478b017057d3ed64003-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"fenix/poco/Foundation/include/Logger.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Thanks to this line, include declarations are going to be clearer, as follows:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_9852e984435b491ca80fe3594545496e-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Poco/Logger.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Easy, now we can start using &lt;a class="reference external" href="http://pocoproject.org/"&gt;Poco&lt;/a&gt; in our project, e.g:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Poco/FileChannel.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Poco/FormattingChannel.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-3"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Poco/PatternFormatter.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-4"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Poco/Logger.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-5"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Poco/AutoPtr.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Poco&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;FileChannel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Poco&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;FormattingChannel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Poco&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;PatternFormatter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Poco&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-11"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Poco&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;AutoPtr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-13"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-14"&gt;&lt;/a&gt;        &lt;span class="n"&gt;AutoPtr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FileChannel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileChannel&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-15"&gt;&lt;/a&gt;        &lt;span class="n"&gt;pChannel&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"log/sample.log"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-16"&gt;&lt;/a&gt;        &lt;span class="n"&gt;pChannel&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"rotation"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"100 K"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-17"&gt;&lt;/a&gt;        &lt;span class="n"&gt;pChannel&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"archive"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"timestamp"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-19"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;//AutoPtr&amp;lt;ConsoleChannel&amp;gt; pCons(new ConsoleChannel);&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-20"&gt;&lt;/a&gt;        &lt;span class="n"&gt;AutoPtr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PatternFormatter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pPF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PatternFormatter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-21"&gt;&lt;/a&gt;        &lt;span class="n"&gt;pPF&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"pattern"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"%Y-%m-%d %H:%M:%S %s: %t"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-22"&gt;&lt;/a&gt;        &lt;span class="n"&gt;AutoPtr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FormattingChannel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pFC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FormattingChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pPF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pChannel&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-23"&gt;&lt;/a&gt;        &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pFC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-24"&gt;&lt;/a&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-25"&gt;&lt;/a&gt;        &lt;span class="n"&gt;Logger&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"TestChannel"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-26"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-27"&gt;&lt;/a&gt;                &lt;span class="n"&gt;poco_information&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"This is a info"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-28"&gt;&lt;/a&gt;                &lt;span class="n"&gt;poco_warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"This is a warning"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-29"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-30"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-31"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;To compile the project we only have to execute following command:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_d612353bfc5f444db2e76117c5dfecff-1"&gt;&lt;/a&gt;bii cpp:build
&lt;/pre&gt;&lt;p&gt;To publish the project and to allow everyone use it as we have used &lt;a class="reference external" href="http://pocoproject.org/"&gt;Poco&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_bdd14000d7354adf9e7fb0860938b6e0-1"&gt;&lt;/a&gt;bii publish
&lt;/pre&gt;&lt;p&gt;Besides the ease to use, I like so much the integration with &lt;a class="reference external" href="https://eclipse.org"&gt;Eclipse&lt;/a&gt; with &lt;a class="reference external" href="https://eclipse.org/cdt/"&gt;CDT&lt;/a&gt;. After "bii cpp:build" execution all files were properly indexed.&lt;/p&gt;
&lt;p&gt;I've read also an article about the good integration with &lt;a class="reference external" href="https://www.jetbrains.com/clion/"&gt;CLion&lt;/a&gt;: &lt;a class="reference external" href="http://blog.jetbrains.com/clion/2015/03/when-clion-met-biicode/"&gt;When CLion met biicode&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>Biicode</category><category>Build Automation Software</category><category>C++</category><category>Dependency Management</category><category>Poco</category><guid>https://carlosvin.github.io/posts/first-biicode-poco/</guid><pubDate>Thu, 14 May 2015 18:00:00 GMT</pubDate></item><item><title>Software Maintenance</title><link>https://carlosvin.github.io/posts/software-maintenance/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;Few days ago at work, I had to fulfill a document where I had to select a type of software maintenance that I was going to apply.&lt;/p&gt;
&lt;p&gt;The fact was I had only two choices, it seemed me very weird because during my degree I studied 3 or 4 kinds of software maintenance.&lt;/p&gt;
&lt;p&gt;Today I have found my Software Engineering class notes, then the types of Software Maintenance sorted descending by percentage of time spent:&lt;/p&gt;
&lt;table class="docutils field-list" frame="void" rules="none"&gt;
&lt;col class="field-name"&gt;
&lt;col class="field-body"&gt;
&lt;tbody valign="top"&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Perfective:&lt;/th&gt;&lt;td class="field-body"&gt;Activities to improve or add new functionalities required by the user.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Adaptative:&lt;/th&gt;&lt;td class="field-body"&gt;Activities to adapt the system to technological environment changes  (hardware or software).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Corrective:&lt;/th&gt;&lt;td class="field-body"&gt;Fix defects in hardware or software detected by user running the production system.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Preventive:&lt;/th&gt;&lt;td class="field-body"&gt;Activities to ease the future system maintenance.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</description><category>Software Engineering</category><category>Software Maintenance</category><guid>https://carlosvin.github.io/posts/software-maintenance/</guid><pubDate>Sat, 11 Oct 2014 19:00:00 GMT</pubDate></item><item><title>Build C++ project with Gradle</title><link>https://carlosvin.github.io/posts/gradle-cpp/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/posts/gradle-cpp/#id7"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am more and more worried about building, dependency management and distribution of my projects. I'd like to find a tool unifies those processes with  independence of the language. I know several tools those almost fit to what I'm looking for, like I know several tools those almost fit to what I'm looking for, like &lt;a class="reference external" href="http://www.scons.org"&gt;SCons&lt;/a&gt;, &lt;a class="reference external" href="http://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction"&gt;Autotools&lt;/a&gt;, &lt;a class="reference external" href="http://ant.apache.org"&gt;Ant&lt;/a&gt;, &lt;a class="reference external" href="http://maven.apache.org"&gt;Maven&lt;/a&gt; and lately &lt;a class="reference external" href="http://www.gradle.org"&gt;Gradle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've made several projects with Gradle, but always I was focused in &lt;a class="reference external" href="http://www.java.com"&gt;Java&lt;/a&gt; and &lt;a class="reference external" href="http://developer.android.com/sdk/installing/studio-build.html"&gt;Android&lt;/a&gt; projects.
In &lt;a class="reference external" href="http://www.java.com"&gt;Java&lt;/a&gt; projects I've found a &lt;a class="reference external" href="http://maven.apache.org"&gt;Maven&lt;/a&gt; replacement, because it is faster, easier and less verbose.
About &lt;a class="reference external" href="http://developer.android.com/sdk/installing/studio-build.html"&gt;Android&lt;/a&gt; projects I suffered the early adoption of &lt;a class="reference external" href="http://developer.android.com/sdk/installing/studio-build.html"&gt;Android Studio + Gradle&lt;/a&gt;, although currently I think the are more mature and they work fine.&lt;/p&gt;
&lt;p&gt;First of all, I have to say: building C/C++/Objective-C projects with &lt;a class="reference external" href="http://www.gradle.org"&gt;Gradle&lt;/a&gt; is in &lt;a class="reference external" href="http://www.gradle.org/docs/current/userguide/feature_lifecycle.html#incubating"&gt;incubation&lt;/a&gt; phase, although now we can perform advanced tasks like:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Generation several artifacts within same project (libraries and executables).&lt;/li&gt;
&lt;li&gt;Dependency management between artifacts (no versions).&lt;/li&gt;
&lt;li&gt;Different "flavors" of the same software, e.g: we can generate a “Community” release and other one with more enabled features called “Enterprise”.&lt;/li&gt;
&lt;li&gt;It allows multi-platform binary generation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I said, this plugin is still having limitations although they are working on it: &lt;a class="reference external" href="http://www.gradleware.com/resources/cpp/"&gt;Gradle C++ roadmap&lt;/a&gt;. If they achieve it I'll leave &lt;a class="reference external" href="http://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction"&gt;Autotools&lt;/a&gt; (I'm going to regret saying that).&lt;/p&gt;
&lt;div class="contents topic" id="index"&gt;
&lt;p class="topic-title first"&gt;Index&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#introduction" id="id7"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#case-study" id="id8"&gt;Case study&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#project-structure" id="id9"&gt;Project Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#c-application" id="id10"&gt;C++ Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#building-with-gradle" id="id11"&gt;Building with Gradle&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#base-case" id="id12"&gt;Base case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#different-flavors" id="id13"&gt;Different "Flavors"&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#community" id="id14"&gt;Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#enterprise" id="id15"&gt;Enterprise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#release-or-debug" id="id16"&gt;Release or Debug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#multi-platform" id="id17"&gt;Multi-platform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#try-it-yourself" id="id18"&gt;Try it yourself&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#conclusions" id="id19"&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://carlosvin.github.io/posts/gradle-cpp/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Build Software</category><category>Build System</category><category>C++</category><category>Dependency Management</category><category>Gradle</category><guid>https://carlosvin.github.io/posts/gradle-cpp/</guid><pubDate>Sat, 27 Sep 2014 10:00:00 GMT</pubDate></item><item><title>How sorting algorithms work (Dancing)</title><link>https://carlosvin.github.io/posts/sorting-algorithm-dancing/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;I've found out a artistic-technological group named &lt;a class="reference external" href="https://www.youtube.com/user/AlgoRythmics/videos"&gt;AlgoRythmics&lt;/a&gt;, they teach how the most popular sorting algorithms work.&lt;/p&gt;
&lt;p&gt;You can read &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Sorting_algorithm#Popular_sorting_algorithms"&gt;the wikipedia topic Popular sorting algorithms&lt;/a&gt;, although I think it isn't as funny to learn as the &lt;a class="reference external" href="https://www.youtube.com/user/AlgoRythmics/videos"&gt;AlgoRythmics&lt;/a&gt; way. Following the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Quicksort"&gt;Quicksort&lt;/a&gt;, judge for yourself.&lt;/p&gt;
&lt;div class="youtube-video"&gt;
&lt;iframe width="425" height="344" src="https://www.youtube.com/embed/ywWBy6J5gz8?rel=0&amp;amp;hd=1&amp;amp;wmode=transparent"&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://carlosvin.github.io/posts/sorting-algorithm-dancing/</guid><pubDate>Mon, 16 Jun 2014 18:45:00 GMT</pubDate></item></channel></rss>