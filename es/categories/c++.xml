<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Carlos says "bla bla" (Publicaciones sobre C++)</title><link>https://carlosvin.github.io/</link><description></description><atom:link href="https://carlosvin.github.io/es/categories/c%2B%2B.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><lastBuildDate>Mon, 14 May 2018 18:05:12 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Elegir tecnologías para mi nuevo proyeco C++</title><link>https://carlosvin.github.io/es/posts/choosing-modern-cpp-stack/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;Estoy empezando un pequeño proyecto en C++ y antes de nada me han surgido un par de preguntas:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;¿Cómo voy a construirlo?&lt;/li&gt;
&lt;li&gt;¿Qué framework para pruebas unitarias utilizar?&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="contents topic" id="contenido"&gt;
&lt;p class="topic-title first"&gt;Contenido&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/choosing-modern-cpp-stack/#elegir-un-sistema-de-construccion-meson" id="id1"&gt;Elegir un Sistema de Construcción (Meson)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/choosing-modern-cpp-stack/#cmake-vs-meson" id="id2"&gt;CMake vs Meson&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/choosing-modern-cpp-stack/#framework-the-pruebas-unitarias" id="id3"&gt;Framework the Pruebas Unitarias&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/choosing-modern-cpp-stack/#doctest-una-alternativa-a-catch" id="id4"&gt;doctest: Una alternativa a Catch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/choosing-modern-cpp-stack/#ejemplo" id="id5"&gt;Ejemplo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/choosing-modern-cpp-stack/#artefactos-del-proyecto" id="id6"&gt;Artefactos del Proyecto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/choosing-modern-cpp-stack/#estructura-del-proyecto-fork-project" id="id7"&gt;Estructura del Proyecto (Fork project)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://carlosvin.github.io/es/posts/choosing-modern-cpp-stack/"&gt;Leer más…&lt;/a&gt; (quedan 6 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>Build Software</category><category>Build System</category><category>C++</category><category>Catch</category><category>doctest</category><category>Meson</category><category>Unit Testing</category><guid>https://carlosvin.github.io/es/posts/choosing-modern-cpp-stack/</guid><pubDate>Fri, 15 Sep 2017 18:50:00 GMT</pubDate></item><item><title>Sistema de Ficheros en C++17</title><link>https://carlosvin.github.io/es/posts/recursive-directory-iterator/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div class="section" id="introduccion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/es/posts/recursive-directory-iterator/#id4"&gt;Introducción&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A partir de C++17 se añadirán nuevas abstracciones sobre el sistema de ficheros. De momento están disponibles como parte de las
&lt;a class="reference external" href="http://en.cppreference.com/w/cpp/experimental"&gt;Características Experimentales de C++&lt;/a&gt;. Si queréis profundizar aquí está el &lt;a class="reference external" href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4100.pdf"&gt;borrador final de la Especificación Técnica del Sistema de Ficheros&lt;/a&gt;.&lt;/p&gt;
&lt;div class="contents topic" id="contenido"&gt;
&lt;p class="topic-title first"&gt;Contenido&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/recursive-directory-iterator/#introduccion" id="id4"&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/recursive-directory-iterator/#comenzar-a-utilizar-caracteristica-experimental-filesystem-c-17-g" id="id5"&gt;Comenzar a utilizar característica experimental filesystem C++17 (g++)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/recursive-directory-iterator/#caracteristicas-de-filesystem-c-17" id="id6"&gt;Características de filesystem C++17&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/recursive-directory-iterator/#std-filesystem-path" id="id7"&gt;std::filesystem::path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/recursive-directory-iterator/#separador-de-directorios" id="id8"&gt;Separador de directorios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/recursive-directory-iterator/#operador-separador-de-directorios" id="id9"&gt;Operador separador de directorios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/recursive-directory-iterator/#crear-y-borrar-directorios" id="id10"&gt;Crear y borrar directorios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/recursive-directory-iterator/#ejemplo-completo-iterar-recursivamente-por-directorios" id="id11"&gt;Ejemplo completo: Iterar Recursivamente por Directorios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://carlosvin.github.io/es/posts/recursive-directory-iterator/"&gt;Leer más…&lt;/a&gt; (quedan 5 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>C++11</category><category>C++17</category><category>Filesystem</category><category>IO</category><guid>https://carlosvin.github.io/es/posts/recursive-directory-iterator/</guid><pubDate>Sun, 28 May 2017 07:00:00 GMT</pubDate></item><item><title>Gestión de dependencias C++: Biicode</title><link>https://carlosvin.github.io/es/posts/first-biicode-poco/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;Hace tiempo que estoy interesado la construcción, gestión de dependencias, empaquetado y despliegue de proyectos software. Para &lt;a class="reference external" href="http://java.com/en/download/whatis_java.jsp"&gt;Java&lt;/a&gt;, &lt;a class="reference external" href="http://www.scala-lang.org/"&gt;Scala&lt;/a&gt;, &lt;a class="reference external" href="http://www.python.org/"&gt;Python&lt;/a&gt;, etc. Es bastante sencillo ya que hay herramientas como &lt;a class="reference external" href="http://maven.apache.org/"&gt;Maven&lt;/a&gt;, &lt;a class="reference external" href="http://www.gradle.org/"&gt;Gradle&lt;/a&gt;, &lt;a class="reference external" href="https://pypi.python.org/pypi/pip"&gt;pip&lt;/a&gt;, &lt;a class="reference external" href="http://www.scala-sbt.org/"&gt;Sbt&lt;/a&gt;, etc. Pero para C++_, lo más parecido que he encontrado es &lt;a class="reference external" href="http://maven.apache.org/"&gt;Maven&lt;/a&gt; con el plugin &lt;a class="reference external" href="http://maven-nar.github.io/"&gt;Nar&lt;/a&gt; o &lt;a class="reference external" href="http://www.gradle.org/"&gt;Gradle&lt;/a&gt; con su &lt;a class="reference external" href="https://gradle.org/docs/current/userguide/nativeBinaries.html"&gt;plugin cpp&lt;/a&gt; (que está en desarrollo).&lt;/p&gt;
&lt;p&gt;Hace tiempo que conozco &lt;a class="reference external" href="https://www.biicode.org/"&gt;Biicode&lt;/a&gt;, pero no había sacado nunca tiempo para probarlo, hasta hoy.&lt;/p&gt;
&lt;p&gt;El funcionamiento general es muy sencillo.&lt;/p&gt;
&lt;p&gt;Necesitamos &lt;a class="reference external" href="http://docs.biicode.com/c++/installation.html"&gt;instalar biicode en nuestra máquina&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yo he creado un pequeño ejemplo utilizando el sistema de log de la librería &lt;a class="reference external" href="http://pocoproject.org/"&gt;Poco&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;He ejecutado este comando para crear mi proyecto, al que he llamado bii_log. Eso sí, lo tengo que crear debajo de mi nombre de usuario en &lt;a class="reference external" href="https://www.biicode.org/"&gt;Biicode&lt;/a&gt;, por si posteriormente lo quiero publicar.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_0b6aaac4706e4439bce2d5a841be8dea-1"&gt;&lt;/a&gt;bii new carlovin/bii_log --hello&lt;span class="o"&gt;=&lt;/span&gt;cpp
&lt;/pre&gt;&lt;p&gt;Se ha creado una estructura de directorios y ficheros con nuestro proyecto. Aunque los únicos ficheros que vamos a tocar son:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_b94ef5a1e43643318f2f38efe524b6b2-1"&gt;&lt;/a&gt;blocks/carlosvin/bii_log/main.cpp
&lt;a name="rest_code_b94ef5a1e43643318f2f38efe524b6b2-2"&gt;&lt;/a&gt;blocks/carlosvin/bii_log/biicode.conf
&lt;/pre&gt;&lt;p&gt;En el fichero biicode.conf vamos a configurar nuestras dependencias, en nuestro caso la librería &lt;a class="reference external" href="http://pocoproject.org/"&gt;Poco&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="code yaml"&gt;&lt;a name="rest_code_7061412c465943f1a8795163ddf2e75e-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Biicode configuration file&lt;/span&gt;
&lt;a name="rest_code_7061412c465943f1a8795163ddf2e75e-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_7061412c465943f1a8795163ddf2e75e-3"&gt;&lt;/a&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;requirements&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;a name="rest_code_7061412c465943f1a8795163ddf2e75e-4"&gt;&lt;/a&gt;    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;fenix/poco(develop)&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;
&lt;a name="rest_code_7061412c465943f1a8795163ddf2e75e-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_7061412c465943f1a8795163ddf2e75e-6"&gt;&lt;/a&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;parent&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;a name="rest_code_7061412c465943f1a8795163ddf2e75e-7"&gt;&lt;/a&gt;        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;carlosvin/bii_log&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;
&lt;a name="rest_code_7061412c465943f1a8795163ddf2e75e-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_7061412c465943f1a8795163ddf2e75e-9"&gt;&lt;/a&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;includes&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;a name="rest_code_7061412c465943f1a8795163ddf2e75e-10"&gt;&lt;/a&gt;    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Poco/*.h&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;fenix/poco/Foundation/include&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;En la sección [includes], estamos redefiniendo la ruta a nuestros ficheros de cabeceras, porque si no lo hiciéramos tendríamos que hacer algo así:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_9945ee895ce341efa585f461dc7c8b71-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"fenix/poco/Foundation/include/Logger.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Gracias a esta línea, en nuestro código tendremos includes más claros como:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_794f53758460477f855ac769f48ec48e-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Poco/Logger.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Así de fácil, ya podemos utilizar la librería &lt;a class="reference external" href="http://pocoproject.org/"&gt;Poco&lt;/a&gt; en nuestro proyecto, por ejemplo:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Poco/FileChannel.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Poco/FormattingChannel.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-3"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Poco/PatternFormatter.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-4"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Poco/Logger.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-5"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Poco/AutoPtr.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Poco&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;FileChannel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Poco&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;FormattingChannel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Poco&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;PatternFormatter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Poco&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-11"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Poco&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;AutoPtr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-13"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-14"&gt;&lt;/a&gt;        &lt;span class="n"&gt;AutoPtr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FileChannel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileChannel&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-15"&gt;&lt;/a&gt;        &lt;span class="n"&gt;pChannel&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"log/sample.log"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-16"&gt;&lt;/a&gt;        &lt;span class="n"&gt;pChannel&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"rotation"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"100 K"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-17"&gt;&lt;/a&gt;        &lt;span class="n"&gt;pChannel&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"archive"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"timestamp"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-19"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;//AutoPtr&amp;lt;ConsoleChannel&amp;gt; pCons(new ConsoleChannel);&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-20"&gt;&lt;/a&gt;        &lt;span class="n"&gt;AutoPtr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PatternFormatter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pPF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PatternFormatter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-21"&gt;&lt;/a&gt;        &lt;span class="n"&gt;pPF&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"pattern"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"%Y-%m-%d %H:%M:%S %s: %t"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-22"&gt;&lt;/a&gt;        &lt;span class="n"&gt;AutoPtr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FormattingChannel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pFC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FormattingChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pPF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pChannel&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-23"&gt;&lt;/a&gt;        &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pFC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-24"&gt;&lt;/a&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-25"&gt;&lt;/a&gt;        &lt;span class="n"&gt;Logger&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"TestChannel"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-26"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-27"&gt;&lt;/a&gt;                &lt;span class="n"&gt;poco_information&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"This is a info"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-28"&gt;&lt;/a&gt;                &lt;span class="n"&gt;poco_warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"This is a warning"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-29"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-30"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_aa8c188102b747e684573ec415bbbb23-31"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Para compilar el proyecto simplemente hay que ejecutar:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_09df98262c514aabb8de9474cf537039-1"&gt;&lt;/a&gt;bii cpp:build
&lt;/pre&gt;&lt;p&gt;Y para publicarlo y que cualquiera pueda utilizarlo, como nosotros hemos utilizado &lt;a class="reference external" href="http://pocoproject.org/"&gt;Poco&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_6b40a80cb80c4ac88c48904687a26a73-1"&gt;&lt;/a&gt;bii publish
&lt;/pre&gt;&lt;p&gt;Además de lo sencillo que ha resultado todo, me ha gustado mucho que después de ejecutar "bii cpp:build", mi &lt;a class="reference external" href="https://eclipse.org"&gt;Eclipse&lt;/a&gt; con &lt;a class="reference external" href="https://eclipse.org/cdt/"&gt;CDT&lt;/a&gt; indexaba perfectamente el código, así como el autocompletado y la navegación entre clases y métodos.&lt;/p&gt;
&lt;p&gt;También he leído un artículo sobre lo bien que se integra con &lt;a class="reference external" href="https://www.jetbrains.com/clion/"&gt;CLion&lt;/a&gt;: &lt;a class="reference external" href="http://blog.jetbrains.com/clion/2015/03/when-clion-met-biicode/"&gt;When CLion met biicode&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>Biicode</category><category>Build Automation Software</category><category>C++</category><category>Dependency Management</category><category>Poco</category><guid>https://carlosvin.github.io/es/posts/first-biicode-poco/</guid><pubDate>Thu, 14 May 2015 18:00:00 GMT</pubDate></item><item><title>Construir un proyecto C++ con Gradle</title><link>https://carlosvin.github.io/es/posts/gradle-cpp/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div class="section" id="introduccion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/es/posts/gradle-cpp/#id7"&gt;Introducción&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;La construcción, gestión de dependencias y distribución de mis proyectos es algo que cada vez me preocupa más, me gustaría encontrar una herramienta que unificara este proceso y fuese independiente del lenguaje, lo más parecido con lo que he trabajado ha sido &lt;a class="reference external" href="http://www.scons.org"&gt;SCons&lt;/a&gt;, &lt;a class="reference external" href="http://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction"&gt;Autotools&lt;/a&gt;, &lt;a class="reference external" href="http://ant.apache.org"&gt;Ant&lt;/a&gt;, &lt;a class="reference external" href="http://maven.apache.org"&gt;Maven&lt;/a&gt; y últimamente &lt;a class="reference external" href="http://www.gradle.org"&gt;Gradle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Llevo un tiempo haciendo algunas cosas con &lt;a class="reference external" href="http://www.gradle.org"&gt;Gradle&lt;/a&gt;, pero siempre centrado en proyectos &lt;a class="reference external" href="http://www.java.com"&gt;Java&lt;/a&gt; utilizándolo como reemplazo a &lt;a class="reference external" href="http://maven.apache.org"&gt;Maven&lt;/a&gt;, porque que es más sencillo de usar y más rápido. También lo he utilizado en projectos &lt;a class="reference external" href="http://developer.android.com/sdk/installing/studio-build.html"&gt;Android&lt;/a&gt; y he sufrido la pareja &lt;a class="reference external" href="http://developer.android.com/sdk/installing/studio-build.html"&gt;Android Studio + Gradle&lt;/a&gt; en sus primeros matrimonios (porque yo he querido), actualmente está todo mucho más documentado y funciona muy bien.&lt;/p&gt;
&lt;p&gt;Antes de nada hay que decir que la construcción de proyectos C/C++ y Objective-C con &lt;a class="reference external" href="http://www.gradle.org"&gt;Gradle&lt;/a&gt; se encuentra en fase de &lt;a class="reference external" href="http://www.gradle.org/docs/current/userguide/feature_lifecycle.html#incubating"&gt;incubación&lt;/a&gt;, aunque ya permite hacer algunas tareas avanzadas como:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Generación de múltiples artefactos dentro del mismo proyecto, esto es varias librerías o ejecutables.&lt;/li&gt;
&lt;li&gt;Gestionar las dependencias entre estos artefactos (sin versiones).&lt;/li&gt;
&lt;li&gt;Generar distintos “sabores” de aplicaciones, por ejemplo: podremos generar una aplicación “Community” y otra con más características habilitadas llamada “Enterprise”.&lt;/li&gt;
&lt;li&gt;Permite generar binarios para distintas plataformas, esto depende de las cadenas de herramientas ( &lt;a class="reference external" href="http://es.wikipedia.org/wiki/Cadena_de_herramientas"&gt;Toolchains&lt;/a&gt; ) que tengamos instaladas en la máquina de compilación.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Como decía todavía tiene limitaciones, aunque están trabajando en ello y &lt;a class="reference external" href="http://www.gradleware.com/resources/cpp/"&gt;si consiguen lo que tienen planeado&lt;/a&gt; dejaré &lt;a class="reference external" href="http://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction"&gt;Autotools&lt;/a&gt; (me arrepentiré de haber dicho esto).&lt;/p&gt;
&lt;div class="contents topic" id="indice"&gt;
&lt;p class="topic-title first"&gt;índice&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/gradle-cpp/#introduccion" id="id7"&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/gradle-cpp/#un-caso-practico" id="id8"&gt;Un caso práctico&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/gradle-cpp/#estructura-del-proyecto" id="id9"&gt;Estructura del proyecto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/gradle-cpp/#la-aplicacion-c" id="id10"&gt;La Aplicación C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/gradle-cpp/#construyendo-con-gradle" id="id11"&gt;Construyendo con Gradle&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/gradle-cpp/#caso-basico" id="id12"&gt;Caso básico&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/gradle-cpp/#distintos-sabores" id="id13"&gt;Distintos “Sabores”&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/gradle-cpp/#community" id="id14"&gt;Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/gradle-cpp/#enterprise" id="id15"&gt;Enterprise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/gradle-cpp/#release-o-debug" id="id16"&gt;Release o Debug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/gradle-cpp/#multi-plataforma" id="id17"&gt;Multi-plataforma&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/gradle-cpp/#pruebalo-tu-mism" id="id18"&gt;Pruébalo tú mism@&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/gradle-cpp/#conclusiones" id="id19"&gt;Conclusiones&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://carlosvin.github.io/es/posts/gradle-cpp/"&gt;Leer más…&lt;/a&gt; (quedan 6 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>Build Software</category><category>Build System</category><category>C++</category><category>Dependency Management</category><category>Gradle</category><guid>https://carlosvin.github.io/es/posts/gradle-cpp/</guid><pubDate>Sat, 27 Sep 2014 10:00:00 GMT</pubDate></item><item><title>Mutex C++</title><link>https://carlosvin.github.io/es/posts/cpp-mutex/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;En &lt;a class="reference external" href="http://es.wikipedia.org/wiki/C%2B%2B11"&gt;C++11&lt;/a&gt; se han introducido muchas mejoras que nos ayudan a desarrollar sistemas multi-hilo. Voy a centrarme en los &lt;a class="reference external" href="http://es.wikipedia.org/wiki/Exclusi%C3%B3n_mutua_(inform%C3%A1tica)"&gt;mutex&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En las versiones anteriores a &lt;a class="reference external" href="http://es.wikipedia.org/wiki/C%2B%2B11"&gt;C++11&lt;/a&gt; una forma de obtener un &lt;a class="reference external" href="http://es.wikipedia.org/wiki/Exclusi%C3%B3n_mutua_(inform%C3%A1tica)"&gt;mutex&lt;/a&gt; es el que nos proporciona la librería &lt;a class="reference external" href="http://en.wikipedia.org/wiki/POSIX_Threads"&gt;pthread&lt;/a&gt;, pero para utilizarlo debíabos inicializarlo y destruirlo en estilo &lt;a class="reference external" href="http://es.wikipedia.org/wiki/C_(lenguaje_de_programaci%C3%B3n)"&gt;C&lt;/a&gt;, en definitiva, tienes que hacer algo más que lock/unlock cada vez que trabajas con un mutex.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://es.wikipedia.org/wiki/C%2B%2B11"&gt;C++11&lt;/a&gt; nos proporciona una &lt;a class="reference external" href="http://es.cppreference.com/w/cpp/thread/mutex"&gt;clase mutex&lt;/a&gt;, que nos abstrae de cosas que no son lock/unclock. Os recomiendo que echéis un vistazo y veáis lo limpio que queda el código: &lt;a class="reference external" href="http://es.cppreference.com/w/cpp/thread/mutex"&gt;Clase mutex de C++11&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Si sigues trabajando con &lt;a class="reference external" href="http://clang.llvm.org/cxx_status.html"&gt;versiones de compiladores previos a C++11&lt;/a&gt;, hace tiempo me hice un wrapper que te ayuda a abstraerte del mutex de pthread, lo dejo aquí abajo por si a alguien le resulta útil.&lt;/p&gt;
&lt;p&gt;Abajo está un &lt;a class="reference external" href="https://gist.github.com/carlosvin/11257689"&gt;Gist del Código&lt;/a&gt;, he vuelto a escribir el código de cabeza y puede ser que haya algún error, lo revisaré, pero lo importante es la idea de hacer una clase que envuelva la inicialización del mutex de pthread.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://carlosvin.github.io/es/posts/cpp-mutex/"&gt;Leer más…&lt;/a&gt; (quedan 1 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>pthread</category><guid>https://carlosvin.github.io/es/posts/cpp-mutex/</guid><pubDate>Thu, 24 Apr 2014 15:50:00 GMT</pubDate></item><item><title>Depurar librería generada con libtool</title><link>https://carlosvin.github.io/es/posts/debug-libtool-lib/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;Trabajando con &lt;a class="reference external" href="http://www.gnu.org/software/libtool/libtool.html"&gt;libtool&lt;/a&gt; &lt;a class="footnote-reference" href="https://carlosvin.github.io/es/posts/debug-libtool-lib/#id3" id="id1"&gt;[1]&lt;/a&gt;, cuando vamos a depurar un ejecutable que utiliza una librería generada con &lt;a class="reference external" href="http://www.gnu.org/software/libtool/libtool.html"&gt;libtool&lt;/a&gt;, es posible que nos encontremos con el siguiente error:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_fb2ed2b8bb634332b4714146bf57ac6c-1"&gt;&lt;/a&gt;$ gdb ./tests-mylib
&lt;a name="rest_code_fb2ed2b8bb634332b4714146bf57ac6c-2"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"tests-mylib"&lt;/span&gt;: not in executable format: File format not recognized
&lt;/pre&gt;&lt;p&gt;&lt;code&gt;libmylib.so&lt;/code&gt; es una librería dinámica generada con &lt;a class="reference external" href="http://www.gnu.org/software/libtool/libtool.html"&gt;libtool&lt;/a&gt;
&lt;code&gt;tests-mylib&lt;/code&gt; es un ejecutable que utiliza la librería mylib&lt;/p&gt;
&lt;p&gt;Para los que estéis pensando que se me ha olvidado poner la opción de compilación &lt;code&gt;-g&lt;/code&gt;, lo siento, pero este error ocurre aunque utilicemos &lt;code&gt;-g&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;El error es debido a que estamos intentando ejecutar un script generado por &lt;a class="reference external" href="http://www.gnu.org/software/libtool/libtool.html"&gt;libtool&lt;/a&gt;, es una envoltura sobre el programa real, para facilitar la ejecución de éste &lt;a class="citation-reference" href="https://carlosvin.github.io/es/posts/debug-libtool-lib/#libtooldoc" id="id2"&gt;[libtooldoc]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para poder depurar nuestro programa de prueba &lt;code&gt;tests-mylib&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_d248f6f625634a2b967814a09688ad0b-1"&gt;&lt;/a&gt;libtool --mode&lt;span class="o"&gt;=&lt;/span&gt;execute gdb tests-mylib
&lt;/pre&gt;&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://carlosvin.github.io/es/posts/debug-libtool-lib/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Herramienta que pertenece a la &lt;a class="reference external" href="http://es.wikipedia.org/wiki/GNU_build_system"&gt;Autotools&lt;/a&gt; usada para crear bibliotecas de software portables.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="libtooldoc" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://carlosvin.github.io/es/posts/debug-libtool-lib/#id2"&gt;[libtooldoc]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Esta información la he sacado de &lt;a class="reference external" href="http://www.gnu.org/software/libtool/manual/libtool.html#Debugging-executables"&gt;http://www.gnu.org/software/libtool/manual/libtool.html#Debugging-executables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</description><category>Autotools</category><category>C++</category><category>GNU</category><category>Tips and Tricks</category><guid>https://carlosvin.github.io/es/posts/debug-libtool-lib/</guid><pubDate>Fri, 01 Feb 2013 14:30:00 GMT</pubDate></item><item><title>Alineación de una Estructura C++ en Memoria</title><link>https://carlosvin.github.io/es/posts/cpp-pragma-pack/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;Un struct de C++ es un elemento que permite agrupar elementos de tipos distintos con alguna relación entre ellos. Esto permite manipular todos los elementos en bloque mediante una única referencia. Podemos considerarlo como una clase con visibilidad publica por defecto para sus atributos y funciones.&lt;/p&gt;
&lt;p&gt;Si alguna vez nos interesa trabajar a un nivel más bajo, nos puede resultar útil entender cómo se mapea una estructura en memoria y cómo controlar este mapeo.&lt;/p&gt;
&lt;div class="contents topic" id="tabla-de-contenidos"&gt;
&lt;p class="topic-title first"&gt;Tabla de Contenidos&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/cpp-pragma-pack/#estructura-de-ejemplo" id="id1"&gt;Estructura de ejemplo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/cpp-pragma-pack/#la-directiva-pragma-pack-en-struct-c" id="id2"&gt;La directiva #pragma pack en struct C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/cpp-pragma-pack/#rendimiento" id="id3"&gt;Rendimiento&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://carlosvin.github.io/es/posts/cpp-pragma-pack/"&gt;Leer más…&lt;/a&gt; (quedan 6 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><guid>https://carlosvin.github.io/es/posts/cpp-pragma-pack/</guid><pubDate>Mon, 26 Nov 2012 11:00:00 GMT</pubDate></item></channel></rss>