<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Carlos says "bla bla" (Publicaciones sobre SPA)</title><link>https://carlosvin.github.io/</link><description></description><atom:link href="https://carlosvin.github.io/es/categories/spa.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><lastBuildDate>Mon, 08 Apr 2019 04:27:47 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Create SPA: React + Typescript + Parcel</title><link>https://carlosvin.github.io/es/posts/react-typescript-parcel/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;I was about to start yet another personal project, it consists of a SPA (Single Page Application) for a travel journal.&lt;/p&gt;
&lt;p&gt;Some time ago I tried &lt;a href="https://parceljs.org"&gt;Parcel&lt;/a&gt;, I really loved how simple it was to create a simple project from scratch, using &lt;a href="https://www.typescriptlang.org/"&gt;Typescript&lt;/a&gt; + &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; stack. I've decided to create this template or base project, so next time I want to create a new SPA with my favorite frontend stack, I will only have to:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/carlosvin/react-typescript-parcel-template.git
&lt;/pre&gt;


&lt;h2&gt;Quick start&lt;/h2&gt;
&lt;h3&gt;Development server&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/carlosvin/react-typescript-parcel-template.git
&lt;span class="nb"&gt;cd&lt;/span&gt; react-typescript-parcel-template
yarn install
yarn start
&lt;/pre&gt;


&lt;p&gt;Last &lt;code&gt;yarn start&lt;/code&gt; command will:
- start a development server at http://localhost:1234 with &lt;a href="https://en.parceljs.org/hmr.html"&gt;hot module replacement&lt;/a&gt;
- build automatically development javascript files with source maps&lt;/p&gt;
&lt;p&gt;Basically each time you save a file, you will see automatically the result at http://localhost:1234 without refreshing the page.&lt;/p&gt;
&lt;h3&gt;Build production bundle&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;yarn build
&lt;/pre&gt;


&lt;p&gt;&lt;a href="https://en.parceljs.org/production.html#optimisations"&gt;Parcel's default optimizations&lt;/a&gt; will be applied to generated files.&lt;/p&gt;
&lt;p&gt;Files are saved at &lt;code&gt;dist&lt;/code&gt; folder.
Inside &lt;code&gt;dist&lt;/code&gt; folder there is also a file with information about bundle content sizes: &lt;code&gt;dist/report.html&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Step by step project creation&lt;/h2&gt;
&lt;p&gt;In this section I will describe how I created this project.&lt;/p&gt;
&lt;p&gt;Firstly, create &lt;code&gt;package.json&lt;/code&gt; with &lt;a href="https://yarnpkg.com/lang/en/docs/cli/init/"&gt;yarn init&lt;/a&gt; command.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;yarn init
&lt;/pre&gt;


&lt;h3&gt;Add required dependencies&lt;/h3&gt;
&lt;p&gt;Add react dependencies.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;yarn add @types/react @types/react-dom react react-dom
&lt;/pre&gt;


&lt;p&gt;Previous command modifies &lt;code&gt;package.json&lt;/code&gt; file adding &lt;code&gt;dependencies&lt;/code&gt; section and will also install React packages in &lt;code&gt;node_modules&lt;/code&gt; folder.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"project_name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"MIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"@types/react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"^16.7.18"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"@types/react-dom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"^16.0.11"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"^16.7.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"react-dom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"^16.7.0"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Add &lt;a href="https://www.typescriptlang.org/"&gt;Typescript&lt;/a&gt; compiler as development dependency.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;yarn add --dev typescript
&lt;/pre&gt;


&lt;p&gt;We also need &lt;a href="https://parceljs.org/"&gt;Parcel bundler&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;yarn add --dev parcel-bundler
&lt;/pre&gt;


&lt;p&gt;I've added a non-required dependency, it is a plugin to generate a report of generated bundle contents (the parcel version of webpack-bundle-analyzer).&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;yarn add --dev parcel-plugin-bundle-visualiser
&lt;/pre&gt;


&lt;h3&gt;Create application source code&lt;/h3&gt;
&lt;p&gt;First we create the React application in &lt;code&gt;src/index.tsx&lt;/code&gt; file.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;React&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ReactDOM&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"react-dom"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;React&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PureComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;ReactDOM&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Parcel can take &lt;code&gt;index.html&lt;/code&gt; file as entry file and it figures out how to build the application, so let's create &lt;code&gt;src/index.html&lt;/code&gt; as follows:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"./index.tsx"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;We need &lt;code&gt;div&lt;/code&gt; tag for React to inject the DOM elements. 
The &lt;code&gt;script&lt;/code&gt; declaration is used by Parcel to find entry point to build.&lt;/p&gt;
&lt;p&gt;I've added the commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt;: Check "Build production bundle" section.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start&lt;/code&gt;: Check "Development server" section.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="s2"&gt;"scripts"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"parcel src/index.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"parcel build src/index.html"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Then to it is really easy to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;run development server: &lt;code&gt;yarn start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;generate a production bundle: &lt;code&gt;yarn build&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Add scripts to run Parcel&lt;/h3&gt;
&lt;p&gt;There is another approach described in &lt;a href="https://en.parceljs.org/getting_started.html"&gt;Parcel documentation&lt;/a&gt; that consists of installing Parcel globally. &lt;/p&gt;
&lt;p&gt;I've opted for more isolated approach that affects only project you are working on, you just install Parcel as &lt;code&gt;devDependency&lt;/code&gt;. There is a tiny drawback, you can't just run &lt;code&gt;parcel index.html&lt;/code&gt;, because it is not installed in your system, but in &lt;code&gt;node_modules&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There is a simple way to run any binary installed in &lt;code&gt;node_modules&lt;/code&gt;, you can just run &lt;code&gt;npx parcel index.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I like more to define build steps in &lt;code&gt;package.json&lt;/code&gt; file, so you can have well defined commands to build your project. &lt;/p&gt;
&lt;h3&gt;Configure Typescript (optional)&lt;/h3&gt;
&lt;p&gt;Create a &lt;code&gt;tsconfig.json&lt;/code&gt; file.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"outDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"./dist/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"sourceMap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"noImplicitAny"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"module"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"commonjs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"es5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"jsx"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"react"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;With this configuration, Typescript compiler will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generate files in &lt;code&gt;dist&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Generate &lt;a href="https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Use_a_source_map"&gt;source maps&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Will not allow to declare &lt;code&gt;any&lt;/code&gt; type, for example following declaration is not allowed: &lt;code&gt;const elements: any;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Generated module code will be &lt;a href="https://requirejs.org/docs/commonjs.html"&gt;CommonJs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Generated code will be &lt;a href="https://es.wikipedia.org/wiki/ECMAScript"&gt;ECMAScript&lt;/a&gt; 5 compliant.&lt;/li&gt;
&lt;li&gt;Support &lt;a href="https://www.typescriptlang.org/docs/handbook/jsx.html"&gt;JSX&lt;/a&gt; in .tsx files, in this case React type.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Full source code&lt;/h2&gt;
&lt;p&gt;You can find full example at: https://github.com/carlosvin/react-typescript-parcel-template&lt;/p&gt;
&lt;p&gt;Or you can directly download the source code:
 - &lt;a href="https://github.com/carlosvin/react-typescript-parcel-template/archive/1.0.zip"&gt;zip&lt;/a&gt;
 - &lt;a href="https://github.com/carlosvin/react-typescript-parcel-template/archive/1.0.tar.gz"&gt;tar.gz&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><guid>https://carlosvin.github.io/es/posts/react-typescript-parcel/</guid><pubDate>Tue, 01 Jan 2019 12:30:02 GMT</pubDate></item></channel></rss>