<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Carlos says "bla bla" (Publicaciones sobre Meson)</title><link>https://carlosvin.github.io/</link><description></description><atom:link href="https://carlosvin.github.io/es/categories/meson.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><lastBuildDate>Tue, 26 Sep 2017 20:48:14 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Elegir tecnologías para mi nuevo proyeco C++</title><link>https://carlosvin.github.io/es/posts/choosing-modern-cpp-stack/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;Estoy empezando un pequeño proyecto en C++ y antes de nada me han surgido un par de preguntas:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;¿Cómo voy a construirlo?&lt;/li&gt;
&lt;li&gt;¿Qué framework para pruebas unitarias utilizar?&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="contents topic" id="contenido"&gt;
&lt;p class="topic-title first"&gt;Contenido&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/choosing-modern-cpp-stack/#elegir-un-sistema-de-construccion-meson" id="id1"&gt;Elegir un Sistema de Construcción (Meson)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/choosing-modern-cpp-stack/#cmake-vs-meson" id="id2"&gt;CMake vs Meson&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/choosing-modern-cpp-stack/#framework-the-pruebas-unitarias" id="id3"&gt;Framework the Pruebas Unitarias&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/choosing-modern-cpp-stack/#doctest-una-alternativa-a-catch" id="id4"&gt;doctest: Una alternativa a Catch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/choosing-modern-cpp-stack/#ejemplo" id="id5"&gt;Ejemplo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/choosing-modern-cpp-stack/#artefactos-del-proyecto" id="id6"&gt;Artefactos del Proyecto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/es/posts/choosing-modern-cpp-stack/#estructura-del-proyecto-fork-project" id="id7"&gt;Estructura del Proyecto (Fork project)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="elegir-un-sistema-de-construccion-meson"&gt;
&lt;h2&gt;Elegir un Sistema de Construcción (&lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt;)&lt;/h2&gt;
&lt;p&gt;Ya he utilizado antes &lt;a class="reference external" href="https://www.gnu.org/software/make/manual/make.html"&gt;Make&lt;/a&gt;, &lt;a class="reference external" href="https://maven.apache.org/"&gt;Maven&lt;/a&gt;, &lt;a class="reference external" href="http://scons.org/"&gt;Scons&lt;/a&gt;, &lt;a class="reference external" href="https://gradle.org/"&gt;Gradle&lt;/a&gt; y &lt;a class="reference external" href="http://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html"&gt;Autotools&lt;/a&gt;, pero tengo algunas razones para probar algo diferente, hay algunas cosas que no me gustan:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html"&gt;Autotools&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;No es fácil de configurar y mantener: hay distintos ficheros de configuración y distintos pasos de configuración.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://gradle.org/"&gt;Gradle&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;La construcción de proyectos C++ está todavía en desarrollo, los modelos y APIs están cambiando. No es muy rápido. Puedes ver un ejemplo en este artículo  &lt;a class="reference external" href="https://carlosvin.github.io/posts/gradle-cpp/"&gt;Construir un proyecto C++ con Gradle&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://www.gnu.org/software/make/manual/make.html"&gt;Make&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A medida que el proyecto crece los archivos de configuración se van complicando y volviendo poco manejables.
La sintáxis no me parece clara (esto es una custión de gustos).&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://scons.org/"&gt;Scons&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Es más lento y un poco más difícil de comprender que &lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://maven.apache.org/"&gt;Maven&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Es lento y puedes terminar "&lt;em&gt;Javatizando&lt;/em&gt;" la estructura del proyecto.&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Nota&lt;/p&gt;
&lt;p class="last"&gt;He nombrado solo las cosas que no gustan, pero estos sistemas de construcción tienen otras grandes virtudes, personalmente me encantan &lt;a class="reference external" href="https://gradle.org/"&gt;Gradle&lt;/a&gt;, &lt;a class="reference external" href="http://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html"&gt;Autotools&lt;/a&gt; y &lt;a class="reference external" href="http://scons.org/"&gt;Scons&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cmake-vs-meson"&gt;
&lt;h3&gt;&lt;a class="reference external" href="https://cmake.org/"&gt;CMake&lt;/a&gt; vs &lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Después de descartar los anteriores, estoy considerando &lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt; y &lt;a class="reference external" href="https://cmake.org/"&gt;CMake&lt;/a&gt;.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://cmake.org/"&gt;CMake&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Tiene una gran ventaja sobre &lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt;, es mucho más maduro y es mucho más usado, lo que significa que podrás encontrar muy fácilmente ejemplos, documentación y ayuda en Internet. No importa el tipo de proyecto que estés empezando, lo más seguro es que &lt;a class="reference external" href="https://cmake.org/"&gt;CMake&lt;/a&gt; sea una buena elección.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Es un proyecto jóven comparado con &lt;a class="reference external" href="https://cmake.org/"&gt;CMake&lt;/a&gt;, pero está creciendo rápido y ya ha sido adoptado por algunos proyectos importantes como &lt;a class="reference external" href="https://www.gnome.org/"&gt;Gnome&lt;/a&gt;, donde han comenzado una iniciativa para &lt;a class="reference external" href="https://wiki.gnome.org/Initiatives/GnomeGoals/MesonPorting"&gt;migrar desde Autotools a Meson&lt;/a&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;strong&gt;Finalmente he elegido&lt;/strong&gt; &lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt; porque:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;La sintáxis es muy clara para mí, cuando leo un archivo &lt;cite&gt;meson.build&lt;/cite&gt; entiendo rápidamente lo ue está pasando durante el proceso de construcción.&lt;/li&gt;
&lt;li&gt;Es rápido, aunque está escrito en &lt;a class="reference external" href="https://python.org/"&gt;Python&lt;/a&gt; utiliza &lt;a class="reference external" href="https://ninja-build.org/"&gt;Ninja&lt;/a&gt; para construir el proyecto. La primera vez tienes que utilizar &lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt; para configurar el proyecto, pero para construir y probar el proyecto relmente estamos ejecutando &lt;a class="reference external" href="https://ninja-build.org/"&gt;Ninja&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_f3b2e014321f43faa3e9f6872c631d5f-1"&gt;&lt;/a&gt;$ meson build . &lt;span class="c1"&gt;# Primera vez, configuración del proyecto&lt;/span&gt;
&lt;a name="rest_code_f3b2e014321f43faa3e9f6872c631d5f-2"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; build
&lt;a name="rest_code_f3b2e014321f43faa3e9f6872c631d5f-3"&gt;&lt;/a&gt;$ ninja build   &lt;span class="c1"&gt;# cada vez que construyes el projecto&lt;/span&gt;
&lt;a name="rest_code_f3b2e014321f43faa3e9f6872c631d5f-4"&gt;&lt;/a&gt;$ ninja &lt;span class="nb"&gt;test&lt;/span&gt;    &lt;span class="c1"&gt;# cada vez que ejecutas tests&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;He encontrado un para de comparaciones interesantes entre algunos de los sistemas de construcción en C++, aunque puede que no sean del todo imparciales porque han sido realizadas por &lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt; y &lt;a class="reference external" href="http://scons.org/"&gt;Scons&lt;/a&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bitbucket.org/scons/scons/wiki/SconsVsOtherBuildTools"&gt;C++ build systems comparison from Scons&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://mesonbuild.com/Simple-comparison.html"&gt;C++ build systems comparison from Meson&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="framework-the-pruebas-unitarias"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/es/posts/choosing-modern-cpp-stack/#id3"&gt;Framework the Pruebas Unitarias&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Anteriorment he utilizado algunas librerías del tipo &lt;a class="reference external" href="https://en.wikipedia.org/wiki/XUnit"&gt;xUnit&lt;/a&gt; como &lt;a class="reference external" href="https://github.com/unittest-cpp/unittest-cpp"&gt;UnitTest++&lt;/a&gt;, &lt;a class="reference external" href="http://cpputest.github.io/"&gt;CppUTest&lt;/a&gt; o &lt;a class="reference external" href="https://github.com/google/googletest"&gt;Google Test&lt;/a&gt; que encaja perfectamente con &lt;a class="reference external" href="https://github.com/google/googletest/tree/master/googlemock"&gt;Google Mock&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Si quires una apuesta segura que cumpla tus expectativas, te recomiendo &lt;a class="reference external" href="https://github.com/google/googletest"&gt;Google Test&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pero hace algún tiempo encontré un framework de pruebas con algunas características no tan comunes en librerías de pruebas C++ y que resultaba realmente fácil de utilizar, estoy hablando de &lt;a class="reference external" href="https://github.com/philsquared/Catch"&gt;Catch&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Es simplemente un fichero de cabeceras C++ sin dependencias adicionales, por lo que resulta realmente rápido comenzar (wget y utilizar el fichero descargado desde tus pruebas).&lt;/li&gt;
&lt;li&gt;Puedes utilizar el estilo normal de pruebas unitarias o el estilo &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Behavior-driven_development"&gt;BDD&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Si quieres saber más sobre &lt;a class="reference external" href="https://github.com/philsquared/Catch"&gt;Catch&lt;/a&gt;, te recomiendo que directamente lo pruebes, el siguiente ejemplo, es cuestión de dos minutos &lt;a class="reference external" href="https://github.com/philsquared/Catch/blob/master/docs/tutorial.md#writing-tests"&gt;simple example up and running&lt;/a&gt;. Puedes también leer algunos artículos como &lt;a class="reference external" href="https://github.com/philsquared/Catch/blob/master/docs/why-catch.md"&gt;Why do we need yet another C++ test framework?&lt;/a&gt; o &lt;a class="reference external" href="http://blog.coldflake.com/posts/Testing-C++-with-a-new-Catch/"&gt;Testing C++ With A New Catch&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="doctest-una-alternativa-a-catch"&gt;
&lt;h3&gt;&lt;a class="reference external" href="https://github.com/onqtam/doctest"&gt;doctest&lt;/a&gt;: Una alternativa a &lt;a class="reference external" href="https://github.com/philsquared/Catch"&gt;Catch&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hay otro framework de pruebas llamado &lt;a class="reference external" href="https://github.com/onqtam/doctest"&gt;doctest&lt;/a&gt;, con los mismos principios que &lt;a class="reference external" href="https://github.com/philsquared/Catch"&gt;Catch&lt;/a&gt;, pero promete ser más rápido y ligero (&lt;a class="reference external" href="https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md"&gt;resultados de las comparaciones de rendimiento&lt;/a&gt;) que &lt;a class="reference external" href="https://github.com/philsquared/Catch"&gt;Catch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/onqtam/doctest"&gt;doctest&lt;/a&gt; fue diseñado basándose en los puntos fuertes de &lt;a class="reference external" href="https://github.com/philsquared/Catch"&gt;Catch&lt;/a&gt;, pero hay algunas &lt;a class="reference external" href="https://github.com/onqtam/doctest/blob/master/doc/markdown/faq.md#how-is-doctest-different-from-catch"&gt;diferencias&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;No es fácil decidirse por uno, los dos son muy parecidos, puedes &lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/pull/1/files#diff-d22d1e18ecbe7ba34523db56b011bcfe"&gt;comprobar las diferencias entre un test escrito con Catch y otro con doctest&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finalmente he elegido &lt;a class="reference external" href="https://github.com/onqtam/doctest"&gt;doctest&lt;/a&gt; simplemente porque es más rápido: &lt;a class="reference external" href="https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md"&gt;resultados de las comparaciones de rendimiento&lt;/a&gt;.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Nota&lt;/p&gt;
&lt;p class="last"&gt;He creado el proyecto de ejemplo utilizando ambos frameworks, puedes encontrarlos en diferentes ramas del repositorio: &lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/tree/doctest"&gt;rama doctest&lt;/a&gt; or &lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/tree/catch"&gt;rama catch&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition hint"&gt;
&lt;p class="first admonition-title"&gt;Sugerencia&lt;/p&gt;
&lt;p class="last"&gt;Puedes ver las mínimas diferencias entre un proyecto usando &lt;a class="reference external" href="https://github.com/philsquared/Catch"&gt;Catch&lt;/a&gt; o &lt;a class="reference external" href="https://github.com/onqtam/doctest"&gt;doctest&lt;/a&gt; en: &lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/pull/1"&gt;https://github.com/carlosvin/uuid-cpp/pull/1&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ejemplo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/es/posts/choosing-modern-cpp-stack/#id5"&gt;Ejemplo&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;He creado un ejemplo para ilustrar este artículo: &lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp"&gt;https://github.com/carlosvin/uuid-cpp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Consiste en una implementación básica de un generador pseudo-aleatorio de &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Universally_unique_identifier"&gt;UUID&lt;/a&gt;, está basado en &lt;a class="reference external" href="http://www.cplusplus.com/reference/random/mt19937/"&gt;mt19937&lt;/a&gt; que no es criptográficamente seguro.&lt;/p&gt;
&lt;div class="section" id="artefactos-del-proyecto"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/es/posts/choosing-modern-cpp-stack/#id6"&gt;Artefactos del Proyecto&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Cuando instalemos el proyecto, &lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt; (&lt;a class="reference external" href="https://ninja-build.org/"&gt;Ninja&lt;/a&gt; realmente) generará una serie de artefactos en nuestro sistema.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Librería compartida: &lt;code&gt;libuuid&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Fichero de cabeceras para que los desarrolladores puedan usar la librería: &lt;code&gt;include/Uuid.h&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Fichero ejecutable &lt;code&gt;uuidgen&lt;/code&gt; (Generador de &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Universally_unique_identifier"&gt;UUID&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Ejecutable de las pruebas unitarias (no será instalado).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Si ejecutamos &lt;code&gt;ninja install&lt;/code&gt; en Linux obtendremos los siguientes ficheros:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_f77d31bde53d445f8de6bf8f8591e884-1"&gt;&lt;/a&gt;/usr/local/lib/libuuid.so
&lt;a name="rest_code_f77d31bde53d445f8de6bf8f8591e884-2"&gt;&lt;/a&gt;/usr/local/include/Uuid.h
&lt;a name="rest_code_f77d31bde53d445f8de6bf8f8591e884-3"&gt;&lt;/a&gt;/usr/local/bin/uuidgen
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="estructura-del-proyecto-fork-project"&gt;
&lt;h3&gt;Estructura del Proyecto (&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp"&gt;Fork project&lt;/a&gt;)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/meson.build"&gt;meson.build&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Fichero principal de configuración para construir el proyecto. Lo utilizamos para especificar las propiedades y subdirectorios del proyecto.&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_ed0bf90d3dc84ce682f1757b27248494-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_ed0bf90d3dc84ce682f1757b27248494-2"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'cpp-meson-example'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# project name&lt;/span&gt;
&lt;a name="rest_code_ed0bf90d3dc84ce682f1757b27248494-3"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'cpp'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# C++ project, e.g: for C project&lt;/span&gt;
&lt;a name="rest_code_ed0bf90d3dc84ce682f1757b27248494-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'1.0.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_ed0bf90d3dc84ce682f1757b27248494-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;license&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'MIT'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_ed0bf90d3dc84ce682f1757b27248494-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;default_options&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'cpp_std=c++11'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# compile for C++&lt;/span&gt;
&lt;a name="rest_code_ed0bf90d3dc84ce682f1757b27248494-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_ed0bf90d3dc84ce682f1757b27248494-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# it will be referred from subdir projects&lt;/span&gt;
&lt;a name="rest_code_ed0bf90d3dc84ce682f1757b27248494-9"&gt;&lt;/a&gt;&lt;span class="n"&gt;inc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;include_directories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'include'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ed0bf90d3dc84ce682f1757b27248494-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_ed0bf90d3dc84ce682f1757b27248494-11"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# meson will try to find a meson.build file inside following directories&lt;/span&gt;
&lt;a name="rest_code_ed0bf90d3dc84ce682f1757b27248494-12"&gt;&lt;/a&gt;&lt;span class="n"&gt;subdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'include'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ed0bf90d3dc84ce682f1757b27248494-13"&gt;&lt;/a&gt;&lt;span class="n"&gt;subdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'src'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ed0bf90d3dc84ce682f1757b27248494-14"&gt;&lt;/a&gt;&lt;span class="n"&gt;subdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/include/"&gt;include&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;meson.build&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Archivo de configuración para construir este directorio, no hay mucho que hacer aquí, simplemente indicamos qué ficheros de cabeceras han de ser instalados&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_dd46453b5e5b43458a8b887fc7d203c9-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Select header files to be installed&lt;/span&gt;
&lt;a name="rest_code_dd46453b5e5b43458a8b887fc7d203c9-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;install_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Uuid.h'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/include/Uuid.h"&gt;Uuid.h&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Archivos de cabeceras, es el interfaz que expone la librería y que será incluido por los usuarios de la misma.&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code cpp"&gt;&lt;a name="rest_code_d2ed01335b04415eb2593af9701dc47b-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;ids&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_d2ed01335b04415eb2593af9701dc47b-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_d2ed01335b04415eb2593af9701dc47b-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Uuid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_d2ed01335b04415eb2593af9701dc47b-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_d2ed01335b04415eb2593af9701dc47b-5"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/src"&gt;src&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/src/meson.build"&gt;meson.build (src)&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Declara 2 artefactos de salida: La librería &lt;code&gt;libuuid&lt;/code&gt; y el ejecutable &lt;code&gt;uuidgen&lt;/code&gt;.&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_6c020ee4d3b442b6bbe7f430422d4727-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;libuuid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shared_library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_6c020ee4d3b442b6bbe7f430422d4727-2"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'uuid'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# library name&lt;/span&gt;
&lt;a name="rest_code_6c020ee4d3b442b6bbe7f430422d4727-3"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'Uuid.cpp'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# source files to be compile&lt;/span&gt;
&lt;a name="rest_code_6c020ee4d3b442b6bbe7f430422d4727-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;include_directories&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# previously declared include directories in root :code:`meson.build`&lt;/span&gt;
&lt;a name="rest_code_6c020ee4d3b442b6bbe7f430422d4727-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# :code:`libuuid` will be part of project installation&lt;/span&gt;
&lt;a name="rest_code_6c020ee4d3b442b6bbe7f430422d4727-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_6c020ee4d3b442b6bbe7f430422d4727-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;uuidgen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;executable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_6c020ee4d3b442b6bbe7f430422d4727-8"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'uuidgen'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# executable name&lt;/span&gt;
&lt;a name="rest_code_6c020ee4d3b442b6bbe7f430422d4727-9"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'main.cpp'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# source files to compile&lt;/span&gt;
&lt;a name="rest_code_6c020ee4d3b442b6bbe7f430422d4727-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;include_directories&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# previously declared include directories in root :code:`meson.build`&lt;/span&gt;
&lt;a name="rest_code_6c020ee4d3b442b6bbe7f430422d4727-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;link_with&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;libuuid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# linking executable with shared previously declared shared library :code:`libuuid`&lt;/span&gt;
&lt;a name="rest_code_6c020ee4d3b442b6bbe7f430422d4727-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# :code:`uuidgen` executable be part of project installation&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/src/main.cpp"&gt;main.cpp&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Código fuente del ejecutable de la aplicación: &lt;code&gt;uuidgen&lt;/code&gt;&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code cpp"&gt;&lt;a name="rest_code_f1d1b0ac944c48068529801a0a4d0b6d-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Uuid.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_f1d1b0ac944c48068529801a0a4d0b6d-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_f1d1b0ac944c48068529801a0a4d0b6d-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_f1d1b0ac944c48068529801a0a4d0b6d-4"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_f1d1b0ac944c48068529801a0a4d0b6d-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_f1d1b0ac944c48068529801a0a4d0b6d-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Uuid&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_f1d1b0ac944c48068529801a0a4d0b6d-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_str&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_f1d1b0ac944c48068529801a0a4d0b6d-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_f1d1b0ac944c48068529801a0a4d0b6d-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/src/Uuid.cpp"&gt;Uuid.cpp&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Implementación de la clase declarada en el fichero de cabeceras &lt;code&gt;Uuid.h&lt;/code&gt;.&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code cpp"&gt;&lt;a name="rest_code_3f4c63a3f33e4313803f6ad719f5ca65-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Uuid.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_3f4c63a3f33e4313803f6ad719f5ca65-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_3f4c63a3f33e4313803f6ad719f5ca65-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;Uuid&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Uuid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_3f4c63a3f33e4313803f6ad719f5ca65-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/test/"&gt;test&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/test/meson.build"&gt;meson.build (test)&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Archivo de configuración para construir y ejecutar las pruebas unitarias.&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_b298a8a49432473ea0d19848c955c7a9-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;testexe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;executable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_b298a8a49432473ea0d19848c955c7a9-2"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'testexe'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# test executable name&lt;/span&gt;
&lt;a name="rest_code_b298a8a49432473ea0d19848c955c7a9-3"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'uuid_test.cpp'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# tests source files to be compiled&lt;/span&gt;
&lt;a name="rest_code_b298a8a49432473ea0d19848c955c7a9-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;include_directories&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# declared include directories in root :code:`meson.build`&lt;/span&gt;
&lt;a name="rest_code_b298a8a49432473ea0d19848c955c7a9-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;link_with&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;libuuid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# link test executable with previously declared shared library :code:`libuuid`&lt;/span&gt;
&lt;a name="rest_code_b298a8a49432473ea0d19848c955c7a9-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_b298a8a49432473ea0d19848c955c7a9-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# test execution&lt;/span&gt;
&lt;a name="rest_code_b298a8a49432473ea0d19848c955c7a9-8"&gt;&lt;/a&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Uuid test'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;testexe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_b298a8a49432473ea0d19848c955c7a9-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_b298a8a49432473ea0d19848c955c7a9-10"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# we can specify other test execution passing arguments or environment variables&lt;/span&gt;
&lt;a name="rest_code_b298a8a49432473ea0d19848c955c7a9-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Uuid test with args and env'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;testexe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'arg1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'arg2'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'FOO=bar'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;doctest.h&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Librería &lt;a class="reference external" href="https://github.com/onqtam/doctest"&gt;doctest&lt;/a&gt; en un único fichero de cabeceras. Puedes tratar de automatizar el proceso de instalación de la librería, yo por el momento la he instalado manualmente, ya que es un proceso muy sencillo:&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code bash"&gt;&lt;a name="rest_code_c2b38b0432314c23a283c5adb1d1b033-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;a name="rest_code_c2b38b0432314c23a283c5adb1d1b033-2"&gt;&lt;/a&gt;wget https://raw.githubusercontent.com/onqtam/doctest/master/doctest/doctest.h
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/test/uuid_test.cpp"&gt;uuid_test.cpp&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Implementación de las pruebas unitarias.&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code cpp"&gt;&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-1"&gt;&lt;/a&gt; &lt;span class="c1"&gt;// This tells doctest to provide a main() - only do this in one cpp file&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-4"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"doctest.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-5"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Uuid.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-6"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;constexpr&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;MAX_ITERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;TEST_CASE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;"Uuid"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MAX_ITERS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-12"&gt;&lt;/a&gt;        &lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Uuid&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-13"&gt;&lt;/a&gt;        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;uuid_str&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_str&lt;/span&gt;&lt;span class="p"&gt;()};&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-15"&gt;&lt;/a&gt;        &lt;span class="n"&gt;MESSAGE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid_str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-16"&gt;&lt;/a&gt;        &lt;span class="n"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-17"&gt;&lt;/a&gt;        &lt;span class="n"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;least&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-18"&gt;&lt;/a&gt;        &lt;span class="n"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid_str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-19"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-20"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-22"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// BDD style&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-24"&gt;&lt;/a&gt;&lt;span class="n"&gt;SCENARIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;"UUID creation"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-26"&gt;&lt;/a&gt;    &lt;span class="n"&gt;GIVEN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;"A random UUID "&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-27"&gt;&lt;/a&gt;        &lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Uuid&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-28"&gt;&lt;/a&gt;        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;uuid_str&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_str&lt;/span&gt;&lt;span class="p"&gt;()};&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-29"&gt;&lt;/a&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-30"&gt;&lt;/a&gt;        &lt;span class="n"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid_str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-32"&gt;&lt;/a&gt;        &lt;span class="n"&gt;WHEN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;"get the most and least"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-33"&gt;&lt;/a&gt;            &lt;span class="n"&gt;THEN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;"should be more than 0"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-34"&gt;&lt;/a&gt;                &lt;span class="n"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-35"&gt;&lt;/a&gt;                &lt;span class="n"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;least&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-36"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-37"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-38"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_b465331b2a2c448a8a37690380ab66c7-39"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition hint"&gt;
&lt;p class="first admonition-title"&gt;Sugerencia&lt;/p&gt;
&lt;p class="last"&gt;Puedes encontrar las instrucciones para construir y ejecutar el proyecto de ejemplo en: &lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp#how-to-build-the-example"&gt;https://github.com/carlosvin/uuid-cpp#how-to-build-the-example&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Build Software</category><category>Build System</category><category>C++</category><category>Catch</category><category>doctest</category><category>Meson</category><category>Unit Testing</category><guid>https://carlosvin.github.io/es/posts/choosing-modern-cpp-stack/</guid><pubDate>Fri, 15 Sep 2017 18:50:00 GMT</pubDate></item></channel></rss>