{"category":"Filesystem","posts":[{"sectids":"","toc-placement":"auto","notitle":"","stylesheet":"","webfonts":"","prewrap":"","attribute-undefined":"drop-line","attribute-missing":"skip","iconfont-remote":"","caution-caption":"Caution","important-caption":"Important","note-caption":"Note","tip-caption":"Tip","warning-caption":"Warning","example-caption":"Example","figure-caption":"Figure","table-caption":"Table","toc-title":"Table of Contents","section-refsig":"Section","part-refsig":"Part","chapter-refsig":"Chapter","appendix-refsig":"Appendix","appendix-caption":"Appendix","untitled-label":"Untitled","version-label":"Version","last-update-label":"Last updated","docfile":"recursive-directory-iterator.en.adoc","docdir":"","docfilesuffix":".adoc","docname":"recursive-directory-iterator.en","embedded":"","asciidoctor":"","asciidoctor-version":"2.0.10","safe-mode-name":"secure","safe-mode-secure":"","safe-mode-level":20,"max-include-depth":64,"user-home":".","backend":"html5","max-attribute-value-size":4096,"linkcss":"","doctype":"article","htmlsyntax":"html","backend-html5-doctype-article":"","doctype-article":"","backend-html5":"","outfilesuffix":".html","filetype":"html","filetype-html":"","basebackend-html-doctype-article":"","basebackend-html":"","basebackend":"html","stylesdir":".","iconsdir":"./images/icons","localdate":"2020-04-22","localyear":"2020","localtime":"20:39:55 +0200","localdatetime":"2020-04-22 20:39:55 +0200","docdate":"2017/05/28 09:00","docyear":"2020","doctime":"22:29:29 +0200","docdatetime":"2020-04-19 22:29:29 +0200","doctitle":"Filesystem in C++17","date":"2017/05/28 09:00","keywords":["C++","C++11","C++17","IO","Filesystem"],"toc":"","description":"We are going to analyze with examples new filesystem features coming with C++17","lang":"en","draft":"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4100.pdf[final draft of File System Technical Specification,window=_blank]","pp":"++","fslink":"https://en.cppreference.com/w/cpp/filesystem[std::filesystem,window=_blank]","authorcount":0,"title":"Filesystem in C++17","summary":"We are going to analyze with examples new filesystem features coming with C++17","html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_introduction\">Introduction</a></li>\n<li><a href=\"#_gettting_started_with_experimental_filesystem_features_c17_g\">Gettting started with Experimental Filesystem Features C&#43;&#43;17 (g++)</a></li>\n<li><a href=\"#_c17_filesystem_features\">C&#43;&#43;17 Filesystem Features</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_stdfilesystempath\">std::filesystem::path</a></li>\n<li><a href=\"#_directory_separator\">Directory separator</a></li>\n<li><a href=\"#_directory_separator_operator\">Directory Separator Operator</a></li>\n<li><a href=\"#_createremove_directories\">Create/Remove Directories</a></li>\n</ul>\n</li>\n<li><a href=\"#_full_example_recursive_directory_iterator\">Full example: Recursive Directory Iterator</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_c11\">C&#43;&#43;11</a></li>\n<li><a href=\"#_c17\">C&#43;&#43;17</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_introduction\">Introduction</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Since C&#43;&#43;17 new filesystem abstractions will be added to C&#43;&#43; environment. So far they are available as <a href=\"https://en.cppreference.com/w/cpp/experimental\">Experimental C&#43;&#43; Features</a>. If you want to dig more about this new library, here it is the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4100.pdf\" target=\"_blank\" rel=\"noopener\">final draft of File System Technical Specification</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_gettting_started_with_experimental_filesystem_features_c17_g\">Gettting started with Experimental Filesystem Features C&#43;&#43;17 (g++)</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We just have to \"tell\" compiler that:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>we write C&#43;&#43;17 (<code>-c++1z</code>) and</p>\n</li>\n<li>\n<p>it has to add <em>standard library with filesystem library</em> (<code>-lstdc++fs</code>).</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++ -std=c++1z main.cpp -lstdc++fs &amp;&amp; ./a.out</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Let&#8217;s see a simple example with <code>std::filesystem::path</code> class.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;experimental/filesystem&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">namespace</span> fs = <span class=\"hljs-built_in\">std</span>::experimental::filesystem;\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    fs::path aPath {<span class=\"hljs-string\">\"./path/to/file.txt\"</span>};\n\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Parent path: \"</span> &lt;&lt; aPath.parent_path() &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Filename: \"</span> &lt;&lt; aPath.filename() &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Extension: \"</span> &lt;&lt; aPath.extension() &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/9f8bebb8b7f0fbe7\" target=\"_blank\" rel=\"noopener\">Compile and run: Basic C&#43;&#43;17 example</a></div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ g++ -std=c++1z main.cpp -lstdc++fs &amp;&amp; ./a.out\n$ ./a.out\n\nParent path: <span class=\"hljs-string\">\"./path/to\"</span>\nFilename: <span class=\"hljs-string\">\"file.txt\"</span>\nExtension: <span class=\"hljs-string\">\".txt\"</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_c17_filesystem_features\">C&#43;&#43;17 Filesystem Features</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In this section, we are going to explain some <a href=\"https://en.cppreference.com/w/cpp/filesystem\" target=\"_blank\" rel=\"noopener\">std::filesystem</a> features with examples, which will help us to highlight differences between C&#43;&#43;11 and C&#43;&#43;17 so we can get a better idea about what this new library will supply and how it might make developer&#8217;s work easier.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_stdfilesystempath\">std::filesystem::path</h3>\n<div class=\"paragraph\">\n<p>Upper we have seen a tiny <a href=\"https://coliru.stacked-crooked.com/a/9f8bebb8b7f0fbe7\" target=\"_blank\" rel=\"noopener\">use case for std::filesystem::path</a>. That is a quite powerful and convenient feature that supplies an multi-platform abstraction for paths to files using the correct directory path separator depending on the platform we are building our application for (<code>\\</code> for Windows based systems and <code>/</code> for Unix based systems).</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_directory_separator\">Directory separator</h3>\n<div class=\"paragraph\">\n<p>When we want our application to use the correct directory separator in C&#43;&#43;11, we could use conditional macro declaration:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Platform independent directory separator in C&#43;&#43;11</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">ifdef</span> _WIN32</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span> SEP = <span class=\"hljs-string\">\"\\\\\"</span>;\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">else</span></span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span> SEP = <span class=\"hljs-string\">\"/\"</span>;\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">endif</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Separator in my system \"</span> &lt;&lt; SEP &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://coliru.stacked-crooked.com/a/5023ee989105fc54\" target=\"_blank\" rel=\"noopener\">Compile and run: C&#43;&#43;11 separator example</a>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Platform independent directory separator in C&#43;&#43;17. Cleaner and simpler.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;experimental/filesystem&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">namespace</span> fs = <span class=\"hljs-built_in\">std</span>::experimental::filesystem;\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Separator in my system \"</span> &lt;&lt; fs::path::preferred_separator &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://coliru.stacked-crooked.com/a/1f2f63b3f5597d05\" target=\"_blank\" rel=\"noopener\">Compile and run: C&#43;&#43;17 separator example</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_directory_separator_operator\">Directory Separator Operator</h3>\n<div class=\"paragraph\">\n<p><a href=\"https://en.cppreference.com/w/cpp/filesystem/path\">std::filesystem::path</a> implements <code>/</code> operator, which allows to easily concatenate paths to files and directories.</p>\n</div>\n<div class=\"paragraph\">\n<p>When we want to concatenate paths in C&#43;&#43;11, we have to add extra logic to avoid adding duplicate separators and to select the correct separator for target platform:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Concatenate paths in C&#43;&#43;11</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">ifdef</span> _WIN32</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span> SEP = <span class=\"hljs-string\">\"\\\\\"</span>;\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">else</span></span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span> SEP = <span class=\"hljs-string\">\"/\"</span>;\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">endif</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-built_in\">string</span> root {<span class=\"hljs-string\">\"/\"</span>};\n    <span class=\"hljs-built_in\">string</span> dir {<span class=\"hljs-string\">\"var/www/\"</span>};\n    <span class=\"hljs-built_in\">string</span> index {<span class=\"hljs-string\">\"index.html\"</span>};\n\n    <span class=\"hljs-built_in\">string</span> pathToIndex{};\n    pathToIndex.append(root).append(SEP).append(dir).append(SEP).append(index);\n\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; pathToIndex &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/290b278ec1de9573\" target=\"_blank\" rel=\"noopener\">Compile and run: Concatenate paths in C&#43;&#43;11</a></div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">//var/www//index.html</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Checking program output we notice it is not fully correct, we should have checked whether path parts already contains a separator so we don&#8217;t append another separator again. That logic is already implemented in <a href=\"https://en.cppreference.com/w/cpp/filesystem/path\">std::filesystem::path</a>, so C&#43;&#43;17 can be like:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Concatenate paths in C&#43;&#43;17</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;experimental/filesystem&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">namespace</span> fs = <span class=\"hljs-built_in\">std</span>::experimental::filesystem;\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    fs::path root {<span class=\"hljs-string\">\"/\"</span>};\n    fs::path dir {<span class=\"hljs-string\">\"var/www/\"</span>};\n    fs::path index {<span class=\"hljs-string\">\"index.html\"</span>};\n\n    fs::path pathToIndex = root / dir / index;\n\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; pathToIndex &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/a24d50875b4daad1\">Compile and run: Concatenate paths in C&#43;&#43;17</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\"><span class=\"hljs-string\">\"/var/www/index.html\"</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Code is cleaner and just correct, there are no duplicated separators.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_createremove_directories\">Create/Remove Directories</h3>\n<div class=\"paragraph\">\n<p><a href=\"https://en.cppreference.com/w/cpp/filesystem\" target=\"_blank\" rel=\"noopener\">std::filesystem</a> comes with some utilities to create and remove files and directories, but firstly let&#8217;s try to do so in C&#43;&#43;11.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Create and remove nested directories in C&#43;&#43;11</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstdio&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;sys/stat.h&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">auto</span> opts = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;\n    mkdir(<span class=\"hljs-string\">\"sandbox\"</span>, opts);\n    mkdir(<span class=\"hljs-string\">\"sandbox/a\"</span>, opts);\n    mkdir(<span class=\"hljs-string\">\"sandbox/a/b\"</span>, opts);\n    mkdir(<span class=\"hljs-string\">\"sandbox/c\"</span>, opts);\n    mkdir(<span class=\"hljs-string\">\"sandbox/c/d\"</span>, opts);\n\n    system(<span class=\"hljs-string\">\"ls -la sandbox/*\"</span>);\n\n    remove(<span class=\"hljs-string\">\"sandbox/c/d\"</span>);\n    remove(<span class=\"hljs-string\">\"sandbox/a/b\"</span>);\n    remove(<span class=\"hljs-string\">\"sandbox/c\"</span>);\n    remove(<span class=\"hljs-string\">\"sandbox/a\"</span>);\n    remove(<span class=\"hljs-string\">\"sandbox\"</span>);\n\n    system(<span class=\"hljs-string\">\"ls -la\"</span>);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/26f4763ec5b42adb\">Compile and run: Create and remove directories C&#43;&#43;11</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++-4.9 -std=c++11 main.cpp -lm &amp;&amp; ./a.out\nsandbox/a:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 12:27 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 12:27 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 12:27 b\n\nsandbox/c:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 12:27 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 12:27 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 12:27 d\ntotal 8012\ndrwxrwxrwx 2 2001 2000    4096 May 28 12:27 .\ndrwxrwxrwx 3 2002 2000 8175616 May 28 12:27 ..\n-rwxr-xr-x 1 2001 2000    8168 May 28 12:27 a.out\n-rw-rw-rw- 1 2001 2000     517 May 28 12:27 main.cpp</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>We have to create/remove one by one. We could rewrite this code snippet with less lines (using a loop), but we still have to pay attention to creation/deletion order, we cannot remove parent directory before we have removed all children.</p>\n</div>\n<div class=\"paragraph\">\n<p>Since C&#43;&#43;17, we can create and remove nested directories with just one call.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Create and remove nested directories C&#43;&#43;17</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;experimental/filesystem&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">namespace</span> fs = <span class=\"hljs-built_in\">std</span>::experimental::filesystem;\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    fs::create_directories(<span class=\"hljs-string\">\"sandbox/a/b\"</span>);\n    fs::create_directories(<span class=\"hljs-string\">\"sandbox/c/d\"</span>);\n    system(<span class=\"hljs-string\">\"ls -la sandbox/*\"</span>);\n\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Were directories removed? \"</span> &lt;&lt; fs::remove_all(<span class=\"hljs-string\">\"sandbox\"</span>) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    system(<span class=\"hljs-string\">\"ls -la\"</span>);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/62c2d22fa0e7144c\">Compile and run: Create and remove nested directories C&#43;&#43;17</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++ -std=c++1z -fconcepts -fgnu-tm  -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;&amp; ./a.out\nsandbox/a:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 16:45 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 16:45 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 16:45 b\n\nsandbox/c:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 16:45 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 16:45 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 16:45 d\nWere directories removed? 1\ntotal 10132\ndrwxrwxrwx 2 2001 2000    4096 May 28 16:45 .\ndrwxrwxrwx 3 2002 2000 8175616 May 28 16:45 ..\n-rwxr-xr-x 1 2001 2000 2170976 May 28 16:45 a.out\n-rw-rw-rw- 1 2001 2000     393 May 28 16:45 main.cpp</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_full_example_recursive_directory_iterator\">Full example: Recursive Directory Iterator</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This example consists of iterate recursively through dicrectories fintering files by extension.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_c11\">C&#43;&#43;11</h3>\n<div class=\"paragraph\">\n<p>To keep C&#43;&#43;11 example simple, I haven&#8217;t added filtering  logic, but filtering logic is present in C&#43;&#43;17 example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">filesystem.11.cpp</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;dirent.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstring&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;fstream&gt; // std::ofstream</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;vector&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;memory&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;system_error&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;sys/stat.h&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span> UP_DIR = <span class=\"hljs-string\">\"..\"</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span> CURRENT_DIR = <span class=\"hljs-string\">\".\"</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span> SEP = <span class=\"hljs-string\">\"/\"</span>;\n\n\n<span class=\"hljs-function\"><span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">path</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">initializer_list</span>&lt;<span class=\"hljs-built_in\">string</span>&gt; parts)</span>\n</span>{\n    <span class=\"hljs-built_in\">string</span> pathTmp {};\n    <span class=\"hljs-built_in\">string</span> separator = <span class=\"hljs-string\">\"\"</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> &amp; part: parts)\n    {\n        pathTmp.append(separator).append(part);\n        separator = SEP;\n    }\n    <span class=\"hljs-keyword\">return</span> pathTmp;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">string</span>&gt; <span class=\"hljs-title\">getDirectoryFiles</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span>&amp; dir, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">string</span>&gt; &amp; extensions)</span>\n</span>{\n    <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">string</span>&gt; files;\n    <span class=\"hljs-function\"><span class=\"hljs-built_in\">shared_ptr</span>&lt;DIR&gt; <span class=\"hljs-title\">directory_ptr</span><span class=\"hljs-params\">(opendir(dir.c_str()), [](DIR* dir){ dir &amp;&amp; closedir(dir); })</span></span>;\n    <span class=\"hljs-keyword\">if</span> (!directory_ptr)\n    {\n        <span class=\"hljs-keyword\">throw</span> system_error(error_code(errno, system_category()), <span class=\"hljs-string\">\"Error opening : \"</span> + dir);\n    }\n\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">dirent</span> *<span class=\"hljs-title\">dirent_ptr</span>;</span>\n    <span class=\"hljs-keyword\">while</span> ((dirent_ptr = readdir(directory_ptr.get())) != <span class=\"hljs-literal\">nullptr</span>)\n    {\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span> fileName {dirent_ptr-&gt;d_name};\n        <span class=\"hljs-keyword\">if</span> (dirent_ptr-&gt;d_type == DT_DIR)\n        {\n            <span class=\"hljs-keyword\">if</span> (CURRENT_DIR != fileName &amp;&amp; UP_DIR != fileName)\n            {\n                <span class=\"hljs-keyword\">auto</span> subFiles = getDirectoryFiles(path({dir, fileName}), extensions);\n                files.insert(end(files), begin(subFiles), end(subFiles));\n            }\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (dirent_ptr-&gt;d_type == DT_REG)\n        {\n            <span class=\"hljs-comment\">// here we should check also if filename has an extension in extensions vector</span>\n            files.push_back(path({dir, fileName}));\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> files;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">auto</span> opt = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;\n    mkdir(<span class=\"hljs-string\">\"sandbox\"</span>, opt);\n    mkdir(<span class=\"hljs-string\">\"sandbox/a\"</span>, opt);\n    mkdir(<span class=\"hljs-string\">\"sandbox/a/b\"</span>, opt);\n\n\t<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">string</span>&gt; e_files = {\n\t    <span class=\"hljs-string\">\"./sandbox/a/b/file1.rst\"</span>,\n\t    <span class=\"hljs-string\">\"./sandbox/a/b/file1.txt\"</span>,\n\t    <span class=\"hljs-string\">\"./sandbox/a/file2.RST\"</span>,\n\t    <span class=\"hljs-string\">\"./sandbox/file3.md\"</span>,\n\t    <span class=\"hljs-string\">\"./sandbox/will_be.ignored\"</span>\n\t};\n\n\t<span class=\"hljs-comment\">// create files</span>\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> &amp;f: e_files)\n\t{\n\t\t<span class=\"hljs-function\">ofstream <span class=\"hljs-title\">of</span><span class=\"hljs-params\">(f, ofstream::out)</span></span>;\n\t\tof &lt;&lt; <span class=\"hljs-string\">\"test\"</span>;\n\t}\n\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"filtered files: \"</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> &amp;f: getDirectoryFiles(<span class=\"hljs-string\">\".\"</span>, {<span class=\"hljs-string\">\".rst\"</span>, <span class=\"hljs-string\">\".RST\"</span>, <span class=\"hljs-string\">\".md\"</span>})){\n\t    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\\t\"</span> &lt;&lt; f &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n\t}\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/af4228e039a281b3\" target=\"_blank\" rel=\"noopener\">Compile and run C&#43;&#43;11 example</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++ -std=c++11 -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;&amp; ./a.out\nfiltered files:\n\t./main.cpp\n\t./sandbox/file3.md\n\t./sandbox/will_be.ignored\n\t./sandbox/a/b/file1.rst\n\t./sandbox/a/b/file1.txt\n\t./sandbox/a/file2.RST\n\t./a.out</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_c17\">C&#43;&#43;17</h3>\n<div class=\"paragraph\">\n<p>Following example also filters files by extension.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">filesystem.17.cpp</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\"><span class=\"hljs-comment\">#include &lt;dirent.h&gt;</span>\n<span class=\"hljs-comment\">#include &lt;cstring&gt;</span>\n<span class=\"hljs-comment\">#include &lt;iostream&gt;</span>\n<span class=\"hljs-comment\">#include &lt;fstream&gt; // std::ofstream</span>\n<span class=\"hljs-comment\">#include &lt;vector&gt;</span>\n<span class=\"hljs-comment\">#include &lt;memory&gt;</span>\n<span class=\"hljs-comment\">#include &lt;system_error&gt;</span>\n<span class=\"hljs-comment\">#include &lt;sys/stat.h&gt;</span>\n\nusing namespace std;\n\nconst string UP_DIR = <span class=\"hljs-string\">\"..\"</span>;\nconst string CURRENT_DIR = <span class=\"hljs-string\">\".\"</span>;\nconst string SEP = <span class=\"hljs-string\">\"/\"</span>;\n\n\nstring path(initializer_list&lt;string&gt; parts)\n{\n    string pathTmp {};\n    string separator = <span class=\"hljs-string\">\"\"</span>;\n    <span class=\"hljs-keyword\">for</span> (auto &amp; part: parts)\n    {\n        pathTmp.append(separator).append(part);\n        separator = SEP;\n    }\n    <span class=\"hljs-built_in\">return</span> pathTmp;\n}\n\nvector&lt;string&gt; getDirectoryFiles(const string&amp; dir, const vector&lt;string&gt; &amp; extensions)\n{\n    vector&lt;string&gt; files;\n    shared_ptr&lt;DIR&gt; directory_ptr(opendir(dir.c_str()), [](DIR* dir){ dir &amp;&amp; closedir(dir); });\n    <span class=\"hljs-keyword\">if</span> (!directory_ptr)\n    {\n        throw system_error(error_code(errno, system_category()), <span class=\"hljs-string\">\"Error opening : \"</span> + dir);\n    }\n\n    struct dirent *dirent_ptr;\n    <span class=\"hljs-keyword\">while</span> ((dirent_ptr = readdir(directory_ptr.get())) != nullptr)\n    {\n        const string fileName {dirent_ptr-&gt;d_name};\n        <span class=\"hljs-keyword\">if</span> (dirent_ptr-&gt;d_type == DT_DIR)\n        {\n            <span class=\"hljs-keyword\">if</span> (CURRENT_DIR != fileName &amp;&amp; UP_DIR != fileName)\n            {\n                auto subFiles = getDirectoryFiles(path({dir, fileName}), extensions);\n                files.insert(end(files), begin(subFiles), end(subFiles));\n            }\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (dirent_ptr-&gt;d_type == DT_REG)\n        {\n            // here we should check also <span class=\"hljs-keyword\">if</span> filename has an extension <span class=\"hljs-keyword\">in</span> extensions vector\n            files.push_back(path({dir, fileName}));\n        }\n    }\n    <span class=\"hljs-built_in\">return</span> files;\n}\n\nint <span class=\"hljs-function\"><span class=\"hljs-title\">main</span></span> ()\n{\n    auto opt = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;\n    mkdir(<span class=\"hljs-string\">\"sandbox\"</span>, opt);\n    mkdir(<span class=\"hljs-string\">\"sandbox/a\"</span>, opt);\n    mkdir(<span class=\"hljs-string\">\"sandbox/a/b\"</span>, opt);\n\n\tvector&lt;string&gt; e_files = {\n\t    <span class=\"hljs-string\">\"./sandbox/a/b/file1.rst\"</span>,\n\t    <span class=\"hljs-string\">\"./sandbox/a/b/file1.txt\"</span>,\n\t    <span class=\"hljs-string\">\"./sandbox/a/file2.RST\"</span>,\n\t    <span class=\"hljs-string\">\"./sandbox/file3.md\"</span>,\n\t    <span class=\"hljs-string\">\"./sandbox/will_be.ignored\"</span>\n\t};\n\n\t// create files\n\t<span class=\"hljs-keyword\">for</span> (auto &amp;f: e_files)\n\t{\n\t\tofstream of(f, ofstream::out);\n\t\tof &lt;&lt; <span class=\"hljs-string\">\"test\"</span>;\n\t}\n\n    cout &lt;&lt; <span class=\"hljs-string\">\"filtered files: \"</span> &lt;&lt; endl;\n\t<span class=\"hljs-keyword\">for</span> (auto &amp;f: getDirectoryFiles(<span class=\"hljs-string\">\".\"</span>, {<span class=\"hljs-string\">\".rst\"</span>, <span class=\"hljs-string\">\".RST\"</span>, <span class=\"hljs-string\">\".md\"</span>})){\n\t    cout &lt;&lt; <span class=\"hljs-string\">\"\\t\"</span> &lt;&lt; f &lt;&lt; endl;\n\t}\n\n    <span class=\"hljs-built_in\">return</span> 0;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/af4228e039a281b3\" target=\"_blank\" rel=\"noopener\">Compile and run C&#43;&#43;17 example</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++ -std=c++11 -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;&amp; ./a.out\nfiltered files:\n\t./main.cpp\n\t./sandbox/file3.md\n\t./sandbox/will_be.ignored\n\t./sandbox/a/b/file1.rst\n\t./sandbox/a/b/file1.txt\n\t./sandbox/a/file2.RST\n\t./a.out</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>","slug":"recursive-directory-iterator"},{"sectids":"","toc-placement":"auto","notitle":"","stylesheet":"","webfonts":"","prewrap":"","attribute-undefined":"drop-line","attribute-missing":"skip","iconfont-remote":"","caution-caption":"Caution","important-caption":"Important","note-caption":"Note","tip-caption":"Tip","warning-caption":"Warning","example-caption":"Example","figure-caption":"Figure","table-caption":"Table","toc-title":"Table of Contents","section-refsig":"Section","part-refsig":"Part","chapter-refsig":"Chapter","appendix-refsig":"Appendix","appendix-caption":"Appendix","untitled-label":"Untitled","version-label":"Version","last-update-label":"Last updated","docfile":"recursive-directory-iterator.es.adoc","docdir":"","docfilesuffix":".adoc","docname":"recursive-directory-iterator.es","embedded":"","asciidoctor":"","asciidoctor-version":"2.0.10","safe-mode-name":"secure","safe-mode-secure":"","safe-mode-level":20,"max-include-depth":64,"user-home":".","backend":"html5","max-attribute-value-size":4096,"linkcss":"","doctype":"article","htmlsyntax":"html","backend-html5-doctype-article":"","doctype-article":"","backend-html5":"","outfilesuffix":".html","filetype":"html","filetype-html":"","basebackend-html-doctype-article":"","basebackend-html":"","basebackend":"html","stylesdir":".","iconsdir":"./images/icons","localdate":"2020-04-22","localyear":"2020","localtime":"20:39:55 +0200","localdatetime":"2020-04-22 20:39:55 +0200","docdate":"2017/05/28 09:00","docyear":"2020","doctime":"22:29:40 +0200","docdatetime":"2020-04-19 22:29:40 +0200","doctitle":"Sistema de Ficheros en C++17","date":"2017/05/28 09:00","keywords":["C++","C++11","C++17","IO","Filesystem"],"toc":"","description":"Vamos a analizar con un ejemplo la forma de recorrer directorios de manera recursiva a partir de C++17","lang":"es","draft":"https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4100.pdf[borrador final de la Especificación Técnica del Sistema de Ficheros,window=_blank]","fslink":"https://en.cppreference.com/w/cpp/filesystem[std::filesystem,window=_blank]","authorcount":0,"title":"Sistema de Ficheros en C++17","summary":"Vamos a analizar con un ejemplo la forma de recorrer directorios de manera recursiva a partir de C++17","html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_introducción\">Introducción</a></li>\n<li><a href=\"#_comenzar_a_utilizar_característica_experimental_filesystem_c17_g\">Comenzar a utilizar característica experimental filesystem C&#43;&#43;17 (g++)</a></li>\n<li><a href=\"#_características_de_filesystem_c17\">Características de filesystem C&#43;&#43;17</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_stdfilesystempath\">std::filesystem::path</a></li>\n<li><a href=\"#_separador_de_directorios\">Separador de directorios</a></li>\n<li><a href=\"#_operador_de_separador_de_directorios\">Operador de separador de directorios</a></li>\n<li><a href=\"#_crear_y_borrar_directorios\">Crear y borrar directorios</a></li>\n</ul>\n</li>\n<li><a href=\"#_ejemplo_completo_iterar_recursivamente_por_directorios\">Ejemplo completo: Iterar Recursivamente por Directorios</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_c11\">C&#43;&#43;11</a></li>\n<li><a href=\"#_c17\">C&#43;&#43;17</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_introducción\">Introducción</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>A partir de C&#43;&#43;17 se añadirán nuevas abstracciones sobre el sistema de ficheros. De momento están disponibles como parte de las <a href=\"https://en.cppreference.com/w/cpp/experimental\">Características Experimentales de C&#43;&#43;</a>. Si queréis profundizar aquí está el <a href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4100.pdf\" target=\"_blank\" rel=\"noopener\">borrador final de la Especificación Técnica del Sistema de Ficheros</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_comenzar_a_utilizar_característica_experimental_filesystem_c17_g\">Comenzar a utilizar característica experimental filesystem C&#43;&#43;17 (g++)</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Simplemente debemos \"decir\" al compilador que:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>estamos escribiendo código C&#43;&#43;17 (<code>-c++1z</code>) y</p>\n</li>\n<li>\n<p>que añada la librería estándar con la librería filesystem (<code>-lstdc++fs</code>).</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++ -std=c++1z main.cpp -lstdc++fs &amp;&amp; ./a.out</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Veamos un ejemplo muy simple utilizando la clase <code>std::filesystem::path</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;experimental/filesystem&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">namespace</span> fs = <span class=\"hljs-built_in\">std</span>::experimental::filesystem;\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    fs::path aPath {<span class=\"hljs-string\">\"./path/to/file.txt\"</span>};\n\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Parent path: \"</span> &lt;&lt; aPath.parent_path() &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Filename: \"</span> &lt;&lt; aPath.filename() &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Extension: \"</span> &lt;&lt; aPath.extension() &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/9f8bebb8b7f0fbe7\" target=\"_blank\" rel=\"noopener\">Resultado de compilar y ejecutar el ejemplo anterior C&#43;&#43;17</a></div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ g++ -std=c++1z main.cpp -lstdc++fs &amp;&amp; ./a.out\n$ ./a.out\n\nParent path: <span class=\"hljs-string\">\"./path/to\"</span>\nFilename: <span class=\"hljs-string\">\"file.txt\"</span>\nExtension: <span class=\"hljs-string\">\".txt\"</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_características_de_filesystem_c17\">Características de filesystem C&#43;&#43;17</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>A continuación vamos a analizar algunas características que nos proporciona <a href=\"https://en.cppreference.com/w/cpp/filesystem\" target=\"_blank\" rel=\"noopener\">std::filesystem</a> con ejemplos en C&#43;&#43;11 y C&#43;&#43;17, de esta forma podremos hacernos una idea de las utilidades que esta nueva librería nos trae y cómo efectivamente ayuda al desarrollador a escribir código más claro y seguro.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_stdfilesystempath\">std::filesystem::path</h3>\n<div class=\"paragraph\">\n<p>Más arriba ya hemos visto un pequeño <a href=\"https://coliru.stacked-crooked.com/a/9f8bebb8b7f0fbe7\" target=\"_blank\" rel=\"noopener\">ejemplo de uso de clase std::filesystem::path</a>. Ésta abstracción nos proporciona una ruta a ficheros y directorios multi-plataforma, utilizando el separador de directorios correspondiente a la plataforma en la que trabajamos <code>\\</code> en sistemas basados en Windows y <code>/</code> en sistemas basados en Unix.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_separador_de_directorios\">Separador de directorios</h3>\n<div class=\"paragraph\">\n<p>Si quisiéramos que nuestro software utilizase el separador de directorios correcto para una plataforma, en C&#43;&#43;11 podríamos utilizar una macro de compilación condicional:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Separador de directorios independiente de la plataforma en C&#43;&#43;11</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">ifdef</span> _WIN32</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span> SEP = <span class=\"hljs-string\">\"\\\\\"</span>;\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">else</span></span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span> SEP = <span class=\"hljs-string\">\"/\"</span>;\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">endif</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Separator in my system \"</span> &lt;&lt; SEP &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://coliru.stacked-crooked.com/a/5023ee989105fc54\" target=\"_blank\" rel=\"noopener\">Compilar y ejecutar: ejemplo separador C&#43;&#43;11</a>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Separador de directorios independiente de la plataforma en C&#43;&#43;17. Más sencillo y claro.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;experimental/filesystem&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">namespace</span> fs = <span class=\"hljs-built_in\">std</span>::experimental::filesystem;\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Separator in my system \"</span> &lt;&lt; fs::path::preferred_separator &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://coliru.stacked-crooked.com/a/1f2f63b3f5597d05\" target=\"_blank\" rel=\"noopener\">Compilar y ejecutar: ejemplo separador C&#43;&#43;17</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_operador_de_separador_de_directorios\">Operador de separador de directorios</h3>\n<div class=\"paragraph\">\n<p><a href=\"https://en.cppreference.com/w/cpp/filesystem/path\">std::filesystem::path</a> implementa el operador <code>/</code>, el cual nos permite concatenar fácilmente rutas a ficheros o directorios.</p>\n</div>\n<div class=\"paragraph\">\n<p>Si quisiéramos construir rutas a directorios en C&#43;&#43;11, tendríamos que implementar cierta lógica extra para detectar que no añadimos separadores extra y para utilizar el separador correcto:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Concatenar paths en C&#43;&#43;11</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">ifdef</span> _WIN32</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span> SEP = <span class=\"hljs-string\">\"\\\\\"</span>;\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">else</span></span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span> SEP = <span class=\"hljs-string\">\"/\"</span>;\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">endif</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-built_in\">string</span> root {<span class=\"hljs-string\">\"/\"</span>};\n    <span class=\"hljs-built_in\">string</span> dir {<span class=\"hljs-string\">\"var/www/\"</span>};\n    <span class=\"hljs-built_in\">string</span> index {<span class=\"hljs-string\">\"index.html\"</span>};\n\n    <span class=\"hljs-built_in\">string</span> pathToIndex{};\n    pathToIndex.append(root).append(SEP).append(dir).append(SEP).append(index);\n\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; pathToIndex &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/290b278ec1de9573\" target=\"_blank\" rel=\"noopener\">Compilar y ejecutar: ejemplo concatenar rutas C&#43;&#43;11</a></div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">//var/www//index.html</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Como vemos el resultado no es del todo correcto, deberíamos comprobar si las partes de la ruta ya contienen separador, para no añadirlo.</p>\n</div>\n<div class=\"paragraph\">\n<p>Toda esta lógica ya está implementada en <a href=\"https://en.cppreference.com/w/cpp/filesystem/path\">std::filesystem::path</a>, así que el código en C&#43;&#43;17 sería algo así:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Concatenar paths en C&#43;&#43;17</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;experimental/filesystem&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">namespace</span> fs = <span class=\"hljs-built_in\">std</span>::experimental::filesystem;\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    fs::path root {<span class=\"hljs-string\">\"/\"</span>};\n    fs::path dir {<span class=\"hljs-string\">\"var/www/\"</span>};\n    fs::path index {<span class=\"hljs-string\">\"index.html\"</span>};\n\n    fs::path pathToIndex = root / dir / index;\n\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; pathToIndex &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/a24d50875b4daad1\">Compilar y ejecutar: ejemplo concatenar rutas C&#43;&#43;17</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\"><span class=\"hljs-string\">\"/var/www/index.html\"</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Aquí el código es más limpio y el resultado es simplemente correcto, no hay separadores duplicados.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_crear_y_borrar_directorios\">Crear y borrar directorios</h3>\n<div class=\"paragraph\">\n<p><a href=\"https://en.cppreference.com/w/cpp/filesystem\" target=\"_blank\" rel=\"noopener\">std::filesystem</a> introduce algunas facilidades para crear y borrar directorios y ficheros, primero vamos a ver una de las formas de hacerlo en C&#43;&#43;11.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Crear y borrar directorios anidados en C&#43;&#43;11</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstdio&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;sys/stat.h&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">auto</span> opts = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;\n    mkdir(<span class=\"hljs-string\">\"sandbox\"</span>, opts);\n    mkdir(<span class=\"hljs-string\">\"sandbox/a\"</span>, opts);\n    mkdir(<span class=\"hljs-string\">\"sandbox/a/b\"</span>, opts);\n    mkdir(<span class=\"hljs-string\">\"sandbox/c\"</span>, opts);\n    mkdir(<span class=\"hljs-string\">\"sandbox/c/d\"</span>, opts);\n\n    system(<span class=\"hljs-string\">\"ls -la sandbox/*\"</span>);\n\n    remove(<span class=\"hljs-string\">\"sandbox/c/d\"</span>);\n    remove(<span class=\"hljs-string\">\"sandbox/a/b\"</span>);\n    remove(<span class=\"hljs-string\">\"sandbox/c\"</span>);\n    remove(<span class=\"hljs-string\">\"sandbox/a\"</span>);\n    remove(<span class=\"hljs-string\">\"sandbox\"</span>);\n\n    system(<span class=\"hljs-string\">\"ls -la\"</span>);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/26f4763ec5b42adb\">Compilar y ejecutar: crear y borrar directorios C&#43;&#43;11</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++-4.9 -std=c++11 main.cpp -lm &amp;&amp; ./a.out\nsandbox/a:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 12:27 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 12:27 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 12:27 b\n\nsandbox/c:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 12:27 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 12:27 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 12:27 d\ntotal 8012\ndrwxrwxrwx 2 2001 2000    4096 May 28 12:27 .\ndrwxrwxrwx 3 2002 2000 8175616 May 28 12:27 ..\n-rwxr-xr-x 1 2001 2000    8168 May 28 12:27 a.out\n-rw-rw-rw- 1 2001 2000     517 May 28 12:27 main.cpp</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Para crear y borrar directorios anidados, debemos hacerlo uno por uno. Podemos escribir este fragmento de código con menos líneas, pero aún así tendremos que tener cuidado del orden en el que creamos/borramos los directorios.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">En C&#43;&#43;17 podemos borrar y crear directorios anidados con una sola llamada.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;experimental/filesystem&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">namespace</span> fs = <span class=\"hljs-built_in\">std</span>::experimental::filesystem;\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    fs::create_directories(<span class=\"hljs-string\">\"sandbox/a/b\"</span>);\n    fs::create_directories(<span class=\"hljs-string\">\"sandbox/c/d\"</span>);\n    system(<span class=\"hljs-string\">\"ls -la sandbox/*\"</span>);\n\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Were directories removed? \"</span> &lt;&lt; fs::remove_all(<span class=\"hljs-string\">\"sandbox\"</span>) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    system(<span class=\"hljs-string\">\"ls -la\"</span>);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/62c2d22fa0e7144c\">Compilar y ejecutar: crear y borrar directorios C&#43;&#43;17</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++ -std=c++1z -fconcepts -fgnu-tm  -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;&amp; ./a.out\nsandbox/a:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 16:45 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 16:45 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 16:45 b\n\nsandbox/c:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 16:45 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 16:45 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 16:45 d\nWere directories removed? 1\ntotal 10132\ndrwxrwxrwx 2 2001 2000    4096 May 28 16:45 .\ndrwxrwxrwx 3 2002 2000 8175616 May 28 16:45 ..\n-rwxr-xr-x 1 2001 2000 2170976 May 28 16:45 a.out\n-rw-rw-rw- 1 2001 2000     393 May 28 16:45 main.cpp</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_ejemplo_completo_iterar_recursivamente_por_directorios\">Ejemplo completo: Iterar Recursivamente por Directorios</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vamos a ver un ejemplo algo más completo, consiste en iterar recursivamente a través de directorios, filtrando los ficheros por extension.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_c11\">C&#43;&#43;11</h3>\n<div class=\"paragraph\">\n<p>Este es el ejemplo en C&#43;&#43;11, sin filtrar por extension, para evitar complicarlo:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">filesystem.11.cpp</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;dirent.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstring&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;fstream&gt; // std::ofstream</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;vector&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;memory&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;system_error&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;sys/stat.h&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span> UP_DIR = <span class=\"hljs-string\">\"..\"</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span> CURRENT_DIR = <span class=\"hljs-string\">\".\"</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span> SEP = <span class=\"hljs-string\">\"/\"</span>;\n\n\n<span class=\"hljs-function\"><span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">path</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">initializer_list</span>&lt;<span class=\"hljs-built_in\">string</span>&gt; parts)</span>\n</span>{\n    <span class=\"hljs-built_in\">string</span> pathTmp {};\n    <span class=\"hljs-built_in\">string</span> separator = <span class=\"hljs-string\">\"\"</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> &amp; part: parts)\n    {\n        pathTmp.append(separator).append(part);\n        separator = SEP;\n    }\n    <span class=\"hljs-keyword\">return</span> pathTmp;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">string</span>&gt; <span class=\"hljs-title\">getDirectoryFiles</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span>&amp; dir, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">string</span>&gt; &amp; extensions)</span>\n</span>{\n    <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">string</span>&gt; files;\n    <span class=\"hljs-function\"><span class=\"hljs-built_in\">shared_ptr</span>&lt;DIR&gt; <span class=\"hljs-title\">directory_ptr</span><span class=\"hljs-params\">(opendir(dir.c_str()), [](DIR* dir){ dir &amp;&amp; closedir(dir); })</span></span>;\n    <span class=\"hljs-keyword\">if</span> (!directory_ptr)\n    {\n        <span class=\"hljs-keyword\">throw</span> system_error(error_code(errno, system_category()), <span class=\"hljs-string\">\"Error opening : \"</span> + dir);\n    }\n\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">dirent</span> *<span class=\"hljs-title\">dirent_ptr</span>;</span>\n    <span class=\"hljs-keyword\">while</span> ((dirent_ptr = readdir(directory_ptr.get())) != <span class=\"hljs-literal\">nullptr</span>)\n    {\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span> fileName {dirent_ptr-&gt;d_name};\n        <span class=\"hljs-keyword\">if</span> (dirent_ptr-&gt;d_type == DT_DIR)\n        {\n            <span class=\"hljs-keyword\">if</span> (CURRENT_DIR != fileName &amp;&amp; UP_DIR != fileName)\n            {\n                <span class=\"hljs-keyword\">auto</span> subFiles = getDirectoryFiles(path({dir, fileName}), extensions);\n                files.insert(end(files), begin(subFiles), end(subFiles));\n            }\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (dirent_ptr-&gt;d_type == DT_REG)\n        {\n            <span class=\"hljs-comment\">// here we should check also if filename has an extension in extensions vector</span>\n            files.push_back(path({dir, fileName}));\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> files;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">auto</span> opt = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;\n    mkdir(<span class=\"hljs-string\">\"sandbox\"</span>, opt);\n    mkdir(<span class=\"hljs-string\">\"sandbox/a\"</span>, opt);\n    mkdir(<span class=\"hljs-string\">\"sandbox/a/b\"</span>, opt);\n\n\t<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">string</span>&gt; e_files = {\n\t    <span class=\"hljs-string\">\"./sandbox/a/b/file1.rst\"</span>,\n\t    <span class=\"hljs-string\">\"./sandbox/a/b/file1.txt\"</span>,\n\t    <span class=\"hljs-string\">\"./sandbox/a/file2.RST\"</span>,\n\t    <span class=\"hljs-string\">\"./sandbox/file3.md\"</span>,\n\t    <span class=\"hljs-string\">\"./sandbox/will_be.ignored\"</span>\n\t};\n\n\t<span class=\"hljs-comment\">// create files</span>\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> &amp;f: e_files)\n\t{\n\t\t<span class=\"hljs-function\">ofstream <span class=\"hljs-title\">of</span><span class=\"hljs-params\">(f, ofstream::out)</span></span>;\n\t\tof &lt;&lt; <span class=\"hljs-string\">\"test\"</span>;\n\t}\n\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"filtered files: \"</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> &amp;f: getDirectoryFiles(<span class=\"hljs-string\">\".\"</span>, {<span class=\"hljs-string\">\".rst\"</span>, <span class=\"hljs-string\">\".RST\"</span>, <span class=\"hljs-string\">\".md\"</span>})){\n\t    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\\t\"</span> &lt;&lt; f &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n\t}\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/af4228e039a281b3\" target=\"_blank\" rel=\"noopener\">Compilar y ejecutar el ejemplo C&#43;&#43;11</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++ -std=c++11 -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;&amp; ./a.out\nfiltered files:\n\t./main.cpp\n\t./sandbox/file3.md\n\t./sandbox/will_be.ignored\n\t./sandbox/a/b/file1.rst\n\t./sandbox/a/b/file1.txt\n\t./sandbox/a/file2.RST\n\t./a.out</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_c17\">C&#43;&#43;17</h3>\n<div class=\"paragraph\">\n<p>El siguiente ejemplo filtra los ficheros por extension.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">filesystem.17.cpp</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\"><span class=\"hljs-comment\">#include &lt;dirent.h&gt;</span>\n<span class=\"hljs-comment\">#include &lt;cstring&gt;</span>\n<span class=\"hljs-comment\">#include &lt;iostream&gt;</span>\n<span class=\"hljs-comment\">#include &lt;fstream&gt; // std::ofstream</span>\n<span class=\"hljs-comment\">#include &lt;vector&gt;</span>\n<span class=\"hljs-comment\">#include &lt;memory&gt;</span>\n<span class=\"hljs-comment\">#include &lt;system_error&gt;</span>\n<span class=\"hljs-comment\">#include &lt;sys/stat.h&gt;</span>\n\nusing namespace std;\n\nconst string UP_DIR = <span class=\"hljs-string\">\"..\"</span>;\nconst string CURRENT_DIR = <span class=\"hljs-string\">\".\"</span>;\nconst string SEP = <span class=\"hljs-string\">\"/\"</span>;\n\n\nstring path(initializer_list&lt;string&gt; parts)\n{\n    string pathTmp {};\n    string separator = <span class=\"hljs-string\">\"\"</span>;\n    <span class=\"hljs-keyword\">for</span> (auto &amp; part: parts)\n    {\n        pathTmp.append(separator).append(part);\n        separator = SEP;\n    }\n    <span class=\"hljs-built_in\">return</span> pathTmp;\n}\n\nvector&lt;string&gt; getDirectoryFiles(const string&amp; dir, const vector&lt;string&gt; &amp; extensions)\n{\n    vector&lt;string&gt; files;\n    shared_ptr&lt;DIR&gt; directory_ptr(opendir(dir.c_str()), [](DIR* dir){ dir &amp;&amp; closedir(dir); });\n    <span class=\"hljs-keyword\">if</span> (!directory_ptr)\n    {\n        throw system_error(error_code(errno, system_category()), <span class=\"hljs-string\">\"Error opening : \"</span> + dir);\n    }\n\n    struct dirent *dirent_ptr;\n    <span class=\"hljs-keyword\">while</span> ((dirent_ptr = readdir(directory_ptr.get())) != nullptr)\n    {\n        const string fileName {dirent_ptr-&gt;d_name};\n        <span class=\"hljs-keyword\">if</span> (dirent_ptr-&gt;d_type == DT_DIR)\n        {\n            <span class=\"hljs-keyword\">if</span> (CURRENT_DIR != fileName &amp;&amp; UP_DIR != fileName)\n            {\n                auto subFiles = getDirectoryFiles(path({dir, fileName}), extensions);\n                files.insert(end(files), begin(subFiles), end(subFiles));\n            }\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (dirent_ptr-&gt;d_type == DT_REG)\n        {\n            // here we should check also <span class=\"hljs-keyword\">if</span> filename has an extension <span class=\"hljs-keyword\">in</span> extensions vector\n            files.push_back(path({dir, fileName}));\n        }\n    }\n    <span class=\"hljs-built_in\">return</span> files;\n}\n\nint <span class=\"hljs-function\"><span class=\"hljs-title\">main</span></span> ()\n{\n    auto opt = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;\n    mkdir(<span class=\"hljs-string\">\"sandbox\"</span>, opt);\n    mkdir(<span class=\"hljs-string\">\"sandbox/a\"</span>, opt);\n    mkdir(<span class=\"hljs-string\">\"sandbox/a/b\"</span>, opt);\n\n\tvector&lt;string&gt; e_files = {\n\t    <span class=\"hljs-string\">\"./sandbox/a/b/file1.rst\"</span>,\n\t    <span class=\"hljs-string\">\"./sandbox/a/b/file1.txt\"</span>,\n\t    <span class=\"hljs-string\">\"./sandbox/a/file2.RST\"</span>,\n\t    <span class=\"hljs-string\">\"./sandbox/file3.md\"</span>,\n\t    <span class=\"hljs-string\">\"./sandbox/will_be.ignored\"</span>\n\t};\n\n\t// create files\n\t<span class=\"hljs-keyword\">for</span> (auto &amp;f: e_files)\n\t{\n\t\tofstream of(f, ofstream::out);\n\t\tof &lt;&lt; <span class=\"hljs-string\">\"test\"</span>;\n\t}\n\n    cout &lt;&lt; <span class=\"hljs-string\">\"filtered files: \"</span> &lt;&lt; endl;\n\t<span class=\"hljs-keyword\">for</span> (auto &amp;f: getDirectoryFiles(<span class=\"hljs-string\">\".\"</span>, {<span class=\"hljs-string\">\".rst\"</span>, <span class=\"hljs-string\">\".RST\"</span>, <span class=\"hljs-string\">\".md\"</span>})){\n\t    cout &lt;&lt; <span class=\"hljs-string\">\"\\t\"</span> &lt;&lt; f &lt;&lt; endl;\n\t}\n\n    <span class=\"hljs-built_in\">return</span> 0;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/af4228e039a281b3\" target=\"_blank\" rel=\"noopener\">Compilar y ejecutar el ejemplo C&#43;&#43;17</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++ -std=c++11 -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;&amp; ./a.out\nfiltered files:\n\t./main.cpp\n\t./sandbox/file3.md\n\t./sandbox/will_be.ignored\n\t./sandbox/a/b/file1.rst\n\t./sandbox/a/b/file1.txt\n\t./sandbox/a/file2.RST\n\t./a.out</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>","slug":"recursive-directory-iterator"}]}