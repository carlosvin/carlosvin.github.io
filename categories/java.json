{"category":"Java","posts":[{"sectids":"","toc-placement":"auto","notitle":"","stylesheet":"","webfonts":"","prewrap":"","attribute-undefined":"drop-line","attribute-missing":"skip","iconfont-remote":"","caution-caption":"Caution","important-caption":"Important","note-caption":"Note","tip-caption":"Tip","warning-caption":"Warning","example-caption":"Example","figure-caption":"Figure","table-caption":"Table","toc-title":"Table of Contents","section-refsig":"Section","part-refsig":"Part","chapter-refsig":"Chapter","appendix-refsig":"Appendix","appendix-caption":"Appendix","untitled-label":"Untitled","version-label":"Version","last-update-label":"Last updated","docfile":"android-studio-portable-download.en.adoc","docdir":"","docfilesuffix":".adoc","docname":"android-studio-portable-download.en","embedded":"","asciidoctor":"","asciidoctor-version":"2.0.10","safe-mode-name":"secure","safe-mode-secure":"","safe-mode-level":20,"max-include-depth":64,"user-home":".","backend":"html5","max-attribute-value-size":4096,"linkcss":"","doctype":"article","htmlsyntax":"html","backend-html5-doctype-article":"","doctype-article":"","backend-html5":"","outfilesuffix":".html","filetype":"html","filetype-html":"","basebackend-html-doctype-article":"","basebackend-html":"","basebackend":"html","stylesdir":".","iconsdir":"./images/icons","localdate":"2020-04-26","localyear":"2020","localtime":"21:26:41 +0200","localdatetime":"2020-04-26 21:26:41 +0200","docdate":"2020-04-19","docyear":"2020","doctime":"10:46:31 +0200","docdatetime":"2020-04-19 10:46:31 +0200","doctitle":"Android Studio Portable Download","date":"2013/10/29 13:00:00","toc":"","lang":"en","keywords":["Android","Java","Software"],"description":"Link to download Android Studio Portable","authorcount":0,"title":"Android Studio Portable Download","summary":"Link to download Android Studio Portable","html":"<div class=\"paragraph\">\n<p>If you want to use <a href=\"https://developer.android.com/studio\">Android Studio</a> without installation, as a portable software, here you have the link to <a href=\"https://developer.android.com/studio/preview/\">last portable version of Android Studio</a>.</p>\n</div>","slug":"android-studio-portable-download"},{"sectids":"","toc-placement":"auto","notitle":"","stylesheet":"","webfonts":"","prewrap":"","attribute-undefined":"drop-line","attribute-missing":"skip","iconfont-remote":"","caution-caption":"Caution","important-caption":"Important","note-caption":"Note","tip-caption":"Tip","warning-caption":"Warning","example-caption":"Example","figure-caption":"Figure","table-caption":"Table","toc-title":"Table of Contents","section-refsig":"Section","part-refsig":"Part","chapter-refsig":"Chapter","appendix-refsig":"Appendix","appendix-caption":"Appendix","untitled-label":"Untitled","version-label":"Version","last-update-label":"Last updated","docfile":"android-studio-portable-download.es.adoc","docdir":"","docfilesuffix":".adoc","docname":"android-studio-portable-download.es","embedded":"","asciidoctor":"","asciidoctor-version":"2.0.10","safe-mode-name":"secure","safe-mode-secure":"","safe-mode-level":20,"max-include-depth":64,"user-home":".","backend":"html5","max-attribute-value-size":4096,"linkcss":"","doctype":"article","htmlsyntax":"html","backend-html5-doctype-article":"","doctype-article":"","backend-html5":"","outfilesuffix":".html","filetype":"html","filetype-html":"","basebackend-html-doctype-article":"","basebackend-html":"","basebackend":"html","stylesdir":".","iconsdir":"./images/icons","localdate":"2020-04-26","localyear":"2020","localtime":"21:26:41 +0200","localdatetime":"2020-04-26 21:26:41 +0200","docdate":"2020-04-19","docyear":"2020","doctime":"10:46:31 +0200","docdatetime":"2020-04-19 10:46:31 +0200","doctitle":"Android Studio Portable Download","date":"2013/10/20 13:00:00","keywords":["Android","Java","Software"],"lang":"es","toc":"","description":"Enlace para descargar la última versión portable de Android Studio","authorcount":0,"title":"Android Studio Portable Download","summary":"Enlace para descargar la última versión portable de Android Studio","html":"<div class=\"paragraph\">\n<p>Para quien quiera utilizar <a href=\"https://developer.android.com/studio\">Android Studio</a> sin instalarlo, como un programa \"portable\", aquí os dejo el enlace a la <a href=\"https://developer.android.com/studio/preview/\">última versión de Android Studio</a>.</p>\n</div>","slug":"android-studio-portable-download"},{"sectids":"","toc-placement":"auto","notitle":"","stylesheet":"","webfonts":"","prewrap":"","attribute-undefined":"drop-line","attribute-missing":"skip","iconfont-remote":"","caution-caption":"Caution","important-caption":"Important","note-caption":"Note","tip-caption":"Tip","warning-caption":"Warning","example-caption":"Example","figure-caption":"Figure","table-caption":"Table","toc-title":"Table of Contents","section-refsig":"Section","part-refsig":"Part","chapter-refsig":"Chapter","appendix-refsig":"Appendix","appendix-caption":"Appendix","untitled-label":"Untitled","version-label":"Version","last-update-label":"Last updated","docfile":"creating-custom-maven-plugin-default.adoc","docdir":"","docfilesuffix":".adoc","docname":"creating-custom-maven-plugin-default","embedded":"","asciidoctor":"","asciidoctor-version":"2.0.10","safe-mode-name":"secure","safe-mode-secure":"","safe-mode-level":20,"max-include-depth":64,"user-home":".","backend":"html5","max-attribute-value-size":4096,"linkcss":"","doctype":"article","htmlsyntax":"html","backend-html5-doctype-article":"","doctype-article":"","backend-html5":"","outfilesuffix":".html","filetype":"html","filetype-html":"","basebackend-html-doctype-article":"","basebackend-html":"","basebackend":"html","stylesdir":".","iconsdir":"./images/icons","localdate":"2020-04-26","localyear":"2020","localtime":"21:26:42 +0200","localdatetime":"2020-04-26 21:26:42 +0200","docdate":"2020-04-19","docyear":"2020","doctime":"10:46:31 +0200","docdatetime":"2020-04-19 10:46:31 +0200","doctitle":"Custom Maven Plugin: Override default build lifecycle","date":"2018/05/12 15:00:00","keywords":["Maven","Java","Build Systems","Maven Plugins"],"lang":"en","description":"How to create a custom Maven plugin which overrides default build lifecycle","authorcount":0,"title":"Custom Maven Plugin: Override default build lifecycle","summary":"How to create a custom Maven plugin which overrides default build lifecycle","html":"<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I explained in previous article <a href=\"/posts/creating-custom-maven-plugin\">Example how to create custom Maven Plugin</a> which <a href=\"https://maven.apache.org/ref/3.5.3/maven-core/lifecycles.html#site_Lifecycle\">overrides site lifecycle</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>I have created another example to demonstrate how to override <a href=\"https://maven.apache.org/ref/3.5.3/maven-core/lifecycles.html#default_Lifecycle\">default Maven build lifecycle</a>. Default build lifecycle is used to construct your software project, for example, it is executed when you run <code>mvn install</code> in a <code>jar</code> type project.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can find source code example at <a href=\"https://github.com/carlosvin/lifecycle-maven-plugin\" class=\"bare\">https://github.com/carlosvin/lifecycle-maven-plugin</a>.</p>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Tip</div>\n</td>\n<td class=\"content\">\nI&#8217;ve also created an <a href=\"https://maven.apache.org/guides/introduction/introduction-to-archetypes.html\" target=\"_blank\" rel=\"noopener\">archetype</a> so you can easily play with the example.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_create_example_project_just_by_running_following_command\">Create example project just by running following command:</h2>\n<div class=\"sectionbody\">\n<div class=\"listingblock\">\n<div class=\"title\">Generate project using archetype</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">mvn archetype:generate \\\n  -DarchetypeGroupId=com.github.carlosvin.archetype \\\n  -DartifactId=lifecycle-maven-plugin-archetype \\\n  -DarchetypeVersion=0.6</code></pre>\n</div>\n</div>\n</div>\n</div>","slug":"creating-custom-maven-plugin-default"},{"sectids":"","toc-placement":"auto","notitle":"","stylesheet":"","webfonts":"","prewrap":"","attribute-undefined":"drop-line","attribute-missing":"skip","iconfont-remote":"","caution-caption":"Caution","important-caption":"Important","note-caption":"Note","tip-caption":"Tip","warning-caption":"Warning","example-caption":"Example","figure-caption":"Figure","table-caption":"Table","toc-title":"Table of Contents","section-refsig":"Section","part-refsig":"Part","chapter-refsig":"Chapter","appendix-refsig":"Appendix","appendix-caption":"Appendix","untitled-label":"Untitled","version-label":"Version","last-update-label":"Last updated","docfile":"creating-custom-maven-plugin.adoc","docdir":"","docfilesuffix":".adoc","docname":"creating-custom-maven-plugin","embedded":"","asciidoctor":"","asciidoctor-version":"2.0.10","safe-mode-name":"secure","safe-mode-secure":"","safe-mode-level":20,"max-include-depth":64,"user-home":".","backend":"html5","max-attribute-value-size":4096,"linkcss":"","doctype":"article","htmlsyntax":"html","backend-html5-doctype-article":"","doctype-article":"","backend-html5":"","outfilesuffix":".html","filetype":"html","filetype-html":"","basebackend-html-doctype-article":"","basebackend-html":"","basebackend":"html","stylesdir":".","iconsdir":"./images/icons","localdate":"2020-04-26","localyear":"2020","localtime":"21:26:42 +0200","localdatetime":"2020-04-26 21:26:42 +0200","docdate":"2020-04-19","docyear":"2020","doctime":"10:46:31 +0200","docdatetime":"2020-04-19 10:46:31 +0200","doctitle":"Example how to create custom Maven Plugin","date":"2018/03/11 19:00:00","keywords":["Maven","Java","Build Systems","maven-site-plugin","Maven Plugins"],"lang":"en","toc":"","description":"Example to understand Maven plugins concepts and how to create a custom Maven plugin from scratch","maven":"https://maven.apache.org[Maven,window=_blank]","mojo":"https://maven.apache.org/plugin-developers/index.html[Mojo,window=_blank]","build_mojo":"https://github.com/carlosvin/blog-maven-plugin/blob/master/src/main/java/com/maven/plugins/blog/BuildMojo.java[Build Mojo,window=_blank]","aaa":"http://wiki.c2.com/?ArrangeActAssert[AAA,window=_blank]","markdown":"https://commonmark.org/[Markdown,window=_blank]","jsr330":"https://maven.apache.org/maven-jsr330.html[JSR-330,window=_blank]","junit4":"https://junit.org/junit4/[JUnit 4]","maven-failsafe-plugin":"https://maven.apache.org/surefire/maven-failsafe-plugin[maven-failsafe-plugin]","maven-invoker-plugin":"https://maven.apache.org/plugins/maven-invoker-plugin[maven-invoker-plugin]","authorcount":0,"title":"Example how to create custom Maven Plugin","summary":"Example to understand Maven plugins concepts and how to create a custom Maven plugin from scratch","html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_maven_plugin_concepts\">Maven plugin concepts</a></li>\n<li><a href=\"#_create_your_custom_plugin_site_lifecycle\">Create your custom plugin (Site Lifecycle)</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_project_structure\">Project structure</a></li>\n<li><a href=\"#_dependency_injection\">Dependency Injection</a></li>\n<li><a href=\"#_write_a_custom_mojo\">Write a custom Mojo</a></li>\n</ul>\n</li>\n<li><a href=\"#_unit_tests\">Unit tests</a></li>\n<li><a href=\"#_integration_tests\">Integration tests</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_how_does_invoker_plugin_work\">How does Invoker Plugin work?</a></li>\n<li><a href=\"#_configure_invoker_plugin\">Configure Invoker Plugin</a></li>\n<li><a href=\"#_create_an_integration_test_project\">Create an Integration Test Project</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Maven has lots of plugins to assist you in project construction, testing, packaging and deployment. For example if you want to compile C++ code instead of Java, you can use <a href=\"https://www.mojohaus.org/maven-native/native-maven-plugin/\">native-maven-plugin</a>. But what if you need something more specific? Then you can create a custom Maven plugin.</p>\n</div>\n<div class=\"paragraph\">\n<p>I will explain how to create a simple custom maven plugin to generate static blog site from Markdown files. I know we can already do that with <a href=\"https://maven.apache.org/plugins/maven-site-plugin/examples/creating-content.html\">maven-site-plugin</a> since version 3.3, I will just use it for learning purposes.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can find the source code of this example at <a href=\"https://github.com/carlosvin/blog-maven-plugin\" class=\"bare\">https://github.com/carlosvin/blog-maven-plugin</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_maven_plugin_concepts\">Maven plugin concepts</h2>\n<div class=\"sectionbody\">\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://maven.apache.org/plugin-developers/index.html\" target=\"_blank\" rel=\"noopener\">Mojo</a></dt>\n<dd>\n<p>An executable goal in Maven, e.g: <code>mvn your-plugin:your-mojo</code> will execute a maven goal <code>your-mojo</code> declared as part of <code>your-plugin</code>.</p>\n</dd>\n<dt class=\"hdlist1\">Goal</dt>\n<dd>\n<p>It is equivalent to <a href=\"https://maven.apache.org/plugin-developers/index.html\" target=\"_blank\" rel=\"noopener\">Mojo</a> execution.</p>\n</dd>\n<dt class=\"hdlist1\">Lifecycle</dt>\n<dd>\n<p>It is a well-defined sequence of phases. Each phase consists of a sequence of goals. Let&#8217;s see an example of lifecycle, e.g: <code>FooLifecycle</code> has <code>clean</code>, <code>prepare</code> and <code>assemble</code> phases. Each of those phases has one of more goals. <strong>FooLifecycle</strong>:</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">clean</dt>\n<dd>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><strong>rmSources</strong></dt>\n<dd>\n<p>a goal to remove source files</p>\n</dd>\n<dt class=\"hdlist1\"><strong>rmBuild</strong></dt>\n<dd>\n<p>a goal to remove files in cache directory</p>\n</dd>\n</dl>\n</div>\n</dd>\n<dt class=\"hdlist1\">prepare</dt>\n<dd>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><strong>installDependencies</strong></dt>\n<dd>\n<p>a goal to download dependencies for the project</p>\n</dd>\n</dl>\n</div>\n</dd>\n<dt class=\"hdlist1\">assemble</dt>\n<dd>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><strong>build</strong></dt>\n<dd>\n<p>a goal to compile source files</p>\n</dd>\n</dl>\n</div>\n</dd>\n</dl>\n</div>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p>To define a custom life-cycle similar to previous one, we will use <code>src/main/resources/META-INF/plexus/components.xml</code>, we will speak about that file in following sections. Normally is enough to override <a href=\"https://maven.apache.org/ref/3.5.3/maven-core/lifecycles.html\">predefined lifecycles</a>, in this example, we will override <strong>site life-cycle</strong>.</p>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Tip</div>\n</td>\n<td class=\"content\">\nYou can find an introduction to Maven life-cycles at <a href=\"https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html\" class=\"bare\">https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html</a>\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_create_your_custom_plugin_site_lifecycle\">Create your custom plugin (Site Lifecycle)</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The plugin we are about to explain will <a href=\"https://maven.apache.org/ref/3.5.3/maven-core/lifecycles.html#site_Lifecycle\">override site lifecycle</a>, which has only 2 default phases, so when we run <code>mvn site</code> using our new custom plugin it will execute the goals we are about to create.</p>\n</div>\n<div class=\"paragraph\">\n<p>Our plugin will work with <code>md</code> (for <a href=\"https://commonmark.org/\" target=\"_blank\" rel=\"noopener\">Markdown</a>) file bindings: It will build and deploy the project using <a href=\"https://maven.apache.org/plugins/maven-deploy-plugin/\">maven deployment plugin</a>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_project_structure\">Project structure</h3>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><code>src/main/java</code></dt>\n<dd>\n<p>Where Java source code is</p>\n</dd>\n<dt class=\"hdlist1\"><code>src/main/resources/META-INF/plexus/components.xml</code></dt>\n<dd>\n<p>file to create/override maven lifecycles and artifact types. Here we can specify which goals will be executed when for an artifact type, for example, we can say that for an artifact of type <code>whatever</code> when we run <code>mvn foo</code> it will verify the files, run tests, run linter, compile and zip al generated files.</p>\n</dd>\n<dt class=\"hdlist1\"><code>src/test/java</code></dt>\n<dd>\n<p>Unit tests folder.</p>\n</dd>\n<dt class=\"hdlist1\"><code>src/it</code></dt>\n<dd>\n<p>Folder with all integration tests. Those integration tests are running actual projects and checking that outputs are as expected.</p>\n</dd>\n<dt class=\"hdlist1\"><code>pom.xml</code></dt>\n<dd>\n<p>File to with Maven project description <a href=\"https://maven.apache.org/guides/introduction/introduction-to-the-pom.html\">(Project Object Model)</a></p>\n</dd>\n</dl>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_dependency_injection\">Dependency Injection</h3>\n<div class=\"paragraph\">\n<p>Maven has finally chosen <a href=\"https://maven.apache.org/maven-jsr330.html\" target=\"_blank\" rel=\"noopener\">JSR-330</a> as <a href=\"https://javax-inject.github.io/javax-inject/\">dependency injection standard</a> (previously it was Plexus Annotations API).</p>\n</div>\n<div class=\"paragraph\">\n<p>To use dependency injection with Maven we have to:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Add <code>javax.inject</code> dependency to <code>pom.xml</code>, so we can use <code>@Inject</code>, <code>@Named</code>, and <code>@Singleton</code> annotations in plugin implementation Java code.</p>\n<div class=\"listingblock\">\n<div class=\"title\">pom.xml</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>javax.inject<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>javax.inject<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>Set up the <code>sisu-maven-plugin</code> to index the <a href=\"https://maven.apache.org/maven-jsr330.html\" target=\"_blank\" rel=\"noopener\">JSR-330</a> components you want made available to Maven.</p>\n<div class=\"listingblock\">\n<div class=\"title\">pom.xml</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.eclipse.sisu<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>sisu-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>0.3.3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">executions</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>generate-index<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>main-index<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">executions</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span></code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>Add annotations to your Mojo, e.g:</p>\n</li>\n</ol>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">BuildMojo.java</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@Mojo</span>(name = <span class=\"hljs-string\">\"build\"</span>, defaultPhase = LifecyclePhase.COMPILE) <b class=\"conum\">(1)</b>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BuildMojo</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractMojo</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> FileSetManager fileSetManager;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> MdToHtml mdToHtml;\n\n\n    <span class=\"hljs-meta\">@Inject</span> <b class=\"conum\">(2)</b>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">BuildMojo</span><span class=\"hljs-params\">(FileSetManager fileSetManager, MdToHtml mdToHtml)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.fileSetManager = fileSetManager;\n        <span class=\"hljs-keyword\">this</span>.mdToHtml = mdToHtml;</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>This annotation is not a dependency injection one, we will explain later what it is for.</p>\n</li>\n<li>\n<p>It will inject an instance of FileSetManager and MdToHtml.</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_write_a_custom_mojo\">Write a custom <a href=\"https://maven.apache.org/plugin-developers/index.html\" target=\"_blank\" rel=\"noopener\">Mojo</a></h3>\n<div class=\"paragraph\">\n<p>It is quite straightforward to implement a <a href=\"https://maven.apache.org/plugin-developers/index.html\" target=\"_blank\" rel=\"noopener\">Mojo</a> class, we have to:</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_1_implement_mojo_interface\">1. Implement Mojo interface</h4>\n<div class=\"paragraph\">\n<p>Your <a href=\"https://maven.apache.org/plugin-developers/index.html\" target=\"_blank\" rel=\"noopener\">Mojo</a> class has to implement <code>org.apache.maven.plugin.Mojo</code>, although it is more convenient to extend <code>org.apache.maven.plugin.AbstractMojo</code>, an abstract class to provide most of the infrastructure required to implement a Mojo except for execute method. That interface and class are described at <a href=\"https://maven.apache.org/developers/mojo-api-specification.html\">Mojo API</a>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BuildMojo</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractMojo</span> </span>{</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_2_configure_mojo_with_java_5_annotations\">2. Configure Mojo with Java 5 annotations</h4>\n<div class=\"paragraph\">\n<p>Annotate <a href=\"https://maven.apache.org/plugin-developers/index.html\" target=\"_blank\" rel=\"noopener\">Mojo</a> class with <code>@Mojo</code> and input parameters with <code>@Parameter</code>. Those annotations belong to another set of annotations to configure Mojos, <a href=\"https://maven.apache.org/plugin-tools/maven-plugin-plugin/examples/using-annotations.html\">Plugin Tools Java5 Annotations</a>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-comment\">/**\n* Generate HTML files from Markdown files\n*/</span>\n<span class=\"hljs-meta\">@Mojo</span>(name = <span class=\"hljs-string\">\"build\"</span>, defaultPhase = LifecyclePhase.COMPILE) <b class=\"conum\">(1)</b>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BuildMojo</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractMojo</span> </span>{\n\n    <span class=\"hljs-comment\">/**\n    * Output directory path where HTML files are generated\n    */</span>\n    <span class=\"hljs-meta\">@Parameter</span>( <b class=\"conum\">(2)</b>\n      defaultValue = <span class=\"hljs-string\">\"${project.reporting.outputDirectory}\"</span>, <b class=\"conum\">(3)</b>\n      property = <span class=\"hljs-string\">\"siteOutputDirectory\"</span>, <b class=\"conum\">(4)</b>\n      required = <span class=\"hljs-keyword\">true</span>)\n    <span class=\"hljs-keyword\">private</span> File outputDirectory;\n\n    <span class=\"hljs-comment\">/**\n    * A specific &lt;code&gt;fileSet&lt;/code&gt; rule to select files and directories.\n    * Fileset spec: https://maven.apache.org/shared/file-management/fileset.html\n    */</span>\n    <span class=\"hljs-meta\">@Parameter</span>\n    <span class=\"hljs-keyword\">private</span> FileSet inputFiles;</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>Configures Mojo name and default life-cycle phase. To execute the Mojo in this example we will use <code>mvn site:build</code>: <em>site</em> is the plugin name and <em>build</em> is <code>name</code> parameter.</p>\n</li>\n<li>\n<p>We use <code>@Parameter</code> annotation to pass configuration parameters to Mojo.</p>\n</li>\n<li>\n<p>You can use properties placeholder or any String. If the parameter type is not a String, then Maven will try to cast it.</p>\n</li>\n<li>\n<p>It allows configuration of the Mojo parameter from the command line by referencing a system property that the user sets via the -D option. E.g: <code>mvn site:build -DsiteOutputDirectory=/var/www/html</code> will set siteOutputDirectory attribute to <code>/var/www/html</code>.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>HINT: More info in <a href=\"https://maven.apache.org/guides/plugin/guide-java-plugin-development.html#Parameters\">Maven Plugin development guide in Parametera section</a>.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_3_implement_execute_method\">3. Implement <em>execute</em> method</h4>\n<div class=\"paragraph\">\n<p>As I have explained before at <a href=\"#_1_implement_mojo_interface\">1. Implement Mojo interface</a>, our <a href=\"https://maven.apache.org/plugin-developers/index.html\" target=\"_blank\" rel=\"noopener\">Mojo</a> class extends <code>org.apache.maven.plugin.AbstractMojo</code> which has one unimplemented method from <code>org.apache.maven.plugin.Mojo</code> interface. In that method we are going to implement the Maven goal logic.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://maven.apache.org/plugin-developers/index.html\" target=\"_blank\" rel=\"noopener\">Mojo</a> class instance is called from <a href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven</a> execution life-cycle by invoking <code>execute()</code> method. Before calling <code>execute()</code>, <a href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven</a> has performed some other tasks related with the Mojo:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p><a href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven</a> instantiates Mojo and injects dependencies (<a href=\"#dependency-injection\">Dependency Injection</a>).</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Mojo mojo = <span class=\"hljs-keyword\">new</span> BuildMojo(fileSetManager, mdToHtml);</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p><a href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven</a> configures the <a href=\"https://maven.apache.org/plugin-developers/index.html\" target=\"_blank\" rel=\"noopener\">Mojo</a> by assigning values to parameters.</p>\n</li>\n<li>\n<p><a href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven</a> calls execute method: <code>mojo.execute()</code>.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>I will simplify <code>execute</code> method implementation in the <a href=\"https://github.com/carlosvin/blog-maven-plugin\">sample project in github</a>, because it is more complicated and this complexity is not relevant for learning purposes.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">BuildMojo.java</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">execute</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> MojoExecutionException </span>{ <b class=\"conum\">(1)</b>\n    <span class=\"hljs-keyword\">if</span> (inputFiles == <span class=\"hljs-keyword\">null</span>) {\n        setDefaultInput();\n    }\n    inputDirPath = Paths.get(inputFiles.getDirectory());\n\n    String[] includedFiles = fileSetManager.getIncludedFiles(inputFiles); <b class=\"conum\">(2)</b>\n\n    outputDirPath = outputDirectory.toPath();\n    <span class=\"hljs-keyword\">if</span> (includedFiles == <span class=\"hljs-keyword\">null</span> || includedFiles.length == <span class=\"hljs-number\">0</span>) {\n        getLog().warn(<span class=\"hljs-string\">\"SKIP: There are no input files. \"</span> + getInputFilesToString()); <b class=\"conum\">(3)</b>\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">if</span> (!outputDirectory.exists()) { <b class=\"conum\">(4)</b>\n            outputDirectory.mkdirs();\n        }\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">for</span> (String f : includedFiles) {\n                convertToHtml(Paths.get(f), outputDirectory); <b class=\"conum\">(5)</b>\n            }\n        } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MojoExecutionException(e.getLocalizedMessage(), e); <b class=\"conum\">(6)</b>\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>If there is any error during execution, it should throw MojoExecutionException.</p>\n</li>\n<li>\n<p>A way to get all selected files from <a href=\"https://maven.apache.org/shared/file-management/fileset.html\">FileSet</a>.</p>\n</li>\n<li>\n<p>AbstractMojo supplies logger functionality.</p>\n</li>\n<li>\n<p>If output directory doesn&#8217;t exist, it will be created.</p>\n</li>\n<li>\n<p>It converts each file Markdown to HTML.</p>\n</li>\n<li>\n<p>Convert thrown exception to MojoExecutionException.</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_unit_tests\">Unit tests</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In the example we use <a href=\"https://junit.org/junit4/\">JUnit 4</a>, but you can use any other testing framework.</p>\n</div>\n<div class=\"paragraph\">\n<p>Firstly, you have to add the unit test library dependency to <code>pom.xml</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">pom.xml</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>junit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>junit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.11<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Then you just have to write your unit tests under <code>src/test/java</code> folder: <a href=\"https://github.com/carlosvin/blog-maven-plugin/blob/master/src/test/java/com/maven/plugins/blog/PathsTest.java\">src/test/java/com/maven/plugins/blog/PathsTest.java</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>To run the unit tests you just need to execute <code>mvn test</code>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_integration_tests\">Integration tests</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The 2 most popular ways to perform integration tests on custom maven plugins are using <a href=\"https://maven.apache.org/surefire/maven-failsafe-plugin\">maven-failsafe-plugin</a> or <a href=\"https://maven.apache.org/plugins/maven-invoker-plugin\">maven-invoker-plugin</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>I&#8217;ve chosen <a href=\"https://maven.apache.org/plugins/maven-invoker-plugin\">maven-invoker-plugin</a> because for me it is more straightforward. There is <a href=\"https://stackoverflow.com/questions/40010745/maven-invoker-plugin-vs-maven-failsafe-plugin-which-to-use-for-integration-test\">an answer at stackoverflow where they explain thoroughly the differences between them</a>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_how_does_invoker_plugin_work\">How does Invoker Plugin work?</h3>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>We create projects to use our custom plugin under <code>src/it</code> folder, so our plugin will be applied to test projects.</p>\n</li>\n<li>\n<p>Invoker plugin will simulate a previously configured <a href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven</a> execution.</p>\n</li>\n<li>\n<p>After Maven execution, A validation script will check if our plugin outputs are the expected ones. For example, if our plugin is supposed to generate a file named <code>foo.file</code>, verification plugin will check if that file exists, if it doesn&#8217;t, integration test will fail.</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_configure_invoker_plugin\">Configure Invoker Plugin</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-invoker-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.0.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">postBuildHookScript</span>&gt;</span>verify<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">postBuildHookScript</span>&gt;</span> <b class=\"conum\">(3)</b>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">showVersion</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">showVersion</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">streamLogs</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">streamLogs</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noLog</span>&gt;</span>false<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noLog</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">showErrors</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">showErrors</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">executions</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>integration-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>install<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span> <b class=\"conum\">(1)</b>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>run<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span> <b class=\"conum\">(2)</b>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">executions</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p><code>invoker:install</code> will be executed during the phase pre-integration-test and will install the main project artifact into target/local-repo.</p>\n</li>\n<li>\n<p><code>invoker:run</code> will be executed during the integration-test phase and it will execute all defined integration tests under <code>src/it</code> folder.</p>\n</li>\n<li>\n<p>It configures invoker plugin to execute validation script after integration test project execution. This script may be written with either BeanShell or Groovy (verify.groovy or verify.bsh).</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>We have used other properties to show errors, show maven log and save it to a file.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can check all <code>invoker:run</code> configuration properties at <a href=\"https://maven.apache.org/plugins/maven-invoker-plugin/run-mojo.html\" class=\"bare\">https://maven.apache.org/plugins/maven-invoker-plugin/run-mojo.html</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_create_an_integration_test_project\">Create an Integration Test Project</h3>\n<div class=\"paragraph\">\n<p>It is a project we use to execute custom plugin goals, so we can validate if it produces the expected output.</p>\n</div>\n<div class=\"paragraph\">\n<p>There are 3 important files matching with <a href=\"http://wiki.c2.com/?ArrangeActAssert\" target=\"_blank\" rel=\"noopener\">AAA</a> phases (\"Arrange-Act-Assert\").</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_arrange_pom_xml\">Arrange: pom.xml</h4>\n<div class=\"paragraph\">\n<p>This file is a project using our custom plugin.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://github.com/carlosvin/blog-maven-plugin/blob/master/src/it/md-html/pom.xml\">src/it/md-html/pom.xml</a></p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n<span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">modelVersion</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">modelVersion</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.maven.plugins.it<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>simple-it<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>@project.groupId@<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>@project.artifactId@<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>@project.version@<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>It is a very simple pom file where we use placeholders to reference to our plugin under test. When invoker plugin executes following pom file, firstly will replace those placeholders to reference to the latest version sof our custom plugin which was recently installed in the local repository:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>blog<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In that way invoker plugin ensures it is testing the latest version of current project.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_act_invoker_properties\">Act: invoker.properties</h4>\n<div class=\"paragraph\">\n<p>It configures how test project will be executed.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://github.com/carlosvin/blog-maven-plugin/blob/master/src/it/md-html/invoker.properties\">src/it/md-html/invoker.properties</a></div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-properties\" data-lang=\"properties\"><span class=\"hljs-meta\">invoker.goals</span> = <span class=\"hljs-string\">blog:build</span>\n<span class=\"hljs-meta\">invoker.name</span> = <span class=\"hljs-string\">Test build MD</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>It will execute <code>mvn blog:build</code>, a goal defined in our custom plugin under example or what is the same, it will execute <a href=\"https://github.com/carlosvin/blog-maven-plugin/blob/master/src/main/java/com/maven/plugins/blog/BuildMojo.java\" target=\"_blank\" rel=\"noopener\">Build Mojo</a> described in section <a href=\"#_write_a_custom_mojo\">Write a custom <a href=\"https://maven.apache.org/plugin-developers/index.html\" target=\"_blank\" rel=\"noopener\">Mojo</a></a>.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_assert_verify_groovy\">Assert: verify.groovy</h4>\n<div class=\"paragraph\">\n<p>It is the script to check that plugin execution generated the expected results.</p>\n</div>\n<div class=\"paragraph\">\n<p>Verification script, it is checking if <code>target/site/README.html</code> file was generated by the plugin.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://github.com/carlosvin/blog-maven-plugin/blob/master/src/it/md-html/verify.groovy\">src/it/md-html/verify.groovy</a></div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">File generated = <span class=\"hljs-keyword\">new</span> File( basedir, <span class=\"hljs-string\">\"target/site/README.html\"</span> );\n\n<span class=\"hljs-keyword\">assert</span> generated.isFile()</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>","slug":"creating-custom-maven-plugin"},{"sectids":"","toc-placement":"auto","notitle":"","stylesheet":"","webfonts":"","prewrap":"","attribute-undefined":"drop-line","attribute-missing":"skip","iconfont-remote":"","caution-caption":"Caution","important-caption":"Important","note-caption":"Note","tip-caption":"Tip","warning-caption":"Warning","example-caption":"Example","figure-caption":"Figure","table-caption":"Table","toc-title":"Table of Contents","section-refsig":"Section","part-refsig":"Part","chapter-refsig":"Chapter","appendix-refsig":"Appendix","appendix-caption":"Appendix","untitled-label":"Untitled","version-label":"Version","last-update-label":"Last updated","docfile":"java-embedded-db-performance-comparison.es.adoc","docdir":"","docfilesuffix":".adoc","docname":"java-embedded-db-performance-comparison.es","embedded":"","asciidoctor":"","asciidoctor-version":"2.0.10","safe-mode-name":"secure","safe-mode-secure":"","safe-mode-level":20,"max-include-depth":64,"user-home":".","backend":"html5","max-attribute-value-size":4096,"linkcss":"","doctype":"article","htmlsyntax":"html","backend-html5-doctype-article":"","doctype-article":"","backend-html5":"","outfilesuffix":".html","filetype":"html","filetype-html":"","basebackend-html-doctype-article":"","basebackend-html":"","basebackend":"html","stylesdir":".","iconsdir":"./images/icons","localdate":"2020-04-26","localyear":"2020","localtime":"21:26:42 +0200","localdatetime":"2020-04-26 21:26:42 +0200","docdate":"2020-04-19","docyear":"2020","doctime":"10:46:31 +0200","docdatetime":"2020-04-19 10:46:31 +0200","doctitle":"Bases de Datos Embebidas Java: Comparación de Rendimiento","date":"2014/06/07 18:09:00","keywords":["Java","database","embedded"],"description":"Comparación de rendimiento en Java entre tres bases de datos embebidas: Derby/JavaDB, Sqlite y ObjectDB","lang":"es","toc":"","gradle":"https://www.gradle.org[Gradle,window=_blank]","derbydb":"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/DerbyDB.java[DerbyDB,window=_blank]","sqlitedb":"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/SqliteDB.java[SqliteDB,window=_blank]","jdbcdb":"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/JdbcDb.java[JdbcDb,window=_blank]","jdbc":"https://es.wikipedia.org/wiki/Java_Database_Connectivity[JDBC,window=_blank]","jdk":"https://es.wikipedia.org/wiki/Java_Development_Kit[JDK,window=_blank]","acid":"https://es.wikipedia.org/wiki/ACID[ACID,window=_blank]","nosql":"https://es.wikipedia.org/wiki/NoSQL[NoSQL,window=_blank]","derby":"https://db.apache.org/derby/[Derby,window=_blank]","javadb":"https://www.oracle.com/technetwork/es/java/javadb/overview/index.html[JavaDB,window=_blank]","jpa":"https://es.wikipedia.org/wiki/Java_Persistence_API[JPA,window=_blank]","java":"https://es.wikipedia.org/wiki/Java_(lenguaje_de_programaci%C3%B3n)[Java,window=_blank]","sql":"https://es.wikipedia.org/wiki/SQL[SQL,window=_blank]","crud":"https://es.wikipedia.org/wiki/CRUD[CRUD,window=_blank]","pricejava":"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/domain/Price.java[Price.java,window=_blank]","dbjava":"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/DB.java[DB.java,window=_blank]","objectdb":"https://www.objectdb.com/[ObjectDb,window=_blank]","authorcount":0,"title":"Bases de Datos Embebidas Java: Comparación de Rendimiento","summary":"Comparación de rendimiento en Java entre tres bases de datos embebidas: Derby/JavaDB, Sqlite y ObjectDB","html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_bases_de_datos_embebidas\">Bases de datos embebidas</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_sqlitedb\">SqliteDB</a></li>\n<li><a href=\"#_derbydb_o_javadb\">DerbyDB o JavaDB</a></li>\n<li><a href=\"#_objectdb\">ObjectDb</a></li>\n</ul>\n</li>\n<li><a href=\"#_los_tests\">Los Tests</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_las_bases_de_datos_jdbc\">Las Bases de Datos JDBC</a></li>\n<li><a href=\"#_el_código_fuente\">El código fuente</a></li>\n<li><a href=\"#_resultados_de_los_tests\">Resultados de los tests</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_bases_de_datos_embebidas\">Bases de datos embebidas</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Se trata de bases de datos que carecen de servidor, están inscrustadas en la propia aplicación y suelen estar almacenadas en ficheros locales. Esto último unido a que suelen tener un modo de funcionamiento en el que mantienen los datos en memoria hace que puedan tener un rendimiento muy alto.</p>\n</div>\n<div class=\"paragraph\">\n<p>Eso sí, este gran grado acoplamiento a la aplicación, hace que tengan peor rendimiento cuando se comparten entre varias aplicaciones debido a colisiones de acceso.</p>\n</div>\n<div class=\"paragraph\">\n<p>Otra ventaja es que no tenemos que encargarnos de mantener y gestionar un servidor de bases de datos.</p>\n</div>\n<div class=\"paragraph\">\n<p>Voy a hacer una comparativa de rendimiento entre 3 bases de datos embebidas <a href=\"https://es.wikipedia.org/wiki/ACID\" target=\"_blank\" rel=\"noopener\">ACID</a> (transaccionales), las <a href=\"https://es.wikipedia.org/wiki/NoSQL\" target=\"_blank\" rel=\"noopener\">NoSQL</a> no entran en esta comparativa que están en otra liga de rendimiento.</p>\n</div>\n<div class=\"paragraph\">\n<p>Contenidos</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_sqlitedb\"><a href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/SqliteDB.java\" target=\"_blank\" rel=\"noopener\">SqliteDB</a></h3>\n<div class=\"paragraph\">\n<p>Se trata de una librería escrita en <a href=\"https://es.wikipedia.org/wiki/ANSI_C\" target=\"_blank\" rel=\"noopener\">ANSI C</a>, de menos de 500KB, multi-plataforma, sin dependencias externas, almacena todo el contenido de la base de datos en un solo fichero.</p>\n</div>\n<div class=\"paragraph\">\n<p>Es la que da mejor rendimiento en los <a href=\"#_resultados_de_los_tests\">Resultados de los tests</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Se puede utilizar desde C y C++, pero también <a href=\"https://es.wikipedia.org/wiki/Sqlite#Lenguajes_de_programaci.C3.B3n\" target=\"_blank\" rel=\"noopener\">desde otros lenguajes de programación</a> (PHP, Python, Java, .NET &#8230;&#8203;).</p>\n</div>\n<div class=\"paragraph\">\n<p>En el caso de <a href=\"https://es.wikipedia.org/wiki/Java_(lenguaje_de_programaci%C3%B3n)\" target=\"_blank\" rel=\"noopener\">Java</a> podemos gestionar esta base de datos a través de <a href=\"https://es.wikipedia.org/wiki/Java_Database_Connectivity\" target=\"_blank\" rel=\"noopener\">JDBC</a>. Podemos obtener la librería de <a href=\"https://bitbucket.org/xerial/sqlite-jdbc\" class=\"bare\">https://bitbucket.org/xerial/sqlite-jdbc</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Veamos un ejemplo de la inserción de una serie de objetos de la clase <a href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/domain/Price.java\" target=\"_blank\" rel=\"noopener\">Price.java</a>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">JdbcDb</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">DB</span> </span>{\n\n    <span class=\"hljs-keyword\">enum</span> Column {\n        INSTRUMENT,\n        MARKET,\n        PRICE,\n        DATE;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String TABLE_NAME = <span class=\"hljs-string\">\"PRICES\"</span>;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String SQL_INSERT = <span class=\"hljs-string\">\"INSERT INTO \"</span> + TABLE_NAME\n            + <span class=\"hljs-string\">\" (INSTRUMENT, MARKET, PRICE, DATE) VALUES (?,?,?,?)\"</span>;\n\n    <span class=\"hljs-comment\">// ...</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(Price p, PreparedStatement preparedStatement)</span> <span class=\"hljs-keyword\">throws</span> SQLException </span>{\n        preparedStatement.setString(<span class=\"hljs-number\">1</span>, p.getInstrument());\n        preparedStatement.setString(<span class=\"hljs-number\">2</span>, p.getMarket());\n        preparedStatement.setDouble(<span class=\"hljs-number\">3</span>, p.getPrice());\n        preparedStatement.setTimestamp(<span class=\"hljs-number\">4</span>, <span class=\"hljs-keyword\">new</span> Timestamp(p.getDate().getTime()));\n        preparedStatement.addBatch();\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(Price... prices)</span> <span class=\"hljs-keyword\">throws</span> SQLException </span>{\n        PreparedStatement preparedStatement = conn.prepareStatement(SQL_INSERT);\n        <span class=\"hljs-keyword\">for</span> (Price p : prices) {\n            insert(p, preparedStatement);\n        }\n        preparedStatement.executeBatch();\n        preparedStatement.close();\n        conn.commit();\n    }\n\n    <span class=\"hljs-comment\">// ...</span>\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_derbydb_o_javadb\"><a href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/DerbyDB.java\" target=\"_blank\" rel=\"noopener\">DerbyDB</a> o <a href=\"https://www.oracle.com/technetwork/es/java/javadb/overview/index.html\" target=\"_blank\" rel=\"noopener\">JavaDB</a></h3>\n<div class=\"paragraph\">\n<p><a href=\"https://www.oracle.com/technetwork/es/java/javadb/overview/index.html\" target=\"_blank\" rel=\"noopener\">JavaDB</a> es una distribución de Oracle de la base de datos de código libre <a href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/DerbyDB.java\" target=\"_blank\" rel=\"noopener\">DerbyDB</a>. Soporta el estándar <a href=\"https://es.wikipedia.org/wiki/SQL\" target=\"_blank\" rel=\"noopener\">ANSI/ISO SQL</a> a través de <a href=\"https://es.wikipedia.org/wiki/Java_Database_Connectivity\" target=\"_blank\" rel=\"noopener\">JDBC</a> y <a href=\"https://es.wikipedia.org/wiki/Java_EE\" target=\"_blank\" rel=\"noopener\">Java EE</a>. Estas librerías están incluidas en el <a href=\"https://es.wikipedia.org/wiki/Java_Development_Kit\" target=\"_blank\" rel=\"noopener\">JDK</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Almacena la base de datos en multiples archivos, lo que puede resultar útil para escalar el almacenamiento.</p>\n</div>\n<div class=\"paragraph\">\n<p>Solo podemos utilizarlo en <a href=\"https://es.wikipedia.org/wiki/Java_(lenguaje_de_programaci%C3%B3n)\" target=\"_blank\" rel=\"noopener\">Java</a>, no desde otros lenguajes.</p>\n</div>\n<div class=\"paragraph\">\n<p>Como veremos más adelante ha sido la más lenta en los <a href=\"#_resultados_de_los_tests\">Resultados de los tests</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>La implementación de ejemplo de una inserción de una serie de objetos de la clase <a href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/domain/Price.java\" target=\"_blank\" rel=\"noopener\">Price.java</a>, es exactamente la misma que la que hemos hecho más arriba en <a href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/SqliteDB.java\" target=\"_blank\" rel=\"noopener\">SqliteDB</a>, esto es una de las bondades de <a href=\"https://es.wikipedia.org/wiki/Java_Database_Connectivity\" target=\"_blank\" rel=\"noopener\">JDBC</a>, que nos permite obtener una conexión para una base de datos específica, pero a partir de ahí casi siempre nos podemos olvidar de la base de datos con la que trabajamos, siempre y cuando soporte nuestras consultas <a href=\"https://es.wikipedia.org/wiki/SQL\" target=\"_blank\" rel=\"noopener\">SQL</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_objectdb\"><a href=\"https://www.objectdb.com/\" target=\"_blank\" rel=\"noopener\">ObjectDb</a></h3>\n<div class=\"paragraph\">\n<p>Es una <a href=\"https://es.wikipedia.org/wiki/Base_de_datos_orientada_a_objetos\">base de datos orientada a objetos</a> que nos permite acceso <a href=\"https://es.wikipedia.org/wiki/Java_Persistence_API\" target=\"_blank\" rel=\"noopener\">JPA</a>, un estándar de Java que persigue no perder las ventajas de la orientación a objetos; esto se suele perder cuando nos acercamos a la capa de persistencia.</p>\n</div>\n<div class=\"paragraph\">\n<p>Resulta realmente sencillo realizar acciones típicas de una base de datos, abstrayéndonos del SQL, por ejemplo veamos cómo quedaría una inserción de un array de objetos de la clase Price con <a href=\"https://www.objectdb.com/\" target=\"_blank\" rel=\"noopener\">ObjectDb</a>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(Price... prices)</span> <span class=\"hljs-keyword\">throws</span> SQLException </span>{\n    em.getTransaction().begin();\n    <span class=\"hljs-keyword\">for</span> (Price p : prices) {\n        em.persist(p);\n    }\n    em.getTransaction().commit();\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Si a esta facilidad de uso, le unimos que los <a href=\"#_resultados_de_los_tests\">Resultados de los tests</a> de rendimiento han sido muy buenos (cerca de <a href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/SqliteDB.java\" target=\"_blank\" rel=\"noopener\">SqliteDB</a>), puedo decir que he descubierto una base de datos embebida a tener muy en cuenta en futuros proyectos <a href=\"https://es.wikipedia.org/wiki/Java_(lenguaje_de_programaci%C3%B3n)\" target=\"_blank\" rel=\"noopener\">Java</a>, eso sí, al igual que con <a href=\"https://www.oracle.com/technetwork/es/java/javadb/overview/index.html\" target=\"_blank\" rel=\"noopener\">JavaDB</a>, solo nos sirve si vamos a programar en <a href=\"https://es.wikipedia.org/wiki/Java_(lenguaje_de_programaci%C3%B3n)\" target=\"_blank\" rel=\"noopener\">Java</a>.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_los_tests\">Los Tests</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Simplemente consisten en realizar repetidamente una serie operaciones <a href=\"https://es.wikipedia.org/wiki/CRUD\" target=\"_blank\" rel=\"noopener\">CRUD</a>. Para cada base de datos, el test realiza una serie de inserciones, selects, actualizaciones y borrado de objetos de la clase Precio.</p>\n</div>\n<div class=\"paragraph\">\n<p>He utilizado 100000 instancias de la clase <a href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/domain/Price.java\" target=\"_blank\" rel=\"noopener\">Price.java</a>, las mismas para cada tipo de base de datos.</p>\n</div>\n<div class=\"paragraph\">\n<p>Para esto he creado una interfaz <a href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/DB.java\" target=\"_blank\" rel=\"noopener\">DB.java</a> que compartirán cada una de las implementaciones para cada base de datos.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">DB.java</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">DB</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(Price... prices)</span> <span class=\"hljs-keyword\">throws</span> SQLException</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">createTable</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deleteAll</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">update</span><span class=\"hljs-params\">(Price... prices)</span> <span class=\"hljs-keyword\">throws</span> SQLException</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Set&lt;Price&gt; <span class=\"hljs-title\">selectAll</span><span class=\"hljs-params\">()</span></span>;\n\n}</code></pre>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_las_bases_de_datos_jdbc\">Las Bases de Datos JDBC</h3>\n<div class=\"paragraph\">\n<p>Solo cambian los datos necesarios para obtener el driver y la conexión a la base de datos, por eso toda la lógica está en la clase <a href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/JdbcDb.java\" target=\"_blank\" rel=\"noopener\">JdbcDb</a> de la que heredan <a href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/SqliteDB.java\" target=\"_blank\" rel=\"noopener\">SqliteDB</a> y <a href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/DerbyDB.java\" target=\"_blank\" rel=\"noopener\">DerbyDB</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_el_código_fuente\">El código fuente</h3>\n<div class=\"paragraph\">\n<p>Podéis descargar el código fuente de <a href=\"https://github.com/carlosvin/java_embedded_databases\" class=\"bare\">https://github.com/carlosvin/java_embedded_databases</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Se trata de un proyecto <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a>, por lo que para ejecutar los tests solo tenéis que ejecutar: <code>grade test</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> descargará automáticamente las librerías necesarias, compilará y ejecutará los tests.</p>\n</div>\n<div class=\"paragraph\">\n<p>También podéis ver directamente la ejecución en <a href=\"https://travis-ci.org/carlosvin/java_embedded_databases\" class=\"bare\">https://travis-ci.org/carlosvin/java_embedded_databases</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://travis-ci.org/carlosvin/java_embedded_databases\"><span class=\"image\"><img src=\"https://travis-ci.org/carlosvin/java_embedded_databases.svg\" alt=\"image\"></span></a></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_resultados_de_los_tests\">Resultados de los tests</h3>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">db.DbTest &gt; testSqliteDB STANDARD_OUT\n    Testing with 100000 elements\n    100000 Prices SqliteDB, total time 3455 ms <b class=\"conum\">(1)</b>\n    \tInsert:\t 1508 ms\n    \tSelect:\t 605 ms\n    \tUpdate:\t 1319 ms\n    \tDelete:\t 23 ms\n    ----------------------------------------------\ndb.DbTest &gt; testObjectDB STANDARD_OUT\n    Testing with 100000 elements\n    100000 Prices ObjectDB, total time 6467 ms <b class=\"conum\">(2)</b>\n    \tInsert:\t 2579 ms\n    \tSelect:\t 1126 ms\n    \tUpdate:\t 1698 ms\n    \tDelete:\t 1064 ms\n    ----------------------------------------------\ndb.DbTest &gt; testDerbyDB STANDARD_OUT\n    Testing with 100000 elements\n    100000 Prices DerbyDB, total time 24808 ms <b class=\"conum\">(3)</b>\n    \tInsert:\t 11467 ms\n    \tSelect:\t 695 ms\n    \tUpdate:\t 6983 ms\n    \tDelete:\t 5663 ms</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p><a href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/SqliteDB.java\" target=\"_blank\" rel=\"noopener\">SqliteDB</a> es el más rápido.</p>\n</li>\n<li>\n<p><a href=\"https://www.objectdb.com/\" target=\"_blank\" rel=\"noopener\">ObjectDb</a> es dos veces más lento que <a href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/SqliteDB.java\" target=\"_blank\" rel=\"noopener\">SqliteDB</a>.</p>\n</li>\n<li>\n<p><a href=\"https://www.oracle.com/technetwork/es/java/javadb/overview/index.html\" target=\"_blank\" rel=\"noopener\">JavaDB</a> o <a href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/DerbyDB.java\" target=\"_blank\" rel=\"noopener\">DerbyDB</a> es el más lento, unas 8 veces más lento que <a href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/SqliteDB.java\" target=\"_blank\" rel=\"noopener\">SqliteDB</a></p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n</div>","slug":"java-embedded-db-performance-comparison"},{"sectids":"","toc-placement":"auto","notitle":"","stylesheet":"","webfonts":"","prewrap":"","attribute-undefined":"drop-line","attribute-missing":"skip","iconfont-remote":"","caution-caption":"Caution","important-caption":"Important","note-caption":"Note","tip-caption":"Tip","warning-caption":"Warning","example-caption":"Example","figure-caption":"Figure","table-caption":"Table","toc-title":"Table of Contents","section-refsig":"Section","part-refsig":"Part","chapter-refsig":"Chapter","appendix-refsig":"Appendix","appendix-caption":"Appendix","untitled-label":"Untitled","version-label":"Version","last-update-label":"Last updated","docfile":"serialization-java-serializable-externalizable.en.adoc","docdir":"","docfilesuffix":".adoc","docname":"serialization-java-serializable-externalizable.en","embedded":"","asciidoctor":"","asciidoctor-version":"2.0.10","safe-mode-name":"secure","safe-mode-secure":"","safe-mode-level":20,"max-include-depth":64,"user-home":".","backend":"html5","max-attribute-value-size":4096,"linkcss":"","doctype":"article","htmlsyntax":"html","backend-html5-doctype-article":"","doctype-article":"","backend-html5":"","outfilesuffix":".html","filetype":"html","filetype-html":"","basebackend-html-doctype-article":"","basebackend-html":"","basebackend":"html","stylesdir":".","iconsdir":"./images/icons","localdate":"2020-04-26","localyear":"2020","localtime":"21:26:44 +0200","localdatetime":"2020-04-26 21:26:44 +0200","docdate":"2020-04-19","docyear":"2020","doctime":"10:46:31 +0200","docdatetime":"2020-04-19 10:46:31 +0200","doctitle":"Java serialization ways: Performance Comparison","date":"2014/05/13 17:00:00","lang":"en","toc":"","description":"Java serialization ways, performance comparison","keywords":["Java","Performance"],"java":"https://www.java.com[Java,window=_blank]","json":"https://www.json.org[JSON,window=_blank]","xml":"https://en.wikipedia.org/wiki/XML[XML,window=_blank]","serializable":"https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html[Serializable,window=_blank]","externalizable":"https://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html[Externalizable,window=_blank]","authorcount":0,"title":"Java serialization ways: Performance Comparison","summary":"Java serialization ways, performance comparison","html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_serializable\">Serializable</a></li>\n<li><a href=\"#_externalizable\">Externalizable</a></li>\n<li><a href=\"#_performance_tests_serializable_vs_externalizable\">Performance tests (Serializable vs. Externalizable)</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_implementing_serializable\">Implementing Serializable</a></li>\n<li><a href=\"#_implementing_externalizable_wrong_way\">Implementing Externalizable (wrong way)</a></li>\n<li><a href=\"#_implementing_externalizable_right_way\">Implementing Externalizable (right way)</a></li>\n<li><a href=\"#_results_analysis\">Results Analysis</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Recently I&#8217;ve had to serialize/deserialize some data in <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> binary format. Lately I use <a href=\"https://www.json.org\" target=\"_blank\" rel=\"noopener\">JSON</a> or <a href=\"https://en.wikipedia.org/wiki/XML\" target=\"_blank\" rel=\"noopener\">XML</a> formats.</p>\n</div>\n<div class=\"paragraph\">\n<p>I remember that to serialize <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> objects they must implement the <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\" target=\"_blank\" rel=\"noopener\">Serializable</a> interface, but I had also read in Internet other way, implementing the <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html\" target=\"_blank\" rel=\"noopener\">Externalizable</a> interface, then, which interface must I implement? It depends on what you want such as everything in the life.</p>\n</div>\n<div class=\"paragraph\">\n<p>When to use <a href=\"#_serializable\">Serializable</a> or <a href=\"#_externalizable\">Externalizable</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_serializable\">Serializable</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>To serialize easily. You have to write less code.</p>\n</li>\n<li>\n<p>This way has some restrictions: The object to serialize must implement the default constructor (0 args). It must be responsible to manage the parent class attributes.</p>\n</li>\n<li>\n<p>The performance is not as important, we will see more about that in <a href=\"#_performance_tests_serializable_vs_externalizable\">Performance tests (Serializable vs. Externalizable)</a>.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_externalizable\">Externalizable</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>You must implement the serialization/deserialization methods, so you have to write more code.</p>\n</li>\n<li>\n<p>When you cannot use <a href=\"#_serializable\">Serializable</a>.</p>\n</li>\n<li>\n<p>When you want to improve the performance, as we&#8217;ll see in <a href=\"#_performance_tests_serializable_vs_externalizable\">Performance tests (Serializable vs. Externalizable)</a>.</p>\n</li>\n<li>\n<p>If you have to manage the serialization of parent class attributes, then I recommend you use <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html\" target=\"_blank\" rel=\"noopener\">Externalizable</a>, because we&#8217;ll avoid a weird private methods overriding.</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeObject</span><span class=\"hljs-params\">(ObjectOutputStream oos)</span>\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readObject</span><span class=\"hljs-params\">(ObjectInputStream ois)</span></span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_performance_tests_serializable_vs_externalizable\">Performance tests (Serializable vs. Externalizable)</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"#_serializable\">Serializable</a>: Java, through introspection, guesses the types of class attributes to know how to serialize/deserialize them, but this \"magic\" is not free, it has a performance penalty.</p>\n</div>\n<div class=\"paragraph\">\n<p>When we use <a href=\"#_externalizable\">Externalizable</a> interface, we decide how to serialize/deserialize, namely we have to write the code that does it. We&#8217;ve lost ease, but also we avoid that <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> does some tasks, so if we override the methods properly, we&#8217;ll get a performance improvement.</p>\n</div>\n<div class=\"paragraph\">\n<p>To know how big is the performance difference between both interfaces, I&#8217;ve written a <a href=\"https://github.com/carlosvin/serializations-performance-java\" target=\"_blank\" rel=\"noopener\">tiny example in which we serialize an object with 2 collections with 100000 elements each one</a>. Here you can find the <a href=\"http://carlosvin.github.io/serializations-performance-java/classes/com.github.carlosvin.contacts.SerializationTest.html\" target=\"_blank\" rel=\"noopener\">tests execution results</a>. There are 3 different implementations:</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_implementing_serializable\">Implementing Serializable</h3>\n<div class=\"paragraph\">\n<p>As we mentioned above, <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> has to guess certain things. During this process it sacrifices some of performance (slowest way), in exchange we get really simple source code, the class to serialize just has to implement the <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\" target=\"_blank\" rel=\"noopener\">Serializable</a> interface.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Contacts</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Serializable</span> </span>{\n  <span class=\"hljs-comment\">// ...</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>serializing: 1133 millisecond</p>\n</li>\n<li>\n<p>deserializing: 506 millisecond</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_implementing_externalizable_wrong_way\">Implementing Externalizable (wrong way)</h3>\n<div class=\"paragraph\">\n<p>If the class implements <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html\" target=\"_blank\" rel=\"noopener\">Externalizable</a>, we must tell to <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> how it has to serialize/deserialize the class attributes. We just have to be careful, because if we did it bad, then we&#8217;ll get the worst of the both worlds: more complex implementation and bad performance, i.e: If we serialize/deserialize complex class attributes (like collections), <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> will also have to guess many things about the attributes type.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readExternal</span><span class=\"hljs-params\">(ObjectInput in)</span> <span class=\"hljs-keyword\">throws</span> IOException, ClassNotFoundException </span>{\n  setEmails((Set&lt;String&gt;) in.readObject());\n  setPhones((Set&lt;String&gt;) in.readObject());\n}\n\n<span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeExternal</span><span class=\"hljs-params\">(ObjectOutput out)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n  out.writeObject(emails);\n  out.writeObject(phones);\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>serializing: 737 millisecond</p>\n</li>\n<li>\n<p>deserializing: 367 millisecond</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_implementing_externalizable_right_way\">Implementing Externalizable (right way)</h3>\n<div class=\"paragraph\">\n<p>If we serialize one by one the collection elements, then we&#8217;ll save more time, because <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> serializes simple types, this way avoids guessing things that we actually know.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readExternal</span><span class=\"hljs-params\">(ObjectInput in)</span> <span class=\"hljs-keyword\">throws</span> IOException, ClassNotFoundException </span>{\n  emails.clear();\n  phones.clear();\n  <span class=\"hljs-keyword\">int</span> nEmails = in.readInt();\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nEmails; i++) {\n    emails.add(in.readUTF());\n  }\n  <span class=\"hljs-keyword\">int</span> nPhones = in.readInt();\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nPhones; i++) {\n    phones.add(in.readUTF());\n  }\n}\n\n<span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeExternal</span><span class=\"hljs-params\">(ObjectOutput out)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n  out.writeInt(emails.size());\n  <span class=\"hljs-keyword\">for</span> (String e : emails) {\n    out.writeUTF(e);\n  }\n  out.writeInt(phones.size());\n  <span class=\"hljs-keyword\">for</span> (String p : phones) {\n    out.writeUTF(p);\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>serializing: 204 millisecond</p>\n</li>\n<li>\n<p>deserializing: 92 millisecond</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>We&#8217;ve gained performance at expense of write more code.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_results_analysis\">Results Analysis</h3>\n<div class=\"paragraph\">\n<p>We don&#8217;t gain performance due to use an interface or the other one.</p>\n</div>\n<div class=\"paragraph\">\n<p>We gain performance because <a href=\"#_externalizable\">Externalizable</a> interface forces us to implement ourselves the guessing code, so <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> doesn&#8217;t have to do that.</p>\n</div>\n<div class=\"paragraph\">\n<p>As we have seen at <a href=\"#_implementing_externalizable_wrong_way\">Implementing Externalizable (wrong way)</a>, si no tenemos cuidado, conseguiremos una mejora poco significativa a costa de complicar nuestro código fuente.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"http://carlosvin.github.io/serializations-performance-java/classes/com.github.carlosvin.contacts.SerializationTest.html\" target=\"_blank\" rel=\"noopener\">Test results</a>.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/carlosvin/serializations-performance-java/\">Code in Github</a>.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>","slug":"serialization-java-serializable-externalizable"},{"sectids":"","toc-placement":"auto","notitle":"","stylesheet":"","webfonts":"","prewrap":"","attribute-undefined":"drop-line","attribute-missing":"skip","iconfont-remote":"","caution-caption":"Caution","important-caption":"Important","note-caption":"Note","tip-caption":"Tip","warning-caption":"Warning","example-caption":"Example","figure-caption":"Figure","table-caption":"Table","toc-title":"Table of Contents","section-refsig":"Section","part-refsig":"Part","chapter-refsig":"Chapter","appendix-refsig":"Appendix","appendix-caption":"Appendix","untitled-label":"Untitled","version-label":"Version","last-update-label":"Last updated","docfile":"serialization-java-serializable-externalizable.es.adoc","docdir":"","docfilesuffix":".adoc","docname":"serialization-java-serializable-externalizable.es","embedded":"","asciidoctor":"","asciidoctor-version":"2.0.10","safe-mode-name":"secure","safe-mode-secure":"","safe-mode-level":20,"max-include-depth":64,"user-home":".","backend":"html5","max-attribute-value-size":4096,"linkcss":"","doctype":"article","htmlsyntax":"html","backend-html5-doctype-article":"","doctype-article":"","backend-html5":"","outfilesuffix":".html","filetype":"html","filetype-html":"","basebackend-html-doctype-article":"","basebackend-html":"","basebackend":"html","stylesdir":".","iconsdir":"./images/icons","localdate":"2020-04-26","localyear":"2020","localtime":"21:26:44 +0200","localdatetime":"2020-04-26 21:26:44 +0200","docdate":"2020-04-19","docyear":"2020","doctime":"10:46:31 +0200","docdatetime":"2020-04-19 10:46:31 +0200","doctitle":"Distintas formas de serialización en Java: Comparación de rendimiento","date":"2014/05/13 17:00:00","lang":"es","toc":"","description":"Comparación de rendimientos entre distintas formas de serialización en Java","keywords":["Java","Performance"],"java":"https://www.java.com[Java,window=_blank]","json":"https://www.json.org[JSON,window=_blank]","xml":"https://en.wikipedia.org/wiki/XML[XML,window=_blank]","serializable":"https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html[Serializable,window=_blank]","externalizable":"https://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html[Externalizable,window=_blank]","authorcount":0,"title":"Distintas formas de serialización en Java: Comparación de rendimiento","summary":"Comparación de rendimientos entre distintas formas de serialización en Java","html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_serializable\">Serializable</a></li>\n<li><a href=\"#_externalizable\">Externalizable</a></li>\n<li><a href=\"#_pruebas_de_rendimiento_serializable_vs_externalizable\">Pruebas de Rendimiento (Serializable vs Externalizable)</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_implementando_el_interfaz_serializable\">Implementando el interfaz Serializable</a></li>\n<li><a href=\"#_utilizando_el_interfaz_externalizable_mal\">Utilizando el interfaz Externalizable (mal)</a></li>\n<li><a href=\"#_utilizando_el_interfaz_externalizable_correctamente\">Utilizando el interfaz Externalizable (correctamente)</a></li>\n<li><a href=\"#_analizando_los_resultados\">Analizando los resultados</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Hace poco, he tenido que serializar/deserializar unos datos en <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a>, hacía mucho que no lo hacía en formato binario directamente (ultimamente he utilizado <a href=\"https://www.json.org\" target=\"_blank\" rel=\"noopener\">JSON</a> o <a href=\"https://en.wikipedia.org/wiki/XML\" target=\"_blank\" rel=\"noopener\">XML</a>). Recordaba haber serializado objetos implementando el interfaz <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\" target=\"_blank\" rel=\"noopener\">Serializable</a>, pero había visto por Internet otra forma implementando el interfaz <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html\" target=\"_blank\" rel=\"noopener\">Externalizable</a>, ¿cuál interfaz utilizo? Pues depende lo que quieras y necesites, como todo.</p>\n</div>\n<div class=\"paragraph\">\n<p>Veamos cuándo utilizar <a href=\"#_serializable\">Serializable</a> o <a href=\"#_externalizable\">Externalizable</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_serializable\">Serializable</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Cuando quieras escribir poco código, es la forma fácil.</p>\n</li>\n<li>\n<p>Pero tiene algunas restricciones: El objeto a serializar debe implementar el constructor por defecto. Debe hacerse responsable de los atributos no accesibles de la clase padre.</p>\n</li>\n<li>\n<p>Cuando no te importe mucho el rendimiento, como veremos en la sección <a href=\"#_pruebas_de_rendimiento_serializable_vs_externalizable\">Pruebas de Rendimiento (Serializable vs Externalizable)</a>.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_externalizable\">Externalizable</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Vas a tener que implementar tú mismo los métodos de serialización.</p>\n</li>\n<li>\n<p>Cuando no puedas utilizar <a href=\"#_serializable\">Serializable</a>.</p>\n</li>\n<li>\n<p>Cuando quieras obtener un mejor rendimiento, como veremos en la sección <a href=\"#_pruebas_de_rendimiento_serializable_vs_externalizable\">Pruebas de Rendimiento (Serializable vs Externalizable)</a>.</p>\n</li>\n<li>\n<p>Si tienes que encargarte de la serialización de los atributos de la clase padre, te recomiendo utilizar <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html\" target=\"_blank\" rel=\"noopener\">Externalizable</a>, porque evitamos una sobrescritura extraña de métodos privados.</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeObject</span><span class=\"hljs-params\">(ObjectOutputStream oos)</span>\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readObject</span><span class=\"hljs-params\">(ObjectInputStream ois)</span></span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_pruebas_de_rendimiento_serializable_vs_externalizable\">Pruebas de Rendimiento (Serializable vs Externalizable)</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>El interfaz <a href=\"#_serializable\">Serializable</a> utilizando la introspección de <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a>, adivina los tipos de los atributos de las clases que va a serializar/deserializar, pero esta \"magia\" tiene una penalización en el rendimiento.</p>\n</div>\n<div class=\"paragraph\">\n<p>Al utilizar el interfaz <a href=\"#_externalizable\">Externalizable</a> somos nosotros los que decidimos cómo serializar/deserializar los objetos, es decir, tenemos que escribir nosotros el código que hace esto. Hemos perdido comodidad, pero evitamos que <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> haga algunas tareas y, si sobrescribimos correctamente los métodos del interfaz <a href=\"#_externalizable\">Externalizable</a>, conseguiremos una mejora de rendimiento.</p>\n</div>\n<div class=\"paragraph\">\n<p>Para saber cuánto es la diferencia de rendimiento, he escrito un <a href=\"https://github.com/carlosvin/serializations-performance-java\" target=\"_blank\" rel=\"noopener\">pequeño ejemplo en el que se serializa un objeto con dos colecciones con 100000 emails y 100000 teléfonos</a>. He contemplado 3 casos:</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_implementando_el_interfaz_serializable\">Implementando el interfaz Serializable</h3>\n<div class=\"paragraph\">\n<p>Como dijimos más arriba, cuando implementamos el interfaz <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\" target=\"_blank\" rel=\"noopener\">Serializable</a>, <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> tiene que adivinar ciertas cosas, en este proceso sacrifica algo de rendimiento (es el que más tarda), a cambio ĺo único que tenemos que hacer es que nuestra clase implemente el interfaz <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\" target=\"_blank\" rel=\"noopener\">Serializable</a>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Contacts</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Serializable</span> </span>{\n  <span class=\"hljs-comment\">// ...</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>1133 milisegundos en serializar</p>\n</li>\n<li>\n<p>506 milisegundos en deserializar</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_utilizando_el_interfaz_externalizable_mal\">Utilizando el interfaz Externalizable (mal)</h3>\n<div class=\"paragraph\">\n<p>En este caso somos nosotros los encargados de \"decir\" a <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> cómo debe serializar/deserializar, pero debemos ser cuidadosos, de lo contrario podemos quedarnos con lo peor de los dos mundos, por ejemplo: Si simplemente serializamos/deserializamos los atributos de la clase, y estos son atributos complejos (como colecciones), <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> también tiene que adivinar bastantes cosas y también sacrificamos algo de rendimiento y además hemos tenido que escribir más código.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readExternal</span><span class=\"hljs-params\">(ObjectInput in)</span> <span class=\"hljs-keyword\">throws</span> IOException, ClassNotFoundException </span>{\n  setEmails((Set&lt;String&gt;) in.readObject());\n  setPhones((Set&lt;String&gt;) in.readObject());\n}\n\n<span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeExternal</span><span class=\"hljs-params\">(ObjectOutput out)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n  out.writeObject(emails);\n  out.writeObject(phones);\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>737 milisegundos en serializar</p>\n</li>\n<li>\n<p>367 milisegundos en deserializar</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_utilizando_el_interfaz_externalizable_correctamente\">Utilizando el interfaz Externalizable (correctamente)</h3>\n<div class=\"paragraph\">\n<p>Si serializamos/deserializamos uno por uno los elementos de las colecciones, ahorramos aún más tiempo, porque <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> está serializando tipos más simples (en este caso java.lang.String).</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readExternal</span><span class=\"hljs-params\">(ObjectInput in)</span> <span class=\"hljs-keyword\">throws</span> IOException, ClassNotFoundException </span>{\n  emails.clear();\n  phones.clear();\n  <span class=\"hljs-keyword\">int</span> nEmails = in.readInt();\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nEmails; i++) {\n    emails.add(in.readUTF());\n  }\n  <span class=\"hljs-keyword\">int</span> nPhones = in.readInt();\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nPhones; i++) {\n    phones.add(in.readUTF());\n  }\n}\n\n<span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeExternal</span><span class=\"hljs-params\">(ObjectOutput out)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n  out.writeInt(emails.size());\n  <span class=\"hljs-keyword\">for</span> (String e : emails) {\n    out.writeUTF(e);\n  }\n  out.writeInt(phones.size());\n  <span class=\"hljs-keyword\">for</span> (String p : phones) {\n    out.writeUTF(p);\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>204 milisegundos en serializar</p>\n</li>\n<li>\n<p>92 milisegundos en deserializar</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Hemos ganado rendimiento a costa de escribir un poco más de código.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_analizando_los_resultados\">Analizando los resultados</h3>\n<div class=\"paragraph\">\n<p>Por el hecho de utilizar un interfaz u otro, no ganamos rendimiento.</p>\n</div>\n<div class=\"paragraph\">\n<p>Ganamos rendimiento porque el interfaz <a href=\"#_externalizable\">Externalizable</a> nos \"obliga\" a implementar parte de la serialización y quitamos esta carga a <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Aunque como hemos visto en <a href=\"#_utilizando_el_interfaz_externalizable_mal\">Utilizando el interfaz Externalizable (mal)</a>, si no tenemos cuidado, conseguiremos una mejora poco significativa a costa de complicar nuestro código fuente.</p>\n</div>\n<div class=\"paragraph\">\n<p>A continuación os dejo los enlaces a:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"http://carlosvin.github.io/serializations-performance-java/classes/com.github.carlosvin.contacts.SerializationTest.html\">Resultados de los tests</a>.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/carlosvin/serializations-performance-java/\">Código en github</a>.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>","slug":"serialization-java-serializable-externalizable"}]}