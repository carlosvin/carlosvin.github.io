<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Carlos says "bla bla" (Posts about C++)</title><link>https://carlosvin.github.io/</link><description></description><atom:link href="https://carlosvin.github.io/categories/c%2B%2B.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 24 Sep 2017 12:06:24 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Choosing a Modern C++ stack</title><link>https://carlosvin.github.io/posts/choosing-modern-cpp-stack/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;I'm starting a new project in C++, but I've run into a pair of questions before start:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Which build system should I use?&lt;/li&gt;
&lt;li&gt;Which unit testing framework?&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#choosing-build-system-meson" id="id1"&gt;Choosing Build System (Meson)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#unit-testing-framework" id="id2"&gt;Unit Testing Framework&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#doctest-a-catch-alternative" id="id3"&gt;doctest: A Catch alternative&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#example" id="id4"&gt;Example&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#project-output-artifacts" id="id5"&gt;Project output artifacts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#project-structure-fork-project" id="id6"&gt;Project structure (Fork project)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="choosing-build-system-meson"&gt;
&lt;h2&gt;Choosing Build System (&lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt;)&lt;/h2&gt;
&lt;p&gt;I have used before Make, Maven, Scons, Gradle and Autotools.&lt;/p&gt;
&lt;p&gt;But I have some reasons to try find something else.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Autotools&lt;/dt&gt;
&lt;dd&gt;It is not easy to configure and maintain. There are several configuration files and several configuration steps.&lt;/dd&gt;
&lt;dt&gt;Gradle&lt;/dt&gt;
&lt;dd&gt;C++ feature is still incubating. Not very fast. You can check a similar example project at &lt;a class="reference external" href="https://carlosvin.github.io/posts/gradle-cpp/"&gt;Build C++ project with Gradle&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;Make&lt;/dt&gt;
&lt;dd&gt;I don't love the syntax.
Files tends to get messy as project grows.&lt;/dd&gt;
&lt;dt&gt;Scons&lt;/dt&gt;
&lt;dd&gt;It is just slow.&lt;/dd&gt;
&lt;dt&gt;Maven&lt;/dt&gt;
&lt;dd&gt;It is slow and you might end up "&lt;em&gt;Javatizing&lt;/em&gt;" your C++ project structure.&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;I've listed just things I don't like, those projects have other great features.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now I'm considering &lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt; or &lt;a class="reference external" href="https://cmake.org/"&gt;CMake&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://cmake.org/"&gt;CMake&lt;/a&gt; has a big advantage over &lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt;, it is mature and widely used in many projects, which means there are many examples and it will fulfill your C++ project building needs.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt; is a young project compared with &lt;a class="reference external" href="https://cmake.org/"&gt;CMake&lt;/a&gt;, but it is growing quite fast and it has been adopted in other big projects like &lt;a class="reference external" href="https://www.gnome.org/"&gt;Gnome&lt;/a&gt;, they have an initiative to &lt;a class="reference external" href="https://wiki.gnome.org/Initiatives/GnomeGoals/MesonPorting"&gt;port from Autotools to Meson&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've chosen &lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt; because:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Syntax is really clear to me, when I read &lt;cite&gt;meson.build&lt;/cite&gt; file I can quickly understand what is happening during build process.&lt;/li&gt;
&lt;li&gt;It is fast. Altought it is written in &lt;a class="reference external" href="https://python.org/"&gt;Python&lt;/a&gt;, it generates a &lt;a class="reference external" href="https://ninja-build.org/"&gt;Ninja&lt;/a&gt; build project. First time you configure the project you has to run &lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt;, but for building or testing you are actually running &lt;a class="reference external" href="https://ninja-build.org/"&gt;Ninja&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_b5d3ddfb22654f519109bc6571728671-1"&gt;&lt;/a&gt;$ meson build . &lt;span class="c1"&gt;# first time you configure the project&lt;/span&gt;
&lt;a name="rest_code_b5d3ddfb22654f519109bc6571728671-2"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; build
&lt;a name="rest_code_b5d3ddfb22654f519109bc6571728671-3"&gt;&lt;/a&gt;$ ninja build   &lt;span class="c1"&gt;# each time you build it&lt;/span&gt;
&lt;a name="rest_code_b5d3ddfb22654f519109bc6571728671-4"&gt;&lt;/a&gt;$ ninja &lt;span class="nb"&gt;test&lt;/span&gt;    &lt;span class="c1"&gt;# each time you run tests&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;I've found two interesting comparisons about available C++ build systems, they might be a little be biased because those comparisons come from &lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt; and &lt;a class="reference external" href="http://scons.org/"&gt;Scons&lt;/a&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bitbucket.org/scons/scons/wiki/SconsVsOtherBuildTools"&gt;C++ build systems comparison from Scons&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://mesonbuild.com/Simple-comparison.html"&gt;C++ build systems comparison from Meson&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="unit-testing-framework"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#id2"&gt;Unit Testing Framework&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have used some &lt;a class="reference external" href="https://en.wikipedia.org/wiki/XUnit"&gt;xUnit&lt;/a&gt; based libraries like &lt;a class="reference external" href="https://github.com/unittest-cpp/unittest-cpp"&gt;UnitTest++&lt;/a&gt;, &lt;a class="reference external" href="http://cpputest.github.io/"&gt;CppUTest&lt;/a&gt; or &lt;a class="reference external" href="https://github.com/google/googletest"&gt;Google Test&lt;/a&gt; which match perfectly with &lt;a class="reference external" href="https://github.com/google/googletest/tree/master/googlemock"&gt;Google Mock&lt;/a&gt;.
If you want a safe bet that fulfills almost of your testing needs I highly recommend &lt;a class="reference external" href="https://github.com/google/googletest"&gt;Google Test&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But time ago I found a testing framework with some interesting features, &lt;a class="reference external" href="https://github.com/philsquared/Catch"&gt;Catch&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It is just a header file with no external dependencies, so very easy to start (wget + include downloaded file).&lt;/li&gt;
&lt;li&gt;You can use normal unit test style or &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Behavior-driven_development"&gt;BDD&lt;/a&gt;-style&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to know more about &lt;a class="reference external" href="https://github.com/philsquared/Catch"&gt;Catch&lt;/a&gt;, I recommend you to give it a try, it is a matter of 2 minutes to have a &lt;a class="reference external" href="https://github.com/philsquared/Catch/blob/master/docs/tutorial.md#writing-tests"&gt;simple example up and running&lt;/a&gt;. You can also read some interesting articles like &lt;a class="reference external" href="https://github.com/philsquared/Catch/blob/master/docs/why-catch.md"&gt;Why do we need yet another C++ test framework?&lt;/a&gt; or &lt;a class="reference external" href="http://blog.coldflake.com/posts/Testing-C++-with-a-new-Catch/"&gt;Testing C++ With A New Catch&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="doctest-a-catch-alternative"&gt;
&lt;h3&gt;&lt;a class="reference external" href="https://github.com/onqtam/doctest"&gt;doctest&lt;/a&gt;: A &lt;a class="reference external" href="https://github.com/philsquared/Catch"&gt;Catch&lt;/a&gt; alternative&lt;/h3&gt;
&lt;p&gt;There is another testing framework named &lt;a class="reference external" href="https://github.com/onqtam/doctest"&gt;doctest&lt;/a&gt;, with same benefits as &lt;a class="reference external" href="https://github.com/philsquared/Catch"&gt;Catch&lt;/a&gt;, but it promises to be faster and lighter (&lt;a class="reference external" href="https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md"&gt;benchmark results&lt;/a&gt;) than &lt;a class="reference external" href="https://github.com/philsquared/Catch"&gt;Catch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/onqtam/doctest"&gt;doctest&lt;/a&gt; is modeled after &lt;a class="reference external" href="https://github.com/philsquared/Catch"&gt;Catch&lt;/a&gt; and some parts of the code have been taken directly, but there are &lt;a class="reference external" href="https://github.com/onqtam/doctest/blob/master/doc/markdown/faq.md#how-is-doctest-different-from-catch"&gt;differences&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It hasn't been easy to decide, both are really similar, you can &lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/pull/1/files#diff-d22d1e18ecbe7ba34523db56b011bcfe"&gt;check here differences&lt;/a&gt; between project using &lt;a class="reference external" href="https://github.com/onqtam/doctest"&gt;doctest&lt;/a&gt; and project using &lt;a class="reference external" href="https://github.com/philsquared/Catch"&gt;Catch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've finally chosen &lt;a class="reference external" href="https://github.com/onqtam/doctest"&gt;doctest&lt;/a&gt; because it promises to be faster: &lt;a class="reference external" href="https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md"&gt;benchmark results&lt;/a&gt;.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;I've created project using both frameworks you can find them in corresponding branches: &lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/tree/doctest"&gt;doctest branch&lt;/a&gt; or &lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/tree/catch"&gt;catch branch&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition hint"&gt;
&lt;p class="first admonition-title"&gt;Hint&lt;/p&gt;
&lt;p class="last"&gt;You can see diferencies between projects at: &lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/pull/1"&gt;https://github.com/carlosvin/uuid-cpp/pull/1&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="example"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#id4"&gt;Example&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I've created an example to illustrate this article: &lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp"&gt;https://github.com/carlosvin/uuid-cpp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is a basic implementation of UUID pseudo-random generator based on &lt;a class="reference external" href="http://www.cplusplus.com/reference/random/mt19937/"&gt;mt19937&lt;/a&gt; which is not cryptographically secure.&lt;/p&gt;
&lt;div class="section" id="project-output-artifacts"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#id5"&gt;Project output artifacts&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Shared library: &lt;code&gt;libuuid&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Header library for developers who want to use the shared library: &lt;code&gt;include/Uuid.h&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Executable &lt;code&gt;uuidgen&lt;/code&gt; (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Universally_unique_identifier"&gt;UUID&lt;/a&gt; generator).&lt;/li&gt;
&lt;li&gt;Test executable (not installed). It tests shared library.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, if you execute &lt;code&gt;ninja install&lt;/code&gt; on Linux, you will get something like:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_3d3d1e2585ec44379b9fbc3cb35165b9-1"&gt;&lt;/a&gt;/usr/local/lib/libuuid.so
&lt;a name="rest_code_3d3d1e2585ec44379b9fbc3cb35165b9-2"&gt;&lt;/a&gt;/usr/local/include/Uuid.h
&lt;a name="rest_code_3d3d1e2585ec44379b9fbc3cb35165b9-3"&gt;&lt;/a&gt;/usr/local/bin/uuidgen
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="project-structure-fork-project"&gt;
&lt;h3&gt;Project structure (&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp"&gt;Fork project&lt;/a&gt;)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/meson.build"&gt;meson.build&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Root project file configuration. It defines project properties and subdirectories.&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_c05ee4c3d1734a969dbf26d6a5671bca-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_c05ee4c3d1734a969dbf26d6a5671bca-2"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'cpp-meson-example'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# project name&lt;/span&gt;
&lt;a name="rest_code_c05ee4c3d1734a969dbf26d6a5671bca-3"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'cpp'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# C++ project, e.g: for C project&lt;/span&gt;
&lt;a name="rest_code_c05ee4c3d1734a969dbf26d6a5671bca-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'1.0.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c05ee4c3d1734a969dbf26d6a5671bca-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;license&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'MIT'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_c05ee4c3d1734a969dbf26d6a5671bca-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;default_options&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'cpp_std=c++11'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# compile for C++&lt;/span&gt;
&lt;a name="rest_code_c05ee4c3d1734a969dbf26d6a5671bca-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_c05ee4c3d1734a969dbf26d6a5671bca-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# it will be referred from subdir projects&lt;/span&gt;
&lt;a name="rest_code_c05ee4c3d1734a969dbf26d6a5671bca-9"&gt;&lt;/a&gt;&lt;span class="n"&gt;inc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;include_directories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'include'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c05ee4c3d1734a969dbf26d6a5671bca-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_c05ee4c3d1734a969dbf26d6a5671bca-11"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# meson will try to find a meson.build file inside following directories&lt;/span&gt;
&lt;a name="rest_code_c05ee4c3d1734a969dbf26d6a5671bca-12"&gt;&lt;/a&gt;&lt;span class="n"&gt;subdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'include'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c05ee4c3d1734a969dbf26d6a5671bca-13"&gt;&lt;/a&gt;&lt;span class="n"&gt;subdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'src'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c05ee4c3d1734a969dbf26d6a5671bca-14"&gt;&lt;/a&gt;&lt;span class="n"&gt;subdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/include/"&gt;include&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;meson.build&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Subdirectory build configuration file.&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_b708ef7ab1354fc7859896f15f32c624-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Select header files to be installed&lt;/span&gt;
&lt;a name="rest_code_b708ef7ab1354fc7859896f15f32c624-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;install_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Uuid.h'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/include/Uuid.h"&gt;Uuid.h&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Header file, it is the library interface definition which will be included from projects using that library&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code cpp"&gt;&lt;a name="rest_code_ef6f646c0b944b738501160ad69e991e-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;ids&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ef6f646c0b944b738501160ad69e991e-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_ef6f646c0b944b738501160ad69e991e-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Uuid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ef6f646c0b944b738501160ad69e991e-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_ef6f646c0b944b738501160ad69e991e-5"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/src"&gt;src&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/src/meson.build"&gt;meson.build (src)&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;It declares 2 output artifacts &lt;code&gt;libuuid&lt;/code&gt; and &lt;code&gt;uuidgen&lt;/code&gt;.&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_e7a2783d72be4ae2a576992aa7380c59-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;libuuid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shared_library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_e7a2783d72be4ae2a576992aa7380c59-2"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'uuid'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# library name&lt;/span&gt;
&lt;a name="rest_code_e7a2783d72be4ae2a576992aa7380c59-3"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'Uuid.cpp'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# source files to be compile&lt;/span&gt;
&lt;a name="rest_code_e7a2783d72be4ae2a576992aa7380c59-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;include_directories&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# previously declared include directories in root :code:`meson.build`&lt;/span&gt;
&lt;a name="rest_code_e7a2783d72be4ae2a576992aa7380c59-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# :code:`libuuid` will be part of project installation&lt;/span&gt;
&lt;a name="rest_code_e7a2783d72be4ae2a576992aa7380c59-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_e7a2783d72be4ae2a576992aa7380c59-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;uuidgen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;executable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_e7a2783d72be4ae2a576992aa7380c59-8"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'uuidgen'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# executable name&lt;/span&gt;
&lt;a name="rest_code_e7a2783d72be4ae2a576992aa7380c59-9"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'main.cpp'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# source files to compile&lt;/span&gt;
&lt;a name="rest_code_e7a2783d72be4ae2a576992aa7380c59-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;include_directories&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# previously declared include directories in root :code:`meson.build`&lt;/span&gt;
&lt;a name="rest_code_e7a2783d72be4ae2a576992aa7380c59-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;link_with&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;libuuid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# linking executable with shared previously declared shared library :code:`libuuid`&lt;/span&gt;
&lt;a name="rest_code_e7a2783d72be4ae2a576992aa7380c59-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# :code:`uuidgen` executable be part of project installation&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/src/main.cpp"&gt;main.cpp&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Entry point for main executable &lt;code&gt;uuidgen&lt;/code&gt;&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code cpp"&gt;&lt;a name="rest_code_6946246e7b494891b452f190f401ff1c-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Uuid.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_6946246e7b494891b452f190f401ff1c-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_6946246e7b494891b452f190f401ff1c-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_6946246e7b494891b452f190f401ff1c-4"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_6946246e7b494891b452f190f401ff1c-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_6946246e7b494891b452f190f401ff1c-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Uuid&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_6946246e7b494891b452f190f401ff1c-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_str&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_6946246e7b494891b452f190f401ff1c-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_6946246e7b494891b452f190f401ff1c-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/src/Uuid.cpp"&gt;Uuid.cpp&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Implementation of declared class in header file.&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code cpp"&gt;&lt;a name="rest_code_08f99562e7004a95b1339583c60a760f-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Uuid.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_08f99562e7004a95b1339583c60a760f-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_08f99562e7004a95b1339583c60a760f-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;Uuid&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Uuid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_08f99562e7004a95b1339583c60a760f-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/test/"&gt;test&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/test/meson.build"&gt;meson.build (test)&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;File to configure tests build process.&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_712bb908999d4840926bca7c2d33702a-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;testexe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;executable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_712bb908999d4840926bca7c2d33702a-2"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'testexe'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# test executable name&lt;/span&gt;
&lt;a name="rest_code_712bb908999d4840926bca7c2d33702a-3"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'uuid_test.cpp'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# tests source files to be compiled&lt;/span&gt;
&lt;a name="rest_code_712bb908999d4840926bca7c2d33702a-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;include_directories&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# declared include directories in root :code:`meson.build`&lt;/span&gt;
&lt;a name="rest_code_712bb908999d4840926bca7c2d33702a-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;link_with&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;libuuid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# link test executable with previously declared shared library :code:`libuuid`&lt;/span&gt;
&lt;a name="rest_code_712bb908999d4840926bca7c2d33702a-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_712bb908999d4840926bca7c2d33702a-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# test execution&lt;/span&gt;
&lt;a name="rest_code_712bb908999d4840926bca7c2d33702a-8"&gt;&lt;/a&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Uuid test'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;testexe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_712bb908999d4840926bca7c2d33702a-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_712bb908999d4840926bca7c2d33702a-10"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# we can specify other test execution passing arguments or environment variables&lt;/span&gt;
&lt;a name="rest_code_712bb908999d4840926bca7c2d33702a-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Uuid test with args and env'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;testexe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'arg1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'arg2'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'FOO=bar'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;doctest.h&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/onqtam/doctest"&gt;doctest&lt;/a&gt; library in a single header file. You can try to automate library installation as part of your build process, but I haven't figure out yet a way to do it with &lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt;. For now I've installed it manually:&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code bash"&gt;&lt;a name="rest_code_8907ecd9aefe40fcac6e3063528388a4-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;a name="rest_code_8907ecd9aefe40fcac6e3063528388a4-2"&gt;&lt;/a&gt;wget https://raw.githubusercontent.com/onqtam/doctest/master/doctest/doctest.h
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/test/uuid_test.cpp"&gt;uuid_test.cpp&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Tests implementation.&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code cpp"&gt;&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-1"&gt;&lt;/a&gt; &lt;span class="c1"&gt;// This tells doctest to provide a main() - only do this in one cpp file&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-4"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"doctest.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-5"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Uuid.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-6"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;constexpr&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;MAX_ITERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;TEST_CASE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;"Uuid"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MAX_ITERS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-12"&gt;&lt;/a&gt;        &lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Uuid&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-13"&gt;&lt;/a&gt;        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;uuid_str&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_str&lt;/span&gt;&lt;span class="p"&gt;()};&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-15"&gt;&lt;/a&gt;        &lt;span class="n"&gt;MESSAGE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid_str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-16"&gt;&lt;/a&gt;        &lt;span class="n"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-17"&gt;&lt;/a&gt;        &lt;span class="n"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;least&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-18"&gt;&lt;/a&gt;        &lt;span class="n"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid_str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-19"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-20"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-22"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// BDD style&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-24"&gt;&lt;/a&gt;&lt;span class="n"&gt;SCENARIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;"UUID creation"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-26"&gt;&lt;/a&gt;    &lt;span class="n"&gt;GIVEN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;"A random UUID "&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-27"&gt;&lt;/a&gt;        &lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Uuid&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-28"&gt;&lt;/a&gt;        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;uuid_str&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_str&lt;/span&gt;&lt;span class="p"&gt;()};&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-29"&gt;&lt;/a&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-30"&gt;&lt;/a&gt;        &lt;span class="n"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid_str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-32"&gt;&lt;/a&gt;        &lt;span class="n"&gt;WHEN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;"get the most and least"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-33"&gt;&lt;/a&gt;            &lt;span class="n"&gt;THEN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;"should be more than 0"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-34"&gt;&lt;/a&gt;                &lt;span class="n"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-35"&gt;&lt;/a&gt;                &lt;span class="n"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;least&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-36"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-37"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-38"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_fd07b73853a645aa9c026b5ce15a91bf-39"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Build Software</category><category>Build System</category><category>C++</category><category>Catch</category><category>Meson</category><category>Unit Testing</category><guid>https://carlosvin.github.io/posts/choosing-modern-cpp-stack/</guid><pubDate>Fri, 15 Sep 2017 18:50:00 GMT</pubDate></item><item><title>Filesystem in C++17</title><link>https://carlosvin.github.io/posts/recursive-directory-iterator/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#id4"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since C++17 new filesystem abstractions will be added to C++ environment. So far they are available as
&lt;a class="reference external" href="http://en.cppreference.com/w/cpp/experimental"&gt;Experimental C++ Features&lt;/a&gt;. If you want to dig more about this new library, here it is the &lt;a class="reference external" href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4100.pdf"&gt;final draft of File System Technical Specification&lt;/a&gt;.&lt;/p&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#introduction" id="id4"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#gettting-started-with-experimental-filesystem-features-c-17-g" id="id5"&gt;Gettting started with Experimental Filesystem Features C++17 (g++)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#c-17-filesystem-features" id="id6"&gt;C++17 Filesystem Features&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#std-filesystem-path" id="id7"&gt;std::filesystem::path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#directory-separator" id="id8"&gt;Directory separator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#directory-separator-operator" id="id9"&gt;Directory Separator Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#create-remove-directories" id="id10"&gt;Create/Remove Directories&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#full-example-recursive-directory-iterator" id="id11"&gt;Full example: Recursive Directory Iterator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="gettting-started-with-experimental-filesystem-features-c-17-g"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#id5"&gt;Gettting started with Experimental Filesystem Features C++17 (g++)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We just have to "tell" compiler that we write C++17 code (&lt;strong&gt;-c++1z&lt;/strong&gt;) and it has to add &lt;em&gt;standard library with filesystem library&lt;/em&gt; (&lt;strong&gt;-lstdc++fs&lt;/strong&gt;).&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_802f9c927f51444b82ca73fc1af8666d-1"&gt;&lt;/a&gt;g++ -std&lt;span class="o"&gt;=&lt;/span&gt;c++1z main.cpp -lstdc++fs &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./a.out
&lt;/pre&gt;&lt;p&gt;Let's see a simple example with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;std::filesystem::path&lt;/span&gt;&lt;/tt&gt; class.&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_0f1e1d57aa8344939fa786e735787aed-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;experimental/filesystem&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_0f1e1d57aa8344939fa786e735787aed-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_0f1e1d57aa8344939fa786e735787aed-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_0f1e1d57aa8344939fa786e735787aed-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;experimental&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;filesystem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_0f1e1d57aa8344939fa786e735787aed-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_0f1e1d57aa8344939fa786e735787aed-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_0f1e1d57aa8344939fa786e735787aed-7"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_0f1e1d57aa8344939fa786e735787aed-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_0f1e1d57aa8344939fa786e735787aed-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;aPath&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"./path/to/file.txt"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;a name="rest_code_0f1e1d57aa8344939fa786e735787aed-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_0f1e1d57aa8344939fa786e735787aed-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Parent path: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;aPath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent_path&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_0f1e1d57aa8344939fa786e735787aed-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Filename: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;aPath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_0f1e1d57aa8344939fa786e735787aed-13"&gt;&lt;/a&gt;    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Extension: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;aPath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_0f1e1d57aa8344939fa786e735787aed-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_0f1e1d57aa8344939fa786e735787aed-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_0f1e1d57aa8344939fa786e735787aed-16"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a class="reference external" href="http://coliru.stacked-crooked.com/a/9f8bebb8b7f0fbe7"&gt;Compile and run: Basic C++17 example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Run output is:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_6de6b13560474dc8a590572838d430ed-1"&gt;&lt;/a&gt;$ g++ -std&lt;span class="o"&gt;=&lt;/span&gt;c++1z main.cpp -lstdc++fs &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./a.out
&lt;a name="rest_code_6de6b13560474dc8a590572838d430ed-2"&gt;&lt;/a&gt;$ ./a.out
&lt;a name="rest_code_6de6b13560474dc8a590572838d430ed-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_6de6b13560474dc8a590572838d430ed-4"&gt;&lt;/a&gt;Parent path: &lt;span class="s2"&gt;"./path/to"&lt;/span&gt;
&lt;a name="rest_code_6de6b13560474dc8a590572838d430ed-5"&gt;&lt;/a&gt;Filename: &lt;span class="s2"&gt;"file.txt"&lt;/span&gt;
&lt;a name="rest_code_6de6b13560474dc8a590572838d430ed-6"&gt;&lt;/a&gt;Extension: &lt;span class="s2"&gt;".txt"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="c-17-filesystem-features"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#id6"&gt;C++17 Filesystem Features&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this section, we are going to explain some &lt;a class="reference external" href="http://en.cppreference.com/w/cpp/filesystem"&gt;std::filesystem&lt;/a&gt; features with examples, which will help us to highlight differences between C++11 and C++17 so we can get a better idea about what this new library will supply and how it might make developer's work easier.&lt;/p&gt;
&lt;div class="section" id="std-filesystem-path"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#id7"&gt;std::filesystem::path&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Upper we have seen a tiny &lt;a class="reference external" href="http://coliru.stacked-crooked.com/a/9f8bebb8b7f0fbe7"&gt;use case for std::filesystem::path&lt;/a&gt;. That is a quite powerful and convenient feature that supplies an multi-platform abstraction for paths to files using the correct directory path separator depending on the platform we are building our application for (&lt;tt class="docutils literal"&gt;\&lt;/tt&gt; for Windows based systems and &lt;tt class="docutils literal"&gt;/&lt;/tt&gt; Unix based systems).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="directory-separator"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#id8"&gt;Directory separator&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When we want our application to use the correct directory separator in C++11, we could use conditional macro declaration:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_5e7dfb0a7baf43ffb950c3431cc2c259-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_5e7dfb0a7baf43ffb950c3431cc2c259-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_5e7dfb0a7baf43ffb950c3431cc2c259-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_5e7dfb0a7baf43ffb950c3431cc2c259-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_5e7dfb0a7baf43ffb950c3431cc2c259-5"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#ifdef _WIN32&lt;/span&gt;
&lt;a name="rest_code_5e7dfb0a7baf43ffb950c3431cc2c259-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;SEP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_5e7dfb0a7baf43ffb950c3431cc2c259-7"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#else&lt;/span&gt;
&lt;a name="rest_code_5e7dfb0a7baf43ffb950c3431cc2c259-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;SEP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_5e7dfb0a7baf43ffb950c3431cc2c259-9"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;a name="rest_code_5e7dfb0a7baf43ffb950c3431cc2c259-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_5e7dfb0a7baf43ffb950c3431cc2c259-11"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_5e7dfb0a7baf43ffb950c3431cc2c259-12"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_5e7dfb0a7baf43ffb950c3431cc2c259-13"&gt;&lt;/a&gt;    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Separator in my system "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;SEP&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_5e7dfb0a7baf43ffb950c3431cc2c259-14"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_5e7dfb0a7baf43ffb950c3431cc2c259-15"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a class="reference external" href="http://coliru.stacked-crooked.com/a/5023ee989105fc54"&gt;Compile and run: C++11 separator example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With C++17 it is just simpler:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_4d07fc0011774d65b750b654f5d6de6a-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;experimental/filesystem&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_4d07fc0011774d65b750b654f5d6de6a-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_4d07fc0011774d65b750b654f5d6de6a-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_4d07fc0011774d65b750b654f5d6de6a-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;experimental&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;filesystem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_4d07fc0011774d65b750b654f5d6de6a-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_4d07fc0011774d65b750b654f5d6de6a-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_4d07fc0011774d65b750b654f5d6de6a-7"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_4d07fc0011774d65b750b654f5d6de6a-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_4d07fc0011774d65b750b654f5d6de6a-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Separator in my system "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;preferred_separator&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_4d07fc0011774d65b750b654f5d6de6a-10"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_4d07fc0011774d65b750b654f5d6de6a-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a class="reference external" href="http://coliru.stacked-crooked.com/a/1f2f63b3f5597d05"&gt;Compile and run: C++17 separator example&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="directory-separator-operator"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#id9"&gt;Directory Separator Operator&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://en.cppreference.com/w/cpp/filesystem/path"&gt;std::filesystem::path&lt;/a&gt; implements &lt;strong&gt;/&lt;/strong&gt; operator which allows to easily concatenate paths to files and directories.&lt;/p&gt;
&lt;p&gt;When we want to concatenate paths in C++11, we have to add extra logic to avoid adding duplicate separators and to select the correct separator for target platform:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_f55fe7580e0b4fe1b5047be61264907b-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_f55fe7580e0b4fe1b5047be61264907b-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_f55fe7580e0b4fe1b5047be61264907b-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_f55fe7580e0b4fe1b5047be61264907b-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_f55fe7580e0b4fe1b5047be61264907b-5"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#ifdef _WIN32&lt;/span&gt;
&lt;a name="rest_code_f55fe7580e0b4fe1b5047be61264907b-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;SEP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_f55fe7580e0b4fe1b5047be61264907b-7"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#else&lt;/span&gt;
&lt;a name="rest_code_f55fe7580e0b4fe1b5047be61264907b-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;SEP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_f55fe7580e0b4fe1b5047be61264907b-9"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;a name="rest_code_f55fe7580e0b4fe1b5047be61264907b-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_f55fe7580e0b4fe1b5047be61264907b-11"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_f55fe7580e0b4fe1b5047be61264907b-12"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_f55fe7580e0b4fe1b5047be61264907b-13"&gt;&lt;/a&gt;    &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;a name="rest_code_f55fe7580e0b4fe1b5047be61264907b-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"var/www/"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;a name="rest_code_f55fe7580e0b4fe1b5047be61264907b-15"&gt;&lt;/a&gt;    &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"index.html"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;a name="rest_code_f55fe7580e0b4fe1b5047be61264907b-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_f55fe7580e0b4fe1b5047be61264907b-17"&gt;&lt;/a&gt;    &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;pathToIndex&lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;
&lt;a name="rest_code_f55fe7580e0b4fe1b5047be61264907b-18"&gt;&lt;/a&gt;    &lt;span class="n"&gt;pathToIndex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SEP&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SEP&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f55fe7580e0b4fe1b5047be61264907b-19"&gt;&lt;/a&gt;
&lt;a name="rest_code_f55fe7580e0b4fe1b5047be61264907b-20"&gt;&lt;/a&gt;    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;pathToIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_f55fe7580e0b4fe1b5047be61264907b-21"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_f55fe7580e0b4fe1b5047be61264907b-22"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a class="reference external" href="http://coliru.stacked-crooked.com/a/290b278ec1de9573"&gt;Compile and run: Concatenate paths in C++11&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Checking program output we notice it is not fully correct, we should have checked whether path parts already contains a separator so we don't append another separator again.
That logic is already implemented in &lt;a class="reference external" href="http://en.cppreference.com/w/cpp/filesystem/path"&gt;std::filesystem::path&lt;/a&gt;, so C++17 can be like:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_96935a3d60cc40fa94770a15700d3ca7-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;experimental/filesystem&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_96935a3d60cc40fa94770a15700d3ca7-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_96935a3d60cc40fa94770a15700d3ca7-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_96935a3d60cc40fa94770a15700d3ca7-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;experimental&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;filesystem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_96935a3d60cc40fa94770a15700d3ca7-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_96935a3d60cc40fa94770a15700d3ca7-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_96935a3d60cc40fa94770a15700d3ca7-7"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_96935a3d60cc40fa94770a15700d3ca7-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_96935a3d60cc40fa94770a15700d3ca7-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;a name="rest_code_96935a3d60cc40fa94770a15700d3ca7-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"var/www/"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;a name="rest_code_96935a3d60cc40fa94770a15700d3ca7-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"index.html"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;a name="rest_code_96935a3d60cc40fa94770a15700d3ca7-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_96935a3d60cc40fa94770a15700d3ca7-13"&gt;&lt;/a&gt;    &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;pathToIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_96935a3d60cc40fa94770a15700d3ca7-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_96935a3d60cc40fa94770a15700d3ca7-15"&gt;&lt;/a&gt;    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;pathToIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_96935a3d60cc40fa94770a15700d3ca7-16"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_96935a3d60cc40fa94770a15700d3ca7-17"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a class="reference external" href="http://coliru.stacked-crooked.com/a/a24d50875b4daad1"&gt;Compile and run: Concatenate paths in C++17&lt;/a&gt;.
Code is cleaner and just correct, there are no duplicated separators.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-remove-directories"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#id10"&gt;Create/Remove Directories&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://en.cppreference.com/w/cpp/filesystem"&gt;std::filesystem&lt;/a&gt; comes with some utilities to create and remove files and directories, but firstly let's check out a way to do so in C++11.&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-3"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-7"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S_IRWXU&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;S_IRWXG&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;S_IROTH&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;S_IXOTH&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sandbox"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sandbox/a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sandbox/a/b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-13"&gt;&lt;/a&gt;    &lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sandbox/c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sandbox/c/d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-16"&gt;&lt;/a&gt;    &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ls -la sandbox/*"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-18"&gt;&lt;/a&gt;    &lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sandbox/c/d"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-19"&gt;&lt;/a&gt;    &lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sandbox/a/b"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-20"&gt;&lt;/a&gt;    &lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sandbox/c"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-21"&gt;&lt;/a&gt;    &lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sandbox/a"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-22"&gt;&lt;/a&gt;    &lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sandbox"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-24"&gt;&lt;/a&gt;    &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ls -la"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-26"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_f2ca67a3eb3048c09b9f754710e58d8d-27"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a class="reference external" href="http://coliru.stacked-crooked.com/a/26f4763ec5b42adb"&gt;Compile and run: Create and remove directories C++11&lt;/a&gt;.
We have to create/remove one by one. We could rewrite this code snippet with less lines (using a loop), but we still have to pay attention to creation/deletion order, we cannot remove parent directory before we have removed all children.&lt;/p&gt;
&lt;p&gt;Since C++17 we can create and remove nested directories with just one call.&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_70e412faf3e7492e9f068da9949d9b71-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;experimental/filesystem&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_70e412faf3e7492e9f068da9949d9b71-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_70e412faf3e7492e9f068da9949d9b71-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_70e412faf3e7492e9f068da9949d9b71-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;experimental&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;filesystem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_70e412faf3e7492e9f068da9949d9b71-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_70e412faf3e7492e9f068da9949d9b71-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_70e412faf3e7492e9f068da9949d9b71-7"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_70e412faf3e7492e9f068da9949d9b71-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_70e412faf3e7492e9f068da9949d9b71-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;create_directories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sandbox/a/b"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_70e412faf3e7492e9f068da9949d9b71-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;create_directories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sandbox/c/d"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_70e412faf3e7492e9f068da9949d9b71-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ls -la sandbox/*"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_70e412faf3e7492e9f068da9949d9b71-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_70e412faf3e7492e9f068da9949d9b71-13"&gt;&lt;/a&gt;    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Were directories removed? "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;remove_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sandbox"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_70e412faf3e7492e9f068da9949d9b71-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ls -la"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_70e412faf3e7492e9f068da9949d9b71-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_70e412faf3e7492e9f068da9949d9b71-16"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_70e412faf3e7492e9f068da9949d9b71-17"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a class="reference external" href="http://coliru.stacked-crooked.com/a/62c2d22fa0e7144c"&gt;Compile and run: Create and remove directories C++17&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="full-example-recursive-directory-iterator"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/posts/recursive-directory-iterator/#id11"&gt;Full example: Recursive Directory Iterator&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This example consists of iterate recursively through dicrectories fintering files by extension.&lt;/p&gt;
&lt;p&gt;To keep C++11 example simple, I haven't added filtering logic, but it is in C++17 example:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://carlosvin.github.io/listings/recursive-directory/filesystem.11.cpp.html"&gt;recursive-directory/filesystem.11.cpp&lt;/a&gt;  &lt;a class="reference external" href="https://carlosvin.github.io/listings/recursive-directory/filesystem.11.cpp"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;dirent.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-3"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-4"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;fstream&amp;gt; // std::ofstream&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-5"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-6"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-7"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;system_error&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-8"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-12"&gt;&lt;/a&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;UP_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;".."&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-13"&gt;&lt;/a&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;CURRENT_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-14"&gt;&lt;/a&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;SEP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-17"&gt;&lt;/a&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initializer_list&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-18"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-19"&gt;&lt;/a&gt;    &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;pathTmp&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-20"&gt;&lt;/a&gt;    &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;separator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-21"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nl"&gt;part&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-22"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-23"&gt;&lt;/a&gt;        &lt;span class="n"&gt;pathTmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;separator&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-24"&gt;&lt;/a&gt;        &lt;span class="n"&gt;separator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SEP&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-25"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-26"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pathTmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-27"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-28"&gt;&lt;/a&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-29"&gt;&lt;/a&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getDirectoryFiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-30"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-31"&gt;&lt;/a&gt;    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-32"&gt;&lt;/a&gt;    &lt;span class="n"&gt;shared_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;DIR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;directory_ptr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opendir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_str&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="p"&gt;[](&lt;/span&gt;&lt;span class="kt"&gt;DIR&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;closedir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-33"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;directory_ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-34"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-35"&gt;&lt;/a&gt;        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;system_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;system_category&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="s"&gt;"Error opening : "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-36"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-37"&gt;&lt;/a&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-38"&gt;&lt;/a&gt;    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;dirent&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dirent_ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-39"&gt;&lt;/a&gt;    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;dirent_ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;readdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;directory_ptr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-40"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-41"&gt;&lt;/a&gt;        &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;dirent_ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;d_name&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-42"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dirent_ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;d_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;DT_DIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-43"&gt;&lt;/a&gt;        &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-44"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CURRENT_DIR&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;UP_DIR&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-45"&gt;&lt;/a&gt;            &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-46"&gt;&lt;/a&gt;                &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;subFiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDirectoryFiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-47"&gt;&lt;/a&gt;                &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subFiles&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subFiles&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-48"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-49"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-50"&gt;&lt;/a&gt;        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dirent_ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;d_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;DT_REG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-51"&gt;&lt;/a&gt;        &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-52"&gt;&lt;/a&gt;            &lt;span class="c1"&gt;// here we should check also if filename has an extension in extensions vector&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-53"&gt;&lt;/a&gt;            &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-54"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-55"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-56"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-57"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-58"&gt;&lt;/a&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-59"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-60"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-61"&gt;&lt;/a&gt;    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S_IRWXU&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;S_IRWXG&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;S_IROTH&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;S_IXOTH&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-62"&gt;&lt;/a&gt;    &lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sandbox"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-63"&gt;&lt;/a&gt;    &lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sandbox/a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-64"&gt;&lt;/a&gt;    &lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sandbox/a/b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-65"&gt;&lt;/a&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-66"&gt;&lt;/a&gt;        &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-67"&gt;&lt;/a&gt;            &lt;span class="s"&gt;"./sandbox/a/b/file1.rst"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-68"&gt;&lt;/a&gt;            &lt;span class="s"&gt;"./sandbox/a/b/file1.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-69"&gt;&lt;/a&gt;            &lt;span class="s"&gt;"./sandbox/a/file2.RST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-70"&gt;&lt;/a&gt;            &lt;span class="s"&gt;"./sandbox/file3.md"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-71"&gt;&lt;/a&gt;            &lt;span class="s"&gt;"./sandbox/will_be.ignored"&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-72"&gt;&lt;/a&gt;        &lt;span class="p"&gt;};&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-73"&gt;&lt;/a&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-74"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;// create files&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-75"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nl"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;e_files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-76"&gt;&lt;/a&gt;        &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-77"&gt;&lt;/a&gt;                &lt;span class="n"&gt;ofstream&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ofstream&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-78"&gt;&lt;/a&gt;                &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-79"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-80"&gt;&lt;/a&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-81"&gt;&lt;/a&gt;    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"filtered files: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-82"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nl"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;getDirectoryFiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;".rst"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;".RST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;".md"&lt;/span&gt;&lt;span class="p"&gt;})){&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-83"&gt;&lt;/a&gt;            &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-84"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-85"&gt;&lt;/a&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-86"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_fb12f3dbec334ec7b84ba6b5d62e0e89-87"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a class="reference external" href="http://coliru.stacked-crooked.com/a/af4228e039a281b3"&gt;Compile and run C++11 example&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Following example also filters files by extension.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://carlosvin.github.io/listings/recursive-directory/filesystem.17.cpp.html"&gt;recursive-directory/filesystem.17.cpp&lt;/a&gt;  &lt;a class="reference external" href="https://carlosvin.github.io/listings/recursive-directory/filesystem.17.cpp"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;experimental/filesystem&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-3"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-4"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-5"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;algorithm&amp;gt;    // std::find&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;experimental&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;filesystem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getDirectoryFiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-12"&gt;&lt;/a&gt;        &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-13"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nl"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;recursive_directory_iterator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-14"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-15"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;is_regular_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-16"&gt;&lt;/a&gt;        &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-17"&gt;&lt;/a&gt;                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-18"&gt;&lt;/a&gt;            &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-19"&gt;&lt;/a&gt;                &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-20"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-21"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-22"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-23"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-24"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-26"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-27"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-28"&gt;&lt;/a&gt;    &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;create_directories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sandbox/a/b"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-29"&gt;&lt;/a&gt;        &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-30"&gt;&lt;/a&gt;            &lt;span class="s"&gt;"./sandbox/a/b/file1.rst"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-31"&gt;&lt;/a&gt;            &lt;span class="s"&gt;"./sandbox/a/b/file1.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-32"&gt;&lt;/a&gt;            &lt;span class="s"&gt;"./sandbox/a/file2.RST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-33"&gt;&lt;/a&gt;            &lt;span class="s"&gt;"./sandbox/file3.md"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-34"&gt;&lt;/a&gt;            &lt;span class="s"&gt;"./sandbox/will_be.ignored"&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-35"&gt;&lt;/a&gt;        &lt;span class="p"&gt;};&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-36"&gt;&lt;/a&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-37"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;// create files&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-38"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nl"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;e_files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-39"&gt;&lt;/a&gt;        &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-40"&gt;&lt;/a&gt;                &lt;span class="n"&gt;ofstream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-41"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-42"&gt;&lt;/a&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-43"&gt;&lt;/a&gt;    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"filtered files: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-44"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nl"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;getDirectoryFiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;".rst"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;".RST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;".md"&lt;/span&gt;&lt;span class="p"&gt;})){&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-45"&gt;&lt;/a&gt;            &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-46"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-47"&gt;&lt;/a&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-48"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_835432cfea4a4c949428c04a3c70c3e0-49"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a class="reference external" href="http://coliru.stacked-crooked.com/a/af4228e039a281b3"&gt;Compile and run C++17 example&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>C++</category><category>C++11</category><category>C++17</category><category>Filesystem</category><category>IO</category><guid>https://carlosvin.github.io/posts/recursive-directory-iterator/</guid><pubDate>Sun, 28 May 2017 07:00:00 GMT</pubDate></item><item><title>C++ Dependency Management: Biicode</title><link>https://carlosvin.github.io/posts/first-biicode-poco/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;I'm interested in building, dependency management, packagin and deployment in regards to software projects. For &lt;a class="reference external" href="http://java.com/en/download/whatis_java.jsp"&gt;Java&lt;/a&gt;, &lt;a class="reference external" href="http://www.scala-lang.org/"&gt;Scala&lt;/a&gt;, &lt;a class="reference external" href="http://www.python.org/"&gt;Python&lt;/a&gt;, and so on is quite easy since there are tools like &lt;a class="reference external" href="http://maven.apache.org/"&gt;Maven&lt;/a&gt;, &lt;a class="reference external" href="http://www.gradle.org/"&gt;Gradle&lt;/a&gt;, &lt;a class="reference external" href="https://pypi.python.org/pypi/pip"&gt;pip&lt;/a&gt;, &lt;a class="reference external" href="http://www.scala-sbt.org/"&gt;Sbt&lt;/a&gt;, etc. But regarding C++_, the best options I've found are &lt;a class="reference external" href="http://maven.apache.org/"&gt;Maven&lt;/a&gt; with &lt;a class="reference external" href="http://maven-nar.github.io/"&gt;Nar&lt;/a&gt; plugin or &lt;a class="reference external" href="http://www.gradle.org/"&gt;Gradle&lt;/a&gt; with &lt;a class="reference external" href="https://gradle.org/docs/current/userguide/nativeBinaries.html"&gt;cpp plugin&lt;/a&gt; (incubation).&lt;/p&gt;
&lt;p&gt;I knew about &lt;a class="reference external" href="https://www.biicode.org/"&gt;Biicode&lt;/a&gt; almost 2 years ago, but I've never found time to test it, until today.&lt;/p&gt;
&lt;p&gt;How does &lt;a class="reference external" href="https://www.biicode.org/"&gt;Biicode&lt;/a&gt; work?&lt;/p&gt;
&lt;p&gt;Firstly we have to &lt;a class="reference external" href="http://docs.biicode.com/c++/installation.html"&gt;install Biicode&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've made tiny example project using logging system from &lt;a class="reference external" href="http://pocoproject.org/"&gt;Poco&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;I've executed this command to create the project, called bii_log.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_7c310a4574b642fdb18da41843d4ac89-1"&gt;&lt;/a&gt;bii new carlovin/bii_log --hello&lt;span class="o"&gt;=&lt;/span&gt;cpp
&lt;/pre&gt;&lt;p&gt;I've created the project under my &lt;a class="reference external" href="https://www.biicode.org/"&gt;Biicode&lt;/a&gt; username, just in case I'd like to publish later.&lt;/p&gt;
&lt;p&gt;Previous command generates the structure of files and directories, although we are going to focus only on:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_433078f708bf4a6582e78ce9f0f615d0-1"&gt;&lt;/a&gt;blocks/carlosvin/bii_log/main.cpp
&lt;a name="rest_code_433078f708bf4a6582e78ce9f0f615d0-2"&gt;&lt;/a&gt;blocks/carlosvin/bii_log/biicode.conf
&lt;/pre&gt;&lt;p&gt;In biicode.conf we are going to configure our dependencies, in this example &lt;a class="reference external" href="http://pocoproject.org/"&gt;Poco&lt;/a&gt; library.&lt;/p&gt;
&lt;pre class="code yaml"&gt;&lt;a name="rest_code_9ae97ce888c3459aa8e4f4a03d752075-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Biicode configuration file&lt;/span&gt;
&lt;a name="rest_code_9ae97ce888c3459aa8e4f4a03d752075-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_9ae97ce888c3459aa8e4f4a03d752075-3"&gt;&lt;/a&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;requirements&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;a name="rest_code_9ae97ce888c3459aa8e4f4a03d752075-4"&gt;&lt;/a&gt;    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;fenix/poco(develop)&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;
&lt;a name="rest_code_9ae97ce888c3459aa8e4f4a03d752075-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_9ae97ce888c3459aa8e4f4a03d752075-6"&gt;&lt;/a&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;parent&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;a name="rest_code_9ae97ce888c3459aa8e4f4a03d752075-7"&gt;&lt;/a&gt;        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;carlosvin/bii_log&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;
&lt;a name="rest_code_9ae97ce888c3459aa8e4f4a03d752075-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_9ae97ce888c3459aa8e4f4a03d752075-9"&gt;&lt;/a&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;includes&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;a name="rest_code_9ae97ce888c3459aa8e4f4a03d752075-10"&gt;&lt;/a&gt;    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Poco/*.h&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;fenix/poco/Foundation/include&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;In [includes] section, we are overriding the path to file headers. If we don't override it we'd had to do something like this:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_d2778b31c08a4478b017057d3ed64003-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"fenix/poco/Foundation/include/Logger.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Thanks to this line, include declarations are going to be clearer, as follows:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_9852e984435b491ca80fe3594545496e-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Poco/Logger.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Easy, now we can start using &lt;a class="reference external" href="http://pocoproject.org/"&gt;Poco&lt;/a&gt; in our project, e.g:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Poco/FileChannel.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Poco/FormattingChannel.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-3"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Poco/PatternFormatter.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-4"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Poco/Logger.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-5"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Poco/AutoPtr.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Poco&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;FileChannel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Poco&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;FormattingChannel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Poco&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;PatternFormatter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Poco&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-11"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Poco&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;AutoPtr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-13"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-14"&gt;&lt;/a&gt;        &lt;span class="n"&gt;AutoPtr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FileChannel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileChannel&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-15"&gt;&lt;/a&gt;        &lt;span class="n"&gt;pChannel&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"log/sample.log"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-16"&gt;&lt;/a&gt;        &lt;span class="n"&gt;pChannel&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"rotation"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"100 K"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-17"&gt;&lt;/a&gt;        &lt;span class="n"&gt;pChannel&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"archive"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"timestamp"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-19"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;//AutoPtr&amp;lt;ConsoleChannel&amp;gt; pCons(new ConsoleChannel);&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-20"&gt;&lt;/a&gt;        &lt;span class="n"&gt;AutoPtr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PatternFormatter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pPF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PatternFormatter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-21"&gt;&lt;/a&gt;        &lt;span class="n"&gt;pPF&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"pattern"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"%Y-%m-%d %H:%M:%S %s: %t"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-22"&gt;&lt;/a&gt;        &lt;span class="n"&gt;AutoPtr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FormattingChannel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pFC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FormattingChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pPF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pChannel&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-23"&gt;&lt;/a&gt;        &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pFC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-24"&gt;&lt;/a&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-25"&gt;&lt;/a&gt;        &lt;span class="n"&gt;Logger&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"TestChannel"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-26"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-27"&gt;&lt;/a&gt;                &lt;span class="n"&gt;poco_information&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"This is a info"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-28"&gt;&lt;/a&gt;                &lt;span class="n"&gt;poco_warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"This is a warning"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-29"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-30"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d83d5a56a94347b68cb65058c253e8e0-31"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;To compile the project we only have to execute following command:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_d612353bfc5f444db2e76117c5dfecff-1"&gt;&lt;/a&gt;bii cpp:build
&lt;/pre&gt;&lt;p&gt;To publish the project and to allow everyone use it as we have used &lt;a class="reference external" href="http://pocoproject.org/"&gt;Poco&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_bdd14000d7354adf9e7fb0860938b6e0-1"&gt;&lt;/a&gt;bii publish
&lt;/pre&gt;&lt;p&gt;Besides the ease to use, I like so much the integration with &lt;a class="reference external" href="https://eclipse.org"&gt;Eclipse&lt;/a&gt; with &lt;a class="reference external" href="https://eclipse.org/cdt/"&gt;CDT&lt;/a&gt;. After "bii cpp:build" execution all files were properly indexed.&lt;/p&gt;
&lt;p&gt;I've read also an article about the good integration with &lt;a class="reference external" href="https://www.jetbrains.com/clion/"&gt;CLion&lt;/a&gt;: &lt;a class="reference external" href="http://blog.jetbrains.com/clion/2015/03/when-clion-met-biicode/"&gt;When CLion met biicode&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>Biicode</category><category>Build Automation Software</category><category>C++</category><category>Dependency Management</category><category>Poco</category><guid>https://carlosvin.github.io/posts/first-biicode-poco/</guid><pubDate>Thu, 14 May 2015 18:00:00 GMT</pubDate></item><item><title>Build C++ project with Gradle</title><link>https://carlosvin.github.io/posts/gradle-cpp/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/posts/gradle-cpp/#id7"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am more and more worried about building, dependency management and distribution of my projects. I'd like to find a tool unifies those processes with  independence of the language. I know several tools those almost fit to what I'm looking for, like I know several tools those almost fit to what I'm looking for, like &lt;a class="reference external" href="http://www.scons.org"&gt;SCons&lt;/a&gt;, &lt;a class="reference external" href="http://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction"&gt;Autotools&lt;/a&gt;, &lt;a class="reference external" href="http://ant.apache.org"&gt;Ant&lt;/a&gt;, &lt;a class="reference external" href="http://maven.apache.org"&gt;Maven&lt;/a&gt; and lately &lt;a class="reference external" href="http://www.gradle.org"&gt;Gradle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've made several projects with Gradle, but always I was focused in &lt;a class="reference external" href="http://www.java.com"&gt;Java&lt;/a&gt; and &lt;a class="reference external" href="http://developer.android.com/sdk/installing/studio-build.html"&gt;Android&lt;/a&gt; projects.
In &lt;a class="reference external" href="http://www.java.com"&gt;Java&lt;/a&gt; projects I've found a &lt;a class="reference external" href="http://maven.apache.org"&gt;Maven&lt;/a&gt; replacement, because it is faster, easier and less verbose.
About &lt;a class="reference external" href="http://developer.android.com/sdk/installing/studio-build.html"&gt;Android&lt;/a&gt; projects I suffered the early adoption of &lt;a class="reference external" href="http://developer.android.com/sdk/installing/studio-build.html"&gt;Android Studio + Gradle&lt;/a&gt;, although currently I think the are more mature and they work fine.&lt;/p&gt;
&lt;p&gt;First of all, I have to say: building C/C++/Objective-C projects with &lt;a class="reference external" href="http://www.gradle.org"&gt;Gradle&lt;/a&gt; is in &lt;a class="reference external" href="http://www.gradle.org/docs/current/userguide/feature_lifecycle.html#incubating"&gt;incubation&lt;/a&gt; phase, although now we can perform advanced tasks like:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Generation several artifacts within same project (libraries and executables).&lt;/li&gt;
&lt;li&gt;Dependency management between artifacts (no versions).&lt;/li&gt;
&lt;li&gt;Different "flavors" of the same software, e.g: we can generate a “Community” release and other one with more enabled features called “Enterprise”.&lt;/li&gt;
&lt;li&gt;It allows multi-platform binary generation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I said, this plugin is still having limitations although they are working on it: &lt;a class="reference external" href="http://www.gradleware.com/resources/cpp/"&gt;Gradle C++ roadmap&lt;/a&gt;. If they achieve it I'll leave &lt;a class="reference external" href="http://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction"&gt;Autotools&lt;/a&gt; (I'm going to regret saying that).&lt;/p&gt;
&lt;div class="contents topic" id="index"&gt;
&lt;p class="topic-title first"&gt;Index&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#introduction" id="id7"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#case-study" id="id8"&gt;Case study&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#project-structure" id="id9"&gt;Project Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#c-application" id="id10"&gt;C++ Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#building-with-gradle" id="id11"&gt;Building with Gradle&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#base-case" id="id12"&gt;Base case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#different-flavors" id="id13"&gt;Different "Flavors"&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#community" id="id14"&gt;Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#enterprise" id="id15"&gt;Enterprise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#release-or-debug" id="id16"&gt;Release or Debug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#multi-platform" id="id17"&gt;Multi-platform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#try-it-yourself" id="id18"&gt;Try it yourself&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/gradle-cpp/#conclusions" id="id19"&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://carlosvin.github.io/posts/gradle-cpp/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Build Software</category><category>Build System</category><category>C++</category><category>Dependency Management</category><category>Gradle</category><guid>https://carlosvin.github.io/posts/gradle-cpp/</guid><pubDate>Sat, 27 Sep 2014 10:00:00 GMT</pubDate></item><item><title>C++ Struct in memory alignment</title><link>https://carlosvin.github.io/posts/cpp-pragma-pack/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;A C++ struct is an element that allows grouping attributes with different type so we can manipulate all elements together using same reference. It is like a class with public visibility by default for functions and attributes.&lt;/p&gt;
&lt;p&gt;If we want to work in a lower level, closer to machine, it might be useful understand how that data structure is stored in memory and how to control that mapping.&lt;/p&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/cpp-pragma-pack/#example-struct" id="id1"&gt;Example Struct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/cpp-pragma-pack/#pragma-pack-directive-in-c-struct" id="id2"&gt;#pragma pack directive in C++ struct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/cpp-pragma-pack/#performance-test" id="id3"&gt;Performance test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://carlosvin.github.io/posts/cpp-pragma-pack/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>Compilers</category><category>Performance</category><guid>https://carlosvin.github.io/posts/cpp-pragma-pack/</guid><pubDate>Mon, 26 Nov 2012 11:00:00 GMT</pubDate></item></channel></rss>