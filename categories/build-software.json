{"category":"Build Software","posts":[{"sectids":"","toc-placement":"auto","notitle":"","stylesheet":"","webfonts":"","prewrap":"","attribute-undefined":"drop-line","attribute-missing":"skip","iconfont-remote":"","caution-caption":"Caution","important-caption":"Important","note-caption":"Note","tip-caption":"Tip","warning-caption":"Warning","example-caption":"Example","figure-caption":"Figure","table-caption":"Table","toc-title":"Table of Contents","section-refsig":"Section","part-refsig":"Part","chapter-refsig":"Chapter","appendix-refsig":"Appendix","appendix-caption":"Appendix","untitled-label":"Untitled","version-label":"Version","last-update-label":"Last updated","docfile":"choosing-modern-cpp-stack.en.adoc","docdir":"","docfilesuffix":".adoc","docname":"choosing-modern-cpp-stack.en","embedded":"","asciidoctor":"","asciidoctor-version":"2.0.10","safe-mode-name":"secure","safe-mode-secure":"","safe-mode-level":20,"max-include-depth":64,"user-home":".","backend":"html5","max-attribute-value-size":4096,"linkcss":"","doctype":"article","htmlsyntax":"html","backend-html5-doctype-article":"","doctype-article":"","backend-html5":"","outfilesuffix":".html","filetype":"html","filetype-html":"","basebackend-html-doctype-article":"","basebackend-html":"","basebackend":"html","stylesdir":".","iconsdir":"./images/icons","localdate":"2020-04-22","localyear":"2020","localtime":"20:39:53 +0200","localdatetime":"2020-04-22 20:39:53 +0200","docdate":"2020-04-19","docyear":"2020","doctime":"10:46:31 +0200","docdatetime":"2020-04-19 10:46:31 +0200","doctitle":"Choosing a Modern C++ stack","date":"2017/09/15 20:50:00","keywords":["C++","Unit Testing","Build System","Build Software","Meson","Catch","doctest"],"description":"My chosen technologies stack for C++ project. It contains an easy to run example defining main project skeleton.","lang":"en","toc":"","make_link":"https://www.gnu.org/software/make/manual/make.html[Make,window=_blank]","maven":"https://maven.apache.org/[Maven,window=_blank]","scons":"https://scons.org/[Scons,window=_blank]","cmake":"https://cmake.org/[CMake,window=_blank]","meson":"https://mesonbuild.com/[Meson,window=_blank]","gradle":"https://gradle.org/[Gradle,window=_blank]","autotools":"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html[Autotools,window=_blank]","gnome":"https://www.gnome.org/[Gnome,window=_blank]","ninja":"https://ninja-build.org/[Ninja,window=_blank]","python":"https://python.org/[Python,window=_blank]","catch":"https://github.com/philsquared/Catch[Catch,window=_blank]","doctest":"https://github.com/onqtam/doctest[doctest,window=_blank]","xunit":"https://en.wikipedia.org/wiki/XUnit[xUnit,window=_blank]","bdd":"https://en.wikipedia.org/wiki/Behavior-driven_development[BDD,window=_blank]","uuid":"https://en.wikipedia.org/wiki/Universally_unique_identifier[UUID,window=_blank]","mt19937":"https://www.cplusplus.com/reference/random/mt19937[mt19937,window=_blank]","benchmarkresults":"https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md[performance results]","authorcount":0,"title":"Choosing a Modern C++ stack","summary":"My chosen technologies stack for C++ project. It contains an easy to run example defining main project skeleton.","html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_choosing_build_system_meson\">Choosing Build System (Meson)</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_cmake_vs_meson\">CMake vs Meson</a></li>\n<li><a href=\"#_other_build_systems_comparisons\">Other build systems comparisons</a></li>\n</ul>\n</li>\n<li><a href=\"#_unit_testing_framework\">Unit Testing Framework</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_doctest_a_catch_alternative\">doctest: A Catch alternative</a></li>\n</ul>\n</li>\n<li><a href=\"#_example\">Example</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_project_output_artifacts\">Project output artifacts</a></li>\n<li><a href=\"#_project_structure_fork_project\">Project structure (Fork project)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I&#8217;m starting a new project in C++, but I&#8217;ve run into a pair of questions before start:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Which build system should I use?</p>\n</li>\n<li>\n<p>Which unit testing framework?</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_choosing_build_system_meson\">Choosing Build System (<a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a>)</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I have used before <a href=\"https://www.gnu.org/software/make/manual/make.html\" target=\"_blank\" rel=\"noopener\">Make</a>, <a href=\"https://maven.apache.org/\" target=\"_blank\" rel=\"noopener\">Maven</a>, <a href=\"https://scons.org/\" target=\"_blank\" rel=\"noopener\">Scons</a>, <a href=\"https://gradle.org/\" target=\"_blank\" rel=\"noopener\">Gradle</a> and <a href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html\" target=\"_blank\" rel=\"noopener\">Autotools</a>, but I have some reasons to try find something else:</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html\" target=\"_blank\" rel=\"noopener\">Autotools</a></dt>\n<dd>\n<p>It is not easy to configure and maintain. There are several configuration files and several configuration steps.</p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://gradle.org/\" target=\"_blank\" rel=\"noopener\">Gradle</a></dt>\n<dd>\n<p>C feature is still incubating. Not very fast. You can check a similar example project at link:/posts/gradle-cpp/[Build C project with Gradle].</p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://www.gnu.org/software/make/manual/make.html\" target=\"_blank\" rel=\"noopener\">Make</a></dt>\n<dd>\n<p>I don&#8217;t love the syntax. Files tends to get messy as project grows.</p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://scons.org/\" target=\"_blank\" rel=\"noopener\">Scons</a></dt>\n<dd>\n<p>It is just slower and not as easy to understand than <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a>.</p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://maven.apache.org/\" target=\"_blank\" rel=\"noopener\">Maven</a></dt>\n<dd>\n<p>It is slow and you might end up \"<em>Javatizing</em>\" your C++ project structure.</p>\n</dd>\n</dl>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nI&#8217;ve listed just things I don&#8217;t like, those projects have other great features.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_cmake_vs_meson\"><a href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake</a> vs <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a></h3>\n<div class=\"paragraph\">\n<p>After discarding previous ones, I&#8217;m considering <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> or <a href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake</a>. Both are fast build systems:</p>\n</div>\n<div class=\"paragraph\">\n<p>Although <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> is written in <a href=\"https://python.org/\" target=\"_blank\" rel=\"noopener\">Python</a>, it generates a <a href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja</a> build project. First time you configure the project you have to run <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a>, but for building or testing you are actually running <a href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake</a> is also able to generate <a href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja</a> files among other formats, <a href=\"https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html\">check CMake generators documentation for more information</a>.</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake</a></dt>\n<dd>\n<p>It has a big advantage over <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a>, it is mature and widely used in many projects, which means there are many examples and it will fulfill your C++ project building needs.</p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a></dt>\n<dd>\n<p>It is a young project compared with <a href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake</a>, but it is growing quite fast and it has been adopted in other big projects like <a href=\"\">Gnome</a>, they have an initiative to <a href=\"https://wiki.gnome.org/Initiatives/GnomeGoals/MesonPorting\">port from Autotools to Meson</a>.</p>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p><strong>Finally I&#8217;ve chosen</strong> <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> because syntax is really clear to me, when I read <code>meson.build</code> file I can quickly understand what is happening during build process.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Steps to compile and test a project</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ meson build .  <b class=\"conum\">(1)</b>\n$ <span class=\"hljs-built_in\">cd</span> build\n$ ninja build    <b class=\"conum\">(2)</b>\n$ ninja <span class=\"hljs-built_in\">test</span>     <b class=\"conum\">(3)</b></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>First time you configure the project</p>\n</li>\n<li>\n<p>Each time you build it</p>\n</li>\n<li>\n<p>Each time you run tests</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_other_build_systems_comparisons\">Other build systems comparisons</h3>\n<div class=\"paragraph\">\n<p>I&#8217;ve found two interesting comparisons about available C++ build systems, they might be a little be biased because those comparisons come from <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> and <a href=\"https://scons.org/\" target=\"_blank\" rel=\"noopener\">Scons</a>.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://bitbucket.org/scons/scons/wiki/SconsVsOtherBuildTools\">C++ build systems comparison from Scons</a>.</p>\n</li>\n<li>\n<p><a href=\"https://mesonbuild.com/Simple-comparison.html\">C++ build systems comparison from Meson</a>.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_unit_testing_framework\">Unit Testing Framework</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I have used some <a href=\"https://en.wikipedia.org/wiki/XUnit\" target=\"_blank\" rel=\"noopener\">xUnit</a> based libraries like <a href=\"https://github.com/unittest-cpp/unittest-cpp\">UnitTest++</a>, <a href=\"https://cpputest.github.io/\">CppUTest</a> or <a href=\"https://github.com/google/googletest\">Google Test</a> which match perfectly with <a href=\"https://github.com/google/googletest/tree/master/googlemock\">Google Mock</a>. If you want a safe bet that fulfills almost of your testing needs I highly recommend <a href=\"https://github.com/google/googletest\">Google Test</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>But time ago I found a testing framework with some interesting features, <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a>:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>It is just a header file with no external dependencies, so very easy to start (wget + include downloaded file).</p>\n</li>\n<li>\n<p>You can use normal unit test style or <a href=\"\">BDD</a>-style</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>If you want to know more about <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a>, I recommend you to give it a try, it is a matter of 2 minutes to have a <a href=\"https://github.com/philsquared/Catch/blob/master/docs/tutorial.md#writing-tests\">simple example up and running</a>. You can also read some interesting articles like <a href=\"https://github.com/philsquared/Catch/blob/master/docs/why-catch.md\">Why do we need yet another C test framework?] or https://blog.coldflake.com/posts/Testing-C-with-a-new-Catch/[Testing C++ With A New Catch</a>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_doctest_a_catch_alternative\"><a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a>: A <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a> alternative</h3>\n<div class=\"paragraph\">\n<p>There is another testing framework named <a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a>, with same benefits as <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a>, but it promises to be faster and lighter (<a href=\"https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md\">performance results</a>) than <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a> is modeled after <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a> and some parts of the code have been taken directly, but there are <a href=\"https://github.com/onqtam/doctest/blob/master/doc/markdown/faq.md#how-is-doctest-different-from-catch\">differences</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>It hasn&#8217;t been easy to decide, both are really similar, following you can see differences:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">diff between doctest and catch branches</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-diff\" data-lang=\"diff\"><span class=\"hljs-meta\">@@ -1,12 +1,12 @@</span>\n<span class=\"hljs-deletion\">-#define CATCH_CONFIG_MAIN // It tells Catch to provide a main() - only do this in one cpp file</span>\n<span class=\"hljs-addition\">+#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN</span>\n\n<span class=\"hljs-deletion\">-#include \"catch.hpp\"</span>\n<span class=\"hljs-addition\">+#include \"doctest.h\"</span>\n#include \"Uuid.h\"\n#include &lt;string&gt;\n\nconstexpr int MAX_ITERS = 100;\n\n<span class=\"hljs-deletion\">-TEST_CASE(\"Uuid\", \"[uuid]\")</span>\n<span class=\"hljs-addition\">+TEST_CASE(\"Uuid\")</span>\n{\nfor (int i = 0; i &lt; MAX_ITERS; i++)\n{\n@@ -26,7 +26,7 @@ TEST_CASE(\"Uuid\", \"[uuid]\")\n\n// BDD style\n\n<span class=\"hljs-deletion\">-SCENARIO(\"UUID creation\", \"[Uuid]\")</span>\n<span class=\"hljs-addition\">+SCENARIO(\"UUID creation\")</span>\n{\n\nGIVEN(\"A random UUID \")</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>I&#8217;ve finally chosen <a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a> because it promises to be faster: <a href=\"https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md\">performance results</a>.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nI&#8217;ve created project using both frameworks you can find them in corresponding branches: <a href=\"https://github.com/carlosvin/uuid-cpp/tree/doctest\">doctest branch</a> or <a href=\"https://github.com/carlosvin/uuid-cpp/tree/catch\">catch branch</a>.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_example\">Example</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I&#8217;ve created an example to illustrate this article: <a href=\"https://github.com/carlosvin/uuid-cpp\" class=\"bare\">https://github.com/carlosvin/uuid-cpp</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>It is a basic implementation of UUID pseudo-random generator based on <a href=\"https://www.cplusplus.com/reference/random/mt19937\" target=\"_blank\" rel=\"noopener\">mt19937</a> which is not cryptographically secure.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_project_output_artifacts\">Project output artifacts</h3>\n<div class=\"paragraph\">\n<p>When we install the project using <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> (<a href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja</a>), we will get some artifacts generated and copied in our system.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Shared library: <code>libuuid</code>.</p>\n</li>\n<li>\n<p>Header library for developers who want to use the shared library: <code>include/Uuid.h</code>.</p>\n</li>\n<li>\n<p>Executable <code>uuidgen</code> (<a href=\"\">UUID</a> generator).</p>\n</li>\n<li>\n<p>Test executable (not installed). It tests shared library.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>For example, if you execute <code>ninja install</code> on Linux, you will get something like:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">/usr/<span class=\"hljs-built_in\">local</span>/lib/libuuid.so\n/usr/<span class=\"hljs-built_in\">local</span>/include/Uuid.h\n/usr/<span class=\"hljs-built_in\">local</span>/bin/uuidgen</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_project_structure_fork_project\">Project structure (<a href=\"https://github.com/carlosvin/uuid-cpp\">Fork project</a>)</h3>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/meson.build\">meson.build</a></dt>\n<dd>\n<p>Root project file configuration. It defines project properties and subdirectories.</p>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">meson.build</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-python\" data-lang=\"python\">project(\n    <span class=\"hljs-string\">'cpp-meson-example'</span>, <span class=\"hljs-comment\"># project name</span>\n    <span class=\"hljs-string\">'cpp'</span>, <span class=\"hljs-comment\"># C++ project, e.g: for C project</span>\n    version : <span class=\"hljs-string\">'1.0.0'</span>,\n    license : <span class=\"hljs-string\">'MIT'</span>,\n    default_options : [<span class=\"hljs-string\">'cpp_std=c++11'</span>]) <span class=\"hljs-comment\"># compile for C++</span>\n\n<span class=\"hljs-comment\"># it will be referred from subdir projects</span>\ninc = include_directories(<span class=\"hljs-string\">'include'</span>)\n\n<span class=\"hljs-comment\"># meson will try to find a meson.build file inside following directories</span>\nsubdir(<span class=\"hljs-string\">'include'</span>)\nsubdir(<span class=\"hljs-string\">'src'</span>)\nsubdir(<span class=\"hljs-string\">'test'</span>)</code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/include/\">include</a></dt>\n<dd>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">meson.build</dt>\n<dd>\n<p>Build configuration file for include directory.</p>\n</dd>\n</dl>\n</div>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">include/meson.build</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-python\" data-lang=\"python\"><span class=\"hljs-comment\"># Select header files to be installed</span>\ninstall_headers(<span class=\"hljs-string\">'Uuid.h'</span>)</code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/include/Uuid.h\">Uuid.h</a></dt>\n<dd>\n<p>Header file, it is the library interface definition which will be included from projects using that library</p>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">include/Uuid.h</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-keyword\">namespace</span> ids {\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Uuid</span> {</span>\n    <span class=\"hljs-keyword\">private</span>:\n    <span class=\"hljs-comment\">// ...</span></code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src\">src</a></dt>\n<dd>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src/meson.build\">meson.build (src)</a></dt>\n<dd>\n<p>It declares 2 output artifacts, library <code>libuuid</code> and executable <code>uuidgen</code>. Executable depends on the libary, it will use the libary to generate <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier\" target=\"_blank\" rel=\"noopener\">UUID</a>.</p>\n</dd>\n</dl>\n</div>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">src/meson.build</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-python\" data-lang=\"python\">libuuid = shared_library(\n    <span class=\"hljs-string\">'uuid'</span>, <b class=\"conum\">(1)</b>\n    <span class=\"hljs-string\">'Uuid.cpp'</span>, <b class=\"conum\">(2)</b>\n    include_directories : inc, <b class=\"conum\">(3)</b>\n    install : true) <b class=\"conum\">(4)</b>\n\nuuidgen = executable(\n    <span class=\"hljs-string\">'uuidgen'</span>, <b class=\"conum\">(5)</b>\n    <span class=\"hljs-string\">'main.cpp'</span>, <b class=\"conum\">(6)</b>\n    include_directories : inc, <b class=\"conum\">(7)</b>\n    link_with : libuuid, <b class=\"conum\">(8)</b>\n    install : true) <b class=\"conum\">(9)</b></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>library name</p>\n</li>\n<li>\n<p>source files to be compile</p>\n</li>\n<li>\n<p>previously declared include directories in root <code>meson.build</code></p>\n</li>\n<li>\n<p><code>libuuid</code> will be part of project installation</p>\n</li>\n<li>\n<p>executable name</p>\n</li>\n<li>\n<p>source files to compile</p>\n</li>\n<li>\n<p>previously declared include directories in root <code>meson.build</code></p>\n</li>\n<li>\n<p>linking executable with shared previously declared shared library <code>libuuid</code></p>\n</li>\n<li>\n<p><code>uuidgen</code> executable be part of project installation</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src/main.cpp\">main.cpp</a></dt>\n<dd>\n<p>Entry point for main executable <code>uuidgen</code>.</p>\n</dd>\n</dl>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">src/main.cpp</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">\"Uuid.h\"</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    ids::Uuid uuid;\n    <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &lt;&lt; uuid.to_str() &lt;&lt; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src/Uuid.cpp\">Uuid.cpp</a></dt>\n<dd>\n<p>Implementation of declared class in header file.</p>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">src/Uuid.cpp</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">\"Uuid.h\"</span></span>\n\nUuid::Uuid()\n{ <span class=\"hljs-comment\">// ...</span></code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/test/\">test</a></dt>\n<dd>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/test/meson.build\">meson.build (test)</a></dt>\n<dd>\n<p>File to configure tests build process.</p>\n</dd>\n</dl>\n</div>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">test/meson.build</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-python\" data-lang=\"python\">testexe = executable(\n    <span class=\"hljs-string\">'testexe'</span>, <b class=\"conum\">(1)</b>\n    <span class=\"hljs-string\">'uuid_test.cpp'</span>, <b class=\"conum\">(2)</b>\n    include_directories : inc, <b class=\"conum\">(3)</b>\n    link_with : libuuid) <b class=\"conum\">(4)</b>\n\ntest(<span class=\"hljs-string\">'Uuid test'</span>, testexe) <b class=\"conum\">(5)</b>\n\ntest(<span class=\"hljs-string\">'Uuid test with args and env'</span>, testexe, args : [<span class=\"hljs-string\">'arg1'</span>, <span class=\"hljs-string\">'arg2'</span>], env : [<span class=\"hljs-string\">'FOO=bar'</span>]) <b class=\"conum\">(6)</b></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>test executable name</p>\n</li>\n<li>\n<p>tests source files to be compiled</p>\n</li>\n<li>\n<p>declared include directories in root <code>meson.build</code></p>\n</li>\n<li>\n<p>link test executable with previously declared shared library <code>libuuid</code></p>\n</li>\n<li>\n<p>test execution</p>\n</li>\n<li>\n<p>we can specify other test execution passing arguments or environment variables</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">doctest.h</dt>\n<dd>\n<p><a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a> library in a single header file. You can try to automate library installation as part of your build process, but I haven not figured out yet a way to do it with <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a>. For now, I have installed it manually:</p>\n</dd>\n</dl>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Add <a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a> to your project</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\"><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-built_in\">test</span>\nwget https://raw.githubusercontent.com/onqtam/doctest/master/doctest/doctest.h</code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/test/uuid_test.cpp\">uuid_test.cpp</a></dt>\n<dd>\n<p>Tests implementation.</p>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">test/uuid_test.cpp</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">\"doctest.h\"</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">\"Uuid.h\"</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string&gt;</span></span>\n\n<span class=\"hljs-keyword\">constexpr</span> <span class=\"hljs-keyword\">int</span> MAX_ITERS = <span class=\"hljs-number\">100</span>;\n\nTEST_CASE(<span class=\"hljs-string\">\"Uuid\"</span>)\n{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; MAX_ITERS; i++)\n    {\n        ids::Uuid uuid;\n        <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span> uuid_str{uuid.to_str()};\n\n        INFO(uuid_str);\n\n        <span class=\"hljs-comment\">// If assertion fails test execution is stopped</span>\n        REQUIRE(uuid_str.size() == <span class=\"hljs-number\">36</span>);\n\n        <span class=\"hljs-comment\">// If assertion fails test execution continues</span>\n        CHECK(uuid.most &gt; <span class=\"hljs-number\">0</span>);\n        CHECK(uuid.least &gt; <span class=\"hljs-number\">0</span>);\n    }\n}\n\n<span class=\"hljs-comment\">// BDD style</span>\n\nSCENARIO(<span class=\"hljs-string\">\"UUID creation\"</span>)\n{\n\n    GIVEN(<span class=\"hljs-string\">\"A random UUID \"</span>)\n    {\n\n        ids::Uuid uuid;\n        <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span> uuid_str{uuid.to_str()};\n\n        REQUIRE(uuid_str.size() == <span class=\"hljs-number\">36</span>);\n\n        WHEN(<span class=\"hljs-string\">\"get the most and least\"</span>)\n        {\n            THEN(<span class=\"hljs-string\">\"should be more than 0\"</span>)\n            {\n                CHECK(uuid.most &gt; <span class=\"hljs-number\">0</span>);\n                CHECK(uuid.least &gt; <span class=\"hljs-number\">0</span>);\n            }\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Tip</div>\n</td>\n<td class=\"content\">\nYou can find how to build and test the example project at: <a href=\"https://github.com/carlosvin/uuid-cpp#how-to-build-the-example\" class=\"bare\">https://github.com/carlosvin/uuid-cpp#how-to-build-the-example</a>\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>","slug":"choosing-modern-cpp-stack"},{"sectids":"","toc-placement":"auto","notitle":"","stylesheet":"","webfonts":"","prewrap":"","attribute-undefined":"drop-line","attribute-missing":"skip","iconfont-remote":"","caution-caption":"Caution","important-caption":"Important","note-caption":"Note","tip-caption":"Tip","warning-caption":"Warning","example-caption":"Example","figure-caption":"Figure","table-caption":"Table","toc-title":"Table of Contents","section-refsig":"Section","part-refsig":"Part","chapter-refsig":"Chapter","appendix-refsig":"Appendix","appendix-caption":"Appendix","untitled-label":"Untitled","version-label":"Version","last-update-label":"Last updated","docfile":"choosing-modern-cpp-stack.es.adoc","docdir":"","docfilesuffix":".adoc","docname":"choosing-modern-cpp-stack.es","embedded":"","asciidoctor":"","asciidoctor-version":"2.0.10","safe-mode-name":"secure","safe-mode-secure":"","safe-mode-level":20,"max-include-depth":64,"user-home":".","backend":"html5","max-attribute-value-size":4096,"linkcss":"","doctype":"article","htmlsyntax":"html","backend-html5-doctype-article":"","doctype-article":"","backend-html5":"","outfilesuffix":".html","filetype":"html","filetype-html":"","basebackend-html-doctype-article":"","basebackend-html":"","basebackend":"html","stylesdir":".","iconsdir":"./images/icons","localdate":"2020-04-22","localyear":"2020","localtime":"20:39:53 +0200","localdatetime":"2020-04-22 20:39:53 +0200","docdate":"2020-04-19","docyear":"2020","doctime":"10:46:31 +0200","docdatetime":"2020-04-19 10:46:31 +0200","doctitle":"Elegir tecnologías para mi nuevo proyeco C++","date":"2017/09/24 20:00:00","keywords":["C++","Unit Testing","Build System","Build Software","Meson","Catch","doctest"],"description":"Las tecnologías que he elegido para mi proyecto C++. My chosen technologies stack for C++ project. It contains an easy to run example defining main project skeleton","lang":"es","toc":"","make_link":"https://www.gnu.org/software/make/manual/make.html[Make,window=_blank]","maven":"https://maven.apache.org/[Maven,window=_blank]","scons":"https://scons.org/[Scons,window=_blank]","cmake":"https://cmake.org/[CMake,window=_blank]","meson":"https://mesonbuild.com/[Meson,window=_blank]","gradle":"https://gradle.org/[Gradle,window=_blank]","autotools":"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html[Autotools,window=_blank]","gnome":"https://www.gnome.org/[Gnome,window=_blank]","ninja":"https://ninja-build.org/[Ninja,window=_blank]","python":"https://python.org/[Python,window=_blank]","catch":"https://github.com/philsquared/Catch[Catch,window=_blank]","doctest":"https://github.com/onqtam/doctest[doctest,window=_blank]","xunit":"https://en.wikipedia.org/wiki/XUnit[xUnit,window=_blank]","bdd":"https://en.wikipedia.org/wiki/Behavior-driven_development[BDD,window=_blank]","uuid":"https://en.wikipedia.org/wiki/Universally_unique_identifier[UUID,window=_blank]","mt19937":"https://www.cplusplus.com/reference/random/mt19937[mt19937,window=_blank]","benchmarkresults":"https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md[resultados de las comparaciones de rendimiento]","authorcount":0,"title":"Elegir tecnologías para mi nuevo proyeco C++","summary":"Las tecnologías que he elegido para mi proyecto C++. My chosen technologies stack for C++ project. It contains an easy to run example defining main project skeleton","html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_elegir_un_sistema_de_construcción_meson\">Elegir un Sistema de Construcción (Meson)</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_cmake_vs_meson\">CMake vs Meson</a></li>\n<li><a href=\"#_otras_comparaciones_entre_sistemas_de_construcción\">Otras comparaciones entre sistemas de construcción</a></li>\n</ul>\n</li>\n<li><a href=\"#_framework_the_pruebas_unitarias\">Framework the Pruebas Unitarias</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_doctest_una_alternativa_a_catch\">doctest: Una alternativa a Catch</a></li>\n</ul>\n</li>\n<li><a href=\"#_ejemplo\">Ejemplo</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_artefactos_del_proyecto\">Artefactos del Proyecto</a></li>\n<li><a href=\"#_estructura_del_proyecto_fork_project\">Estructura del Proyecto (Fork project)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Estoy empezando un pequeño proyecto en C++ y antes de nada me han surgido un par de preguntas:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>¿Cómo voy a construirlo?</p>\n</li>\n<li>\n<p>¿Qué framework para pruebas unitarias utilizar?</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_elegir_un_sistema_de_construcción_meson\">Elegir un Sistema de Construcción (<a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a>)</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Ya he utilizado antes <a href=\"https://www.gnu.org/software/make/manual/make.html\" target=\"_blank\" rel=\"noopener\">Make</a>, <a href=\"https://maven.apache.org/\" target=\"_blank\" rel=\"noopener\">Maven</a>, <a href=\"https://scons.org/\" target=\"_blank\" rel=\"noopener\">Scons</a>, <a href=\"https://gradle.org/\" target=\"_blank\" rel=\"noopener\">Gradle</a> y <a href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html\" target=\"_blank\" rel=\"noopener\">Autotools</a>, pero tengo algunas razones para probar algo diferente, hay algunas cosas que no me gustan:</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html\" target=\"_blank\" rel=\"noopener\">Autotools</a></dt>\n<dd>\n<p>No es fácil de configurar y mantener: hay distintos ficheros de configuración y distintos pasos de configuración.</p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://gradle.org/\" target=\"_blank\" rel=\"noopener\">Gradle</a></dt>\n<dd>\n<p>La construcción de proyectos C++ está todavía en desarrollo, los modelos y APIs están cambiando. No es muy rápido. Puedes ver un ejemplo en este artículo <a href=\"/posts/gradle-cpp/es\">Construir un proyecto Cpp con Gradle</a>.</p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://www.gnu.org/software/make/manual/make.html\" target=\"_blank\" rel=\"noopener\">Make</a></dt>\n<dd>\n<p>A medida que el proyecto crece los archivos de configuración se van complicando y volviendo poco manejables. La sintáxis no me parece clara (esto es una custión de gustos).</p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://scons.org/\" target=\"_blank\" rel=\"noopener\">Scons</a></dt>\n<dd>\n<p>Es más lento y un poco más difícil de comprender que <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a>.</p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://maven.apache.org/\" target=\"_blank\" rel=\"noopener\">Maven</a></dt>\n<dd>\n<p>Es lento y puedes terminar \"<em>Javatizando</em>\" la estructura del proyecto.</p>\n</dd>\n</dl>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nHe nombrado solo las cosas que no gustan, pero estos sistemas de construcción tienen otras grandes virtudes, personalmente me encantan <a href=\"https://gradle.org/\" target=\"_blank\" rel=\"noopener\">Gradle</a>, <a href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html\" target=\"_blank\" rel=\"noopener\">Autotools</a> y <a href=\"https://maven.apache.org/\" target=\"_blank\" rel=\"noopener\">Maven</a> (solo para projectos Java).\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_cmake_vs_meson\"><a href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake</a> vs <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a></h3>\n<div class=\"paragraph\">\n<p>Después de descartar los anteriores, estoy considerando <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> y <a href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake</a>. Los dos son bastante rápidos:</p>\n</div>\n<div class=\"paragraph\">\n<p>Aunque <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> está hecho en <a href=\"https://python.org/\" target=\"_blank\" rel=\"noopener\">Python</a>, simplemente genera projectos <a href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja</a>. La primera vez tenemos que ejecutar <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> para configurar el proyecto, el resto de ejecuciones para compilar o ejecutar pruebas, realmente estaremos ejecutando directamente <a href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake</a> también puede generar proyectos <a href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja</a> entre otros formatos, <a href=\"https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html\">mira la documentación \"CMake generators\"</a>.</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake</a></dt>\n<dd>\n<p>Tiene una gran ventaja sobre <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a>, es mucho más maduro y es mucho más usado, lo que significa que podrás encontrar muy fácilmente ejemplos, documentación y ayuda en Internet. No importa el tipo de proyecto que estés empezando, lo más seguro es que <a href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake</a> sea una buena elección.</p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a></dt>\n<dd>\n<p>Es un proyecto jóven comparado con <a href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake</a>, pero está creciendo rápido y ya ha sido adoptado por algunos proyectos importantes como <a href=\"https://www.gnome.org/\" target=\"_blank\" rel=\"noopener\">Gnome</a>, donde han comenzado una iniciativa para <a href=\"https://wiki.gnome.org/Initiatives/GnomeGoals/MesonPorting\">migrar desde Autotools a Meson</a>.</p>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p><strong>Finalmente he elegido</strong> <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> porque:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>La sintáxis es muy clara para mí, cuando leo un archivo <span class=\"title-ref\">meson.build</span> entiendo rápidamente lo ue está pasando durante el proceso de construcción.</p>\n</li>\n<li>\n<p>Es rápido, aunque está escrito en <a href=\"https://python.org/\" target=\"_blank\" rel=\"noopener\">Python</a> utiliza <a href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja</a> para construir el proyecto. La primera vez tienes que utilizar <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> para configurar el proyecto, pero para construir y probar el proyecto relmente estamos ejecutando <a href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja</a>.</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Pasos para compilar y ejectuar tests</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ meson build . <b class=\"conum\">(1)</b>\n$ <span class=\"hljs-built_in\">cd</span> build\n$ ninja build   <b class=\"conum\">(2)</b>\n$ ninja <span class=\"hljs-built_in\">test</span>    <b class=\"conum\">(3)</b></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>Primera vez, configuración del proyecto</p>\n</li>\n<li>\n<p>Cada vez que construyes el projecto</p>\n</li>\n<li>\n<p>Cada vez que ejecutas tests</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_otras_comparaciones_entre_sistemas_de_construcción\">Otras comparaciones entre sistemas de construcción</h3>\n<div class=\"paragraph\">\n<p>He encontrado un par de comparaciones interesantes entre algunos de los sistemas de construcción en C++, aunque puede que no sean del todo imparciales porque han sido realizadas por <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> y <a href=\"https://scons.org/\" target=\"_blank\" rel=\"noopener\">Scons</a>.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://bitbucket.org/scons/scons/wiki/SconsVsOtherBuildTools\">C++ build systems comparison from Scons</a>.</p>\n</li>\n<li>\n<p><a href=\"https://mesonbuild.com/Simple-comparison.html\">C++ build systems comparison from Meson</a>.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_framework_the_pruebas_unitarias\">Framework the Pruebas Unitarias</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Anteriorment he utilizado algunas librerías del tipo <a href=\"https://en.wikipedia.org/wiki/XUnit\" target=\"_blank\" rel=\"noopener\">xUnit</a> como <a href=\"https://github.com/unittest-cpp/unittest-cpp\">UnitTest++</a>, <a href=\"https://cpputest.github.io/\">CppUTest</a> o <a href=\"https://github.com/google/googletest\">Google Test</a> que encaja perfectamente con <a href=\"https://github.com/google/googletest/tree/master/googlemock\">Google Mock</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Si quires una apuesta segura que cumpla tus expectativas, te recomiendo <a href=\"https://github.com/google/googletest\">Google Test</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Pero hace algún tiempo encontré un framework de pruebas con algunas características no tan comunes en librerías de pruebas C++ y que resultaba realmente fácil de utilizar, estoy hablando de <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a>:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Es simplemente un fichero de cabeceras C++ sin dependencias adicionales, por lo que resulta realmente rápido comenzar (wget y utilizar el fichero descargado desde tus pruebas).</p>\n</li>\n<li>\n<p>Puedes utilizar el estilo normal de pruebas unitarias o el estilo <a href=\"https://en.wikipedia.org/wiki/Behavior-driven_development\" target=\"_blank\" rel=\"noopener\">BDD</a>.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Si quieres saber más sobre <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a>, te recomiendo que directamente lo pruebes, el siguiente ejemplo, es cuestión de dos minutos <a href=\"https://github.com/philsquared/Catch/blob/master/docs/tutorial.md#writing-tests\">simple example up and running</a>. Puedes también leer algunos artículos como <a href=\"https://github.com/philsquared/Catch/blob/master/docs/why-catch.md\">Why do we need yet another C test framework?] o https://blog.coldflake.com/posts/Testing-C-with-a-new-Catch/[Testing C++ With A New Catch</a>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_doctest_una_alternativa_a_catch\"><a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a>: Una alternativa a <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a></h3>\n<div class=\"paragraph\">\n<p>Hay otro framework de pruebas llamado <a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a>, con los mismos principios que <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a>, pero promete ser más rápido y ligero (<a href=\"https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md\">resultados de las comparaciones de rendimiento</a>) que <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a> fue diseñado basándose en los puntos fuertes de <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a>, pero hay algunas <a href=\"https://github.com/onqtam/doctest/blob/master/doc/markdown/faq.md#how-is-doctest-different-from-catch\">diferencias</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>No es fácil decidirse por uno, los dos son muy parecidos, puedes comprobar las diferencias a continuación:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Differencias entre la rama usando <a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a> y la rama usando <a href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch</a></div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-diff\" data-lang=\"diff\"><span class=\"hljs-meta\">@@ -1,12 +1,12 @@</span>\n<span class=\"hljs-deletion\">-#define CATCH_CONFIG_MAIN // It tells Catch to provide a main() - only do this in one cpp file</span>\n<span class=\"hljs-addition\">+#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN</span>\n\n<span class=\"hljs-deletion\">-#include \"catch.hpp\"</span>\n<span class=\"hljs-addition\">+#include \"doctest.h\"</span>\n#include \"Uuid.h\"\n#include &lt;string&gt;\n\nconstexpr int MAX_ITERS = 100;\n\n<span class=\"hljs-deletion\">-TEST_CASE(\"Uuid\", \"[uuid]\")</span>\n<span class=\"hljs-addition\">+TEST_CASE(\"Uuid\")</span>\n{\nfor (int i = 0; i &lt; MAX_ITERS; i++)\n{\n@@ -26,7 +26,7 @@ TEST_CASE(\"Uuid\", \"[uuid]\")\n\n// BDD style\n\n<span class=\"hljs-deletion\">-SCENARIO(\"UUID creation\", \"[Uuid]\")</span>\n<span class=\"hljs-addition\">+SCENARIO(\"UUID creation\")</span>\n{\n\nGIVEN(\"A random UUID \")</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Finalmente he elegido <a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a> simplemente porque es más rápido: <a href=\"https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md\">resultados de las comparaciones de rendimiento</a>.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nHe creado el proyecto de ejemplo utilizando ambos frameworks, puedes encontrarlos en diferentes ramas del repositorio: <a href=\"https://github.com/carlosvin/uuid-cpp/tree/doctest\">rama doctest</a> or <a href=\"https://github.com/carlosvin/uuid-cpp/tree/catch\">rama catch</a>.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_ejemplo\">Ejemplo</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>He creado un ejemplo para ilustrar este artículo: <a href=\"https://github.com/carlosvin/uuid-cpp\" class=\"bare\">https://github.com/carlosvin/uuid-cpp</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Consiste en una implementación básica de un generador pseudo-aleatorio de <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier\" target=\"_blank\" rel=\"noopener\">UUID</a>, está basado en <a href=\"https://www.cplusplus.com/reference/random/mt19937\" target=\"_blank\" rel=\"noopener\">mt19937</a> que no es criptográficamente seguro.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_artefactos_del_proyecto\">Artefactos del Proyecto</h3>\n<div class=\"paragraph\">\n<p>Cuando instalemos el proyecto, <a href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson</a> (<a href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja</a> realmente) generará una serie de artefactos en nuestro sistema.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Librería compartida: <code>libuuid</code>.</p>\n</li>\n<li>\n<p>Fichero de cabeceras para que los desarrolladores puedan usar la librería: <code>include/Uuid.h</code>.</p>\n</li>\n<li>\n<p>Fichero ejecutable <code>uuidgen</code> (Generador de <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier\" target=\"_blank\" rel=\"noopener\">UUID</a>).</p>\n</li>\n<li>\n<p>Ejecutable de las pruebas unitarias (no será instalado).</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Si ejecutamos <code>ninja install</code> en Linux obtendremos los siguientes ficheros:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">/usr/<span class=\"hljs-built_in\">local</span>/lib/libuuid.so\n/usr/<span class=\"hljs-built_in\">local</span>/include/Uuid.h\n/usr/<span class=\"hljs-built_in\">local</span>/bin/uuidgen</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_estructura_del_proyecto_fork_project\">Estructura del Proyecto (<a href=\"https://github.com/carlosvin/uuid-cpp\">Fork project</a>)</h3>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/meson.build\">meson.build</a></dt>\n<dd>\n<p>Fichero principal de configuración para construir el proyecto.\nLo utilizamos para especificar las propiedades y subdirectorios del proyecto.</p>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">meson.build</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-python\" data-lang=\"python\">project(\n    <span class=\"hljs-string\">'cpp-meson-example'</span>, <span class=\"hljs-comment\"># project name</span>\n    <span class=\"hljs-string\">'cpp'</span>, <span class=\"hljs-comment\"># C++ project, e.g: for C project</span>\n    version : <span class=\"hljs-string\">'1.0.0'</span>,\n    license : <span class=\"hljs-string\">'MIT'</span>,\n    default_options : [<span class=\"hljs-string\">'cpp_std=c++11'</span>]) <span class=\"hljs-comment\"># compile for C++</span>\n\n<span class=\"hljs-comment\"># it will be referred from subdir projects</span>\ninc = include_directories(<span class=\"hljs-string\">'include'</span>)\n\n<span class=\"hljs-comment\"># meson will try to find a meson.build file inside following directories</span>\nsubdir(<span class=\"hljs-string\">'include'</span>)\nsubdir(<span class=\"hljs-string\">'src'</span>)\nsubdir(<span class=\"hljs-string\">'test'</span>)</code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/include/\">include</a></dt>\n<dd>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">meson.build</dt>\n<dd>\n<p>Archivo de configuración para construir este directorio, no hay mucho que hacer aquí, simplemente indicamos qué ficheros de cabeceras han de ser instalados</p>\n</dd>\n</dl>\n</div>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">include/meson.build</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-python\" data-lang=\"python\"><span class=\"hljs-comment\"># Select header files to be installed</span>\ninstall_headers(<span class=\"hljs-string\">'Uuid.h'</span>)</code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/include/Uuid.h\">Uuid.h</a></dt>\n<dd>\n<p>Archivos de cabeceras, es el interfaz que expone la librería y que será incluido por los usuarios de la misma.</p>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">include/Uuid.h</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-keyword\">namespace</span> ids {\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Uuid</span> {</span>\n    <span class=\"hljs-keyword\">private</span>:\n    <span class=\"hljs-comment\">// ...</span></code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src\">src</a></dt>\n<dd>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src/meson.build\">meson.build (src)</a></dt>\n<dd>\n<p>Declara 2 artefactos de salida: La librería <code>libuuid</code> y el ejecutable <code>uuidgen</code>.</p>\n</dd>\n</dl>\n</div>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">src/meson.build</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-python\" data-lang=\"python\">libuuid = shared_library(\n    <span class=\"hljs-string\">'uuid'</span>, <b class=\"conum\">(1)</b>\n    <span class=\"hljs-string\">'Uuid.cpp'</span>, <b class=\"conum\">(2)</b>\n    include_directories : inc, <b class=\"conum\">(3)</b>\n    install : true) <b class=\"conum\">(4)</b>\n\nuuidgen = executable(\n    <span class=\"hljs-string\">'uuidgen'</span>, <b class=\"conum\">(5)</b>\n    <span class=\"hljs-string\">'main.cpp'</span>, <b class=\"conum\">(6)</b>\n    include_directories : inc, <b class=\"conum\">(7)</b>\n    link_with : libuuid, <b class=\"conum\">(8)</b>\n    install : true) <b class=\"conum\">(9)</b></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>library name</p>\n</li>\n<li>\n<p>source files to be compile</p>\n</li>\n<li>\n<p>previously declared include directories in root <code>meson.build</code></p>\n</li>\n<li>\n<p><code>libuuid</code> will be part of project installation</p>\n</li>\n<li>\n<p>executable name</p>\n</li>\n<li>\n<p>source files to compile</p>\n</li>\n<li>\n<p>previously declared include directories in root <code>meson.build</code></p>\n</li>\n<li>\n<p>linking executable with shared previously declared shared library <code>libuuid</code></p>\n</li>\n<li>\n<p><code>uuidgen</code> executable be part of project installation</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src/main.cpp\">main.cpp</a></dt>\n<dd>\n<p>Código fuente del ejecutable de la aplicación: <code>uuidgen</code></p>\n</dd>\n</dl>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">src/main.cpp</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">\"Uuid.h\"</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    ids::Uuid uuid;\n    <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &lt;&lt; uuid.to_str() &lt;&lt; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src/Uuid.cpp\">Uuid.cpp</a></dt>\n<dd>\n<p>Implementación de la clase declarada en el fichero de cabeceras <code>Uuid.h</code>.</p>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">src/Uuid.cpp</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">\"Uuid.h\"</span></span>\n\nUuid::Uuid()\n{ <span class=\"hljs-comment\">// ...</span></code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/test/\">test</a></dt>\n<dd>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/test/meson.build\">meson.build (test)</a></dt>\n<dd>\n<p>Archivo de configuración para construir y ejecutar las pruebas unitarias.</p>\n</dd>\n</dl>\n</div>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">test/meson.build</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-python\" data-lang=\"python\">testexe = executable(\n    <span class=\"hljs-string\">'testexe'</span>, <b class=\"conum\">(1)</b>\n    <span class=\"hljs-string\">'uuid_test.cpp'</span>, <b class=\"conum\">(2)</b>\n    include_directories : inc, <b class=\"conum\">(3)</b>\n    link_with : libuuid) <b class=\"conum\">(4)</b>\n\ntest(<span class=\"hljs-string\">'Uuid test'</span>, testexe) <b class=\"conum\">(5)</b>\n\ntest(<span class=\"hljs-string\">'Uuid test with args and env'</span>, testexe, args : [<span class=\"hljs-string\">'arg1'</span>, <span class=\"hljs-string\">'arg2'</span>], env : [<span class=\"hljs-string\">'FOO=bar'</span>]) <b class=\"conum\">(6)</b></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>test executable name</p>\n</li>\n<li>\n<p>tests source files to be compiled</p>\n</li>\n<li>\n<p>declared include directories in root <code>meson.build</code></p>\n</li>\n<li>\n<p>link test executable with previously declared shared library <code>libuuid</code></p>\n</li>\n<li>\n<p>test execution</p>\n</li>\n<li>\n<p>we can specify other test execution passing arguments or environment variables</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">doctest.h</dt>\n<dd>\n<p>Librería <a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a> en un único fichero de cabeceras. Puedes tratar de automatizar el proceso de instalación de la librería, yo por el momento la he instalado manualmente, ya que es un proceso muy sencillo:</p>\n</dd>\n</dl>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Añadir <a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest</a> al proyecto</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\"><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-built_in\">test</span>\nwget https://raw.githubusercontent.com/onqtam/doctest/master/doctest/doctest.h</code></pre>\n</div>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://github.com/carlosvin/uuid-cpp/blob/master/test/uuid_test.cpp\">uuid_test.cpp</a></dt>\n<dd>\n<p>Implementación de las pruebas unitarias.</p>\n</dd>\n</dl>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">test/uuid_test.cpp</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">\"doctest.h\"</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">\"Uuid.h\"</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string&gt;</span></span>\n\n<span class=\"hljs-keyword\">constexpr</span> <span class=\"hljs-keyword\">int</span> MAX_ITERS = <span class=\"hljs-number\">100</span>;\n\nTEST_CASE(<span class=\"hljs-string\">\"Uuid\"</span>)\n{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; MAX_ITERS; i++)\n    {\n        ids::Uuid uuid;\n        <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span> uuid_str{uuid.to_str()};\n\n        INFO(uuid_str);\n\n        <span class=\"hljs-comment\">// If assertion fails test execution is stopped</span>\n        REQUIRE(uuid_str.size() == <span class=\"hljs-number\">36</span>);\n\n        <span class=\"hljs-comment\">// If assertion fails test execution continues</span>\n        CHECK(uuid.most &gt; <span class=\"hljs-number\">0</span>);\n        CHECK(uuid.least &gt; <span class=\"hljs-number\">0</span>);\n    }\n}\n\n<span class=\"hljs-comment\">// BDD style</span>\n\nSCENARIO(<span class=\"hljs-string\">\"UUID creation\"</span>)\n{\n\n    GIVEN(<span class=\"hljs-string\">\"A random UUID \"</span>)\n    {\n\n        ids::Uuid uuid;\n        <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span> uuid_str{uuid.to_str()};\n\n        REQUIRE(uuid_str.size() == <span class=\"hljs-number\">36</span>);\n\n        WHEN(<span class=\"hljs-string\">\"get the most and least\"</span>)\n        {\n            THEN(<span class=\"hljs-string\">\"should be more than 0\"</span>)\n            {\n                CHECK(uuid.most &gt; <span class=\"hljs-number\">0</span>);\n                CHECK(uuid.least &gt; <span class=\"hljs-number\">0</span>);\n            }\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Tip</div>\n</td>\n<td class=\"content\">\nPuedes encontrar las instrucciones para construir y ejecutar el proyecto de ejemplo en: <a href=\"https://github.com/carlosvin/uuid-cpp#how-to-build-the-example\" class=\"bare\">https://github.com/carlosvin/uuid-cpp#how-to-build-the-example</a>\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>","slug":"choosing-modern-cpp-stack"},{"sectids":"","toc-placement":"auto","notitle":"","stylesheet":"","webfonts":"","prewrap":"","attribute-undefined":"drop-line","attribute-missing":"skip","iconfont-remote":"","caution-caption":"Caution","important-caption":"Important","note-caption":"Note","tip-caption":"Tip","warning-caption":"Warning","example-caption":"Example","figure-caption":"Figure","table-caption":"Table","toc-title":"Table of Contents","section-refsig":"Section","part-refsig":"Part","chapter-refsig":"Chapter","appendix-refsig":"Appendix","appendix-caption":"Appendix","untitled-label":"Untitled","version-label":"Version","last-update-label":"Last updated","docfile":"gradle-cpp.en.adoc","docdir":"","docfilesuffix":".adoc","docname":"gradle-cpp.en","embedded":"","asciidoctor":"","asciidoctor-version":"2.0.10","safe-mode-name":"secure","safe-mode-secure":"","safe-mode-level":20,"max-include-depth":64,"user-home":".","backend":"html5","max-attribute-value-size":4096,"linkcss":"","doctype":"article","htmlsyntax":"html","backend-html5-doctype-article":"","doctype-article":"","backend-html5":"","outfilesuffix":".html","filetype":"html","filetype-html":"","basebackend-html-doctype-article":"","basebackend-html":"","basebackend":"html","stylesdir":".","iconsdir":"./images/icons","localdate":"2020-04-22","localyear":"2020","localtime":"20:39:54 +0200","localdatetime":"2020-04-22 20:39:54 +0200","docdate":"2020-04-19","docyear":"2020","doctime":"10:46:31 +0200","docdatetime":"2020-04-19 10:46:31 +0200","doctitle":"Build C++ project with Gradle","date":"2014/09/27 12:00:00","keywords":["Gradle","C++","Build Software","Build System","Dependency Management"],"description":"How to build a C++ project using Gradle","lang":"en","toc":"","scons":"https://www.scons.org[SCons,window=_blank]","autotools":"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction[Autotools,window=_blank]","ant":"https://ant.apache.org[Ant,window=_blank]","maven":"https://maven.apache.org[Maven,window=_blank]","gradle":"https://www.gradle.org[Gradle,window=_blank]","incubation":"https://docs.gradle.org/current/userguide/feature_lifecycle.html#sec:incubating_state[incubation,window=_blank]","toolchain":"https://en.wikipedia.org/wiki/Toolchain[Toolchain,window=_blank]","java":"https://www.java.com[Java,window=_blank]","makefile":"https://www.gnu.org/software/make/manual/html_node/Makefiles.html:[Makefile,window=_blank]","android":"https://developer.android.com/studio/build[Android,window=_blank]","gcc":"https://gcc.gnu.org/[GCC,window=_blank]","authorcount":0,"title":"Build C++ project with Gradle","summary":"How to build a C++ project using Gradle","html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_introduction\">Introduction</a></li>\n<li><a href=\"#_case_study\">Case study</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_project_structure\">Project Structure</a></li>\n<li><a href=\"#_c_application\">C++ Application</a></li>\n<li><a href=\"#_building_with_gradle\">Building with Gradle</a></li>\n<li><a href=\"#_try_it_yourself\">Try it yourself</a></li>\n</ul>\n</li>\n<li><a href=\"#_conclusions\">Conclusions</a></li>\n</ul>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_introduction\">Introduction</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I am more and more worried about building, dependency management and distribution of my projects. I&#8217;d like to find a tool that unifies those processes with independence of the language. I know several tools which almost fit to what I&#8217;m looking for, like <a href=\"https://www.scons.org\" target=\"_blank\" rel=\"noopener\">SCons</a>, <a href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction\" target=\"_blank\" rel=\"noopener\">Autotools</a>, <a href=\"https://ant.apache.org\" target=\"_blank\" rel=\"noopener\">Ant</a>, <a href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven</a> and lately <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>I&#8217;ve made several projects with <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a>, but always they were <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> and <a href=\"https://developer.android.com/studio/build\" target=\"_blank\" rel=\"noopener\">Android</a> projects. <span class=\"line-through\">In <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> projects I&#8217;ve found a <a href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven</a> replacement, because it is faster, easier and less verbose</span>. <strong>Update 2020</strong>: With the experience, now if I have to pick a build system for a <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> project I&#8217;d pick <a href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven</a>, especially for a professional project, but it is not the topic of this post.</p>\n</div>\n<div class=\"paragraph\">\n<p>About <a href=\"https://developer.android.com/studio/build\" target=\"_blank\" rel=\"noopener\">Android</a> projects I suffered the early adoption of <a href=\"https://developer.android.com/sdk/installing/studio-build.html\" target=\"_blank\" rel=\"noopener\">Android Studio + Gradle</a>, although currently I think the are more mature and they work fine.</p>\n</div>\n<div class=\"paragraph\">\n<p>First of all, I have to say: building C/C++/Objective-C projects with <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> is in <a href=\"https://docs.gradle.org/current/userguide/feature_lifecycle.html#sec:incubating_state\" target=\"_blank\" rel=\"noopener\">incubation</a> phase, although now we can perform advanced tasks like:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Generation several artifacts within same project (libraries and executables).</p>\n</li>\n<li>\n<p>Dependency management between artifacts (no versions).</p>\n</li>\n<li>\n<p>Different \"flavors\" of the same software, e.g: we can generate a \"Community\" release and other one with more enabled features called \"Enterprise\".</p>\n</li>\n<li>\n<p>It allows multi-platform binary generation.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>As I said, this plugin is still having limitations although they are working on it: <a href=\"https://blog.gradle.org/state-and-future-of-the-gradle-software-model#a-way-forward\">Gradle C++ roadmap</a>. <span class=\"line-through\">If they achieve it I&#8217;ll leave <a href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction\" target=\"_blank\" rel=\"noopener\">Autotools</a> (I&#8217;m going to regret saying that)</span>. <strong>Update 2020</strong>: Actually few years later I am not using <a href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction\" target=\"_blank\" rel=\"noopener\">Autotools</a>, neither <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a>, but I am using <a href=\"https://mesonbuild.com/\">Meson</a> and considering <a href=\"https://docs.bazel.build/versions/master/tutorial/cpp.html\">Bazel</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_case_study\">Case study</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I&#8217;ve extracted all the case study from <a href=\"https://docs.gradle.org/current/userguide/native_software.html\">Gradle user guide for native software</a>. I&#8217;ve adapted the project to be multi-platform with 2 versions \"Community\" and \"Enterprise\".</p>\n</div>\n<div class=\"paragraph\">\n<p>The application consists of an executable and a dynamic library. The executable will use the library.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> also is able to generate a distributable version and a debug version.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can fork the code on <a href=\"https://github.com/carlosvin/cpp_gradle\" class=\"bare\">https://github.com/carlosvin/cpp_gradle</a>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_project_structure\">Project Structure</h3>\n<div class=\"paragraph\">\n<p>We can create whichever directory structure, but it is easier using the proposed by <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a>, if not we&#8217;ll have to specify where the code is located.</p>\n</div>\n<div class=\"paragraph\">\n<p>This is the project structure:</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">gradle-cpp</dt>\n<dd>\n<p>Root directory.</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">build.gradle</dt>\n<dd>\n<p>File where is configured <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> project, it is the equivalent to: build.xml for <a href=\"https://ant.apache.org\" target=\"_blank\" rel=\"noopener\">Ant</a>, <a href=\"\">Makefile</a> for C/C++ or pom.xml for <a href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven</a>.</p>\n</dd>\n<dt class=\"hdlist1\">src</dt>\n<dd>\n<p>Folder where the source code is located.</p>\n</dd>\n</dl>\n</div>\n</dd>\n<dt class=\"hdlist1\">hello</dt>\n<dd>\n<p>This folder contains the module hello. This module will generate hello library.</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">cpp</dt>\n<dd>\n<p>This folder contains C++ source files.</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">Hello.cpp</dt>\n<dd>\n<p> File with the implementation of Hello class.</p>\n</dd>\n</dl>\n</div>\n</dd>\n<dt class=\"hdlist1\">headers</dt>\n<dd>\n<p>Folder with header files.</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">Hello.h</dt>\n<dd>\n<p>Class Hello declaration.</p>\n</dd>\n<dt class=\"hdlist1\">Msg.h</dt>\n<dd>\n<p>File with constants declarations.</p>\n</dd>\n</dl>\n</div>\n</dd>\n</dl>\n</div>\n</dd>\n<dt class=\"hdlist1\">main</dt>\n<dd>\n<p>This folder contains the module which produces the executable that uses hello library.</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">cpp</dt>\n<dd>\n<p>This folder contains C++ source files.</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">main.cpp</dt>\n<dd>\n<p>Source code of main function.</p>\n</dd>\n</dl>\n</div>\n</dd>\n</dl>\n</div>\n</dd>\n<dt class=\"hdlist1\">build</dt>\n<dd>\n<p>Folder created automatically by <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> where it leaves all execution results like unit tests reports, compiled files, package distributions, etc.</p>\n</dd>\n</dl>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_c_application\">C++ Application</h3>\n<div class=\"paragraph\">\n<p>It consists of an executable that uses the functionality implemented at <code>hello</code> library.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">main.cpp</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">\"Hello.h\"</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc, <span class=\"hljs-keyword\">char</span> ** argv)</span>\n</span>{\n    <span class=\"hljs-function\">Hello <span class=\"hljs-title\">hello</span> <span class=\"hljs-params\">(<span class=\"hljs-string\">\"Pepito\"</span>)</span></span>;\n    hello.sayHello(<span class=\"hljs-number\">10</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><code>hello</code> library allows greet <code>n</code> <sup class=\"footnote\">[<a id=\"_footnoteref_1\" class=\"footnote\" href=\"#_footnotedef_1\" title=\"View footnote.\">1</a>]</sup> times to someone who is passed as argument to constructor class.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Hello.h</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Hello</span>\n{</span>\n    <span class=\"hljs-keyword\">private</span>:\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> * who;\n    <span class=\"hljs-keyword\">public</span>:\n        Hello(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> * who);\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">unsigned</span> n = <span class=\"hljs-number\">1</span>)</span></span>;\n};</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_building_with_gradle\">Building with <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a></h3>\n<div class=\"sect3\">\n<h4 id=\"_base_case\">Base case</h4>\n<div class=\"paragraph\">\n<p>The only we need to build the application with <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> is: having <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a><sup class=\"footnote\">[<a id=\"_footnoteref_2\" class=\"footnote\" href=\"#_footnotedef_2\" title=\"View footnote.\">2</a>]</sup> and the file <code>build.gradle</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">build.gradle</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">apply <span class=\"hljs-string\">plugin:</span> <span class=\"hljs-string\">'cpp'</span>\n\nmodel {\n  components {\n    hello(NativeLibrarySpec) {}\n    main(NativeExecutableSpec) {\n      binaries.all {\n        lib <span class=\"hljs-string\">library:</span> <span class=\"hljs-string\">\"hello\"</span>\n      }\n    }\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>With this simple file, we&#8217;ll be able to compile and install the application in Debug mode for the platform where we are executing <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> (in my case X64).</p>\n</div>\n<div class=\"paragraph\">\n<p>If we execute <code>gradle task</code> from the root of the project, we&#8217;ll get all the tasks we can do with <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>In our case, we just want our compiled application ready to run, so we have to execute: <code>gradle installMainExecutable</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Once execution has finished, we can run the program calling to `build/install/mainExecutable/main`<sup class=\"footnote\">[<a id=\"_footnoteref_3\" class=\"footnote\" href=\"#_footnotedef_3\" title=\"View footnote.\">3</a>]</sup>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Output</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ build/install/mainExecutable/main\n1.  Hello Mr. Pepito (Community)\n2.  Hello Mr. Pepito (Community)\n3.  Hello Mr. Pepito (Community)\n4.  Hello Mr. Pepito (Community)\n5.  Hello Mr. Pepito (Community)\n6.  Hello Mr. Pepito (Community)\n7.  Hello Mr. Pepito (Community)\n8.  Hello Mr. Pepito (Community)\n9.  Hello Mr. Pepito (Community)\n10. Hello Mr. Pepito (Community)</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_different_flavors\">Different \"Flavors\"</h4>\n<div class=\"paragraph\">\n<p>With a few lines more we can generate different versions of same application. In our example we are going to build \"Community\" and \"Enterprise\" flavors.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">build.gradle</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">apply <span class=\"hljs-string\">plugin:</span> <span class=\"hljs-string\">'cpp'</span>\n\nmodel {\n  flavors {\n      community\n      enterprise\n  }\n\n  components {\n    hello(NativeLibrarySpec) {\n      binaries.all {\n        <span class=\"hljs-keyword\">if</span> (flavor == flavors.enterprise) {\n          cppCompiler.define <span class=\"hljs-string\">\"ENTERPRISE\"</span>\n        }\n      }\n    }\n    main(NativeExecutableSpec) {\n      binaries.all {\n        lib <span class=\"hljs-string\">library:</span> <span class=\"hljs-string\">\"hello\"</span>\n        }\n    }\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>We also have to prepare our application to use compilation parameters.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Msg.h</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">ifdef</span> ENTERPRISE</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> * EDITION = <span class=\"hljs-string\">\"Enterprise\"</span>;\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">else</span></span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> * EDITION = <span class=\"hljs-string\">\"Community\"</span>;\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">endif</span></span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In this way it selects a string depending on used flavor.</p>\n</div>\n<div class=\"paragraph\">\n<p>If we execute <code>gradle clean task</code> in the root folder, we&#8217;ll get more available tasks. Before, we had <code>installMainExecutable</code> which has been replaced by <code>installCommunityMainExecutable</code> and <code>installEnterpriseMainExecutable</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>If we execute both tasks, we&#8217;ll get the application installed in both flavors:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\"><span class=\"hljs-variable\">$gradle</span> installEnterpriseMainExecutable installCommunityMainExecutable\n\n:compileEnterpriseHelloSharedLibraryHelloCpp\n:linkEnterpriseHelloSharedLibrary\n:enterpriseHelloSharedLibrary\n:compileEnterpriseMainExecutableMainCpp\n:linkEnterpriseMainExecutable\n:enterpriseMainExecutable\n:installEnterpriseMainExecutable\n:compileCommunityHelloSharedLibraryHelloCpp\n:linkCommunityHelloSharedLibrary\n:communityHelloSharedLibrary\n:compileCommunityMainExecutableMainCpp\n:linkCommunityMainExecutable\n:communityMainExecutable\n:installCommunityMainExecutable\n\nBUILD SUCCESSFUL\nTotal time: 9.414 secs</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Now we can run the application in both flavors:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Community</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ build/install/mainExecutable/community/main\n1.      Hello Mr. Pepito        (Community)\n2.      Hello Mr. Pepito        (Community)\n3.      Hello Mr. Pepito        (Community)\n4.      Hello Mr. Pepito        (Community)\n5.      Hello Mr. Pepito        (Community)\n6.      Hello Mr. Pepito        (Community)\n7.      Hello Mr. Pepito        (Community)\n8.      Hello Mr. Pepito        (Community)\n9.      Hello Mr. Pepito        (Community)\n10.     Hello Mr. Pepito        (Community)</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Enterprise</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ build/install/mainExecutable/enterprise/main\n1.      Hello Mr. Pepito        (Enterprise)\n2.      Hello Mr. Pepito        (Enterprise)\n3.      Hello Mr. Pepito        (Enterprise)\n4.      Hello Mr. Pepito        (Enterprise)\n5.      Hello Mr. Pepito        (Enterprise)\n6.      Hello Mr. Pepito        (Enterprise)\n7.      Hello Mr. Pepito        (Enterprise)\n8.      Hello Mr. Pepito        (Enterprise)\n9.      Hello Mr. Pepito        (Enterprise)\n10.     Hello Mr. Pepito        (Enterprise)</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_release_or_debug\">Release or Debug</h4>\n<div class=\"paragraph\">\n<p>By default <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> compiles in Debug mode, but we can add the Release mode which enables several optimizations and remove debug flags<sup class=\"footnote\">[<a id=\"_footnoteref_4\" class=\"footnote\" href=\"#_footnotedef_4\" title=\"View footnote.\">4</a>]</sup>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">build.gradle</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">apply <span class=\"hljs-string\">plugin:</span> <span class=\"hljs-string\">'cpp'</span>\nmodel {\n    buildTypes {\n        debug\n        release\n    }\n<span class=\"hljs-comment\">// ... the rest of file below doesn't change</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If we execute <code>gradle clean task</code> we will get more tasks, they have been split, for example <code>installCommunityMainExecutable</code> has been split in <code>installDebugCommunityMainExecutable</code> and <code>installReleaseCommunityMainExecutable</code>.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_multi_platform\">Multi-platform</h4>\n<div class=\"paragraph\">\n<p>Also we can use cross-compiling features provided by compilers and generate native components for other platforms. To do so we just have to add the supported platforms.</p>\n</div>\n<div class=\"paragraph\">\n<p>This only works if we have installed the <a href=\"https://en.wikipedia.org/wiki/Toolchain\" target=\"_blank\" rel=\"noopener\">Toolchain</a> for the target platform.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">build.gradle</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">apply <span class=\"hljs-string\">plugin:</span> <span class=\"hljs-string\">'cpp'</span>\n\nmodel {\n  buildTypes {\n    debug\n    release\n  }\n\n  platforms {\n    x86 {\n      architecture <span class=\"hljs-string\">\"x86\"</span>\n    }\n    x64 {\n      architecture <span class=\"hljs-string\">\"x86_64\"</span>\n    }\n    itanium {\n      architecture <span class=\"hljs-string\">\"ia-64\"</span>\n    }\n  }\n\n  flavors {\n    community\n    enterprise\n  }\n\n  components {\n    hello(NativeLibrarySpec) {\n      binaries.all {\n        <span class=\"hljs-keyword\">if</span> (flavor == flavors.enterprise) {\n          cppCompiler.define <span class=\"hljs-string\">\"ENTERPRISE\"</span>\n        }\n      }\n    }\n    main(NativeExecutableSpec) {\n      binaries.all {\n        lib <span class=\"hljs-string\">library:</span> <span class=\"hljs-string\">\"hello\"</span>\n      }\n    }\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When execute <code>gradle clean task</code> we get the different build options we have.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nIn this example, we can build different versions of the application in different flavors for different platforms in Debug or Release mode.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_try_it_yourself\">Try it yourself</h3>\n<div class=\"paragraph\">\n<p>You can find the project at <a href=\"https://github.com/carlosvin/cpp_gradle\" class=\"bare\">https://github.com/carlosvin/cpp_gradle</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Requirements:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> 6 or higher.</p>\n</li>\n<li>\n<p>An installed compiler (e.g <a href=\"\">GCC</a>)</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>You just have to follow next steps:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p><code>git clone <a href=\"mailto:git@github.com\">git@github.com</a>:carlosvin/cpp_gradle.git</code></p>\n</li>\n<li>\n<p><code>cd cpp_gradle</code></p>\n</li>\n<li>\n<p><code>./gradlew task</code> or <code>./gradlew.bat task</code> if you are in Windows. In this way you&#8217;ll see available tasks for this project. The first execution will take more time, because it downloads <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> runtime.</p>\n</li>\n<li>\n<p>If you are in a 64 bits platform, you can use this command to install the application: <code>./gradlew installX64ReleaseEnterpriseMainExecutable</code>.</p>\n</li>\n<li>\n<p>Run the application you just built: <code>build/install/mainExecutable/x64ReleaseEnterprise/main</code>.</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_conclusions\">Conclusions</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>With a tiny configuration file, we have many different build combinations.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> for C++ has a promising future, I hope it follows the steps of <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> and <a href=\"https://developer.android.com/studio/build\" target=\"_blank\" rel=\"noopener\">Android</a> support.</p>\n</div>\n<div class=\"paragraph\">\n<p>It is well supported by continuous integration systems.</p>\n</div>\n<div class=\"paragraph\">\n<p>It has many plugins and features.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> for C++ is a feature under development, we have to be careful:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Don&#8217;t use it in production environments.</p>\n</li>\n<li>\n<p>Many things can change or disappear.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The full example is on <a href=\"https://github.com/carlosvin/cpp_gradle\" class=\"bare\">https://github.com/carlosvin/cpp_gradle</a>. I recommend you to <a href=\"#_try_it_yourself\">Try it yourself</a>.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nIf you find any issue in this example, please write a comment, open a defect or fix it yourself at <a href=\"https://github.com/carlosvin/cpp_gradle\" class=\"bare\">https://github.com/carlosvin/cpp_gradle</a>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>More info at <a href=\"https://docs.gradle.org/current/userguide/native_software.html\">Getting Started Gradle Native</a>.</p>\n</div>\n</div>\n</div>\n<div id=\"footnotes\">\n<hr>\n<div class=\"footnote\" id=\"_footnotedef_1\">\n<a href=\"#_footnoteref_1\">1</a>. 'n' Positive integer\n</div>\n<div class=\"footnote\" id=\"_footnotedef_2\">\n<a href=\"#_footnoteref_2\">2</a>. Actually <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> is not required if we use the \"wrapper\", but we aren&#8217;t going to explain it here, <a href=\"https://docs.gradle.org/current/userguide/gradle_wrapper.html\">here you can get more info about Gradle Wrapper</a>.\n</div>\n<div class=\"footnote\" id=\"_footnotedef_3\">\n<a href=\"#_footnoteref_3\">3</a>. .bat in Windows. Without extension in Linux\n</div>\n<div class=\"footnote\" id=\"_footnotedef_4\">\n<a href=\"#_footnoteref_4\">4</a>. We can also specify/modify which optimizations to apply.\n</div>\n</div>","slug":"gradle-cpp"},{"sectids":"","toc-placement":"auto","notitle":"","stylesheet":"","webfonts":"","prewrap":"","attribute-undefined":"drop-line","attribute-missing":"skip","iconfont-remote":"","caution-caption":"Caution","important-caption":"Important","note-caption":"Note","tip-caption":"Tip","warning-caption":"Warning","example-caption":"Example","figure-caption":"Figure","table-caption":"Table","toc-title":"Table of Contents","section-refsig":"Section","part-refsig":"Part","chapter-refsig":"Chapter","appendix-refsig":"Appendix","appendix-caption":"Appendix","untitled-label":"Untitled","version-label":"Version","last-update-label":"Last updated","docfile":"gradle-cpp.es.adoc","docdir":"","docfilesuffix":".adoc","docname":"gradle-cpp.es","embedded":"","asciidoctor":"","asciidoctor-version":"2.0.10","safe-mode-name":"secure","safe-mode-secure":"","safe-mode-level":20,"max-include-depth":64,"user-home":".","backend":"html5","max-attribute-value-size":4096,"linkcss":"","doctype":"article","htmlsyntax":"html","backend-html5-doctype-article":"","doctype-article":"","backend-html5":"","outfilesuffix":".html","filetype":"html","filetype-html":"","basebackend-html-doctype-article":"","basebackend-html":"","basebackend":"html","stylesdir":".","iconsdir":"./images/icons","localdate":"2020-04-22","localyear":"2020","localtime":"20:39:54 +0200","localdatetime":"2020-04-22 20:39:54 +0200","docdate":"2020-04-19","docyear":"2020","doctime":"10:46:31 +0200","docdatetime":"2020-04-19 10:46:31 +0200","doctitle":"Construir un proyecto C++ con Gradle","date":"2014/09/25 19:00:00","description":"Cómo construir un proyecto típico C++ utilizando Gradle","keywords":["Gradle","C++","Build Software","Build System","Dependency Management"],"lang":"es","toc":"","scons":"https://www.scons.org[SCons,window=_blank]","autotools":"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction[Autotools,window=_blank]","ant":"https://ant.apache.org[Ant,window=_blank]","maven":"https://maven.apache.org[Maven,window=_blank]","gradle":"https://www.gradle.org[Gradle,window=_blank]","incubation":"https://docs.gradle.org/current/userguide/feature_lifecycle.html#sec:incubating_state[incubación,window=_blank]","toolchain":"https://en.wikipedia.org/wiki/Toolchain[Toolchain,window=_blank]","java":"https://www.java.com[Java,window=_blank]","makefile":"https://www.gnu.org/software/make/manual/html_node/Makefiles.html:[Makefile,window=_blank]","android":"https://developer.android.com/studio/build[Android,window=_blank]","gcc":"https://gcc.gnu.org/[GCC,window=_blank]","authorcount":0,"title":"Construir un proyecto C++ con Gradle","summary":"Cómo construir un proyecto típico C++ utilizando Gradle","html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_introducción\">Introducción</a></li>\n<li><a href=\"#_un_caso_práctico\">Un caso práctico</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_estructura_del_proyecto\">Estructura del proyecto</a></li>\n<li><a href=\"#_la_aplicación_c\">La Aplicación C++</a></li>\n<li><a href=\"#_construyendo_con_gradle\">Construyendo con Gradle</a></li>\n<li><a href=\"#_pruébalo_tú_mism\">Pruébalo tú mism@</a></li>\n</ul>\n</li>\n<li><a href=\"#_conclusiones\">Conclusiones</a></li>\n</ul>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_introducción\">Introducción</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>La construcción, gestión de dependencias y distribución de mis proyectos es algo que cada vez me preocupa más, me gustaría encontrar una herramienta que unificara este proceso y fuese independiente del lenguaje, lo más parecido con lo que he trabajado ha sido <a href=\"https://www.scons.org\" target=\"_blank\" rel=\"noopener\">SCons</a>, <a href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction\" target=\"_blank\" rel=\"noopener\">Autotools</a>, <a href=\"https://ant.apache.org\" target=\"_blank\" rel=\"noopener\">Ant</a>, <a href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven</a> y últimamente <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Llevo un tiempo haciendo algunas cosas con <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a>, pero siempre centrado en proyectos <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> <span class=\"line-through\">utilizándolo como reemplazo a <a href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven</a>, porque que es más sencillo de usar y más rápido</span>. Actualizacion 2020: <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> sigue siendo más rápido que <a href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven</a>, pero al final sigo utilizando <a href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven</a> para proyectos profesionales por la estabilidad de su API y sus ciclos de vida más restrictivos.\nTambién lo he utilizado en projectos <a href=\"https://developer.android.com/studio/build\" target=\"_blank\" rel=\"noopener\">Android</a> y he sufrido <a href=\"https://developer.android.com/sdk/installing/studio-build.html\" target=\"_blank\" rel=\"noopener\">Android Studio + Gradle</a> en sus fases tempranas, actualmente está todo mucho más documentado y funciona muy bien.</p>\n</div>\n<div class=\"paragraph\">\n<p>Antes de nada hay que decir que la construcción de proyectos C/C++ y Objective-C con <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> se encuentra en fase de <a href=\"https://docs.gradle.org/current/userguide/feature_lifecycle.html#sec:incubating_state\" target=\"_blank\" rel=\"noopener\">incubación</a>, aunque ya permite realizar algunas tareas avanzadas como:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Generación de múltiples artefactos dentro del mismo proyecto, esto es varias librerías o ejecutables.</p>\n</li>\n<li>\n<p>Gestionar las dependencias entre estos artefactos (sin versiones).</p>\n</li>\n<li>\n<p>Generar distintos \"sabores\" de aplicaciones, por ejemplo: podremos generar una aplicación \"Community\" y otra con más características habilitadas llamada \"Enterprise\".</p>\n</li>\n<li>\n<p>Permite generar binarios para distintas plataformas, esto depende de las cadenas de herramientas (<a href=\"https://en.wikipedia.org/wiki/Toolchain\" target=\"_blank\" rel=\"noopener\">Toolchain</a>) que tengamos instaladas en la máquina de compilación.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Como decía todavía tiene limitaciones, aunque están trabajando en ello <a href=\"https://blog.gradle.org/state-and-future-of-the-gradle-software-model#a-way-forward\">si consiguen lo que tienen planeado</a>, <span class=\"line-through\">y si lo consiguen,  dejaré <a href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction\" target=\"_blank\" rel=\"noopener\">Autotools</a> (me arrepentiré de haber dicho esto)</span>. Actualización 2000: Realmente, unos años más tarde, no estoy utilizando <a href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction\" target=\"_blank\" rel=\"noopener\">Autotools</a> ni tampoco <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a>, estoy usando <a href=\"https://mesonbuild.com/\">Meson</a> y considerando <a href=\"https://docs.bazel.build/versions/master/tutorial/cpp.html\">Bazel</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_un_caso_práctico\">Un caso práctico</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Básicamente he sacado todo el ejemplo de <a href=\"https://docs.gradle.org/current/userguide/native_software.html\">la guia de construcción de software native de Gradle</a> y lo he adaptado a un caso en el que hay varias plataformas y quiero generar dos versiones distintas de mi software \"Community\" y \"Enterprise\".</p>\n</div>\n<div class=\"paragraph\">\n<p>La aplicación es un ejecutable y una librería dinámica. El ejecutable hace uso de esta librería. Ya está, solo quiero mostrar lo que nos permite hacer <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>También nos permitirá generar una versión para distribuir (producción) y otra para depurar (desarrollo).</p>\n</div>\n<div class=\"paragraph\">\n<p>Todo el código se encuentra en <a href=\"https://github.com/carlosvin/cpp_gradle\" class=\"bare\">https://github.com/carlosvin/cpp_gradle</a>.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_estructura_del_proyecto\">Estructura del proyecto</h3>\n<div class=\"paragraph\">\n<p>Podemos crear la estructura que queramos, pero resulta más fácil seguir la que recomienda <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a>, para no tener que especificar donde está el código fuente. Ésta es la estructura del proyecto:</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">gradle-cpp</dt>\n<dd>\n<p>Directorio raíz.</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">build.gradle</dt>\n<dd>\n<p>Fichero donde se configura el proyecto <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a>, el equivalente al build.xml de <a href=\"https://ant.apache.org\" target=\"_blank\" rel=\"noopener\">Ant</a>, al <a href=\"https://www.gnu.org/software/make/manual/html_node/Makefiles.html:\" target=\"_blank\" rel=\"noopener\">Makefile</a> de C/C++ o al pom.xml de <a href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven</a>.</p>\n</dd>\n<dt class=\"hdlist1\">src</dt>\n<dd>\n<p>Carpeta donde va todo el código fuente</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">hello</dt>\n<dd>\n<p>Carpeta que contiene el módulo que va a ser la librería hello.</p>\n</dd>\n</dl>\n</div>\n</dd>\n<dt class=\"hdlist1\">cpp</dt>\n<dd>\n<p>Carpeta donde van los fuentes C++.</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">Hello.cpp</dt>\n<dd>\n<p> Implementación de la clase Hello.</p>\n</dd>\n</dl>\n</div>\n</dd>\n<dt class=\"hdlist1\">headers</dt>\n<dd>\n<p>Carpeta donde van los ficheros de cabeceras.\nHello.h:::: Declaración de la Clase Hello.</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">Msg.h</dt>\n<dd>\n<p>Declaración de constantes.</p>\n</dd>\n</dl>\n</div>\n</dd>\n</dl>\n</div>\n</dd>\n<dt class=\"hdlist1\">main</dt>\n<dd>\n<p>Carpeta que contiene el módulo que será el ejecutable que utilice la librería hello.</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">cpp</dt>\n<dd>\n<p>Carpeta donde van los fuentes C++.</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">main.cpp</dt>\n<dd>\n<p>Código fuente con la función main.</p>\n</dd>\n</dl>\n</div>\n</dd>\n<dt class=\"hdlist1\">build</dt>\n<dd>\n<p>Carpeta que crea Gradle automáticamente donde deja todos los resultados sus ejecuciones, en ella encontraremos informes de resultados de pruebas, binarios compilados, paquetes para distribuir, etc.</p>\n</dd>\n</dl>\n</div>\n</dd>\n</dl>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_la_aplicación_c\">La Aplicación C++</h3>\n<div class=\"paragraph\">\n<p>Va a consistir en un ejecutable que hará uso de la funcionalidad de la librería ’hello’.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">main.cpp</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">\"Hello.h\"</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc, <span class=\"hljs-keyword\">char</span> ** argv)</span>\n</span>{\n    <span class=\"hljs-function\">Hello <span class=\"hljs-title\">hello</span> <span class=\"hljs-params\">(<span class=\"hljs-string\">\"Pepito\"</span>)</span></span>;\n    hello.sayHello(<span class=\"hljs-number\">10</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Esta librería permite saludar `n`<sup class=\"footnote\">[<a id=\"_footnoteref_1\" class=\"footnote\" href=\"#_footnotedef_1\" title=\"View footnote.\">1</a>]</sup> veces a una persona especificada en su constructor.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Hello.h</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Hello</span>\n{</span>\n    <span class=\"hljs-keyword\">private</span>:\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> * who;\n    <span class=\"hljs-keyword\">public</span>:\n        Hello(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> * who);\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">unsigned</span> n = <span class=\"hljs-number\">1</span>)</span></span>;\n};</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_construyendo_con_gradle\">Construyendo con Gradle</h3>\n<div class=\"sect3\">\n<h4 id=\"_caso_básico\">Caso básico</h4>\n<div class=\"paragraph\">\n<p>Lo único que necesitamos para construir nuestra aplicación con <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> es: tener <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a><sup class=\"footnote\">[<a id=\"_footnoteref_2\" class=\"footnote\" href=\"#_footnotedef_2\" title=\"View footnote.\">2</a>]</sup> y el fichero <code>build.gradle</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">build.gradle</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">apply <span class=\"hljs-string\">plugin:</span> <span class=\"hljs-string\">'cpp'</span>\n\nmodel {\n  components {\n    hello(NativeLibrarySpec) {}\n    main(NativeExecutableSpec) {\n      binaries.all {\n        lib <span class=\"hljs-string\">library:</span> <span class=\"hljs-string\">\"hello\"</span>\n      }\n    }\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Con este fichero tan simple, conseguiremos compilar e instalar nuestra aplicación, en modo Debug para la plataforma donde estamos ejecutando <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a>, en mi caso es Linux X64.</p>\n</div>\n<div class=\"paragraph\">\n<p>Si ejecutamos desde la raíz de nuestro proyecto <code>gradle task</code>, podremos ver todas las tareas que podemos hacer.</p>\n</div>\n<div class=\"paragraph\">\n<p>En nuestro caso, solo queremos nuestra aplicación compilada y lista para funcionar, así que ejecutaremos: <code>gradle installMainExecutable</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Una vez que ha terminado, podemos ejecutar el programa llamando al script `build/install/mainExecutable/main`<sup class=\"footnote\">[<a id=\"_footnoteref_3\" class=\"footnote\" href=\"#_footnotedef_3\" title=\"View footnote.\">3</a>]</sup>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Output</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ build/install/mainExecutable/main\n1.  Hello Mr. Pepito (Community)\n2.  Hello Mr. Pepito (Community)\n3.  Hello Mr. Pepito (Community)\n4.  Hello Mr. Pepito (Community)\n5.  Hello Mr. Pepito (Community)\n6.  Hello Mr. Pepito (Community)\n7.  Hello Mr. Pepito (Community)\n8.  Hello Mr. Pepito (Community)\n9.  Hello Mr. Pepito (Community)\n10. Hello Mr. Pepito (Community)</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_distintos_sabores\">Distintos “Sabores”</h4>\n<div class=\"paragraph\">\n<p>Con unas pocas líneas más, podemos generar distintas versiones de la misma aplicación, en nuestro ejemplo vamos a generar una versión “Community” y otra “Enterprise”.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">build.gradle</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">apply <span class=\"hljs-string\">plugin:</span> <span class=\"hljs-string\">'cpp'</span>\n\nmodel {\n  flavors {\n      community\n      enterprise\n  }\n\n  components {\n    hello(NativeLibrarySpec) {\n      binaries.all {\n        <span class=\"hljs-keyword\">if</span> (flavor == flavors.enterprise) {\n          cppCompiler.define <span class=\"hljs-string\">\"ENTERPRISE\"</span>\n        }\n      }\n    }\n    main(NativeExecutableSpec) {\n      binaries.all {\n        lib <span class=\"hljs-string\">library:</span> <span class=\"hljs-string\">\"hello\"</span>\n        }\n    }\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Además tenemos que preparar nuestra aplicación para utilizar estos parámetros de compilación.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Msg.h</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">ifdef</span> ENTERPRISE</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> * EDITION = <span class=\"hljs-string\">\"Enterprise\"</span>;\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">else</span></span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> * EDITION = <span class=\"hljs-string\">\"Community\"</span>;\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">endif</span></span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>De esta forma se utiliza una cadena u otra en función del “sabor” con que compilemos.</p>\n</div>\n<div class=\"paragraph\">\n<p>Si ahora ejecutamos <code>gradle clean task</code> en la raíz de nuestro proyecto, veremos que tenemos más tareas disponibles, antes teníamos <code>installMainExecutable</code> y ahora ha sido reemplazada por <code>installCommunityMainExecutable</code> y <code>installEnterpriseMainExecutable</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Si ejecutamos estas dos tareas, tendremos nuestra aplicación instalada en los dos sabores.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\"><span class=\"hljs-variable\">$gradle</span> installEnterpriseMainExecutable installCommunityMainExecutable\n\n:compileEnterpriseHelloSharedLibraryHelloCpp\n:linkEnterpriseHelloSharedLibrary\n:enterpriseHelloSharedLibrary\n:compileEnterpriseMainExecutableMainCpp\n:linkEnterpriseMainExecutable\n:enterpriseMainExecutable\n:installEnterpriseMainExecutable\n:compileCommunityHelloSharedLibraryHelloCpp\n:linkCommunityHelloSharedLibrary\n:communityHelloSharedLibrary\n:compileCommunityMainExecutableMainCpp\n:linkCommunityMainExecutable\n:communityMainExecutable\n:installCommunityMainExecutable\n\nBUILD SUCCESSFUL\nTotal time: 9.414 secs</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Ahora podemos ejecutar nuestra aplicación en los dos sabores:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Community</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ build/install/mainExecutable/community/main\n1.      Hello Mr. Pepito        (Community)\n2.      Hello Mr. Pepito        (Community)\n3.      Hello Mr. Pepito        (Community)\n4.      Hello Mr. Pepito        (Community)\n5.      Hello Mr. Pepito        (Community)\n6.      Hello Mr. Pepito        (Community)\n7.      Hello Mr. Pepito        (Community)\n8.      Hello Mr. Pepito        (Community)\n9.      Hello Mr. Pepito        (Community)\n10.     Hello Mr. Pepito        (Community)</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Enterprise</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ build/install/mainExecutable/enterprise/main\n1.      Hello Mr. Pepito        (Enterprise)\n2.      Hello Mr. Pepito        (Enterprise)\n3.      Hello Mr. Pepito        (Enterprise)\n4.      Hello Mr. Pepito        (Enterprise)\n5.      Hello Mr. Pepito        (Enterprise)\n6.      Hello Mr. Pepito        (Enterprise)\n7.      Hello Mr. Pepito        (Enterprise)\n8.      Hello Mr. Pepito        (Enterprise)\n9.      Hello Mr. Pepito        (Enterprise)\n10.     Hello Mr. Pepito        (Enterprise)</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_release_o_debug\">Release o Debug</h4>\n<div class=\"paragraph\">\n<p>Por defecto <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> compila nuestra aplicación en modo Debug, pero podemos añadir el modo Release para que active algunas optimizaciones<sup class=\"footnote\">[<a id=\"_footnoteref_4\" class=\"footnote\" href=\"#_footnotedef_4\" title=\"View footnote.\">4</a>]</sup>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">build.gradle</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">apply <span class=\"hljs-string\">plugin:</span> <span class=\"hljs-string\">'cpp'</span>\nmodel {\n    buildTypes {\n        debug\n        release\n    }\n\n<span class=\"hljs-comment\">// ... the rest of file below doesn't change</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Si ahora ejecutamos <code>gradle clean task</code> veremos que tenemos más tareas, se habrán desdoblado las que teníamos, por ejemplo <code>installCommunityMainExecutable</code> se habrá desdoblado en <code>installDebugCommunityMainExecutable</code> y <code>installReleaseCommunityMainExecutable</code>.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"_multi_plataforma\">Multi-plataforma</h4>\n<div class=\"paragraph\">\n<p>También tenemos las posibilidad de utilizar las características de compilación cruzada que nos ofrecen los compiladores y generar componentes nativos para otras plataformas. El proceso es el mismo, simplemente tenemos que dar te alta las plataformas que vamos a soportar.</p>\n</div>\n<div class=\"paragraph\">\n<p>Esto solo funcionará si en nuestro sistema tenemos instalada la cadena de herramientas (<a href=\"https://en.wikipedia.org/wiki/Toolchain\" target=\"_blank\" rel=\"noopener\">Toolchain</a>) necesaria, es decir, si en un sistema de 64 bits queremos compilar para 32 bits, tendremos que tener instaladas las librerías necesarias para 32 bits.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">build.gradle</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">apply <span class=\"hljs-string\">plugin:</span> <span class=\"hljs-string\">'cpp'</span>\n\nmodel {\n  buildTypes {\n    debug\n    release\n  }\n\n  platforms {\n    x86 {\n      architecture <span class=\"hljs-string\">\"x86\"</span>\n    }\n    x64 {\n      architecture <span class=\"hljs-string\">\"x86_64\"</span>\n    }\n    itanium {\n      architecture <span class=\"hljs-string\">\"ia-64\"</span>\n    }\n  }\n\n  flavors {\n    community\n    enterprise\n  }\n\n  components {\n    hello(NativeLibrarySpec) {\n      binaries.all {\n        <span class=\"hljs-keyword\">if</span> (flavor == flavors.enterprise) {\n          cppCompiler.define <span class=\"hljs-string\">\"ENTERPRISE\"</span>\n        }\n      }\n    }\n    main(NativeExecutableSpec) {\n      binaries.all {\n        lib <span class=\"hljs-string\">library:</span> <span class=\"hljs-string\">\"hello\"</span>\n      }\n    }\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Ejecutando <code>gradle clean task</code> podremos ver las distintas opciones de construción que tenemos, en nuestro caso veremos que podemos construir distintas versiones de nuestra aplicación en distintos sabores, para distintas plataformas en Debug o Release.</p>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_pruébalo_tú_mism\">Pruébalo tú mism@</h3>\n<div class=\"paragraph\">\n<p>El proyecto se encuentra en <a href=\"https://github.com/carlosvin/cpp_gradle\" class=\"bare\">https://github.com/carlosvin/cpp_gradle</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Para poder probar necesitas:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Tener instalado <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> a partir de la versión 6.</p>\n</li>\n<li>\n<p>Tener algún compilador instalado (por ejemplo <a href=\"https://gcc.gnu.org/\" target=\"_blank\" rel=\"noopener\">GCC</a>)</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Solo tienes que seguir los siguientes pasos:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p><code>git clone <a href=\"mailto:git@github.com\">git@github.com</a>:carlosvin/cpp_gradle.git</code></p>\n</li>\n<li>\n<p><code>cd cpp_gradle</code></p>\n</li>\n<li>\n<p><code>./gradlew task</code> o <code>./gradlew.bat task</code> si estás en Windows. De esta forma verás todas las tareas que te ofrece <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> para este proyecto. La primera vez tardará un poco porque se descarga una versión de <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a>.</p>\n</li>\n<li>\n<p>Si estás en una máquina de 64 bits, por ejemplo utiliza este comando para compilar e instalar la aplicación <code>./gradlew installX64ReleaseEnterpriseMainExecutable</code>.</p>\n</li>\n<li>\n<p>Ejecuta la aplicación que acabas de construir <code>build/install/mainExecutable/x64ReleaseEnterprise/main</code></p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_conclusiones\">Conclusiones</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Con una configuración mínima, tenemos muchas posibilidades de construcción de aplicaciones nativas multi-plataforma.</p>\n</div>\n<div class=\"paragraph\">\n<p>Tiene un futuro prometedor, veremos como termina.</p>\n</div>\n<div class=\"paragraph\">\n<p>Podemos utilizar otras características de <a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> y aplicarlas a nuestros proyectos C++, como análisis estáticos de código, generación de informes (pruebas, cobertura, calidad, etc.), fácil incorporación a sistemas de integración continua.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle</a> para C++ es una característica que actualmente está en desarrollo, por lo que no hay que olvidar que:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>No debemos utilizar en entornos reales de desarrollo, puede acarrear muchos dolores de cabeza.</p>\n</li>\n<li>\n<p>La forma de definir el fichero build.gradle para esta característica puede cambiar.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Todo el ejemplo se encuentra en <a href=\"https://github.com/carlosvin/cpp_gradle\" class=\"bare\">https://github.com/carlosvin/cpp_gradle</a>. Os recomiendo que lo descarguéis y probéis lo sencillo que resulta.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nSi encontráis algún problema en el ejemplo, escribir un comentario, abrir un defecto o corregirlo vosotros mismos en <a href=\"https://github.com/carlosvin/cpp_gradle\" class=\"bare\">https://github.com/carlosvin/cpp_gradle</a>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Más información en <a href=\"https://docs.gradle.org/current/userguide/native_software.html\">Getting Started Gradle Native</a>.</p>\n</div>\n</div>\n</div>\n<div id=\"footnotes\">\n<hr>\n<div class=\"footnote\" id=\"_footnotedef_1\">\n<a href=\"#_footnoteref_1\">1</a>. n es un número entero positivo\n</div>\n<div class=\"footnote\" id=\"_footnotedef_2\">\n<a href=\"#_footnoteref_2\">2</a>. Realmente no es necesario tener instalado Gradle, si utilizamos el wrapper, pero esto no lo vamos a tratar hoy, <a href=\"https://docs.gradle.org/current/userguide/gradle_wrapper.html\">si queréis más información</a>.\n</div>\n<div class=\"footnote\" id=\"_footnotedef_3\">\n<a href=\"#_footnoteref_3\">3</a>. .bat en Windows y sin extensión en Linux\n</div>\n<div class=\"footnote\" id=\"_footnotedef_4\">\n<a href=\"#_footnoteref_4\">4</a>. También podemos definir el tipo de optimizaciones que vamos a utilizar.\n</div>\n</div>","slug":"gradle-cpp"}]}