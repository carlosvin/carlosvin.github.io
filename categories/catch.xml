<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Carlos says "bla bla" (Posts about Catch)</title><link>https://carlosvin.github.io/</link><description></description><atom:link href="https://carlosvin.github.io/categories/catch.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Fri, 15 Sep 2017 18:59:28 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Choosing a Modern C++ stack</title><link>https://carlosvin.github.io/posts/choosing-modern-cpp-stack/</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;I'm starting a new project in C++, but I've run into a pair of questions before start:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Which build system should I use?&lt;/li&gt;
&lt;li&gt;Which unit testing framework?&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#choosing-build-system-meson" id="id1"&gt;Choosing Build System (Meson)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#unit-testing-framework" id="id2"&gt;Unit Testing Framework&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#doctest-a-catch-alternative" id="id3"&gt;doctest: A Catch alternative&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#example" id="id4"&gt;Example&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#project-output-artifacts" id="id5"&gt;Project output artifacts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#project-structure-fork-project" id="id6"&gt;Project structure (Fork project)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="choosing-build-system-meson"&gt;
&lt;h2&gt;Choosing Build System (&lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt;)&lt;/h2&gt;
&lt;p&gt;I have used before Make, Maven, Scons, Gradle and Autotools.&lt;/p&gt;
&lt;p&gt;But I have some reasons to try find something else.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Autotools&lt;/dt&gt;
&lt;dd&gt;It is not easy to configure and maintain. There are several configuration files and several configuration steps.&lt;/dd&gt;
&lt;dt&gt;Gradle&lt;/dt&gt;
&lt;dd&gt;C++ feature is still incubating. Not very fast. You can check a similar example project at &lt;a class="reference external" href="https://carlosvin.github.io/posts/gradle-cpp/"&gt;Build C++ project with Gradle&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;Make&lt;/dt&gt;
&lt;dd&gt;I don't love the syntax.
Files tends to get messy as project grows.&lt;/dd&gt;
&lt;dt&gt;Scons&lt;/dt&gt;
&lt;dd&gt;It is just slow.&lt;/dd&gt;
&lt;dt&gt;Maven&lt;/dt&gt;
&lt;dd&gt;It is slow and you might end up "&lt;em&gt;Javatizing&lt;/em&gt;" your C++ project structure.&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;I've listed just things I don't like, those projects have other great features.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now I'm considering &lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt; or &lt;a class="reference external" href="https://cmake.org/"&gt;CMake&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://cmake.org/"&gt;CMake&lt;/a&gt; has a big advantage over &lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt;, it is mature and widely used in many projects, which means there are many examples and it will fulfill your C++ project building needs.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt; is a young project compared with &lt;a class="reference external" href="https://cmake.org/"&gt;CMake&lt;/a&gt;, but it is growing quite fast and it has been adopted in other big projects like &lt;a class="reference external" href="https://www.gnome.org/"&gt;Gnome&lt;/a&gt;, they have an initiative to &lt;a class="reference external" href="https://wiki.gnome.org/Initiatives/GnomeGoals/MesonPorting"&gt;port from Autotools to Meson&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've chosen &lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt; because:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Syntax is really clear to me, when I read &lt;cite&gt;meson.build&lt;/cite&gt; file I can quickly understand what is happening during build process.&lt;/li&gt;
&lt;li&gt;It is fast. Altought it is written in &lt;a class="reference external" href="https://python.org/"&gt;Python&lt;/a&gt;, it generates a &lt;a class="reference external" href="https://ninja-build.org/"&gt;Ninja&lt;/a&gt; build project. First time you configure the project you has to run &lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt;, but for building or testing you are actually running &lt;a class="reference external" href="https://ninja-build.org/"&gt;Ninja&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_b1338f13e50746a7bdfd7fa0bcb7d09b-1"&gt;&lt;/a&gt;$ meson build . &lt;span class="c1"&gt;# first time you configure the project&lt;/span&gt;
&lt;a name="rest_code_b1338f13e50746a7bdfd7fa0bcb7d09b-2"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; build
&lt;a name="rest_code_b1338f13e50746a7bdfd7fa0bcb7d09b-3"&gt;&lt;/a&gt;$ ninja build   &lt;span class="c1"&gt;# each time you build it&lt;/span&gt;
&lt;a name="rest_code_b1338f13e50746a7bdfd7fa0bcb7d09b-4"&gt;&lt;/a&gt;$ ninja &lt;span class="nb"&gt;test&lt;/span&gt;    &lt;span class="c1"&gt;# each time you run tests&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;I've found two interesting comparisons about available C++ build systems, they might be a little be biased because those comparisons come from &lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt; and &lt;a class="reference external" href="http://scons.org/"&gt;Scons&lt;/a&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bitbucket.org/scons/scons/wiki/SconsVsOtherBuildTools"&gt;C++ build systems comparison from Scons&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://mesonbuild.com/Simple-comparison.html"&gt;C++ build systems comparison from Meson&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="unit-testing-framework"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#id2"&gt;Unit Testing Framework&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have used some &lt;a class="reference external" href="https://en.wikipedia.org/wiki/XUnit"&gt;xUnit&lt;/a&gt; based libraries like &lt;a class="reference external" href="https://github.com/unittest-cpp/unittest-cpp"&gt;UnitTest++&lt;/a&gt;, &lt;a class="reference external" href="http://cpputest.github.io/"&gt;CppUTest&lt;/a&gt; or &lt;a class="reference external" href="https://github.com/google/googletest"&gt;Google Test&lt;/a&gt; which match perfectly with &lt;a class="reference external" href="https://github.com/google/googletest/tree/master/googlemock"&gt;Google Mock&lt;/a&gt;.
If you want a safe bet that fulfills almost of your testing needs I highly recommend &lt;a class="reference external" href="https://github.com/google/googletest"&gt;Google Test&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But time ago I found a testing framework with some interesting features, &lt;a class="reference external" href="https://github.com/philsquared/Catch"&gt;Catch&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It is just a header file with no external dependencies, so very easy to start (wget + include downloaded file).&lt;/li&gt;
&lt;li&gt;You can use normal unit test style or &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Behavior-driven_development"&gt;BDD&lt;/a&gt;-style&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to know more about &lt;a class="reference external" href="https://github.com/philsquared/Catch"&gt;Catch&lt;/a&gt;, I recommend you to give it a try, it is a matter of 2 minutes to have a &lt;a class="reference external" href="https://github.com/philsquared/Catch/blob/master/docs/tutorial.md#writing-tests"&gt;simple example up and running&lt;/a&gt;. You can also read some interesting articles like &lt;a class="reference external" href="https://github.com/philsquared/Catch/blob/master/docs/why-catch.md"&gt;Why do we need yet another C++ test framework?&lt;/a&gt; or &lt;a class="reference external" href="http://blog.coldflake.com/posts/Testing-C++-with-a-new-Catch/"&gt;Testing C++ With A New Catch&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="doctest-a-catch-alternative"&gt;
&lt;h3&gt;&lt;a class="reference external" href="https://github.com/onqtam/doctest"&gt;doctest&lt;/a&gt;: A &lt;a class="reference external" href="https://github.com/philsquared/Catch"&gt;Catch&lt;/a&gt; alternative&lt;/h3&gt;
&lt;p&gt;There is another testing framework named &lt;a class="reference external" href="https://github.com/onqtam/doctest"&gt;doctest&lt;/a&gt;, with same benefits as &lt;a class="reference external" href="https://github.com/philsquared/Catch"&gt;Catch&lt;/a&gt;, but it promises to be faster and lighter (&lt;a class="reference external" href="https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md"&gt;benchmark results&lt;/a&gt;) than &lt;a class="reference external" href="https://github.com/philsquared/Catch"&gt;Catch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/onqtam/doctest"&gt;doctest&lt;/a&gt; is modeled after &lt;a class="reference external" href="https://github.com/philsquared/Catch"&gt;Catch&lt;/a&gt; and some parts of the code have been taken directly, but there are &lt;a class="reference external" href="https://github.com/onqtam/doctest/blob/master/doc/markdown/faq.md#how-is-doctest-different-from-catch"&gt;differences&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It hasn't been easy to decide, both are really similar, you can &lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/pull/1/files#diff-d22d1e18ecbe7ba34523db56b011bcfe"&gt;check here differences&lt;/a&gt; between project using &lt;a class="reference external" href="https://github.com/onqtam/doctest"&gt;doctest&lt;/a&gt; and project using &lt;a class="reference external" href="https://github.com/philsquared/Catch"&gt;Catch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've finally chosen &lt;a class="reference external" href="https://github.com/onqtam/doctest"&gt;doctest&lt;/a&gt; because it promises to be faster: &lt;a class="reference external" href="https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md"&gt;benchmark results&lt;/a&gt;.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;I've created project using both frameworks you can find them in corresponding branches: &lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/tree/doctest"&gt;doctest branch&lt;/a&gt; or &lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/tree/catch"&gt;catch branch&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition hint"&gt;
&lt;p class="first admonition-title"&gt;Hint&lt;/p&gt;
&lt;p class="last"&gt;You can see diferencies between projects at: &lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/pull/1"&gt;https://github.com/carlosvin/uuid-cpp/pull/1&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="example"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#id4"&gt;Example&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I've created an example to illustrate this article: &lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp"&gt;https://github.com/carlosvin/uuid-cpp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is a basic implementation of UUID pseudo-random generator based on &lt;a class="reference external" href="http://www.cplusplus.com/reference/random/mt19937/"&gt;mt19937&lt;/a&gt; which is not cryptographically secure.&lt;/p&gt;
&lt;div class="section" id="project-output-artifacts"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://carlosvin.github.io/posts/choosing-modern-cpp-stack/#id5"&gt;Project output artifacts&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Shared library: &lt;code&gt;libuuid&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Header library for developers who want to use the shared library: &lt;code&gt;include/Uuid.h&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Executable &lt;code&gt;uuidgen&lt;/code&gt; (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Universally_unique_identifier"&gt;UUID&lt;/a&gt; generator).&lt;/li&gt;
&lt;li&gt;Test executable (not installed). It tests shared library.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, if you execute &lt;code&gt;ninja install&lt;/code&gt; on Linux, you will get something like:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_90b6c100a5c14f3f81f906ff5efacd14-1"&gt;&lt;/a&gt;/usr/local/lib/libuuid.so
&lt;a name="rest_code_90b6c100a5c14f3f81f906ff5efacd14-2"&gt;&lt;/a&gt;/usr/local/include/Uuid.h
&lt;a name="rest_code_90b6c100a5c14f3f81f906ff5efacd14-3"&gt;&lt;/a&gt;/usr/local/bin/uuidgen
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="project-structure-fork-project"&gt;
&lt;h3&gt;Project structure (&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp"&gt;Fork project&lt;/a&gt;)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/meson.build"&gt;meson.build&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Root project file configuration. It defines project properties and subdirectories.&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_e8e1dae4fdef4526b14f6d09422764e5-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_e8e1dae4fdef4526b14f6d09422764e5-2"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'cpp-meson-example'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# project name&lt;/span&gt;
&lt;a name="rest_code_e8e1dae4fdef4526b14f6d09422764e5-3"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'cpp'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# C++ project, e.g: for C project&lt;/span&gt;
&lt;a name="rest_code_e8e1dae4fdef4526b14f6d09422764e5-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'1.0.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_e8e1dae4fdef4526b14f6d09422764e5-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;license&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'MIT'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_e8e1dae4fdef4526b14f6d09422764e5-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;default_options&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'cpp_std=c++11'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# compile for C++&lt;/span&gt;
&lt;a name="rest_code_e8e1dae4fdef4526b14f6d09422764e5-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_e8e1dae4fdef4526b14f6d09422764e5-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# it will be referred from subdir projects&lt;/span&gt;
&lt;a name="rest_code_e8e1dae4fdef4526b14f6d09422764e5-9"&gt;&lt;/a&gt;&lt;span class="n"&gt;inc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;include_directories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'include'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e8e1dae4fdef4526b14f6d09422764e5-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_e8e1dae4fdef4526b14f6d09422764e5-11"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# meson will try to find a meson.build file inside following directories&lt;/span&gt;
&lt;a name="rest_code_e8e1dae4fdef4526b14f6d09422764e5-12"&gt;&lt;/a&gt;&lt;span class="n"&gt;subdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'include'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e8e1dae4fdef4526b14f6d09422764e5-13"&gt;&lt;/a&gt;&lt;span class="n"&gt;subdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'src'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e8e1dae4fdef4526b14f6d09422764e5-14"&gt;&lt;/a&gt;&lt;span class="n"&gt;subdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/include/"&gt;include&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;meson.build&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Subdirectory build configuration file.&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_800673437cbc470a85668c70aef078f7-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Select header files to be installed&lt;/span&gt;
&lt;a name="rest_code_800673437cbc470a85668c70aef078f7-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;install_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Uuid.h'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/include/Uuid.h"&gt;Uuid.h&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Header file, it is the library interface definition which will be included from projects using that library&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code cpp"&gt;&lt;a name="rest_code_88cc9d1d2af846c29b1bfeb2167b2142-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;ids&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_88cc9d1d2af846c29b1bfeb2167b2142-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_88cc9d1d2af846c29b1bfeb2167b2142-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Uuid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_88cc9d1d2af846c29b1bfeb2167b2142-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_88cc9d1d2af846c29b1bfeb2167b2142-5"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/src"&gt;src&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/src/meson.build"&gt;meson.build (src)&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;It declares 2 output artifacts &lt;code&gt;libuuid&lt;/code&gt; and &lt;code&gt;uuidgen&lt;/code&gt;.&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_281b11de3f16475eb5579f324a78b428-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;libuuid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shared_library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_281b11de3f16475eb5579f324a78b428-2"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'uuid'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# library name&lt;/span&gt;
&lt;a name="rest_code_281b11de3f16475eb5579f324a78b428-3"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'Uuid.cpp'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# source files to be compile&lt;/span&gt;
&lt;a name="rest_code_281b11de3f16475eb5579f324a78b428-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;include_directories&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# previously declared include directories in root :code:`meson.build`&lt;/span&gt;
&lt;a name="rest_code_281b11de3f16475eb5579f324a78b428-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# :code:`libuuid` will be part of project installation&lt;/span&gt;
&lt;a name="rest_code_281b11de3f16475eb5579f324a78b428-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_281b11de3f16475eb5579f324a78b428-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;uuidgen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;executable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_281b11de3f16475eb5579f324a78b428-8"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'uuidgen'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# executable name&lt;/span&gt;
&lt;a name="rest_code_281b11de3f16475eb5579f324a78b428-9"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'main.cpp'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# source files to compile&lt;/span&gt;
&lt;a name="rest_code_281b11de3f16475eb5579f324a78b428-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;include_directories&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# previously declared include directories in root :code:`meson.build`&lt;/span&gt;
&lt;a name="rest_code_281b11de3f16475eb5579f324a78b428-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;link_with&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;libuuid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# linking executable with shared previously declared shared library :code:`libuuid`&lt;/span&gt;
&lt;a name="rest_code_281b11de3f16475eb5579f324a78b428-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# :code:`uuidgen` executable be part of project installation&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/src/main.cpp"&gt;main.cpp&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Entry point for main executable &lt;code&gt;uuidgen&lt;/code&gt;&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code cpp"&gt;&lt;a name="rest_code_65da46ad6cdd4e42b81f1a10ac9c6ead-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Uuid.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_65da46ad6cdd4e42b81f1a10ac9c6ead-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_65da46ad6cdd4e42b81f1a10ac9c6ead-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_65da46ad6cdd4e42b81f1a10ac9c6ead-4"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_65da46ad6cdd4e42b81f1a10ac9c6ead-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_65da46ad6cdd4e42b81f1a10ac9c6ead-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Uuid&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_65da46ad6cdd4e42b81f1a10ac9c6ead-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_str&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_65da46ad6cdd4e42b81f1a10ac9c6ead-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_65da46ad6cdd4e42b81f1a10ac9c6ead-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/src/Uuid.cpp"&gt;Uuid.cpp&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Implementation of declared class in header file.&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code cpp"&gt;&lt;a name="rest_code_d8ae75bbe9dc4940b3f3517ef46d79d8-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Uuid.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_d8ae75bbe9dc4940b3f3517ef46d79d8-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_d8ae75bbe9dc4940b3f3517ef46d79d8-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;Uuid&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Uuid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_d8ae75bbe9dc4940b3f3517ef46d79d8-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/test/"&gt;test&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/test/meson.build"&gt;meson.build (test)&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;File to configure tests build process.&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_92f0eaa09b1b498784c90363c51f95b2-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;testexe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;executable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_92f0eaa09b1b498784c90363c51f95b2-2"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'testexe'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# test executable name&lt;/span&gt;
&lt;a name="rest_code_92f0eaa09b1b498784c90363c51f95b2-3"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'uuid_test.cpp'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# tests source files to be compiled&lt;/span&gt;
&lt;a name="rest_code_92f0eaa09b1b498784c90363c51f95b2-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;include_directories&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# declared include directories in root :code:`meson.build`&lt;/span&gt;
&lt;a name="rest_code_92f0eaa09b1b498784c90363c51f95b2-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;link_with&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;libuuid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# link test executable with previously declared shared library :code:`libuuid`&lt;/span&gt;
&lt;a name="rest_code_92f0eaa09b1b498784c90363c51f95b2-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_92f0eaa09b1b498784c90363c51f95b2-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# test execution&lt;/span&gt;
&lt;a name="rest_code_92f0eaa09b1b498784c90363c51f95b2-8"&gt;&lt;/a&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Uuid test'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;testexe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_92f0eaa09b1b498784c90363c51f95b2-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_92f0eaa09b1b498784c90363c51f95b2-10"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# we can specify other test execution passing arguments or environment variables&lt;/span&gt;
&lt;a name="rest_code_92f0eaa09b1b498784c90363c51f95b2-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Uuid test with args and env'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;testexe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'arg1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'arg2'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'FOO=bar'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;doctest.h&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/onqtam/doctest"&gt;doctest&lt;/a&gt; library in a single header file. You can try to automate library installation as part of your build process, but I haven't figure out yet a way to do it with &lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt;. For now I've installed it manually:&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code bash"&gt;&lt;a name="rest_code_33251356701a4535ad016e9ccbed555d-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;a name="rest_code_33251356701a4535ad016e9ccbed555d-2"&gt;&lt;/a&gt;wget https://raw.githubusercontent.com/onqtam/doctest/master/doctest/doctest.h
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/carlosvin/uuid-cpp/blob/master/test/uuid_test.cpp"&gt;uuid_test.cpp&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Tests implementation.&lt;/p&gt;
&lt;div class="last"&gt;&lt;pre class="code cpp"&gt;&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-1"&gt;&lt;/a&gt; &lt;span class="c1"&gt;// This tells doctest to provide a main() - only do this in one cpp file&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-4"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"doctest.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-5"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"Uuid.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-6"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;constexpr&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;MAX_ITERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;TEST_CASE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;"Uuid"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MAX_ITERS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-12"&gt;&lt;/a&gt;        &lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Uuid&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-13"&gt;&lt;/a&gt;        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;uuid_str&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_str&lt;/span&gt;&lt;span class="p"&gt;()};&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-15"&gt;&lt;/a&gt;        &lt;span class="n"&gt;MESSAGE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid_str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-16"&gt;&lt;/a&gt;        &lt;span class="n"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-17"&gt;&lt;/a&gt;        &lt;span class="n"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;least&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-18"&gt;&lt;/a&gt;        &lt;span class="n"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid_str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-19"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-20"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-22"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// BDD style&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-24"&gt;&lt;/a&gt;&lt;span class="n"&gt;SCENARIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;"UUID creation"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-26"&gt;&lt;/a&gt;    &lt;span class="n"&gt;GIVEN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;"A random UUID "&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-27"&gt;&lt;/a&gt;        &lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Uuid&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-28"&gt;&lt;/a&gt;        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;uuid_str&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_str&lt;/span&gt;&lt;span class="p"&gt;()};&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-29"&gt;&lt;/a&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-30"&gt;&lt;/a&gt;        &lt;span class="n"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid_str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-32"&gt;&lt;/a&gt;        &lt;span class="n"&gt;WHEN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;"get the most and least"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-33"&gt;&lt;/a&gt;            &lt;span class="n"&gt;THEN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;"should be more than 0"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-34"&gt;&lt;/a&gt;                &lt;span class="n"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-35"&gt;&lt;/a&gt;                &lt;span class="n"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;least&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-36"&gt;&lt;/a&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-37"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-38"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_f54d36765ec74dea9fb8fcc2bca99b57-39"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Build Software</category><category>Build System</category><category>C++</category><category>Catch</category><category>Meson</category><category>Unit Testing</category><guid>https://carlosvin.github.io/posts/choosing-modern-cpp-stack/</guid><pubDate>Fri, 15 Sep 2017 18:50:00 GMT</pubDate></item></channel></rss>