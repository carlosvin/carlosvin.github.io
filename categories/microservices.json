{"category":"Microservices","posts":[{"sectids":"","toc-placement":"auto","notitle":"","stylesheet":"","webfonts":"","prewrap":"","attribute-undefined":"drop-line","attribute-missing":"skip","iconfont-remote":"","caution-caption":"Caution","important-caption":"Important","note-caption":"Note","tip-caption":"Tip","warning-caption":"Warning","example-caption":"Example","figure-caption":"Figure","table-caption":"Table","toc-title":"Table of Contents","section-refsig":"Section","part-refsig":"Part","chapter-refsig":"Chapter","appendix-refsig":"Appendix","appendix-caption":"Appendix","untitled-label":"Untitled","version-label":"Version","last-update-label":"Last updated","docfile":"reverse-proxy-multidomain-docker.en.adoc","docdir":"","docfilesuffix":".adoc","docname":"reverse-proxy-multidomain-docker.en","embedded":"","asciidoctor":"","asciidoctor-version":"2.0.10","safe-mode-name":"secure","safe-mode-secure":"","safe-mode-level":20,"max-include-depth":64,"user-home":".","backend":"html5","max-attribute-value-size":4096,"linkcss":"","doctype":"article","htmlsyntax":"html","backend-html5-doctype-article":"","doctype-article":"","backend-html5":"","outfilesuffix":".html","filetype":"html","filetype-html":"","basebackend-html-doctype-article":"","basebackend-html":"","basebackend":"html","stylesdir":".","iconsdir":"./images/icons","localdate":"2020-04-22","localyear":"2020","localtime":"00:25:44 +0200","localdatetime":"2020-04-22 00:25:44 +0200","docdate":"2020-04-19","docyear":"2020","doctime":"10:46:31 +0200","docdatetime":"2020-04-19 10:46:31 +0200","doctitle":"Multi-Domain Docker Containers","date":"2016/11/24 21:00","keywords":["Docker","Microservices"],"description":"How to create different Docker containers with different domain names in the same host","lang":"en","toc":"","nginx":"https://www.nginx.com[NGINX,window=_blank]","nginx-proxy":"https://github.com/jwilder/nginx-proxy[nginx-proxy,window=_blank]","authorcount":0,"title":"Multi-Domain Docker Containers","summary":"How to create different Docker containers with different domain names in the same host","html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_use_case\">Use case</a></li>\n<li><a href=\"#_how_to_configure_multi_domain_reverse_proxy\">How to Configure Multi-Domain Reverse Proxy</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_example_project_structure\">Example Project Structure</a></li>\n<li><a href=\"#_architecture_configuration_docker_compose\">Architecture Configuration (docker-compose)</a></li>\n<li><a href=\"#_application_image_configuration\">Application Image Configuration</a></li>\n<li><a href=\"#_adding_domain_names_to_your_development_environment_configuration\">Adding domain names to your development environment configuration</a></li>\n<li><a href=\"#_everything_ready\">Everything ready!</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_use_case\">Use case</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We have several server applications in the same development environment, each application is bundled in a Docker container, e.g: <strong>\"Container A\"</strong> and <strong>\"Container B\"</strong>.</p>\n</div>\n<div class=\"paragraph\">\n<p>With Docker those applications have the same IP address. One way to differentiate and access to an specific application is exposing different ports.</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/docker-multidomain/ip.png\" alt=\"ip\" width=\"320\" height=\"auto\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Containers exposing the same IP address and different ports.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>If we want to call to <strong>\"Application A\"</strong> we will do: <code>GET <a href=\"http://10.20.30.40:8080/colors/red\" class=\"bare\">http://10.20.30.40:8080/colors/red</a></code>.</p>\n</li>\n<li>\n<p>If we want to call to <strong>\"Application B\"</strong> we will do: <code>GET <a href=\"http://10.20.30.40:8081/fruits/tomato\" class=\"bare\">http://10.20.30.40:8081/fruits/tomato</a></code>.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>But that solution is a little bit confusing, does 8080 mean we are accessing to \"application A\"?</p>\n</div>\n<div class=\"paragraph\">\n<p>It would be <strong>simpler and easier</strong> to remind something like:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Calling <strong>\"Application A\"</strong>: <code>GET <a href=\"http://a.domain.com/colors/red\" class=\"bare\">http://a.domain.com/colors/red</a></code>.</p>\n</li>\n<li>\n<p>Calling <strong>\"Application B\"</strong>: <code>GET <a href=\"http://b.domain.com/fruits/tomato\" class=\"bare\">http://b.domain.com/fruits/tomato</a></code>.</p>\n</li>\n</ul>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/docker-multidomain/domain.png\" alt=\"domain\" width=\"320\" height=\"auto\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Accessing applications by domain name.</p>\n</div>\n<div class=\"paragraph\">\n<p>Get that extra semantic value is much simpler than I thought at the beginning and you will see below.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_how_to_configure_multi_domain_reverse_proxy\">How to Configure Multi-Domain Reverse Proxy</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I said it is easy, because we almost have to do nothing, another container will do it for us, especifically we are going to use <a href=\"https://github.com/jwilder/nginx-proxy\" target=\"_blank\" rel=\"noopener\">nginx-proxy</a>, it will automatically generate the required <a href=\"https://www.nginx.com\" target=\"_blank\" rel=\"noopener\">NGINX</a> configurations.</p>\n</div>\n<div class=\"paragraph\">\n<p>So, we will have 2 applications + 1 proxy, that is 3 containers.</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/docker-multidomain/proxy.png\" alt=\"domain\" width=\"320\" height=\"auto\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>3 containers, 2 applications and 1 proxy</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nYou can download the full example at <a href=\"https://github.com/carlosvin/docker-reverse-proxy-multi-domain\" class=\"bare\">https://github.com/carlosvin/docker-reverse-proxy-multi-domain</a>.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_example_project_structure\">Example Project Structure</h3>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">docker-compose.yaml</dt>\n<dd>\n<p>Main configuration file describing architecture in previous picture.</p>\n</dd>\n<dt class=\"hdlist1\">a</dt>\n<dd>\n<p>Application A directory.</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">Dockerfile</dt>\n<dd>\n<p>Container A configuration file.</p>\n</dd>\n</dl>\n</div>\n</dd>\n<dt class=\"hdlist1\">b</dt>\n<dd>\n<p>Application B directory.</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">Dockerfile</dt>\n<dd>\n<p>Container B configuration file.</p>\n</dd>\n</dl>\n</div>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://github.com/carlosvin/docker-reverse-proxy-multi-domain\" target=\"_blank\" rel=\"noopener\">View Project</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_architecture_configuration_docker_compose\">Architecture Configuration (docker-compose)</h3>\n<div class=\"paragraph\">\n<p>The relationships between containers is the most interesting part in this example.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">docker-reverse-proxy-multi-domain/docker-compose.yaml</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-yaml\" data-lang=\"yaml\"><span class=\"hljs-attr\">a:</span>\n  <span class=\"hljs-attr\">build:</span> <span class=\"hljs-string\">a</span> <b class=\"conum\">(4)</b>\n  <span class=\"hljs-attr\">environment:</span>\n    <span class=\"hljs-attr\">VIRTUAL_HOST:</span> <span class=\"hljs-string\">a.domain.com</span> <b class=\"conum\">(1)</b>\n  <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span>\n\n<span class=\"hljs-attr\">b:</span>\n  <span class=\"hljs-attr\">build:</span> <span class=\"hljs-string\">b</span> <b class=\"conum\">(5)</b>\n  <span class=\"hljs-attr\">environment:</span>\n    <span class=\"hljs-attr\">VIRTUAL_HOST:</span>  <span class=\"hljs-string\">b.domain.com</span> <b class=\"conum\">(2)</b>\n  <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span>\n\n<span class=\"hljs-attr\">nginx-proxy:</span> <b class=\"conum\">(3)</b>\n  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">jwilder/nginx-proxy</span>\n  <span class=\"hljs-attr\">ports:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"80:80\"</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"443:443\"</span>\n  <span class=\"hljs-attr\">volumes:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/var/run/docker.sock:/tmp/docker.sock:ro</span>\n\n  <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span>\n  <span class=\"hljs-attr\">privileged:</span> <span class=\"hljs-literal\">true</span></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>Configure the domain name for app a.</p>\n</li>\n<li>\n<p>Configure the domain name for app b.</p>\n</li>\n<li>\n<p>From this line there is proxy configuration (copy/paste part).</p>\n</li>\n<li>\n<p>We tell docker-compose has to build Docker images within specified directory.</p>\n</li>\n<li>\n<p>For example, we are saying that docker-compose has to build a Docker image using ../b/Dockerfile file.</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_application_image_configuration\">Application Image Configuration</h3>\n<div class=\"listingblock\">\n<div class=\"title\">a/Dockerfile</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-docker\" data-lang=\"docker\"><span class=\"hljs-keyword\">FROM</span> httpd:<span class=\"hljs-number\">2.4</span> <b class=\"conum\">(1)</b>\n<span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"&lt;html&gt;&lt;body&gt;&lt;h1&gt;A&lt;/h1&gt;App A works!&lt;/body&gt;&lt;/html&gt;\"</span> &gt; /usr/<span class=\"hljs-built_in\">local</span>/apache2/htdocs/index.html </span><b class=\"conum\">(2)</b></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>We import an image with an apache server.</p>\n</li>\n<li>\n<p>It serves a file that prints \"Host A\" as default page.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>The configuration for application B is pretty much the same:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">b/Dockerfile</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-docker\" data-lang=\"docker\"><span class=\"hljs-keyword\">FROM</span> httpd:<span class=\"hljs-number\">2.4</span>\n<span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"&lt;html&gt;&lt;body&gt;&lt;h1&gt;B&lt;/h1&gt;App B works!&lt;/body&gt;&lt;/html&gt;\"</span> &gt; /usr/<span class=\"hljs-built_in\">local</span>/apache2/htdocs/index.html</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_adding_domain_names_to_your_development_environment_configuration\">Adding domain names to your development environment configuration</h3>\n<div class=\"paragraph\">\n<p>In Linux we just have to map the local address to domain names you have chosen, in the example <code>a.domain.com</code> and <code>b.domain.com</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">/etc/hosts</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">127.0.0.1    localhost.localdomain localhost\n::1          localhost6.localdomain6 localhost6\n127.0.0.1    a.domain.com <b class=\"conum\">(1)</b>\n127.0.0.1    b.domain.com</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>We just added last 2 lines.</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_everything_ready\">Everything ready!</h3>\n<div class=\"paragraph\">\n<p>Now we just have to test the example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">docker-compose build\ndocker-compose up</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The 3 containers are running now.</p>\n</div>\n<div class=\"paragraph\">\n<p>So we can open our favorite web browser and go to <code>a.domain.com</code>. It will show <strong>App A works!</strong>. If we go to <code>b.domain.com</code> then we will see <strong>App B works!</strong>.</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/docker-multidomain/a.screenshot.png\" alt=\"App A works!\" width=\"320\" height=\"auto\">\n</div>\n<div class=\"title\">Figure 1. a.domain.com</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/docker-multidomain/b.screenshot.png\" alt=\"App B works!\" width=\"320\" height=\"auto\">\n</div>\n<div class=\"title\">Figure 2. b.domain.com</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nIn most of the Linux distros you will need privileges to run Docker commands (<code>sudo</code>).\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>","slug":"reverse-proxy-multidomain-docker"},{"sectids":"","toc-placement":"auto","notitle":"","stylesheet":"","webfonts":"","prewrap":"","attribute-undefined":"drop-line","attribute-missing":"skip","iconfont-remote":"","caution-caption":"Caution","important-caption":"Important","note-caption":"Note","tip-caption":"Tip","warning-caption":"Warning","example-caption":"Example","figure-caption":"Figure","table-caption":"Table","toc-title":"Table of Contents","section-refsig":"Section","part-refsig":"Part","chapter-refsig":"Chapter","appendix-refsig":"Appendix","appendix-caption":"Appendix","untitled-label":"Untitled","version-label":"Version","last-update-label":"Last updated","docfile":"reverse-proxy-multidomain-docker.es.adoc","docdir":"","docfilesuffix":".adoc","docname":"reverse-proxy-multidomain-docker.es","embedded":"","asciidoctor":"","asciidoctor-version":"2.0.10","safe-mode-name":"secure","safe-mode-secure":"","safe-mode-level":20,"max-include-depth":64,"user-home":".","backend":"html5","max-attribute-value-size":4096,"linkcss":"","doctype":"article","htmlsyntax":"html","backend-html5-doctype-article":"","doctype-article":"","backend-html5":"","outfilesuffix":".html","filetype":"html","filetype-html":"","basebackend-html-doctype-article":"","basebackend-html":"","basebackend":"html","stylesdir":".","iconsdir":"./images/icons","localdate":"2020-04-22","localyear":"2020","localtime":"00:25:44 +0200","localdatetime":"2020-04-22 00:25:44 +0200","docdate":"2020-04-19","docyear":"2020","doctime":"10:46:31 +0200","docdatetime":"2020-04-19 10:46:31 +0200","doctitle":"Contenedores Docker multi-dominio","date":"2016/11/23 21:00","keywords":["Docker","Microservices"],"lang":"es","toc":"","description":"Cómo crear varios contenedores Docker con diferentes dominios en la misma máquina.","nginx":"https://www.nginx.com[NGINX,window=_blank]","nginx-proxy":"https://github.com/jwilder/nginx-proxy[nginx-proxy,window=_blank]","authorcount":0,"title":"Contenedores Docker multi-dominio","summary":"Cómo crear varios contenedores Docker con diferentes dominios en la misma máquina.","html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_caso_de_uso\">Caso de Uso</a></li>\n<li><a href=\"#_cómo_configurar_un_proxy_inverso_multi_dominio\">Cómo configurar un Proxy Inverso Multi-Dominio</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_estructura_del_proyecto_de_ejemplo\">Estructura del proyecto de ejemplo</a></li>\n<li><a href=\"#_configuración_de_la_arquitectura_docker_compose\">Configuración de la arquitectura (docker-compose)</a></li>\n<li><a href=\"#_configuración_de_la_imágen_de_la_aplicación\">Configuración de la imágen de la aplicación</a></li>\n<li><a href=\"#_añadiendo_los_nombres_de_dominio_a_tu_configuración\">Añadiendo los nombres de dominio a tu configuración</a></li>\n<li><a href=\"#_todo_listo\">¡Todo listo!</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_caso_de_uso\">Caso de Uso</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Tenemos varias aplicaciones servidoras a la vez en un mismo entorno de desarrollo, cada una encapsulada en un contenedor, llamémosles de ahora en adelante <strong>\"Contenedor A\"</strong> y <strong>\"Contenedor B\"</strong>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Utilizando docker estas aplicaciones tienen la misma dirección IP en nuestra máquina, una forma de distinguirlas es cambiando el puerto que exponen.</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/docker-multidomain/ip.png\" alt=\"ip\" width=\"320\" height=\"auto\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Aplicaciones exponiendo la misma dirección IP utilizando diferentes puertos para diferenciar las aplicaciones.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Si queremos llamar a la <strong>\"aplicación A\"</strong> haremos algo así: <code>GET <a href=\"http://10.20.30.40:8080/colors/red\" class=\"bare\">http://10.20.30.40:8080/colors/red</a></code>.</p>\n</li>\n<li>\n<p>Si queremos llamar a la <strong>\"aplicación B\"</strong> haremos algo así: <code>GET <a href=\"http://10.20.30.40:8081/fruits/tomato\" class=\"bare\">http://10.20.30.40:8081/fruits/tomato</a></code>.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Pero esto es un poco confuso, ¿8080 sigfica que accedemos a las \"aplicación A\" y 8081 significa \"aplicación B\"?</p>\n</div>\n<div class=\"paragraph\">\n<p>Sería mucho más sencillo de recordar algo así:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Si queremos llamar a la \"aplicación A\" haremos algo así: <code>GET <a href=\"http://a.domain.com/colors/red\" class=\"bare\">http://a.domain.com/colors/red</a></code>.</p>\n</li>\n<li>\n<p>Si queremos llamar a la \"aplicación B\" haremos algo así: <code>GET <a href=\"http://b.domain.com/fruits/tomato\" class=\"bare\">http://b.domain.com/fruits/tomato</a></code>.</p>\n</li>\n</ul>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/docker-multidomain/domain.png\" alt=\"domain\" width=\"320\" height=\"auto\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Diferenciando aplicaciones por nombre de dominio</p>\n</div>\n<div class=\"paragraph\">\n<p>Obtener este valor semántico extra es más sencillo de lo que parece.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_cómo_configurar_un_proxy_inverso_multi_dominio\">Cómo configurar un Proxy Inverso Multi-Dominio</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Dije que era fácil porque no vamos a tener que hacer casi nada, ya que otro contenedor hará casi todo el trabajo por nosotros. Vamos a utilizar <a href=\"https://github.com/jwilder/nginx-proxy\" target=\"_blank\" rel=\"noopener\">nginx-proxy</a>, que generará automáticamente las configuraciones necesarias para <a href=\"https://www.nginx.com\" target=\"_blank\" rel=\"noopener\">NGINX</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Así que al final no tendremos 2 contenedores, sino también tendremos un tercero que hará las veces de proxy.</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/docker-multidomain/proxy.png\" alt=\"domain\" width=\"320\" height=\"auto\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Los 2 contenedores y el proxy.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nPuedes descargar el ejemplo completo desde: <a href=\"https://github.com/carlosvin/docker-reverse-proxy-multi-domain\" class=\"bare\">https://github.com/carlosvin/docker-reverse-proxy-multi-domain</a>.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_estructura_del_proyecto_de_ejemplo\">Estructura del proyecto de ejemplo</h3>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">docker-compose.yaml</dt>\n<dd>\n<p>Archivo con la configuración descrita en la imágen previa.</p>\n</dd>\n<dt class=\"hdlist1\">a</dt>\n<dd>\n<p>Directorio para la aplicación A.</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">Dockerfile</dt>\n<dd>\n<p>Archivo con la configuración del contenedor A.</p>\n</dd>\n</dl>\n</div>\n</dd>\n<dt class=\"hdlist1\">b</dt>\n<dd>\n<p>Directorio para la aplicación B.</p>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">Dockerfile</dt>\n<dd>\n<p>Archivo con la configuración del contenedor B.</p>\n</dd>\n</dl>\n</div>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://github.com/carlosvin/docker-reverse-proxy-multi-domain\" target=\"_blank\" rel=\"noopener\">Ver proyecto</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_configuración_de_la_arquitectura_docker_compose\">Configuración de la arquitectura (docker-compose)</h3>\n<div class=\"paragraph\">\n<p>La parte más importante es la configuración de las relaciones entre los contenedores.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">docker-reverse-proxy-multi-domain/docker-compose.yaml</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-yaml\" data-lang=\"yaml\"><span class=\"hljs-attr\">a:</span>\n  <span class=\"hljs-attr\">build:</span> <span class=\"hljs-string\">a</span> <b class=\"conum\">(4)</b>\n  <span class=\"hljs-attr\">environment:</span>\n    <span class=\"hljs-attr\">VIRTUAL_HOST:</span> <span class=\"hljs-string\">a.domain.com</span> <b class=\"conum\">(1)</b>\n  <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span>\n\n<span class=\"hljs-attr\">b:</span>\n  <span class=\"hljs-attr\">build:</span> <span class=\"hljs-string\">b</span> <b class=\"conum\">(5)</b>\n  <span class=\"hljs-attr\">environment:</span>\n    <span class=\"hljs-attr\">VIRTUAL_HOST:</span>  <span class=\"hljs-string\">b.domain.com</span> <b class=\"conum\">(2)</b>\n  <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span>\n\n<span class=\"hljs-attr\">nginx-proxy:</span> <b class=\"conum\">(3)</b>\n  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">jwilder/nginx-proxy</span>\n  <span class=\"hljs-attr\">ports:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"80:80\"</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"443:443\"</span>\n  <span class=\"hljs-attr\">volumes:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/var/run/docker.sock:/tmp/docker.sock:ro</span>\n\n  <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span>\n  <span class=\"hljs-attr\">privileged:</span> <span class=\"hljs-literal\">true</span></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>Configuramos el nombre de dominio que queremos utilizar para la aplicación a.</p>\n</li>\n<li>\n<p>Lo mismo para la aplicación b.</p>\n</li>\n<li>\n<p>A partir de aquí configuramos el proxy (esta es la parte de copiar y pegar).</p>\n</li>\n<li>\n<p>Indicamos a docker-compose que tiene que construir las imágenes dentro del directorio indicado.</p>\n</li>\n<li>\n<p>Por ejemplo, aquí, estamos indicando que docker-compose tiene que construir la imágen docker utilizando ./b/Dockerfile.</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_configuración_de_la_imágen_de_la_aplicación\">Configuración de la imágen de la aplicación</h3>\n<div class=\"paragraph\">\n<p>A continuación vamos a comentar la configuración de la imágen del contenedor para la aplicación A.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">a/Dockerfile</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-docker\" data-lang=\"docker\"><span class=\"hljs-keyword\">FROM</span> httpd:<span class=\"hljs-number\">2.4</span> <b class=\"conum\">(1)</b>\n<span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"&lt;html&gt;&lt;body&gt;&lt;h1&gt;A&lt;/h1&gt;App A works!&lt;/body&gt;&lt;/html&gt;\"</span> &gt; /usr/<span class=\"hljs-built_in\">local</span>/apache2/htdocs/index.html </span><b class=\"conum\">(2)</b></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>Importamos una imágen con un servidor apache.</p>\n</li>\n<li>\n<p>Servimos un archivo que muestra \"Host A\" como página por defecto.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>La configuración para la aplicación B, es prácticamente la misma:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">b/Dockerfile</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-docker\" data-lang=\"docker\"><span class=\"hljs-keyword\">FROM</span> httpd:<span class=\"hljs-number\">2.4</span>\n<span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"&lt;html&gt;&lt;body&gt;&lt;h1&gt;B&lt;/h1&gt;App B works!&lt;/body&gt;&lt;/html&gt;\"</span> &gt; /usr/<span class=\"hljs-built_in\">local</span>/apache2/htdocs/index.html</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_añadiendo_los_nombres_de_dominio_a_tu_configuración\">Añadiendo los nombres de dominio a tu configuración</h3>\n<div class=\"paragraph\">\n<p>En Linux simplemente tenemos mapear la dirección local a los nombres de dominio que hayas elegido, en nuestro ejemplo es <code>a.domain.com</code> y <code>b.domain.com</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">/etc/hosts</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">127.0.0.1     localhost.localdomain localhost\n::1             localhost6.localdomain6 localhost6\n127.0.0.1   a.domain.com <b class=\"conum\">(1)</b>\n127.0.0.1   b.domain.com</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>Simplemente he añadido las líneas 4 y 5.</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_todo_listo\">¡Todo listo!</h3>\n<div class=\"paragraph\">\n<p>Ya solo nos queda probar el ejemplo.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">docker-compose build\ndocker-compose up</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Ya están las tres contenedores arrancados.</p>\n</div>\n<div class=\"paragraph\">\n<p>Ahora podemos abrir nuestro navegador y escribir a.domain.com y nos mostrará el texto <em>App A works!</em>. Si escribimos b.domain.com entonces veremos <em>App B works!</em>.</p>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/docker-multidomain/a.screenshot.png\" alt=\"App A works!\" width=\"320\" height=\"auto\">\n</div>\n<div class=\"title\">Figure 1. a.domain.com</div>\n</div>\n<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/docker-multidomain/b.screenshot.png\" alt=\"App B works!\" width=\"320\" height=\"auto\">\n</div>\n<div class=\"title\">Figure 2. b.domain.com</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nEn la mayoría de distribuciones Linux necesitarás privilegios para ejecutar los comandos docker (<code>sudo</code>).\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>","slug":"reverse-proxy-multidomain-docker"}]}