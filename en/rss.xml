<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Vin's Blog</title><link>http://carlosvin.github.io/</link><description>Web personal de Carlos Martín Sánchez: Cuento lo que pasa por la web o por mi cabeza.</description><atom:link href="http://carlosvin.github.io/en/rss.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Mon, 06 Apr 2015 17:58:20 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Gestión de dependencias C++: Biicode</title><link>http://carlosvin.github.io/en/posts/first-biicode-poco.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;Hace tiempo que estoy interesado la construcción, gestión de dependencias, empaquetado y despliegue de proyectos software. Para &lt;a class="reference external" href="http://java.com/en/download/whatis_java.jsp"&gt;Java&lt;/a&gt;, &lt;a class="reference external" href="http://www.scala-lang.org/"&gt;Scala&lt;/a&gt;, &lt;a class="reference external" href="http://www.python.org/"&gt;Python&lt;/a&gt;, etc. Es bastante sencillo ya que hay herramientas como &lt;a class="reference external" href="http://maven.apache.org/"&gt;Maven&lt;/a&gt;, &lt;a class="reference external" href="http://www.gradle.org/"&gt;Gradle&lt;/a&gt;, &lt;a class="reference external" href="https://pypi.python.org/pypi/pip"&gt;pip&lt;/a&gt;, &lt;a class="reference external" href="http://www.scala-sbt.org/"&gt;Sbt&lt;/a&gt;, etc. Pero para C++_, lo más parecido que he encontrado es &lt;a class="reference external" href="http://maven.apache.org/"&gt;Maven&lt;/a&gt; con el plugin &lt;a class="reference external" href="http://maven-nar.github.io/"&gt;Nar&lt;/a&gt; o &lt;a class="reference external" href="http://www.gradle.org/"&gt;Gradle&lt;/a&gt; con su &lt;a class="reference external" href="https://gradle.org/docs/current/userguide/nativeBinaries.html"&gt;plugin cpp&lt;/a&gt; (que está en desarrollo).&lt;/p&gt;
&lt;p&gt;Hace tiempo que conozco &lt;a class="reference external" href="https://www.biicode.org/"&gt;Biicode&lt;/a&gt;, pero no había sacado nunca tiempo para probarlo, hasta hoy.&lt;/p&gt;
&lt;p&gt;El funcionamiento general es muy sencillo.&lt;/p&gt;
&lt;p&gt;Necesitamos &lt;a class="reference external" href="http://docs.biicode.com/c++/installation.html"&gt;instalar biicode en nuestra máquina&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yo he creado un pequeño ejemplo utilizando el sistema de log de la librería &lt;a class="reference external" href="http://pocoproject.org/"&gt;Poco&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;He ejecuta este comando para crear mi proyecto, al que he llamado bii_log. Eso sí, lo tengo que crear debajo de mi nombre de usuario en &lt;a class="reference external" href="https://www.biicode.org/"&gt;Biicode&lt;/a&gt;, por si posteriormente lo quiero publicar.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_e31d36de03bd4b73b7a8d9cfcb0c2554-1"&gt;&lt;/a&gt;bii new carlovin/bii_log --hello&lt;span class="o"&gt;=&lt;/span&gt;cpp
&lt;/pre&gt;&lt;p&gt;Se ha creado una estructura de directorios y ficheros con nuestro proyecto. Aunque los únicos ficheros que vamos a tocar son:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_2668fab58c5943f6b2f2fb8b9462ef3f-1"&gt;&lt;/a&gt;blocks/carlosvin/bii_log/main.cpp
&lt;a name="rest_code_2668fab58c5943f6b2f2fb8b9462ef3f-2"&gt;&lt;/a&gt;blocks/carlosvin/bii_log/biicode.conf
&lt;/pre&gt;&lt;p&gt;En el fichero biicode.conf vamos a configurar nuestras dependencias, en nuestro caso la librería &lt;a class="reference external" href="http://pocoproject.org/"&gt;Poco&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="code yaml"&gt;&lt;a name="rest_code_8003107a0e394453ba6c6552cdc5d319-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Biicode configuration file&lt;/span&gt;
&lt;a name="rest_code_8003107a0e394453ba6c6552cdc5d319-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_8003107a0e394453ba6c6552cdc5d319-3"&gt;&lt;/a&gt;&lt;span class="p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;requirements&lt;/span&gt;&lt;span class="p-Indicator"&gt;]&lt;/span&gt;
&lt;a name="rest_code_8003107a0e394453ba6c6552cdc5d319-4"&gt;&lt;/a&gt;    &lt;span class="l-Scalar-Plain"&gt;fenix/poco(develop)&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;0&lt;/span&gt;
&lt;a name="rest_code_8003107a0e394453ba6c6552cdc5d319-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_8003107a0e394453ba6c6552cdc5d319-6"&gt;&lt;/a&gt;&lt;span class="p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;parent&lt;/span&gt;&lt;span class="p-Indicator"&gt;]&lt;/span&gt;
&lt;a name="rest_code_8003107a0e394453ba6c6552cdc5d319-7"&gt;&lt;/a&gt;        &lt;span class="l-Scalar-Plain"&gt;carlosvin/bii_log&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;0&lt;/span&gt;
&lt;a name="rest_code_8003107a0e394453ba6c6552cdc5d319-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_8003107a0e394453ba6c6552cdc5d319-9"&gt;&lt;/a&gt;&lt;span class="p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;includes&lt;/span&gt;&lt;span class="p-Indicator"&gt;]&lt;/span&gt;
&lt;a name="rest_code_8003107a0e394453ba6c6552cdc5d319-10"&gt;&lt;/a&gt;    &lt;span class="l-Scalar-Plain"&gt;Poco/*.h&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;fenix/poco/Foundation/include&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;En la sección [includes], estamos redefiniendo la ruta a nuestros ficheros de cabeceras, porque si no lo hiciéramos tendríamos que hacer algo así:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_3bfb027ae0d442f78c597da64ae58ab9-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include "fenix/poco/Foundation/include/Logger.h"&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Gracias a esta línea, en nuestro código tendremos includes más claros como:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_2b96907d4f544b7bb18acfdaed9f094b-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include "Poco/Logger.h"&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Así de fácil, ya podemos utilizar la librería &lt;a class="reference external" href="http://pocoproject.org/"&gt;Poco&lt;/a&gt; en nuestro proyecto, por ejemplo:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include "Poco/FileChannel.h"&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include "Poco/FormattingChannel.h"&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-3"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include "Poco/PatternFormatter.h"&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-4"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include "Poco/Logger.h"&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-5"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include "Poco/AutoPtr.h"&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Poco&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;FileChannel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Poco&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;FormattingChannel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Poco&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;PatternFormatter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Poco&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-11"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Poco&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;AutoPtr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-13"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-14"&gt;&lt;/a&gt;        &lt;span class="n"&gt;AutoPtr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FileChannel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileChannel&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-15"&gt;&lt;/a&gt;        &lt;span class="n"&gt;pChannel&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"log/sample.log"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-16"&gt;&lt;/a&gt;        &lt;span class="n"&gt;pChannel&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"rotation"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"100 K"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-17"&gt;&lt;/a&gt;        &lt;span class="n"&gt;pChannel&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"archive"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"timestamp"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-19"&gt;&lt;/a&gt;        &lt;span class="c1"&gt;//AutoPtr&amp;lt;ConsoleChannel&amp;gt; pCons(new ConsoleChannel);&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-20"&gt;&lt;/a&gt;        &lt;span class="n"&gt;AutoPtr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PatternFormatter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pPF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PatternFormatter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-21"&gt;&lt;/a&gt;        &lt;span class="n"&gt;pPF&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"pattern"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"%Y-%m-%d %H:%M:%S %s: %t"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-22"&gt;&lt;/a&gt;        &lt;span class="n"&gt;AutoPtr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FormattingChannel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pFC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FormattingChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pPF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pChannel&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-23"&gt;&lt;/a&gt;        &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pFC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-24"&gt;&lt;/a&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-25"&gt;&lt;/a&gt;        &lt;span class="n"&gt;Logger&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"TestChannel"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-26"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-27"&gt;&lt;/a&gt;                &lt;span class="n"&gt;poco_information&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"This is a info"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-28"&gt;&lt;/a&gt;                &lt;span class="n"&gt;poco_warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"This is a warning"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-29"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-30"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_f334ecc9c5934440a1d7f13dd4aaf6e9-31"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Para compilar el proyecto simplemente hay que ejecutar:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_c8674a4a03a943be973e367340463883-1"&gt;&lt;/a&gt;bii cpp:build
&lt;/pre&gt;&lt;p&gt;Y para publicarlo y que cualquiera pueda utilizarlo, como nosotros hemos utilizado &lt;a class="reference external" href="http://pocoproject.org/"&gt;Poco&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_412fbd8125e94f418cc95586ca1f8fc3-1"&gt;&lt;/a&gt;bii publish
&lt;/pre&gt;&lt;p&gt;Además de lo sencillo que ha resultado todo, me ha gustado mucho que después de ejecutar "bii cpp:build", mi &lt;a class="reference external" href="https://eclipse.org"&gt;Eclipse&lt;/a&gt; con &lt;a class="reference external" href="https://eclipse.org/cdt/"&gt;CDT&lt;/a&gt; indexaba perfectamente el código, así como el autocompletado y la navegación entre clases y métodos.&lt;/p&gt;&lt;/div&gt;</description><guid>http://carlosvin.github.io/en/posts/first-biicode-poco.html</guid><pubDate>Wed, 25 Feb 2015 19:00:00 GMT</pubDate></item><item><title>Software Maintenance</title><link>http://carlosvin.github.io/en/posts/software-maintenance.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;Few days ago at work, I had to fulfill a document where I had to select a type of software maintenance that I was going to apply.&lt;/p&gt;
&lt;p&gt;The fact was I had only two choices, it seemed me very weird because during my degree I studied 3 or 4 kinds of software maintenance.&lt;/p&gt;
&lt;p&gt;Today I have found my Software Engineering class notes, then the types of Software Maintenance sorted descending by percentage of time spent:&lt;/p&gt;
&lt;table class="docutils field-list" frame="void" rules="none"&gt;&lt;col class="field-name"&gt;&lt;col class="field-body"&gt;&lt;tbody valign="top"&gt;&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Perfective:&lt;/th&gt;&lt;td class="field-body"&gt;Activities to improve or add new functionalities required by the user.&lt;/td&gt;
&lt;/tr&gt;&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Adaptative:&lt;/th&gt;&lt;td class="field-body"&gt;Activities to adapt the system to technological environment changes  (hardware or software).&lt;/td&gt;
&lt;/tr&gt;&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Corrective:&lt;/th&gt;&lt;td class="field-body"&gt;Fix defects in hardware or software detected by user running the production system.&lt;/td&gt;
&lt;/tr&gt;&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Preventive:&lt;/th&gt;&lt;td class="field-body"&gt;Activities to ease the future system maintenance.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;</description><category>Software Engineering</category><category>Software Maintenance</category><guid>http://carlosvin.github.io/en/posts/software-maintenance.html</guid><pubDate>Sat, 11 Oct 2014 19:00:00 GMT</pubDate></item><item><title>Build C++ project with Gradle</title><link>http://carlosvin.github.io/en/posts/gradle-cpp.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="http://carlosvin.github.io/en/posts/gradle-cpp.html#id7"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am more and more worried about building, dependency management and distribution of my projects. I'd like to find a tool unifies those processes with  independence of the language. I know several tools those almost fit to what I'm looking for, like I know several tools those almost fit to what I'm looking for, like &lt;a class="reference external" href="http://www.scons.org"&gt;SCons&lt;/a&gt;, &lt;a class="reference external" href="http://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction"&gt;Autotools&lt;/a&gt;, &lt;a class="reference external" href="http://ant.apache.org"&gt;Ant&lt;/a&gt;, &lt;a class="reference external" href="http://maven.apache.org"&gt;Maven&lt;/a&gt; and lately &lt;a class="reference external" href="http://www.gradle.org"&gt;Gradle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've made several projects with Gradle, but always I was focused in &lt;a class="reference external" href="http://www.java.com"&gt;Java&lt;/a&gt; and &lt;a class="reference external" href="http://developer.android.com/sdk/installing/studio-build.html"&gt;Android&lt;/a&gt; projects.
In &lt;a class="reference external" href="http://www.java.com"&gt;Java&lt;/a&gt; projects I've found a &lt;a class="reference external" href="http://maven.apache.org"&gt;Maven&lt;/a&gt; replacement, because it is faster, easier and less verbose.
About &lt;a class="reference external" href="http://developer.android.com/sdk/installing/studio-build.html"&gt;Android&lt;/a&gt; projects I suffered the early adoption of &lt;a class="reference external" href="http://developer.android.com/sdk/installing/studio-build.html"&gt;Android Studio + Gradle&lt;/a&gt;, although currently I think the are more mature and they work fine.&lt;/p&gt;
&lt;p&gt;First of all, I have to say: building C/C++/Objective-C projects with &lt;a class="reference external" href="http://www.gradle.org"&gt;Gradle&lt;/a&gt; is in &lt;a class="reference external" href="http://www.gradle.org/docs/current/userguide/feature_lifecycle.html#incubating"&gt;incubation&lt;/a&gt; phase, although now we can perform advanced tasks like:&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;Generation several artifacts within same project (libraries and executables).&lt;/li&gt;
&lt;li&gt;Dependency management between artifacts (no versions).&lt;/li&gt;
&lt;li&gt;Different "flavors" of the same software, e.g: we can generate a “Community” release and other one with more enabled features called “Enterprise”.&lt;/li&gt;
&lt;li&gt;It allows multi-platform binary generation.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;As I said, this plugin is still having limitations although they are working on it: &lt;a class="reference external" href="http://www.gradleware.com/resources/cpp/"&gt;Gradle C++ roadmap&lt;/a&gt;. If they achieve it I'll leave &lt;a class="reference external" href="http://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction"&gt;Autotools&lt;/a&gt; (I'm going to regret saying that).&lt;/p&gt;
&lt;div class="contents topic" id="index"&gt;
&lt;p class="topic-title first"&gt;Index&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/gradle-cpp.html#introduction" id="id7"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/gradle-cpp.html#case-study" id="id8"&gt;Case study&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/gradle-cpp.html#project-structure" id="id9"&gt;Project Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/gradle-cpp.html#c-application" id="id10"&gt;C++ Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/gradle-cpp.html#building-with-gradle" id="id11"&gt;Building with Gradle&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/gradle-cpp.html#base-case" id="id12"&gt;Base case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/gradle-cpp.html#different-flavors" id="id13"&gt;Different "Flavors"&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/gradle-cpp.html#community" id="id14"&gt;Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/gradle-cpp.html#enterprise" id="id15"&gt;Enterprise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/gradle-cpp.html#release-or-debug" id="id16"&gt;Release or Debug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/gradle-cpp.html#multi-platform" id="id17"&gt;Multi-platform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/gradle-cpp.html#try-it-yourself" id="id18"&gt;Try it yourself&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/gradle-cpp.html#conclusions" id="id19"&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://carlosvin.github.io/en/posts/gradle-cpp.html"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Build Construction Systems</category><category>C++</category><category>Gradle</category><guid>http://carlosvin.github.io/en/posts/gradle-cpp.html</guid><pubDate>Thu, 25 Sep 2014 17:00:00 GMT</pubDate></item><item><title>How sorting algorithms work (Dancing)</title><link>http://carlosvin.github.io/en/posts/sorting-algorithm-dancing.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;I've found out a artistic-technological group named &lt;a class="reference external" href="https://www.youtube.com/user/AlgoRythmics/videos"&gt;AlgoRythmics&lt;/a&gt;, they teach how the most popular sorting algorithms work.&lt;/p&gt;
&lt;p&gt;You can read &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Sorting_algorithm#Popular_sorting_algorithms"&gt;the wikipedia topic Popular sorting algorithms&lt;/a&gt;, although I think it isn't as funny to learn as the &lt;a class="reference external" href="https://www.youtube.com/user/AlgoRythmics/videos"&gt;AlgoRythmics&lt;/a&gt; way. Following the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Quicksort"&gt;Quicksort&lt;/a&gt;, judge for yourself.&lt;/p&gt;
&lt;iframe width="425" height="344" src="//www.youtube.com/embed/ywWBy6J5gz8?rel=0&amp;amp;hd=1&amp;amp;wmode=transparent"&gt;&lt;/iframe&gt;&lt;/div&gt;</description><category>Algorithm</category><category>Programming</category><category>Sorting</category><guid>http://carlosvin.github.io/en/posts/sorting-algorithm-dancing.html</guid><pubDate>Mon, 16 Jun 2014 18:09:00 GMT</pubDate></item><item><title>Bases de Datos Embebidas Java: Comparación de Rendimiento</title><link>http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div class="section" id="bases-de-datos-embebidas"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html#id1"&gt;Bases de datos embebidas&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Se trata de bases de datos que carecen de servidor, están inscrustadas en la propia aplicación y suelen estar almacenadas en ficheros locales. Esto último unido a que suelen tener un modo de funcionamiento en el que mantienen los datos en memoria hace que puedan tener un rendimiento muy alto.&lt;/p&gt;
&lt;p&gt;Eso sí, este gran grado acoplamiento a la aplicación, hace que tengan peor rendimiento cuando se comparten entre varias aplicaciones debido a colisiones de acceso.&lt;/p&gt;
&lt;p&gt;Otra ventaja es que no tenemos que encargarnos de mantener y gestionar un servidor de bases de datos.&lt;/p&gt;
&lt;p&gt;Voy a hacer una comparativa de rendimiento entre 3 bases de datos embebidas &lt;a class="reference external" href="http://es.wikipedia.org/wiki/ACID"&gt;ACID&lt;/a&gt; (transaccionales), las &lt;a class="reference external" href="http://es.wikipedia.org/wiki/NoSQL"&gt;NoSQL&lt;/a&gt; no entran en esta comparativa que están en otra liga de rendimiento.&lt;/p&gt;
&lt;div class="contents topic" id="contenidos"&gt;
&lt;p class="topic-title first"&gt;Contenidos&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html#bases-de-datos-embebidas" id="id1"&gt;Bases de datos embebidas&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html#sqlite" id="id2"&gt;SQLite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html#derby-o-javadb" id="id3"&gt;Derby o JavaDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html#objectdb" id="id4"&gt;ObjectDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html#los-tests" id="id5"&gt;Los Tests&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html#interfaz-db" id="id6"&gt;Interfaz DB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html#las-bases-de-datos-jdbc" id="id7"&gt;Las Bases de Datos JDBC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html#el-codigo-fuente" id="id8"&gt;El código fuente&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html#resultados-de-los-tests" id="id9"&gt;Resultados de los tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html</guid><pubDate>Sat, 07 Jun 2014 16:09:00 GMT</pubDate></item><item><title>Java serialization ways: Performance Comparison</title><link>http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently I've  had to serialize/deserialize some data in &lt;a class="reference external" href="http://www.java.com/"&gt;Java&lt;/a&gt; binary format. Lately I use &lt;a class="reference external" href="http://www.json.org/"&gt;JSON&lt;/a&gt; or &lt;a class="reference external" href="http://en.wikipedia.org/wiki/XML"&gt;XML&lt;/a&gt; formats.&lt;/p&gt;
&lt;p&gt;I remember that to serialize &lt;a class="reference external" href="http://www.java.com/"&gt;Java&lt;/a&gt; objects they must implement the  &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"&gt;Serializable&lt;/a&gt; interface, but I had also read in Internet other way, implementing the &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html"&gt;Externalizable&lt;/a&gt; interface, then, which interface must I implement? It depends on what you want such as everything in the life.&lt;/p&gt;
&lt;div class="contents topic" id="when-to-use-serializable-or-externalizable"&gt;
&lt;p class="topic-title first"&gt;When to use &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"&gt;Serializable&lt;/a&gt; or &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html"&gt;Externalizable&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#serializable" id="id3"&gt;Serializable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#externalizable" id="id4"&gt;Externalizable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#performance-tests-serializable-vs-externalizable" id="id5"&gt;Performance tests (Serializable vs. Externalizable)&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#implementing-serializable" id="id6"&gt;Implementing Serializable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#implementing-externalizable-wrong-way" id="id7"&gt;Implementing Externalizable (wrong way)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#implementing-externalizable-right-way" id="id8"&gt;Implementing Externalizable (right way)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#result-analysis" id="id9"&gt;Result Analysis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><guid>http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html</guid><pubDate>Tue, 13 May 2014 15:00:00 GMT</pubDate></item><item><title>Mutex C++</title><link>http://carlosvin.github.io/en/posts/cpp-mutex.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/C%2B%2B11"&gt;C++11&lt;/a&gt; has added many improvements to help us developing multi-thread systems. I'm going to talk about &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Mutex"&gt;mutex&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;a class="reference external" href="http://clang.llvm.org/cxx_status.html"&gt;previous C++11 compiler versions&lt;/a&gt;, we can get a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/POSIX_Threads"&gt;pthread&lt;/a&gt; &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Mutex"&gt;mutex&lt;/a&gt;, but we must initialize and destroy in &lt;a class="reference external" href="http://es.wikipedia.org/wiki/C_(lenguaje_de_programaci%C3%B3n)"&gt;C&lt;/a&gt; style; in the end you must do more things than just lock/unlock.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/C%2B%2B11"&gt;C++11&lt;/a&gt; provides &lt;a class="reference external" href="http://en.cppreference.com/w/cpp/thread/mutex"&gt;mutex class&lt;/a&gt;, we just lock/unclock the object. I recommend you take a look at &lt;a class="reference external" href="http://en.cppreference.com/w/cpp/thread/mutex"&gt;C++11 mutex class&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you still work with &lt;a class="reference external" href="http://clang.llvm.org/cxx_status.html"&gt;previous C++11 compiler versions&lt;/a&gt;, a time ago, I made a wrapper class that helps to work with &lt;a class="reference external" href="http://en.wikipedia.org/wiki/POSIX_Threads"&gt;pthread&lt;/a&gt; &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Mutex"&gt;mutex&lt;/a&gt;. You just lock/unlock the Mutex object.&lt;/p&gt;
&lt;p&gt;Then I leave my code proposal (&lt;a class="reference external" href="https://gist.github.com/carlosvin/11257689"&gt;Gist code&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://carlosvin.github.io/en/posts/cpp-mutex.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>pthread</category><guid>http://carlosvin.github.io/en/posts/cpp-mutex.html</guid><pubDate>Thu, 24 Apr 2014 15:50:00 GMT</pubDate></item><item><title>Python's asyncio: What, How, When</title><link>http://carlosvin.github.io/en/posts/async-what-how-when.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;I've been listening a &lt;a class="reference external" href="http://emptysqua.re/blog/"&gt;A. Jesse Jiryu Davis&lt;/a&gt; talk about the library &lt;a class="reference external" href="http://www.python.org"&gt;Python&lt;/a&gt;'s &lt;a class="reference external" href="https://docs.python.org/3.4/library/asyncio.html"&gt;asycnio&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3.4/library/asyncio.html"&gt;Asycnio&lt;/a&gt; is a library added to &lt;a class="reference external" href="http://www.python.org"&gt;Python&lt;/a&gt; 3.4. that provides infrastructure for writing single-threaded concurrent code which let us to save memory.&lt;/p&gt;
&lt;iframe width="425" height="344" src="//www.youtube.com/embed/9WV7juNmyE8?rel=0&amp;amp;hd=1&amp;amp;wmode=transparent"&gt;&lt;/iframe&gt;&lt;/div&gt;</description><category>Programming</category><category>Python</category><guid>http://carlosvin.github.io/en/posts/async-what-how-when.html</guid><pubDate>Sun, 20 Apr 2014 11:35:00 GMT</pubDate></item><item><title>Equations that changed the world</title><link>http://carlosvin.github.io/en/posts/equations-that-changed-the-word.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;I've seen in &lt;a class="reference external" href="https://plus.google.com/+GoogleScienceFair"&gt;Google Science Fair&lt;/a&gt; a collection of equations that changed the world.
In my opinion, everybody must understand some of these equations.&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://plus.google.com/108818810955465968635/posts/MQ6e6NXNGTf"&gt;&lt;img alt="Equations that changed the world" class="align-center" src="https://lh4.googleusercontent.com/-FHTLwqgD_9Y/Uzw9gQoOzWI/AAAAAAAAzPo/wYMfpR33uqM/w319-h417-no/10013908_458548124276223_2085950828_n.jpg" style="width: 400px;"&gt;&lt;/a&gt;&lt;/div&gt;</description><category>G+</category><category>Math</category><category>Pysics</category><category>Science</category><guid>http://carlosvin.github.io/en/posts/equations-that-changed-the-word.html</guid><pubDate>Thu, 03 Apr 2014 09:30:00 GMT</pubDate></item><item><title>First post with Nikola</title><link>http://carlosvin.github.io/en/posts/primer-post.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;I guess that most people come from dynamic content management systems based on:&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;send data from browser to server&lt;/li&gt;
&lt;li&gt;process the received data, then it stores the info into a database (or files)&lt;/li&gt;
&lt;li&gt;the server generate dynamically an answer that is sent to the browser as HTML&lt;ul&gt;&lt;li&gt;the answer is usually built reading info from a database or files.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This process is managed by a software installed on server, this is our content management system.&lt;/p&gt;
&lt;p&gt;Now I've changed the paradigm to "static web site generator", specifically I'm going to use &lt;a class="reference external" href="http://getnikola.com/"&gt;Nikola&lt;/a&gt;,
although this time, I'm not going to install on a remote server.&lt;/p&gt;
&lt;p&gt;In a next post I'll tell you how I've automated the publication process using &lt;a class="reference external" href="http://www.github.com"&gt;Github&lt;/a&gt; &lt;a class="footnote-reference" href="http://carlosvin.github.io/en/posts/primer-post.html#id9" id="id1"&gt;[1]&lt;/a&gt; and &lt;a class="reference external" href="https://travis-ci.org/"&gt;Travis&lt;/a&gt; &lt;a class="footnote-reference" href="http://carlosvin.github.io/en/posts/primer-post.html#id10" id="id2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;div class="contents topic" id="path-to-nikola"&gt;
&lt;p class="topic-title first"&gt;Path to &lt;a class="reference external" href="http://getnikola.com/"&gt;Nikola&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/primer-post.html#phpnuke" id="id16"&gt;PhpNuke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/primer-post.html#my-own-content-management-system" id="id17"&gt;My Own Content Management System&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/primer-post.html#drupal" id="id18"&gt;Drupal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/primer-post.html#wordpress" id="id19"&gt;Wordpress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/primer-post.html#cmsdj" id="id20"&gt;CMSdj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/primer-post.html#nikola" id="id21"&gt;Nikola&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://carlosvin.github.io/en/posts/primer-post.html"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><category>Static Sites</category><guid>http://carlosvin.github.io/en/posts/primer-post.html</guid><pubDate>Thu, 27 Mar 2014 12:30:02 GMT</pubDate></item></channel></rss>