<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Vin's Blog</title><link>http://carlosvin.github.io/</link><description>Web personal de Carlos Martín Sánchez: Cuento lo que pasa por la web o por mi cabeza.</description><language>en</language><lastBuildDate>Thu, 25 Sep 2014 18:49:32 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Construir un proyecto C++ con Gradle</title><link>http://carlosvin.github.io/en/posts/gradle-cpp.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;div class="section" id="introduccion"&gt;
&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;La construcción, gestión de dependencias y distribución de mis proyectos es algo que cada vez me preocupa más, me gustaría encontrar una herramienta que unificara este proceso y fuese independiente del lenguaje, lo más parecido con lo que he trabajado ha sido &lt;a class="reference external" href="http://www.scons.org"&gt;SCons&lt;/a&gt;, &lt;a class="reference external" href="http://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction"&gt;Autotools&lt;/a&gt;, &lt;a class="reference external" href="http://ant.apache.org"&gt;Ant&lt;/a&gt;, &lt;a class="reference external" href="http://maven.apache.org"&gt;Maven&lt;/a&gt; y últimamente &lt;a class="reference external" href="http://www.gradle.org"&gt;Gradle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Llevo un tiempo haciendo algunas cosas con &lt;a class="reference external" href="http://www.gradle.org"&gt;Gradle&lt;/a&gt;, pero siempre centrado en proyectos &lt;a class="reference external" href="http://www.java.com"&gt;Java&lt;/a&gt; utilizándolo como reemplazo a &lt;a class="reference external" href="http://maven.apache.org"&gt;Maven&lt;/a&gt;, porque que es más sencillo de usar y más rápido. También lo he utilizado en projectos &lt;a class="reference external" href="http://developer.android.com/sdk/installing/studio-build.html"&gt;Android&lt;/a&gt; y he sufrido la pareja &lt;a class="reference external" href="http://developer.android.com/sdk/installing/studio-build.html"&gt;Android Studio + Gradle&lt;/a&gt; en sus primeros matrimonios (porque yo he querido), actualmente está todo mucho más documentado y funciona muy bien.&lt;/p&gt;
&lt;p&gt;Antes de nada hay que decir que la construcción de proyectos C/C++ y Objective-C con &lt;a class="reference external" href="http://www.gradle.org"&gt;Gradle&lt;/a&gt; se encuentra en fase de &lt;a class="reference external" href="http://www.gradle.org/docs/current/userguide/feature_lifecycle.html#incubating"&gt;incubación&lt;/a&gt;, aunque ya permite hacer algunas tareas avanzadas como:&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;Generación de múltiples artefactos dentro del mismo proyecto, esto es varias librerías o ejecutables.&lt;/li&gt;
&lt;li&gt;Gestionar las dependencias entre estos artefactos (sin versiones).&lt;/li&gt;
&lt;li&gt;Generar distintos “sabores” de aplicaciones, por ejemplo: podremos generar una aplicación “Community” y otra con más características habilitadas llamada “Enterprise”.&lt;/li&gt;
&lt;li&gt;Permite generar binarios para distintas plataformas, esto depende de las cadenas de herramientas ( &lt;a class="reference external" href="http://es.wikipedia.org/wiki/Cadena_de_herramientas"&gt;Toolchains&lt;/a&gt; ) que tengamos instaladas en la máquina de compilación.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Como decía todavía tiene limitaciones, aunque están trabajando en ello y &lt;a class="reference external" href="http://www.gradleware.com/resources/cpp/"&gt;si consiguen lo que tienen planeado&lt;/a&gt; dejaré &lt;a class="reference external" href="http://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction"&gt;Autotools&lt;/a&gt; (me arrepentiré de haber dicho esto).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="un-caso-practico"&gt;
&lt;h2&gt;Un caso práctico&lt;/h2&gt;
&lt;p&gt;Básicamente he sacado todo el ejemplo de &lt;a class="reference external" href="http://www.gradle.org/docs/current/userguide/nativeBinaries.html"&gt;aquí&lt;/a&gt; y lo he adaptado a un caso en el que hay varias plataformas y quiero generar dos versiones distintas de mi software “Community” y “Enterprise”.&lt;/p&gt;
&lt;p&gt;La aplicación es un ejecutable y una librería dinámica. El ejecutable hace uso de esta librería. Ya está, solo quiero mostrar lo que nos permite hacer &lt;a class="reference external" href="http://www.gradle.org"&gt;Gradle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;También nos permitirá generar una versión para distribuir y otra para depurar.&lt;/p&gt;
&lt;p&gt;Todo el código se encuentra en &lt;cite&gt;https://github.com/carlosvin/cpp_gradle&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="section" id="estructura-del-proyecto"&gt;
&lt;h3&gt;Estructura del proyecto&lt;/h3&gt;
&lt;p&gt;Podemos crear la estructura que queramos, pero resulta más fácil seguir la que espera &lt;a class="reference external" href="http://www.gradle.org"&gt;Gradle&lt;/a&gt;, para no tener que especificar donde está el códigofuente. Esta es la estructura del proyecto:&lt;/p&gt;
&lt;table class="docutils field-list" frame="void" rules="none"&gt;&lt;col class="field-name"&gt;&lt;col class="field-body"&gt;&lt;tbody valign="top"&gt;&lt;tr class="field"&gt;&lt;th class="field-name"&gt;gradle-cpp:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;Directorio raíz.&lt;/p&gt;
&lt;table class="last docutils field-list" frame="void" rules="none"&gt;&lt;col class="field-name"&gt;&lt;col class="field-body"&gt;&lt;tbody valign="top"&gt;&lt;tr class="field"&gt;&lt;th class="field-name"&gt;build.gradle:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;Fichero donde se configura el proyecto Gradle, el equivalente al build.xml de &lt;a class="reference external" href="http://ant.apache.org"&gt;Ant&lt;/a&gt;, al &lt;a class="reference external" href="http://es.wikipedia.org/wiki/Make"&gt;Makefile&lt;/a&gt; de C/C++ o al pom.xml de &lt;a class="reference external" href="http://maven.apache.org"&gt;Maven&lt;/a&gt;.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class="field"&gt;&lt;th class="field-name"&gt;src:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;Carpeta donde va todo el código fuente&lt;/p&gt;
&lt;table class="docutils field-list" frame="void" rules="none"&gt;&lt;col class="field-name"&gt;&lt;col class="field-body"&gt;&lt;tbody valign="top"&gt;&lt;tr class="field"&gt;&lt;th class="field-name"&gt;hello:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;Carpeta que contiene el módulo que va a ser la librería hello.&lt;/p&gt;
&lt;table class="docutils field-list" frame="void" rules="none"&gt;&lt;col class="field-name"&gt;&lt;col class="field-body"&gt;&lt;tbody valign="top"&gt;&lt;tr class="field"&gt;&lt;th class="field-name"&gt;cpp:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;Carpeta donde van los fuentes C++.&lt;/p&gt;
&lt;table class="docutils field-list" frame="void" rules="none"&gt;&lt;col class="field-name"&gt;&lt;col class="field-body"&gt;&lt;tbody valign="top"&gt;&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Hello.cpp:&lt;/th&gt;&lt;td class="field-body"&gt;Implementación de la clase Hello.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class="field"&gt;&lt;th class="field-name"&gt;headers:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;Carpeta donde van los ficheros de cabeceras.&lt;/p&gt;
&lt;table class="last docutils field-list" frame="void" rules="none"&gt;&lt;col class="field-name"&gt;&lt;col class="field-body"&gt;&lt;tbody valign="top"&gt;&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Hello.h:&lt;/th&gt;&lt;td class="field-body"&gt;Declaración de la Clase Hello&lt;/td&gt;
&lt;/tr&gt;&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Msg.h:&lt;/th&gt;&lt;td class="field-body"&gt;Declaración de constantes.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class="field"&gt;&lt;th class="field-name"&gt;main:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;Carpeta que contiene el módulo que será el ejecutable que utilice la librería hello.&lt;/p&gt;
&lt;table class="last docutils field-list" frame="void" rules="none"&gt;&lt;col class="field-name"&gt;&lt;col class="field-body"&gt;&lt;tbody valign="top"&gt;&lt;tr class="field"&gt;&lt;th class="field-name"&gt;cpp:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;Carpeta donde van los fuentes C++.&lt;/p&gt;
&lt;table class="last docutils field-list" frame="void" rules="none"&gt;&lt;col class="field-name"&gt;&lt;col class="field-body"&gt;&lt;tbody valign="top"&gt;&lt;tr class="field"&gt;&lt;th class="field-name"&gt;main.cpp:&lt;/th&gt;&lt;td class="field-body"&gt;Código fuente con la función main.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class="field"&gt;&lt;th class="field-name"&gt;build:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first last"&gt;Carpeta que crea Gradle automáticamente donde deja todos los resultados sus ejecuciones, en ella encontraremos informes de resultados de pruebas, binarios compilados, paquetes para distribuir, etc.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="la-aplicacion-c"&gt;
&lt;h3&gt;La Aplicación C++&lt;/h3&gt;
&lt;p&gt;Va a consistir en un ejecutable que hará uso de la funcionalidad de la librería ’hello’.&lt;/p&gt;
&lt;pre class="code cpp literal-block"&gt;
&lt;span class="c1"&gt;// main.cpp
&lt;/span&gt;&lt;span class="cp"&gt;#include "Hello.h"
&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Pepito"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Esta librería permite saludar &lt;span class="math"&gt;\(n\)&lt;/span&gt; veces a una persona especificada en su constructor.&lt;/p&gt;
&lt;pre class="code cpp literal-block"&gt;
&lt;span class="c1"&gt;// Hello.h
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hello&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;private:&lt;/span&gt;
        &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;public:&lt;/span&gt;
        &lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="construyendo-con-gradle"&gt;
&lt;h3&gt;Construyendo con Gradle&lt;/h3&gt;
&lt;div class="section" id="caso-basico"&gt;
&lt;h4&gt;Caso básico&lt;/h4&gt;
&lt;p&gt;Lo único que necesitamos para construir nuestra aplicación con &lt;a class="reference external" href="http://www.gradle.org"&gt;Gradle&lt;/a&gt; es: tener &lt;a class="reference external" href="http://www.gradle.org"&gt;Gradle&lt;/a&gt; &lt;a class="footnote-reference" href="http://carlosvin.github.io/en/posts/gradle-cpp.html#id4" id="id1"&gt;[1]&lt;/a&gt; y el fichero build.gradle.&lt;/p&gt;
&lt;pre class="code groovy literal-block"&gt;
&lt;span class="c1"&gt;// build.gradle
&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="nl"&gt;plugin:&lt;/span&gt; &lt;span class="s1"&gt;'cpp'&lt;/span&gt;

&lt;span class="n"&gt;libraries&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;executables&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;binaries&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;lib&lt;/span&gt; &lt;span class="n"&gt;libraries&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shared&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Con este fichero tan simple, conseguiremos compilar e instalar nuestra aplicación, en modo Debug para la plataforma donde estamos ejecutando &lt;a class="reference external" href="http://www.gradle.org"&gt;Gradle&lt;/a&gt;, en mi caso es Linux X64.&lt;/p&gt;
&lt;p&gt;Si ejecutamos desde la raíz de nuestro proyecto gradle task, podremos ver todas las tareas que podemos hacer.&lt;/p&gt;
&lt;p&gt;En nuestro caso, solo queremos nuestra aplicación compilada y lista para funcionar, así que ejecutaremos: gradle installMainExecutable.&lt;/p&gt;
&lt;p&gt;Una vez que ha terminado, podemos ejecutar el programa llamando al script  &lt;a class="footnote-reference" href="http://carlosvin.github.io/en/posts/gradle-cpp.html#id5" id="id2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;build/install/mainExecutable/main
1.  Hello Mr. Pepito &lt;span class="o"&gt;(&lt;/span&gt;Community&lt;span class="o"&gt;)&lt;/span&gt;
2.  Hello Mr. Pepito &lt;span class="o"&gt;(&lt;/span&gt;Community&lt;span class="o"&gt;)&lt;/span&gt;
3.  Hello Mr. Pepito &lt;span class="o"&gt;(&lt;/span&gt;Community&lt;span class="o"&gt;)&lt;/span&gt;
4.  Hello Mr. Pepito &lt;span class="o"&gt;(&lt;/span&gt;Community&lt;span class="o"&gt;)&lt;/span&gt;
5.  Hello Mr. Pepito &lt;span class="o"&gt;(&lt;/span&gt;Community&lt;span class="o"&gt;)&lt;/span&gt;
6.  Hello Mr. Pepito &lt;span class="o"&gt;(&lt;/span&gt;Community&lt;span class="o"&gt;)&lt;/span&gt;
7.  Hello Mr. Pepito &lt;span class="o"&gt;(&lt;/span&gt;Community&lt;span class="o"&gt;)&lt;/span&gt;
8.  Hello Mr. Pepito &lt;span class="o"&gt;(&lt;/span&gt;Community&lt;span class="o"&gt;)&lt;/span&gt;
9.  Hello Mr. Pepito &lt;span class="o"&gt;(&lt;/span&gt;Community&lt;span class="o"&gt;)&lt;/span&gt;
10. Hello Mr. Pepito &lt;span class="o"&gt;(&lt;/span&gt;Community&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="distintos-sabores"&gt;
&lt;h4&gt;Distintos “Sabores”&lt;/h4&gt;
&lt;p&gt;Con unas pocas líneas más, podemos generar distintas versiones de la misma aplicación, en nuestro ejemplo vamos a generar una versión “Community” y otra “Enterprise”.&lt;/p&gt;
&lt;pre class="code groovy literal-block"&gt;
&lt;span class="c1"&gt;//build.gradle
&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="nl"&gt;plugin:&lt;/span&gt; &lt;span class="s1"&gt;'cpp'&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;flavors&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;community&lt;/span&gt;
        &lt;span class="n"&gt;enterprise&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;libraries&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;binaries&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flavor&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;flavors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;enterprise&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;cppCompiler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;define&lt;/span&gt; &lt;span class="s2"&gt;"ENTERPRISE"&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;executables&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;binaries&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;lib&lt;/span&gt; &lt;span class="n"&gt;libraries&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shared&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Además tenemos que preparar nuestra aplicación para utilizar estos parámetros de compilación.&lt;/p&gt;
&lt;pre class="code cpp literal-block"&gt;
&lt;span class="c1"&gt;// Msg.h
&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef ENTERPRISE
&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;EDITION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Enterprise"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cp"&gt;#else
&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;EDITION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Community"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cp"&gt;#endif
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;De esta forma se utiliza una cadena u otra en función del “sabor” con que compilemos.&lt;/p&gt;
&lt;p&gt;Si ahora ejecutamos gradle clean task en la raíz de nuestro proyecto, veremos que tenemos más tareas disponibles, antes teníamos &lt;cite&gt;installMainExecutable&lt;/cite&gt; y ahora ha sido reemplazada por &lt;cite&gt;installCommunityMainExecutable&lt;/cite&gt; y &lt;cite&gt;installEnterpriseMainExecutable&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;Si ejecutamos estas dos tareas , tendremos nuestra aplicación instalada en los dos sabores.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$gradle&lt;/span&gt; installEnterpriseMainExecutable installCommunityMainExecutable

:compileEnterpriseHelloSharedLibraryHelloCpp
:linkEnterpriseHelloSharedLibrary
:enterpriseHelloSharedLibrary
:compileEnterpriseMainExecutableMainCpp
:linkEnterpriseMainExecutable
:enterpriseMainExecutable
:installEnterpriseMainExecutable
:compileCommunityHelloSharedLibraryHelloCpp
:linkCommunityHelloSharedLibrary
:communityHelloSharedLibrary
:compileCommunityMainExecutableMainCpp
:linkCommunityMainExecutable
:communityMainExecutable
:installCommunityMainExecutable

BUILD SUCCESSFUL
Total &lt;span class="nb"&gt;time&lt;/span&gt;: 9.414 secs
&lt;/pre&gt;
&lt;p&gt;Ahora podemos ejecutar nuestra aplicación en los dos sabores:&lt;/p&gt;
&lt;p&gt;Community&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;build/install/mainExecutable/community/main
1.      Hello Mr. Pepito        &lt;span class="o"&gt;(&lt;/span&gt;Community&lt;span class="o"&gt;)&lt;/span&gt;
2.      Hello Mr. Pepito        &lt;span class="o"&gt;(&lt;/span&gt;Community&lt;span class="o"&gt;)&lt;/span&gt;
3.      Hello Mr. Pepito        &lt;span class="o"&gt;(&lt;/span&gt;Community&lt;span class="o"&gt;)&lt;/span&gt;
4.      Hello Mr. Pepito        &lt;span class="o"&gt;(&lt;/span&gt;Community&lt;span class="o"&gt;)&lt;/span&gt;
5.      Hello Mr. Pepito        &lt;span class="o"&gt;(&lt;/span&gt;Community&lt;span class="o"&gt;)&lt;/span&gt;
6.      Hello Mr. Pepito        &lt;span class="o"&gt;(&lt;/span&gt;Community&lt;span class="o"&gt;)&lt;/span&gt;
7.      Hello Mr. Pepito        &lt;span class="o"&gt;(&lt;/span&gt;Community&lt;span class="o"&gt;)&lt;/span&gt;
8.      Hello Mr. Pepito        &lt;span class="o"&gt;(&lt;/span&gt;Community&lt;span class="o"&gt;)&lt;/span&gt;
9.      Hello Mr. Pepito        &lt;span class="o"&gt;(&lt;/span&gt;Community&lt;span class="o"&gt;)&lt;/span&gt;
10.     Hello Mr. Pepito        &lt;span class="o"&gt;(&lt;/span&gt;Community&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Enterprise&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;build/install/mainExecutable/enterprise/main
1.      Hello Mr. Pepito        &lt;span class="o"&gt;(&lt;/span&gt;Enterprise&lt;span class="o"&gt;)&lt;/span&gt;
2.      Hello Mr. Pepito        &lt;span class="o"&gt;(&lt;/span&gt;Enterprise&lt;span class="o"&gt;)&lt;/span&gt;
3.      Hello Mr. Pepito        &lt;span class="o"&gt;(&lt;/span&gt;Enterprise&lt;span class="o"&gt;)&lt;/span&gt;
4.      Hello Mr. Pepito        &lt;span class="o"&gt;(&lt;/span&gt;Enterprise&lt;span class="o"&gt;)&lt;/span&gt;
5.      Hello Mr. Pepito        &lt;span class="o"&gt;(&lt;/span&gt;Enterprise&lt;span class="o"&gt;)&lt;/span&gt;
6.      Hello Mr. Pepito        &lt;span class="o"&gt;(&lt;/span&gt;Enterprise&lt;span class="o"&gt;)&lt;/span&gt;
7.      Hello Mr. Pepito        &lt;span class="o"&gt;(&lt;/span&gt;Enterprise&lt;span class="o"&gt;)&lt;/span&gt;
8.      Hello Mr. Pepito        &lt;span class="o"&gt;(&lt;/span&gt;Enterprise&lt;span class="o"&gt;)&lt;/span&gt;
9.      Hello Mr. Pepito        &lt;span class="o"&gt;(&lt;/span&gt;Enterprise&lt;span class="o"&gt;)&lt;/span&gt;
10.     Hello Mr. Pepito        &lt;span class="o"&gt;(&lt;/span&gt;Enterprise&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="release-o-debug"&gt;
&lt;h4&gt;Release o Debug&lt;/h4&gt;
&lt;p&gt;Por defecto Gradle compila nuestra aplicación en modo Debug, pero podemos añadir el modo Release para que active algunas optimizaciones &lt;a class="footnote-reference" href="http://carlosvin.github.io/en/posts/gradle-cpp.html#id6" id="id3"&gt;[3]&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="code groovy literal-block"&gt;
&lt;span class="c1"&gt;// build.gradle
&lt;/span&gt;
&lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="nl"&gt;plugin:&lt;/span&gt; &lt;span class="s1"&gt;'cpp'&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;buildTypes&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;debug&lt;/span&gt;
        &lt;span class="n"&gt;release&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// ... the rest of file below doesn't change&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Si ahora ejecutamos gradle clean task veremos que tenemos más tareas, se habrán desdoblado las que teníamos, por ejemplo &lt;cite&gt;installCommunityMainExecutable&lt;/cite&gt; se habrá desdoblado en &lt;cite&gt;installDebugCommunityMainExecutable&lt;/cite&gt; y &lt;cite&gt;installReleaseCommunityMainExecutable&lt;/cite&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="multi-plataforma"&gt;
&lt;h4&gt;Multi-plataforma&lt;/h4&gt;
&lt;p&gt;También tenemos las posibilidad de utilizar las características de compilación cruzada que nos ofrecen los compiladores y generar componentes nativos para otras aplicaciones. El proceso es el mismo, simplemente tenemos que dar te alta las aplicaciones con las que vamos a trabajar.&lt;/p&gt;
&lt;p&gt;Esto solo funcionará si en nuestro sistema tenemos instalada la cadena de herramientas ( &lt;a class="reference external" href="http://es.wikipedia.org/wiki/Cadena_de_herramientas"&gt;Toolchains&lt;/a&gt; ) necesaria, es decir, si en un sistema de 64 bits queremos compilar para 32 bits, tendremos que tener instaladas las librerías necesarias en 32 bits.&lt;/p&gt;
&lt;pre class="code groovy literal-block"&gt;
&lt;span class="c1"&gt;// build.gradle
&lt;/span&gt;
&lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="nl"&gt;plugin:&lt;/span&gt; &lt;span class="s1"&gt;'cpp'&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;buildTypes&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;debug&lt;/span&gt;
        &lt;span class="n"&gt;release&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
         &lt;span class="n"&gt;platforms&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;x86&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;architecture&lt;/span&gt; &lt;span class="s2"&gt;"x86"&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;x64&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;architecture&lt;/span&gt; &lt;span class="s2"&gt;"x86_64"&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;itanium&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;architecture&lt;/span&gt; &lt;span class="s2"&gt;"ia-64"&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;flavors&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;community&lt;/span&gt;
        &lt;span class="n"&gt;enterprise&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;libraries&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;binaries&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flavor&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;flavors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;enterprise&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;cppCompiler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;define&lt;/span&gt; &lt;span class="s2"&gt;"ENTERPRISE"&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;executables&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;binaries&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;lib&lt;/span&gt; &lt;span class="n"&gt;libraries&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shared&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ejecutando &lt;cite&gt;gradle clean task&lt;/cite&gt; podremos ver las distintas opciones de construción que tenemos, en nuestro caso veremos que podemos construir distintas versiones de nuestra aplicación en distintos sabores, para distintas plataformas en Debug o Release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusiones"&gt;
&lt;h2&gt;Conclusiones&lt;/h2&gt;
&lt;p&gt;Con una configuración mínima, tenemos muchas posibilidades de construcción de aplicaciones nativas multi-plataforma.&lt;/p&gt;
&lt;p&gt;Tiene un futuro prometedor, veremos como termina. Aunque si sigue los pasos del soporte para &lt;a class="reference external" href="http://www.java.com"&gt;Java&lt;/a&gt; o &lt;a class="reference external" href="http://developer.android.com/sdk/installing/studio-build.html"&gt;Android&lt;/a&gt;, seguro que llega a buen puerto.&lt;/p&gt;
&lt;p&gt;Podemos utilizar otras características de &lt;a class="reference external" href="http://www.gradle.org"&gt;Gradle&lt;/a&gt; y aplicarlas a nuestros proyectos C++, como análisis estáticos de código, generación de informes (pruebas, cobertura, calidad, etc.), fácil incorporación a sistemas de integración continua.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.gradle.org"&gt;Gradle&lt;/a&gt; para C++ es una característica que actualmente está en desarrollo, por lo que no hay que olvidar que:&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;No debemos utilizar en entornos reales de desarrollo, puede acarrear muchos dolores de cabeza.&lt;/li&gt;
&lt;li&gt;La forma de definir el fichero build.gradle para esta característica puede cambiar.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Todo el ejemplo se encuentra en &lt;a class="reference external" href="https://github.com/carlosvin/cpp_gradle"&gt;https://github.com/carlosvin/cpp_gradle&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://carlosvin.github.io/en/posts/gradle-cpp.html#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Realmente no es necesario tener instalado Gradle, si utilizamos el wrapper, pero esto no lo vamos a tratar hoy, &lt;a class="reference external" href="http://www.gradle.org/docs/current/userguide/nativeBinaries.html"&gt;si queréis más información&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://carlosvin.github.io/en/posts/gradle-cpp.html#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;.bat en Windows y sin extensión en Linux&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://carlosvin.github.io/en/posts/gradle-cpp.html#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;También podemos definir el tipo de optimizaciones que vamos a utilizar.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>http://carlosvin.github.io/en/posts/gradle-cpp.html</guid><pubDate>Thu, 25 Sep 2014 17:00:00 GMT</pubDate></item><item><title>How sorting algorithms work (Dancing)</title><link>http://carlosvin.github.io/en/posts/sorting-algorithm-dancing.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;I've found out a artistic-technological group named &lt;a class="reference external" href="https://www.youtube.com/user/AlgoRythmics/videos"&gt;AlgoRythmics&lt;/a&gt;, they teach how the most popular sorting algorithms work.&lt;/p&gt;
&lt;p&gt;You can read &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Sorting_algorithm#Popular_sorting_algorithms"&gt;the wikipedia topic Popular sorting algorithms&lt;/a&gt;, although I think it isn't as funny to learn as the &lt;a class="reference external" href="https://www.youtube.com/user/AlgoRythmics/videos"&gt;AlgoRythmics&lt;/a&gt; way. Following the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Quicksort"&gt;Quicksort&lt;/a&gt;, judge for yourself.&lt;/p&gt;
&lt;iframe width="425" height="344" src="//www.youtube.com/embed/ywWBy6J5gz8?rel=0&amp;amp;hd=1&amp;amp;wmode=transparent"&gt;&lt;/iframe&gt;&lt;/div&gt;</description><category>Algorithm</category><category>Programming</category><category>Sorting</category><guid>http://carlosvin.github.io/en/posts/sorting-algorithm-dancing.html</guid><pubDate>Mon, 16 Jun 2014 18:09:00 GMT</pubDate></item><item><title>Bases de Datos Embebidas Java: Comparación de Rendimiento</title><link>http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div class="section" id="bases-de-datos-embebidas"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html#id1"&gt;Bases de datos embebidas&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Se trata de bases de datos que carecen de servidor, están inscrustadas en la propia aplicación y suelen estar almacenadas en ficheros locales. Esto último unido a que suelen tener un modo de funcionamiento en el que mantienen los datos en memoria hace que puedan tener un rendimiento muy alto.&lt;/p&gt;
&lt;p&gt;Eso sí, este gran grado acoplamiento a la aplicación, hace que tengan peor rendimiento cuando se comparten entre varias aplicaciones debido a colisiones de acceso.&lt;/p&gt;
&lt;p&gt;Otra ventaja es que no tenemos que encargarnos de mantener y gestionar un servidor de bases de datos.&lt;/p&gt;
&lt;p&gt;Voy a hacer una comparativa de rendimiento entre 3 bases de datos embebidas &lt;a class="reference external" href="http://es.wikipedia.org/wiki/ACID"&gt;ACID&lt;/a&gt; (transaccionales), las &lt;a class="reference external" href="http://es.wikipedia.org/wiki/NoSQL"&gt;NoSQL&lt;/a&gt; no entran en esta comparativa que están en otra liga de rendimiento.&lt;/p&gt;
&lt;div class="contents topic" id="contenidos"&gt;
&lt;p class="topic-title first"&gt;Contenidos&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html#bases-de-datos-embebidas" id="id1"&gt;Bases de datos embebidas&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html#sqlite" id="id2"&gt;SQLite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html#derby-o-javadb" id="id3"&gt;Derby o JavaDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html#objectdb" id="id4"&gt;ObjectDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html#los-tests" id="id5"&gt;Los Tests&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html#interfaz-db" id="id6"&gt;Interfaz DB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html#las-bases-de-datos-jdbc" id="id7"&gt;Las Bases de Datos JDBC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html#el-codigo-fuente" id="id8"&gt;El código fuente&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html#resultados-de-los-tests" id="id9"&gt;Resultados de los tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://carlosvin.github.io/en/posts/java-embedded-db-performance-comparison.html</guid><pubDate>Sat, 07 Jun 2014 16:09:00 GMT</pubDate></item><item><title>Java serialization ways: Performance Comparison</title><link>http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently I've  had to serialize/deserialize some data in &lt;a class="reference external" href="http://www.java.com/"&gt;Java&lt;/a&gt; binary format. Lately I use &lt;a class="reference external" href="http://www.json.org/"&gt;JSON&lt;/a&gt; or &lt;a class="reference external" href="http://en.wikipedia.org/wiki/XML"&gt;XML&lt;/a&gt; formats.&lt;/p&gt;
&lt;p&gt;I remember that to serialize &lt;a class="reference external" href="http://www.java.com/"&gt;Java&lt;/a&gt; objects they must implement the  &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"&gt;Serializable&lt;/a&gt; interface, but I had also read in Internet other way, implementing the &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html"&gt;Externalizable&lt;/a&gt; interface, then, which interface must I implement? It depends on what you want such as everything in the life.&lt;/p&gt;
&lt;div class="contents topic" id="when-to-use-serializable-or-externalizable"&gt;
&lt;p class="topic-title first"&gt;When to use &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"&gt;Serializable&lt;/a&gt; or &lt;a class="reference external" href="http://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html"&gt;Externalizable&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#serializable" id="id3"&gt;Serializable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#externalizable" id="id4"&gt;Externalizable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#performance-tests-serializable-vs-externalizable" id="id5"&gt;Performance tests (Serializable vs. Externalizable)&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#implementing-serializable" id="id6"&gt;Implementing Serializable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#implementing-externalizable-wrong-way" id="id7"&gt;Implementing Externalizable (wrong way)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#implementing-externalizable-right-way" id="id8"&gt;Implementing Externalizable (right way)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html#result-analysis" id="id9"&gt;Result Analysis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Java</category><guid>http://carlosvin.github.io/en/posts/serialization-java-serializable-externalizable.html</guid><pubDate>Tue, 13 May 2014 15:00:00 GMT</pubDate></item><item><title>Mutex C++</title><link>http://carlosvin.github.io/en/posts/cpp-mutex.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/C%2B%2B11"&gt;C++11&lt;/a&gt; has added many improvements to help us developing multi-thread systems. I'm going to talk about &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Mutex"&gt;mutex&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;a class="reference external" href="http://clang.llvm.org/cxx_status.html"&gt;previous C++11 compiler versions&lt;/a&gt;, we can get a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/POSIX_Threads"&gt;pthread&lt;/a&gt; &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Mutex"&gt;mutex&lt;/a&gt;, but we must initialize and destroy in &lt;a class="reference external" href="http://es.wikipedia.org/wiki/C_(lenguaje_de_programaci%C3%B3n)"&gt;C&lt;/a&gt; style; in the end you must do more things than just lock/unlock.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/C%2B%2B11"&gt;C++11&lt;/a&gt; provides &lt;a class="reference external" href="http://en.cppreference.com/w/cpp/thread/mutex"&gt;mutex class&lt;/a&gt;, we just lock/unclock the object. I recommend you take a look at &lt;a class="reference external" href="http://en.cppreference.com/w/cpp/thread/mutex"&gt;C++11 mutex class&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you still work with &lt;a class="reference external" href="http://clang.llvm.org/cxx_status.html"&gt;previous C++11 compiler versions&lt;/a&gt;, a time ago, I made a wrapper class that helps to work with &lt;a class="reference external" href="http://en.wikipedia.org/wiki/POSIX_Threads"&gt;pthread&lt;/a&gt; &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Mutex"&gt;mutex&lt;/a&gt;. You just lock/unlock the Mutex object.&lt;/p&gt;
&lt;p&gt;Then I leave my code proposal (&lt;a class="reference external" href="https://gist.github.com/carlosvin/11257689"&gt;Gist code&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://carlosvin.github.io/en/posts/cpp-mutex.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>C++</category><category>pthread</category><guid>http://carlosvin.github.io/en/posts/cpp-mutex.html</guid><pubDate>Thu, 24 Apr 2014 15:50:00 GMT</pubDate></item><item><title>Python's asyncio: What, How, When</title><link>http://carlosvin.github.io/en/posts/async-what-how-when.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;I've been listening a &lt;a class="reference external" href="http://emptysqua.re/blog/"&gt;A. Jesse Jiryu Davis&lt;/a&gt; talk about the library &lt;a class="reference external" href="http://www.python.org"&gt;Python&lt;/a&gt;'s &lt;a class="reference external" href="https://docs.python.org/3.4/library/asyncio.html"&gt;asycnio&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3.4/library/asyncio.html"&gt;Asycnio&lt;/a&gt; is a library added to &lt;a class="reference external" href="http://www.python.org"&gt;Python&lt;/a&gt; 3.4. that provides infrastructure for writing single-threaded concurrent code which let us to save memory.&lt;/p&gt;
&lt;iframe width="425" height="344" src="//www.youtube.com/embed/9WV7juNmyE8?rel=0&amp;amp;hd=1&amp;amp;wmode=transparent"&gt;&lt;/iframe&gt;&lt;/div&gt;</description><category>Programming</category><category>Python</category><guid>http://carlosvin.github.io/en/posts/async-what-how-when.html</guid><pubDate>Sun, 20 Apr 2014 11:35:00 GMT</pubDate></item><item><title>Equations that changed the world</title><link>http://carlosvin.github.io/en/posts/equations-that-changed-the-word.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;I've seen in &lt;a class="reference external" href="https://plus.google.com/+GoogleScienceFair"&gt;Google Science Fair&lt;/a&gt; a collection of equations that changed the world.
In my opinion, everybody must understand some of these equations.&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://plus.google.com/108818810955465968635/posts/MQ6e6NXNGTf"&gt;&lt;img alt="Equations that changed the world" class="align-center" src="https://lh4.googleusercontent.com/-FHTLwqgD_9Y/Uzw9gQoOzWI/AAAAAAAAzPo/wYMfpR33uqM/w319-h417-no/10013908_458548124276223_2085950828_n.jpg" style="width: 400px;"&gt;&lt;/a&gt;&lt;/div&gt;</description><category>G+</category><category>Math</category><category>Pysics</category><category>Science</category><guid>http://carlosvin.github.io/en/posts/equations-that-changed-the-word.html</guid><pubDate>Thu, 03 Apr 2014 09:30:00 GMT</pubDate></item><item><title>First post with Nikola</title><link>http://carlosvin.github.io/en/posts/primer-post.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;I guess that most people come from dynamic content management systems based on:&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;send data from browser to server&lt;/li&gt;
&lt;li&gt;process the received data, then it stores the info into a database (or files)&lt;/li&gt;
&lt;li&gt;the server generate dynamically an answer that is sent to the browser as HTML&lt;ul&gt;&lt;li&gt;the answer is usually built reading info from a database or files.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This process is managed by a software installed on server, this is our content management system.&lt;/p&gt;
&lt;p&gt;Now I've changed the paradigm to "static web site generator", specifically I'm going to use &lt;a class="reference external" href="http://getnikola.com/"&gt;Nikola&lt;/a&gt;,
although this time, I'm not going to install on a remote server.&lt;/p&gt;
&lt;p&gt;In a next post I'll tell you how I've automated the publication process using &lt;a class="reference external" href="http://www.github.com"&gt;Github&lt;/a&gt; &lt;a class="footnote-reference" href="http://carlosvin.github.io/en/posts/primer-post.html#id9" id="id1"&gt;[1]&lt;/a&gt; and &lt;a class="reference external" href="https://travis-ci.org/"&gt;Travis&lt;/a&gt; &lt;a class="footnote-reference" href="http://carlosvin.github.io/en/posts/primer-post.html#id10" id="id2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;div class="contents topic" id="path-to-nikola"&gt;
&lt;p class="topic-title first"&gt;Path to &lt;a class="reference external" href="http://getnikola.com/"&gt;Nikola&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/primer-post.html#phpnuke" id="id16"&gt;PhpNuke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/primer-post.html#my-own-content-management-system" id="id17"&gt;My Own Content Management System&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/primer-post.html#drupal" id="id18"&gt;Drupal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/primer-post.html#wordpress" id="id19"&gt;Wordpress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/primer-post.html#cmsdj" id="id20"&gt;CMSdj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://carlosvin.github.io/en/posts/primer-post.html#nikola" id="id21"&gt;Nikola&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://carlosvin.github.io/en/posts/primer-post.html"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><category>Static Sites</category><guid>http://carlosvin.github.io/en/posts/primer-post.html</guid><pubDate>Thu, 27 Mar 2014 12:30:02 GMT</pubDate></item><item><title>Android Studio Portable Download</title><link>http://carlosvin.github.io/en/posts/android-studio-portable-download.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;p&gt;If you want to use &lt;a class="reference external" href="http://developer.android.com/sdk/installing/studio.html"&gt;Android Studio&lt;/a&gt; without installation, as a portable software, here you have the link to &lt;a class="reference external" href="http://tools.android.com/download/studio/canary/latest"&gt;last portable version of Android Studio&lt;/a&gt;.&lt;/p&gt;</description><category>Android</category><category>Java</category><category>Software</category><guid>http://carlosvin.github.io/en/posts/android-studio-portable-download.html</guid><pubDate>Sun, 20 Oct 2013 11:00:00 GMT</pubDate></item><item><title>Depurar librería generada con libtool</title><link>http://carlosvin.github.io/en/posts/debug-libtool-lib.html</link><dc:creator>Carlos Martín Sánchez</dc:creator><description>&lt;div&gt;&lt;p&gt;Trabajando con &lt;a class="reference external" href="http://www.gnu.org/software/libtool/libtool.html"&gt;libtool&lt;/a&gt; &lt;a class="footnote-reference" href="http://carlosvin.github.io/en/posts/debug-libtool-lib.html#id3" id="id1"&gt;[1]&lt;/a&gt;, cuando vamos a depurar un ejecutable que utiliza una librería generada con &lt;a class="reference external" href="http://www.gnu.org/software/libtool/libtool.html"&gt;libtool&lt;/a&gt;, es posible que nos encontremos con el siguiente error:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;gdb ./tests-mylib
&lt;span class="s2"&gt;"tests-mylib"&lt;/span&gt;: not in executable format: File format not recognized
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;libmylib.so&lt;/code&gt; es una librería dinámica generada con &lt;a class="reference external" href="http://www.gnu.org/software/libtool/libtool.html"&gt;libtool&lt;/a&gt;
&lt;code&gt;tests-mylib&lt;/code&gt; es un ejecutable que utiliza la librería mylib&lt;/p&gt;
&lt;p&gt;Para los que estéis pensando que se me ha olvidado poner la opción de compilación &lt;code&gt;-g&lt;/code&gt;, lo siento, pero este error ocurre aunque utilicemos &lt;code&gt;-g&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;El error es debido a que estamos intentando ejecutar un script generado por &lt;a class="reference external" href="http://www.gnu.org/software/libtool/libtool.html"&gt;libtool&lt;/a&gt;, es una envoltura sobre el programa real, para facilitar la ejecución de éste &lt;a class="citation-reference" href="http://carlosvin.github.io/en/posts/debug-libtool-lib.html#libtooldoc" id="id2"&gt;[libtooldoc]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para poder depurar nuestro programa de prueba &lt;code&gt;tests-mylib&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
libtool --mode&lt;span class="o"&gt;=&lt;/span&gt;execute gdb tests-mylib
&lt;/pre&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://carlosvin.github.io/en/posts/debug-libtool-lib.html#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Herramienta que pertenece a la &lt;a class="reference external" href="http://es.wikipedia.org/wiki/GNU_build_system"&gt;Autotools&lt;/a&gt; usada para crear bibliotecas de software portables.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table class="docutils citation" frame="void" id="libtooldoc" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://carlosvin.github.io/en/posts/debug-libtool-lib.html#id2"&gt;[libtooldoc]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Esta información la he sacado de &lt;a class="reference external" href="http://www.gnu.org/software/libtool/manual/libtool.html#Debugging-executables"&gt;http://www.gnu.org/software/libtool/manual/libtool.html#Debugging-executables&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;</description><guid>http://carlosvin.github.io/en/posts/debug-libtool-lib.html</guid><pubDate>Fri, 01 Feb 2013 14:30:00 GMT</pubDate></item></channel></rss>