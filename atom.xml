<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>My software engineering journey</title>
    <subtitle>Documenting a personal journey through software engineering, AI, and programming. This blog features deep dives, practical guides, and recent learnings for both seasoned and aspiring developers.</subtitle>
    <link rel="self" type="application/atom+xml" href="https://carlosvin.github.io/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://carlosvin.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-08-30T00:00:00+00:00</updated>
    <id>https://carlosvin.github.io/atom.xml</id>
    <entry xml:lang="en">
        <title>About</title>
        <published>2025-08-15T00:00:00+00:00</published>
        <updated>2025-08-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/about/"/>
        <id>https://carlosvin.github.io/about/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/about/">&lt;h2 id=&quot;about-this-blog&quot;&gt;About this blog&lt;&#x2F;h2&gt;
&lt;p&gt;Welcome to &#x27;My Software Engineering Journey&#x27; &lt;a href=&quot;&#x2F;&quot;&gt;blog&lt;&#x2F;a&gt;, a personal blog where I document my adventures in the world of code. Here, I dive deep into topics I&#x27;m passionate about, especially within software engineering, AI, programming languages, code examples, coding practices, recent learnings and more. From deep dives into performance and efficiency to practical guides on building and deploying applications, my goal is to share what I&#x27;ve learned along the way. Whether you&#x27;re a seasoned developer or just starting out, I hope you&#x27;ll find something valuable and inspiring in &lt;a href=&quot;&#x2F;&quot;&gt;these posts&lt;&#x2F;a&gt;. Join me as I explore the ever-evolving landscape of software engineering, one line of code at a time.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;small&gt;Note that there are some old posts, that are kind of legacy, I keep them for reference, one example can be &lt;a href=&quot;https:&#x2F;&#x2F;carlosvin.github.io&#x2F;about&#x2F;.&#x2F;choosing-modern-cpp-stack&quot;&gt;Choosing a Modern C++ stack&lt;&#x2F;a&gt;, it was written in 2017, updated on 2020, but I guess today is not modern anymore ðŸ˜„.&lt;&#x2F;small&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;about-me&quot;&gt;About me&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;before&quot;&gt;Before&lt;&#x2F;h3&gt;
&lt;p&gt;Over the years, I&#x27;ve had the privilege of working with industry in great companies like &lt;a href=&quot;https:&#x2F;&#x2F;www.microsoft.com&#x2F;&quot;&gt;Microsoft&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.ebay.com&#x2F;&quot;&gt;eBay&lt;&#x2F;a&gt;, Champ, Santander Global Tech and Spanish Lotteries, where I&#x27;ve led teams, architected solutions, and developed scalable systems that power critical business functions. My expertise spans across languages and frameworks such as &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;&quot;&gt;Go&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.java.com&#x2F;&quot;&gt;Java&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;reactjs.org&#x2F;&quot;&gt;React&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.python.org&#x2F;&quot;&gt;Python&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.typescriptlang.org&#x2F;&quot;&gt;TypeScript&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;isocpp.org&#x2F;&quot;&gt;C++&lt;&#x2F;a&gt; and more. I&#x27;ve contributed to projects ranging from e-commerce platforms to real-time trading systems, always with a focus on improving efficiency, reliability, and user experience.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;now&quot;&gt;Now&lt;&#x2F;h3&gt;
&lt;p&gt;Currently, I lead the Sales Apps team at &lt;a href=&quot;https:&#x2F;&#x2F;www.mongodb.com&#x2F;&quot;&gt;MongoDB&lt;&#x2F;a&gt;. Our mission is to boost the productivity of the GTM organization by building innovative software solutions. We leverage the &lt;a href=&quot;https:&#x2F;&#x2F;www.mongodb.com&#x2F;resources&#x2F;basics&#x2F;farm-stack&quot;&gt;FARM stack&lt;&#x2F;a&gt;â€”&lt;a href=&quot;https:&#x2F;&#x2F;fastapi.tiangolo.com&#x2F;&quot;&gt;FastAPI&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;reactjs.org&#x2F;&quot;&gt;React&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.mongodb.com&#x2F;&quot;&gt;MongoDB&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;nextjs.org&#x2F;&quot;&gt;Next.js&lt;&#x2F;a&gt;â€”along with &lt;a href=&quot;https:&#x2F;&#x2F;tanstack.com&#x2F;router&quot;&gt;TanStack Router&lt;&#x2F;a&gt;, to create tools that help our sales teams work more efficiently and effectively.&lt;&#x2F;p&gt;
&lt;p&gt;We also created a sister team with the same mission of improving GTM efficiency, but focused on leveraging AI to solve problems.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;contact&quot;&gt;Contact&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m always open to new opportunities and collaborations. Feel free to reach out if you&#x27;d like to connect!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>TanStack Router: Opinionated Guidelines for Production React Apps</title>
        <published>2025-08-15T00:00:00+00:00</published>
        <updated>2025-08-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/tanstack-router-opinionated-conventions-production-react-apps/"/>
        <id>https://carlosvin.github.io/tanstack-router-opinionated-conventions-production-react-apps/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/tanstack-router-opinionated-conventions-production-react-apps/">&lt;p&gt;This post captures a practical way to implement a React application using TanStack Router. It focuses on maintainability, predictable data flows, and ergonomics for both reading and writing code.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;tanstack-router-prod-app&quot;&gt;ðŸ”— GitHub Repository&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;carlosvin.github.io&#x2F;tanstack-router-prod-app&#x2F;&quot;&gt;ðŸš€ Live Preview&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
The guidelines and recommendations in this guide are based on our real-world experience building a new internal application as the Sales Apps Team at &lt;a href=&quot;https:&#x2F;&#x2F;www.mongodb.com&quot;&gt;MongoDB&lt;&#x2F;a&gt;. They reflect lessons learned and best practices developed throughout that process.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;chosen-tech-stack&quot;&gt;Chosen tech stack&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;typescript&quot;&gt;Typescript&lt;&#x2F;h3&gt;
&lt;p&gt;Faster and safer development: Our goal was to catch bugs as early as possibleâ€”ideally at compile time, together with a next level developer experience. This approach not only reduces runtime errors but also makes refactoring and onboarding significantly easier.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
In my experience, well-documented project or team guidelines have an even greater positive impact on onboarding than end-to-end typing alone.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We can see some examples of next level code assistance enabled by TypeScript in tools like &lt;a href=&quot;https:&#x2F;&#x2F;arktype.io&#x2F;&quot;&gt;Arktype&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;tanstack.com&#x2F;router&#x2F;latest&quot;&gt;TanStack Router&lt;&#x2F;a&gt;, or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;drwpow&#x2F;openapi-typescript&quot;&gt;openapi-typescript&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;e2e-type-safe-arktype-tanstack-router-openapi-fetch&quot;&gt;E2E type safe: Arktype + TanStack router + openapi-fetch&lt;&#x2F;h3&gt;
&lt;p&gt;Any input to our application will be validated and typed, there are different data inputs that can affect our application state:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Search params&lt;&#x2F;strong&gt;: TanStack Router offers robust, type-safe search param validation out of the box. We use &lt;a href=&quot;https:&#x2F;&#x2F;arktype.io&#x2F;&quot;&gt;Arktype&lt;&#x2F;a&gt; for runtime validation, which integrates seamlessly with TanStack Routerâ€”see &lt;a href=&quot;https:&#x2F;&#x2F;tanstack.com&#x2F;router&#x2F;latest&#x2F;docs&#x2F;framework&#x2F;react&#x2F;guide&#x2F;search-params#arktype&quot;&gt;this concise, powerful example&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Backend&lt;&#x2F;strong&gt;: In this case we generate a typed client from the backend &lt;a href=&quot;https:&#x2F;&#x2F;swagger.io&#x2F;docs&#x2F;specification&#x2F;v3_0&#x2F;about&#x2F;&quot;&gt;OpenAPI spec&lt;&#x2F;a&gt; with &lt;a href=&quot;https:&#x2F;&#x2F;openapi-ts.dev&#x2F;openapi-fetch&#x2F;&quot;&gt;&lt;code&gt;openapi-fetch&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. All backend interactions are handled exclusively through this generated client, ensuring type safety and consistency across the app.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
For teams seeking an extra layer of runtime validation, tools like &lt;a href=&quot;https:&#x2F;&#x2F;arktype.io&#x2F;&quot;&gt;Arktype&lt;&#x2F;a&gt; can be used to validate backend responses. However, in our experienceâ€”especially as maintainers of both the backend and frontendâ€”this has proven unnecessary. With well-maintained OpenAPI specs, semantic versioning, and strong type generation, we&#x27;ve yet to encounter bugs caused by a mismatch between expected and actual responses. Unless your backend is managed by a separate team or you frequently encounter contract drift, runtime validation with Arktype is likely not needed in this case.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;testing-vitest-react-testing-library&quot;&gt;Testing: Vitest + React testing library&lt;&#x2F;h3&gt;
&lt;p&gt;Here the choices are quite obvious:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vitest.dev&#x2F;&quot;&gt;Vitest&lt;&#x2F;a&gt; because it is the go-to testing framework if you are using &lt;a href=&quot;https:&#x2F;&#x2F;vitejs.dev&#x2F;&quot;&gt;Vite&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testing-library.com&#x2F;docs&#x2F;&quot;&gt;Testing Library&lt;&#x2F;a&gt; for intuitive, user-focused component tests.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;project-guidelines&quot;&gt;Project guidelines&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;use-search-params-to-keep-page-state&quot;&gt;Use search params to keep &lt;strong&gt;page&lt;&#x2F;strong&gt; state&lt;&#x2F;h3&gt;
&lt;p&gt;Favor search params over component state for sharable, restorable URLs. This reduces adâ€‘hoc &lt;code&gt;useState&lt;&#x2F;code&gt; and makes the page state linkable.&lt;&#x2F;p&gt;
&lt;p&gt;This guideline is one of the easiest and most impactful decisions we have made:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Being able for our users to share exactly the same data via URLs was really important and we get this for free.&lt;&#x2F;li&gt;
&lt;li&gt;If we want to change the page state, we just navigate to change search params:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;tsx&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-tsx &quot;&gt;&lt;code class=&quot;language-tsx&quot; data-lang=&quot;tsx&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;createFileRoute &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@tanstack&#x2F;react-router&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;arktype&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;productSearchSchema &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;    page: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;number = 1&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Route &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;createFileRoute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;shop&#x2F;products&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)({
&lt;&#x2F;span&gt;&lt;span&gt;    validateSearch: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;productSearchSchema&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;loaderDeps&lt;&#x2F;span&gt;&lt;span&gt;: ({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;: { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;page &lt;&#x2F;span&gt;&lt;span&gt;} }) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;page &lt;&#x2F;span&gt;&lt;span&gt;}),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;loader&lt;&#x2F;span&gt;&lt;span&gt;: ({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deps&lt;&#x2F;span&gt;&lt;span&gt;: { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;page &lt;&#x2F;span&gt;&lt;span&gt;} }) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fetchProducts&lt;&#x2F;span&gt;&lt;span&gt;({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;page &lt;&#x2F;span&gt;&lt;span&gt;}),
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Products &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;navigate &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Route&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useNavigate&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handleChangePage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;page&lt;&#x2F;span&gt;&lt;span&gt;: number) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; here we are just updating the query
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;navigate&lt;&#x2F;span&gt;&lt;span&gt;({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prev&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;({...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prev&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;page&lt;&#x2F;span&gt;&lt;span&gt;})})
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When the navigation is performed, the loader will be called again to fetch the products in the new page. If the route was already loaded, then it will use the cached data.&lt;&#x2F;p&gt;
&lt;p&gt;Page state is fully type safe, always accessible, and can be as complex as needed. For example, this URL encodes all state to list products on page 2, 100 per page, sorted by ascending price, searching &quot;water ski&quot;:&lt;br &#x2F;&gt;
&lt;code&gt;&#x2F;shop&#x2F;products?page=2&amp;amp;itemsPerPage=100&amp;amp;sort=asc&amp;amp;query=water ski&amp;amp;sortBy=price&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
Share this URL and everyone sees the exact same state.&lt;&#x2F;p&gt;
&lt;p&gt;If I want to change the state, will only have to navigate sort by date in descending order:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-`&#x2F;shop&#x2F;products?page=2&amp;amp;itemsPerPage=100&amp;amp;sort=asc&amp;amp;query=water ski&amp;amp;sortBy=price`  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+`&#x2F;shop&#x2F;products?page=2&amp;amp;itemsPerPage=100&amp;amp;sort=desc&amp;amp;query=water ski&amp;amp;sortBy=date`  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Component-level state management will still be necessary for UI interactions (e.g., form inputs, toggle states, loading indicators). This guideline specifically applies to maintaining the &lt;strong&gt;current page state&lt;&#x2F;strong&gt;â€”the data and filters that define what content is displayed and should be shareable via URL.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;interacting-with-the-backend&quot;&gt;Interacting with the backend&lt;&#x2F;h3&gt;
&lt;p&gt;Keep backend calls thin and predictable. Recommended approach:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Generate a typed client from your OpenAPI spec (e.g., with &lt;code&gt;openapi-fetch&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Wrap responses in a small helper that normalizes errors into a single &lt;code&gt;AppError&lt;&#x2F;code&gt; shape your UI can consume.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Example shape returned by &lt;code&gt;processResponse&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;AppError = {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;: string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;?: string
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Processed&amp;lt;T&amp;gt; = { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;?: T; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;?: AppError }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getProduct&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;productId&lt;&#x2F;span&gt;&lt;span&gt;: string) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; response.data: only present if 2XX response
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; response.error: only present if 4XX or 5XX response
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;response &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;GET&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;products&#x2F;{product_id}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, {
&lt;&#x2F;span&gt;&lt;span&gt;        params: {
&lt;&#x2F;span&gt;&lt;span&gt;            path: { product_id: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;productId &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Here is where we try to convert the error into an AppError unified interface
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;processResponse&lt;&#x2F;span&gt;&lt;span&gt;({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;, action: `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Fetching product ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;productId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;data-fetching-loaders&quot;&gt;Data fetching - Loaders&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Leverage &lt;a href=&quot;https:&#x2F;&#x2F;tanstack.com&#x2F;router&#x2F;latest&#x2F;docs&#x2F;framework&#x2F;react&#x2F;guide&#x2F;data-loading#route-loaders&quot;&gt;route loaders&lt;&#x2F;a&gt; when possible&lt;&#x2F;strong&gt; because they simplify data flows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Avoid most data contexts&#x2F;hooks for reads; when the route renders, data is ready to pass down&lt;&#x2F;li&gt;
&lt;li&gt;Builtâ€‘in caching based on declared &lt;a href=&quot;https:&#x2F;&#x2F;tanstack.com&#x2F;router&#x2F;latest&#x2F;docs&#x2F;framework&#x2F;react&#x2F;guide&#x2F;data-loading#dependency-based-stale-while-revalidate-caching&quot;&gt;dependencies&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;exceptions-in-loaders&quot;&gt;Exceptions in loaders&lt;&#x2F;h4&gt;
&lt;p&gt;Throw in loaders (e.g., &lt;code&gt;AppError&lt;&#x2F;code&gt;) so route error components handle failures consistently. Centralize error typing so UIs can show banners&#x2F;toasts with &lt;code&gt;title&lt;&#x2F;code&gt; and &lt;code&gt;description&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is just convenient, because of &lt;a href=&quot;https:&#x2F;&#x2F;tanstack.com&#x2F;router&#x2F;latest&#x2F;docs&#x2F;framework&#x2F;react&#x2F;guide&#x2F;data-loading#handling-errors-with-routeoptionserrorcomponent&quot;&gt;TanStack Error Components&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Applying this pattern, fetching a product now throws on error for cleaner loader usage:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getProduct&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;productId&lt;&#x2F;span&gt;&lt;span&gt;: string) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ... same code as in the example above, the only change is below
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;mutations&quot;&gt;Mutations&lt;&#x2F;h3&gt;
&lt;p&gt;Mutation functions are similar to fetchers but generally &lt;strong&gt;should NOT throw exceptions&lt;&#x2F;strong&gt;. They&#x27;re invoked from event handlers, and &lt;strong&gt;throwing loses error type information&lt;&#x2F;strong&gt;. Return a &lt;code&gt;{ data, error }&lt;&#x2F;code&gt; object instead.&lt;&#x2F;p&gt;
&lt;p&gt;ðŸš« Ideally, we want to avoid having to inspect or discriminate error types at runtime:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span&gt;new NotFoundError(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Not Found&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;404&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;: unknown) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;instanceof NotFoundError) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The object was not found&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;objectId&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Caught something else: ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;âœ… Using the mutation in a route component:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handleDelete&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;productId&lt;&#x2F;span&gt;&lt;span&gt;: string) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;deleteProduct&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;productId&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; The error has a title and description attributes
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;pushToast&lt;&#x2F;span&gt;&lt;span&gt;({ variant: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;warning&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;pushToast&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;            variant: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;success&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;            title: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Deleted!&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;            description: `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Product ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;productId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Invalidate so the loader re-fetches the page state
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;router&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invalidate&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;styling&quot;&gt;Styling&lt;&#x2F;h3&gt;
&lt;p&gt;Use CSS Modules for simplicity. Create &lt;code&gt;Component.module.css&lt;&#x2F;code&gt; next to &lt;code&gt;Component.tsx&lt;&#x2F;code&gt;. Vite handles it out of the box, no extra config needed.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tsx&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-tsx &quot;&gt;&lt;code class=&quot;language-tsx&quot; data-lang=&quot;tsx&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; HomeLayout.tsx
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;classes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;HomeLayout.module.css&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export default function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;HomeLayout&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;className&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;classes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;homeContainer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;className&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;classes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mainTitle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Welcome!&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h2&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;leverage-nested-routing-to-show-nested-components&quot;&gt;Leverage nested routing to show nested components&lt;&#x2F;h3&gt;
&lt;p&gt;If a nested component isn&#x27;t rendered by default (e.g., a modal), make it a nested route instead of toggling hidden UI state.&lt;&#x2F;p&gt;
&lt;p&gt;Benefits:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Clear separation of concerns; no need to render hidden components&lt;&#x2F;li&gt;
&lt;li&gt;Nested routes can access parent loader data&lt;&#x2F;li&gt;
&lt;li&gt;Lazy loading is straightforward&lt;&#x2F;li&gt;
&lt;li&gt;Recoverable app state via URLs (e.g., &lt;code&gt;&#x2F;products&lt;&#x2F;code&gt; vs &lt;code&gt;&#x2F;products&#x2F;new&lt;&#x2F;code&gt; for opening a modal)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;avoid-calling-a-loader-when-the-parent-already-loaded-the-data&quot;&gt;Avoid calling a loader when the parent already loaded the data&lt;&#x2F;h4&gt;
&lt;p&gt;In nested routes, reuse parent data:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tsx&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-tsx &quot;&gt;&lt;code class=&quot;language-tsx&quot; data-lang=&quot;tsx&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currentUser &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useLoaderData&lt;&#x2F;span&gt;&lt;span&gt;({ from: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;__root__&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; })
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;leverage-the-default-router-cache&quot;&gt;Leverage the default router cache&lt;&#x2F;h3&gt;
&lt;p&gt;The builtâ€‘in cache works well by default. After a mutation followed by navigation, you may want to &lt;code&gt;router.invalidate()&lt;&#x2F;code&gt; to refetch fresh data.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;improve-performance-by-setting-only-the-needed-loader-deps&quot;&gt;Improve performance by setting only the needed loader deps&lt;&#x2F;h4&gt;
&lt;p&gt;The dependencies are also part of the caching mechanism, and only the selected search params will re-fetch data.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tsx&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-tsx &quot;&gt;&lt;code class=&quot;language-tsx&quot; data-lang=&quot;tsx&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;productsIndexSchema &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;    page: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;number = 1&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    sort: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;newest&amp;quot; | &amp;quot;oldest&amp;quot; | &amp;quot;price&amp;quot; = &amp;quot;newest&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    condensedView: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;boolean = false&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &#x2F;routes&#x2F;products.tsx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Route &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;createFileRoute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;products&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)({
&lt;&#x2F;span&gt;&lt;span&gt;    validateSearch: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;productsIndexSchema&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;loaderDeps&lt;&#x2F;span&gt;&lt;span&gt;: ({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;: { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;page&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort &lt;&#x2F;span&gt;&lt;span&gt;} }) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;page&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort &lt;&#x2F;span&gt;&lt;span&gt;}),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;loader&lt;&#x2F;span&gt;&lt;span&gt;: ({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deps&lt;&#x2F;span&gt;&lt;span&gt;: { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;page&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort &lt;&#x2F;span&gt;&lt;span&gt;} }) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fetchProducts&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;page&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }),
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, updating the state to display a more condensed view does not trigger a data refetch, since &lt;code&gt;condensedView&lt;&#x2F;code&gt; is not included in the &lt;code&gt;loaderDeps&lt;&#x2F;code&gt;. This means the loader will not re-run when only the view mode changes, optimizing performance by avoiding unnecessary network requests.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tsx&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-tsx &quot;&gt;&lt;code class=&quot;language-tsx&quot; data-lang=&quot;tsx&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This is not making the loader to re-fetch data, because condensedView is not defined in the loaderDeps
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Route&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;navigate&lt;&#x2F;span&gt;&lt;span&gt;({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;: ({&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prev&lt;&#x2F;span&gt;&lt;span&gt;}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;({...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prev&lt;&#x2F;span&gt;&lt;span&gt;, condensedView: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;})})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;using-router-history&quot;&gt;Using router history&lt;&#x2F;h3&gt;
&lt;p&gt;Use history navigation when it reflects user intent (e.g., closing a modal):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Simpler than reconstructing &lt;code&gt;navigate&lt;&#x2F;code&gt; calls with params and search state&lt;&#x2F;li&gt;
&lt;li&gt;Preserves cache&#x2F;state more often; if you do need fresh data (e.g., postâ€‘mutation), invalidate&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;project-structure&quot;&gt;Project structure&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;src&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assets&lt;&#x2F;code&gt;: public assets&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;components&lt;&#x2F;code&gt;: React components; each usually has its own folder with styles and tests&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;hooks&lt;&#x2F;code&gt;: custom React hooks&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;routes&lt;&#x2F;code&gt;: TanStack Router routes (route tree definitions and pages)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;services&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;api&lt;&#x2F;code&gt;: wrappers around backend interactions; see fetch&#x2F;mutation sections&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;schemas&lt;&#x2F;code&gt;: &lt;code&gt;arktype&lt;&#x2F;code&gt; schema definitions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Easily creating a golang command line tool</title>
        <published>2021-02-14T00:00:00+00:00</published>
        <updated>2021-02-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/create-cmd-tool-golang/"/>
        <id>https://carlosvin.github.io/create-cmd-tool-golang/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/create-cmd-tool-golang/">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;&quot;&gt;Golang&lt;&#x2F;a&gt; is one of the most useful technologies I&#x27;ve recently learned. Golang has pretty nice support for networking, command line, or logging out of the boxâ€”you don&#x27;t need any dependency. But there are libraries making developers&#x27; life even easier.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve already talked about &lt;a href=&quot;&#x2F;langs&#x2F;en&#x2F;posts&#x2F;rest-service-go-vs-java&#x2F;&quot;&gt;creating REST service in go&lt;&#x2F;a&gt;, today I&#x27;d like to focus on creating a command line tool.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;flags&quot;&gt;Flags&lt;&#x2F;h2&gt;
&lt;p&gt;Command line tool to read number of lines as an input integer parameter (Golang):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nFlag &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;lines&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1234&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;number of lines&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Parse&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Lines &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nFlag&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With previous simple code we have already some useful capabilities:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;print-help-menu&quot;&gt;Print help menu&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --help
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Usage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt; cmd:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-lines&lt;&#x2F;span&gt;&lt;span&gt; int
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span&gt; of lines (default 1234)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;use-default-value&quot;&gt;Use default value&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cmd
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Lines &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1234
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;pass-a-value-to-the-command-tool&quot;&gt;Pass a value to the command tool&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --lines&lt;&#x2F;span&gt;&lt;span&gt;=2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Lines &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;pass-an-invalid-value&quot;&gt;Pass an invalid value&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --lines&lt;&#x2F;span&gt;&lt;span&gt;=asdf
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; invalid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;asdf&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; for flag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -lines&lt;&#x2F;span&gt;&lt;span&gt;: parse error
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Usage&lt;&#x2F;span&gt;&lt;span&gt; of cmd:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-lines&lt;&#x2F;span&gt;&lt;span&gt; int
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span&gt; of lines (default 1234)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt; status 2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For a simple command line tool, in most cases, we will have enough with the default language support. But if we want to bring more features to the combo like reading configuration from environment variables or from files, then a library like the awesome &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spf13&#x2F;viper&quot;&gt;Viper&lt;&#x2F;a&gt; will come really handy.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;viper&quot;&gt;Viper&lt;&#x2F;h2&gt;
&lt;p&gt;Viper is a very powerful and well-documented library widely used in many projects. I will not get into the details of how to use it, because I&#x27;ve created an abstraction to simplify its usage, I named it &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;meta-viper&quot;&gt;Meta-Viper&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;meta-viper&quot;&gt;Meta-Viper&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;meta-viper&quot;&gt;Meta-Viper&lt;&#x2F;a&gt; abstracts you from the details of reading configuration from files, environment, or flags. This extra simplicity comes with a tradeoff: we are missing some flexibility.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see some features with an example.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;firstly-create-a-go-modules-project-with-the-meta-viper-dependency&quot;&gt;Firstly, create a go modules project with the meta-viper dependency&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;go&lt;&#x2F;span&gt;&lt;span&gt; mod init example.com&#x2F;meta-viper &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Create a go modules project
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;go&lt;&#x2F;span&gt;&lt;span&gt; get github.com&#x2F;carlosvin&#x2F;meta-viper &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Install the meta-viper dependency
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now let&#x27;s create a program that is configurable from files, command line params, and environment variables.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;main.go&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;github.com&#x2F;carlosvin&#x2F;meta-viper&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Here is where you define the struct that will hold the configuration values
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; cfg_name is the parameter name
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; cfg_desc is the parameter description that will be shown in the command line help
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;appConfig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Host      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cfg_name:&amp;quot;host&amp;quot; cfg_desc:&amp;quot;Server host&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;`
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Port      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int    &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cfg_name:&amp;quot;port&amp;quot; cfg_desc:&amp;quot;Server port&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;`
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SearchAPI &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cfg_name:&amp;quot;apis.search&amp;quot; cfg_desc:&amp;quot;Search API endpoint&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;`
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Instantiate the structure with default values
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appConfig&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Host&lt;&#x2F;span&gt;&lt;span&gt;:      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;localhost&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Port&lt;&#x2F;span&gt;&lt;span&gt;:      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6000&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SearchAPI&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;google&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Meta-Viper instance is loading the configuration from wherever is available: files, env, or input params
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Args&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Loaded Configuration &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now let&#x27;s see some examples of how this command line tool is able to load configuration.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;print-usage-help&quot;&gt;Print usage (help)&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --help
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Usage&lt;&#x2F;span&gt;&lt;span&gt; of flagsConfig:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--apis.search&lt;&#x2F;span&gt;&lt;span&gt; string    Search API endpoint (default &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;google&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--config&lt;&#x2F;span&gt;&lt;span&gt; string         Configuration name
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--config-dirs&lt;&#x2F;span&gt;&lt;span&gt; strings   Configuration directories search paths (default &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;.,config,configs,cfg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--host&lt;&#x2F;span&gt;&lt;span&gt; string           Server host (default &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;localhost&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--port&lt;&#x2F;span&gt;&lt;span&gt; int              Server port (default 6000)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pflag:&lt;&#x2F;span&gt;&lt;span&gt; help requested
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt; status 2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;run-with-default-values&quot;&gt;Run with default values&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cmd
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021&#x2F;02&#x2F;15&lt;&#x2F;span&gt;&lt;span&gt; 23:12:48 No configuration name has been specified, so no configuration file will be loaded. Using flags and environment variables.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021&#x2F;02&#x2F;15&lt;&#x2F;span&gt;&lt;span&gt; 23:12:48 Loaded Configuration &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;{localhost&lt;&#x2F;span&gt;&lt;span&gt; 6000 google}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;read-the-port-from-environment-variable-and-host-from-input-param&quot;&gt;Read the port from environment variable and host from input param&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; PORT=9999 cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --host&lt;&#x2F;span&gt;&lt;span&gt;=myhost
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021&#x2F;02&#x2F;15&lt;&#x2F;span&gt;&lt;span&gt; 23:15:47 No configuration name has been specified, so no configuration file will be loaded. Using flags and environment variables.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021&#x2F;02&#x2F;15&lt;&#x2F;span&gt;&lt;span&gt; 23:15:47 Loaded Configuration &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;{myhost&lt;&#x2F;span&gt;&lt;span&gt; 9999 google}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The last example will aggregate all the possible sources of configuration, it will extend the previous one adding configuration from a file. So let&#x27;s create a configuration file:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;the-config.json&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;apis&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;duckduckgo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;read-configuration-from-the-config-json-file-from-environment-and-from-input-params&quot;&gt;Read configuration from the-config.json file, from environment and from input params&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; PORT=9999 cmd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --host&lt;&#x2F;span&gt;&lt;span&gt;=myhost&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --config&lt;&#x2F;span&gt;&lt;span&gt;=the-config
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2021&#x2F;02&#x2F;15&lt;&#x2F;span&gt;&lt;span&gt; 23:22:17 Loaded Configuration &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;{myhost&lt;&#x2F;span&gt;&lt;span&gt; 9999 duckduckgo}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;TIP: Here you can find a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;meta-viper&#x2F;tree&#x2F;master&#x2F;examples&#x2F;multi-env&quot;&gt;multi-environment example&lt;&#x2F;a&gt; a little bit more complete.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Parameterized Tests in Cypress</title>
        <published>2021-01-06T00:00:00+00:00</published>
        <updated>2021-01-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/cypress-parametrized-dynamic-tests/"/>
        <id>https://carlosvin.github.io/cypress-parametrized-dynamic-tests/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/cypress-parametrized-dynamic-tests/">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cypress.io&#x2F;&quot;&gt;Cypress&lt;&#x2F;a&gt; is a testing framework for anything running on a web browser. I am using it to test this site and I&#x27;ve talked before about it in the post &lt;a href=&quot;https:&#x2F;&#x2F;carlosvin.github.io&#x2F;posts&#x2F;this-is-sapper&#x2F;en#_testing&quot;&gt;&quot;This is Sapper&quot;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In this post I won&#x27;t explain how to use &lt;a href=&quot;https:&#x2F;&#x2F;www.cypress.io&#x2F;&quot;&gt;Cypress&lt;&#x2F;a&gt;, they have a pretty nice documentation: &lt;a href=&quot;https:&#x2F;&#x2F;docs.cypress.io&#x2F;guides&#x2F;getting-started&#x2F;installing-cypress.html&quot;&gt;Getting started with Cypress&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I will stick to the parameterized tests topic.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Parameterized tests&lt;&#x2F;strong&gt;: Also known as dynamic tests, it is an useful technique where you can specify an input dataset and the test case will be repeated for each element in the dataset.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;explicit-input-data-set&quot;&gt;Explicit input data set&lt;&#x2F;h2&gt;
&lt;p&gt;Since sometimes you canâ€™t run the test for all the possible inputs, you can select a set of meaningful data to test.&lt;&#x2F;p&gt;
&lt;p&gt;Example checking that the relevant pages in the site have valid HTML syntax:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;describe&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;validate pages&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    [ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;1&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;categories&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;categories&#x2F;sapper&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;posts&#x2F;creating-custom-maven-plugin-default&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;posts&#x2F;choosing-modern-cpp-stack&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;posts&#x2F;cpp-mutex&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;posts&#x2F;cpp-pragma-pack&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;posts&#x2F;creating-custom-maven-plugin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;posts&#x2F;delete-html-tags-py-django&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;posts&#x2F;gradle-cpp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;posts&#x2F;java-embedded-db-performance-comparison&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;posts&#x2F;react-typescript-parcel&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;posts&#x2F;pwa-lessons-learned-cra&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    ].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;2&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;it&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;should be valid HTML ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`, () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;3&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;visit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;htmlvalidate&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&amp;lt;1&amp;gt; List with relevant pages to validate&lt;br &#x2F;&gt;
&amp;lt;2&amp;gt; Iterate over the list of pages&lt;br &#x2F;&gt;
&amp;lt;3&amp;gt; Test case execution for selected page&lt;&#x2F;p&gt;
&lt;h3 id=&quot;test-results&quot;&gt;Test results&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;carlosvin.github.io&#x2F;cypress-parametrized-dynamic-tests&#x2F;.&#x2F;html-validation.png&quot; alt=&quot;Test results&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;generated-input-data-set&quot;&gt;Generated input data set&lt;&#x2F;h2&gt;
&lt;p&gt;Instead of explicitly defining a data set, you can generate it, for example, creating a random data set.&lt;&#x2F;p&gt;
&lt;p&gt;Example checking that any generated random number is less than 0:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;describe&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inputData &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;1&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inputData&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;2&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;it&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;should be valid ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`, () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;3&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;be&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;lessThan&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&amp;lt;1&amp;gt; It generates an array of 100 random numbers&lt;br &#x2F;&gt;
&amp;lt;2&amp;gt; Iterate over the generated array&lt;br &#x2F;&gt;
&amp;lt;3&amp;gt; Test case execution&lt;&#x2F;p&gt;
&lt;h3 id=&quot;test-results-1&quot;&gt;Test results&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;carlosvin.github.io&#x2F;cypress-parametrized-dynamic-tests&#x2F;.&#x2F;random-validation.png&quot; alt=&quot;Test results&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;&#x2F;strong&gt; Please check the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cypress-io&#x2F;cypress-example-recipes&#x2F;tree&#x2F;master&#x2F;examples&#x2F;fundamentals__dynamic-tests&quot;&gt;cypress official examples to learn more about dynamic&#x2F;parameterized testing&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Golang over Java for REST services</title>
        <published>2020-11-01T00:00:00+00:00</published>
        <updated>2020-11-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/rest-service-go-vs-java/"/>
        <id>https://carlosvin.github.io/rest-service-go-vs-java/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/rest-service-go-vs-java/">&lt;p&gt;Lately I&#x27;ve been working with two different technology stacks almost in parallel, in both cases we were using them to develop &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Representational_state_transfer&quot;&gt;REST&lt;&#x2F;a&gt; services.&lt;&#x2F;p&gt;
&lt;p&gt;During this time I&#x27;ve come up with some conclusions and opinions I&#x27;d like to share.&lt;&#x2F;p&gt;
&lt;p&gt;A disclaimer, few months ago, I had several years of experience with Java and 0 days of professional experience with Golang.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;actual-project-examples&quot;&gt;Actual project examples&lt;&#x2F;h2&gt;
&lt;p&gt;Few months ago I created &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;covid-rest-go&quot;&gt;an API to extract and structure COVID-19 data&lt;&#x2F;a&gt; from &lt;a href=&quot;https:&#x2F;&#x2F;www.ecdc.europa.eu&#x2F;en&#x2F;publications-data&#x2F;download-todays-data-geographic-distribution-covid-19-cases-worldwide&quot;&gt;ECDC website&lt;&#x2F;a&gt;. I developed it in &lt;a href=&quot;https:&#x2F;&#x2F;spring.io&#x2F;guides&#x2F;gs&#x2F;rest-service&quot;&gt;Spring Boot (REST)&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Few months later I had the luck of work on my first professional project in &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&quot;&gt;Go&lt;&#x2F;a&gt; and I decided to create a port of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;covid-rest-go&quot;&gt;the API to extract COVID-19 data&lt;&#x2F;a&gt; in &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&quot;&gt;Go&lt;&#x2F;a&gt;, just for learning and for fun.&lt;&#x2F;p&gt;
&lt;p&gt;Now we have two REST services, almost functionally identical, but developed in two different tech stacks, so we can easily compare some relevant aspects of both.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;source-code-for-the-2-rest-services-implementations&quot;&gt;Source code for the 2 REST services implementations&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.java.com&quot;&gt;Java&lt;&#x2F;a&gt; + &lt;a href=&quot;https:&#x2F;&#x2F;spring.io&#x2F;guides&#x2F;gs&#x2F;rest-service&quot;&gt;Spring Boot (REST)&lt;&#x2F;a&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;a href=&quot;https:&#x2F;&#x2F;golang.org&quot;&gt;Go&lt;&#x2F;a&gt; + &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gin-gonic&#x2F;gin&quot;&gt;Gin framework&lt;&#x2F;a&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;covid-rest&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;covid-rest&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;covid-rest-go&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;covid-rest-go&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt;: I actually created that &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;covid-rest-go&quot;&gt;COVID-19 data REST API&lt;&#x2F;a&gt; to be the data source for the &lt;a href=&quot;https:&#x2F;&#x2F;covid-stats-pwa.netlify.app&quot;&gt;COVID19-Stats App&lt;&#x2F;a&gt;, a &lt;a href=&quot;https:&#x2F;&#x2F;web.dev&#x2F;progressive-web-apps&quot;&gt;PWA&lt;&#x2F;a&gt; built with &lt;a href=&quot;https:&#x2F;&#x2F;svelte.dev&quot;&gt;Svelte&lt;&#x2F;a&gt;, but that&#x27;s another topic.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;the-ecosystems&quot;&gt;The Ecosystems&lt;&#x2F;h2&gt;
&lt;p&gt;If you want to create a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Representational_state_transfer&quot;&gt;REST&lt;&#x2F;a&gt; service just in plain Java you will have extra work to do, in Golang a little bit less. That&#x27;s why we use framework, because they&#x27;ve already solved many common problems for us.&lt;&#x2F;p&gt;
&lt;p&gt;For this comparison I am going to use &lt;a href=&quot;https:&#x2F;&#x2F;spring.io&#x2F;guides&#x2F;gs&#x2F;rest-service&quot;&gt;Spring Boot (REST)&lt;&#x2F;a&gt; for &lt;a href=&quot;https:&#x2F;&#x2F;www.java.com&quot;&gt;Java&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gin-gonic&#x2F;gin&quot;&gt;Gin framework&lt;&#x2F;a&gt; for &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&quot;&gt;Go&lt;&#x2F;a&gt;, but in both languages there are a lot of production ready nice options.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;routing&quot;&gt;Routing&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;go-without-framework&quot;&gt;Go - Without framework&lt;&#x2F;h3&gt;
&lt;p&gt;Go uses the concept of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hypertext_Transfer_Protocol&quot;&gt;HTTP&lt;&#x2F;a&gt; multiplexer or router. You can specify routes using patterns and link those routes to handlers. The router will decide which handler has to execute the request based on the path received.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;router-go-file&quot;&gt;router.go file&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;net&#x2F;http&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;router &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewServeMux&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;router&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Handle&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;redirect&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RedirectHandler&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;carlosvin.github.io&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;307&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;router&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HandleFunc&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;w http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ResponseWriter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Write&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello world!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt; })
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Listening...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ListenAndServe&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:3000&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;router&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Source code is already quite simple, but there might more complex routing use cases.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;go-gin-framework&quot;&gt;Go - Gin Framework&lt;&#x2F;h3&gt;
&lt;p&gt;Happily there are frameworks that help us to keep our base code simple, for example when we need to extract path parameters, which is quite common use case in &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Representational_state_transfer&quot;&gt;REST&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Application_programming_interface&quot;&gt;API&lt;&#x2F;a&gt;s, we can use a routing library, I&#x27;ve used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gorilla&#x2F;mux&quot;&gt;Gorilla Mux&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gin-gonic&#x2F;gin&quot;&gt;Gin framework&lt;&#x2F;a&gt; and I liked more &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gin-gonic&#x2F;gin&quot;&gt;Gin framework&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;full-example&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;covid-rest-go&#x2F;blob&#x2F;master&#x2F;main.go&quot;&gt;Full example&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;github.com&#x2F;carlosvin&#x2F;covid-rest-go&#x2F;handlers&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;github.com&#x2F;carlosvin&#x2F;covid-rest-go&#x2F;readers&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;github.com&#x2F;gin-gonic&#x2F;gin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gin&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GET&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;countries&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;router&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Countries&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GET&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;countries&#x2F;:code&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;router&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Country&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GET&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;countries&#x2F;:code&#x2F;dates&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;router&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CountryDates&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GET&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;countries&#x2F;:code&#x2F;dates&#x2F;:date&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;router&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CountryDate&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Run&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;and-this-is-a-handler-example-the-router-countries-one&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;covid-rest-go&#x2F;blob&#x2F;master&#x2F;handlers&#x2F;countries.go&quot;&gt;And this is a handler example&lt;&#x2F;a&gt;, the router.Countries one&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;routerImpl&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Countries&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gin&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;JSON&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;countries&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;java-spring-io&quot;&gt;Java + Spring.io&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;spring.io&#x2F;guides&#x2F;gs&#x2F;rest-service&quot;&gt;Spring Boot (REST)&lt;&#x2F;a&gt; is based on the concept of Controller, it is implemented using annotations on the class and methods.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;controller-example&quot;&gt;Controller Example&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Validated
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RestController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (1)
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RequestMapping&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;countries&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CountriesController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Some source code is not shown, you can find the complete example in the repository 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetMapping&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;{country}&#x2F;dates&#x2F;{isoDateStr}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (3)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DateStatsDto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getDateByCountry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;min &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;max &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PathVariable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;country&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;min &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;max &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PathVariable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isoDateStr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;NotFoundException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DateStatsDto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(service.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getDate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(country, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DateUtils&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;convert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(isoDateStr)));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;Declare the class as Controller so it is registered in &lt;a href=&quot;https:&#x2F;&#x2F;spring.io&#x2F;guides&#x2F;gs&#x2F;rest-service&quot;&gt;Spring Boot (REST)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Controller base path definition&lt;&#x2F;li&gt;
&lt;li&gt;Handler definition for a nested path under the main controller path. &lt;a href=&quot;https:&#x2F;&#x2F;spring.io&#x2F;guides&#x2F;gs&#x2F;rest-service&quot;&gt;Spring Boot (REST)&lt;&#x2F;a&gt; makes easy to extract path variables defined in the route, you can directly use them as method arguments.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;validations&quot;&gt;Validations&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;go-gin-framework-validation&quot;&gt;Go - Gin Framework Validation&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gin-gonic&#x2F;gin&quot;&gt;Gin framework&lt;&#x2F;a&gt; uses an external validation package &lt;a href=&quot;https:&#x2F;&#x2F;godoc.org&#x2F;github.com&#x2F;go-playground&#x2F;validator&quot;&gt;validator&lt;&#x2F;a&gt;, besides that it is fully integrated with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gin-gonic&#x2F;gin&quot;&gt;Gin framework&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Name  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;validate:&amp;quot;required&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (1)
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;validate:&amp;quot;required,email&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;`
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;validate&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Struct&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;validationErrors &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;.(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;validator&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ValidationErrors&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (3)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;The validation system uses &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&quot;&gt;Go&lt;&#x2F;a&gt; tags, it is not the same as &lt;a href=&quot;https:&#x2F;&#x2F;www.java.com&quot;&gt;Java&lt;&#x2F;a&gt; annotations, but in the validation case, it works in pretty same way as annotations.&lt;&#x2F;li&gt;
&lt;li&gt;Executes the validation explicitly&lt;&#x2F;li&gt;
&lt;li&gt;Extracts validation errors&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;java-spring-io-validation&quot;&gt;Java + Spring.io Validation&lt;&#x2F;h3&gt;
&lt;p&gt;You can enable the validation in the controller level, then in the handlers you can also specify the type of validation. Let&#x27;s explain it using the previous example:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;countriescontroller-java-validation-example&quot;&gt;CountriesController.java Validation Example&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Validated &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (1)
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RestController
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RequestMapping&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;countries&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CountriesController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Some source code is not shown, you can find the complete example in the repository 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetMapping&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;{country}&#x2F;dates&#x2F;{isoDateStr}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DateStatsDto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getDateByCountry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;min &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;max &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PathVariable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;country&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;min &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;max &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PathVariable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isoDateStr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;NotFoundException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DateStatsDto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(service.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getDate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(country, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DateUtils&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;convert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(isoDateStr)));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;Declare the class as Controller so it is registered in &lt;a href=&quot;https:&#x2F;&#x2F;spring.io&#x2F;guides&#x2F;gs&#x2F;rest-service&quot;&gt;Spring Boot (REST)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;@Size&lt;&#x2F;code&gt; validates that the input argument country has 2 characters&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The validation system is more powerful than you can see in this code snippet, for example adding &lt;code&gt;@Valid&lt;&#x2F;code&gt; annotation opens the door to complex types validation.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;filtering-and-middleware&quot;&gt;Filtering and Middleware&lt;&#x2F;h3&gt;
&lt;p&gt;Different approaches, pretty much the same end result.&lt;&#x2F;p&gt;
&lt;p&gt;I will elaborate this topic in following days.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dependency-injection-ioc&quot;&gt;Dependency injection &#x2F; IoC&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;spring-ioc&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.spring.io&#x2F;spring-framework&#x2F;docs&#x2F;current&#x2F;reference&#x2F;html&#x2F;core.html#beans-factory-collaborators&quot;&gt;Spring IoC&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.spring.io&#x2F;spring-framework&#x2F;docs&#x2F;current&#x2F;reference&#x2F;html&#x2F;core.html#beans-factory-collaborators&quot;&gt;Spring IoC&lt;&#x2F;a&gt; is the most complete and powerful systems I&#x27;ve ever used for &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Inversion_of_control&quot;&gt;IoC&lt;&#x2F;a&gt;, actually, the first time I used Spring professionally was just to deal with &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Inversion_of_control&quot;&gt;IoC&lt;&#x2F;a&gt;. It supports XML configuration files or &lt;a href=&quot;https:&#x2F;&#x2F;www.java.com&quot;&gt;Java&lt;&#x2F;a&gt; annotations, I like annotations more, here a simple example from &lt;a href=&quot;https:&#x2F;&#x2F;docs.spring.io&#x2F;spring-framework&#x2F;docs&#x2F;current&#x2F;reference&#x2F;html&#x2F;core.html#beans-factory-collaborators&quot;&gt;Spring IoC&lt;&#x2F;a&gt; documentation:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;spring-ioc-example&quot;&gt;Spring IoC example&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Repository
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;JpaMovieFinder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MovieFinder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (1)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; implementation elided for clarity
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;SimpleMovieLister &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MovieFinder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;movieFinder;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Autowired &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setMovieFinder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MovieFinder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;movieFinder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.movieFinder &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; movieFinder;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;JpaMovieFinder&lt;&#x2F;code&gt; is instantiated by &lt;a href=&quot;https:&#x2F;&#x2F;docs.spring.io&#x2F;spring-framework&#x2F;docs&#x2F;current&#x2F;reference&#x2F;html&#x2F;core.html#beans-factory-collaborators&quot;&gt;Spring IoC&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;With &lt;code&gt;@Autowired&lt;&#x2F;code&gt; annotation &lt;a href=&quot;https:&#x2F;&#x2F;docs.spring.io&#x2F;spring-framework&#x2F;docs&#x2F;current&#x2F;reference&#x2F;html&#x2F;core.html#beans-factory-collaborators&quot;&gt;Spring IoC&lt;&#x2F;a&gt; knows that has to inject &lt;code&gt;movieFinder&lt;&#x2F;code&gt; argument. It should be a class implementing &lt;code&gt;MovieFinder&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;go&quot;&gt;Go&lt;&#x2F;h3&gt;
&lt;p&gt;Neither &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&quot;&gt;Go&lt;&#x2F;a&gt; nor &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gin-gonic&#x2F;gin&quot;&gt;Gin framework&lt;&#x2F;a&gt; has any &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Inversion_of_control&quot;&gt;IoC&lt;&#x2F;a&gt; solution, but you can still apply &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Dependency_injection&quot;&gt;Dependency Injection&lt;&#x2F;a&gt; technique to decouple your components and improve the testability of your system.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;dependency-injection-simple-example-in-go&quot;&gt;Dependency injection simple example in &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&quot;&gt;Go&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Greeter interface to greet the caller
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Greeter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;greet&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;greeterHello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;greeterHello&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;greet&lt;&#x2F;span&gt;&lt;span&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (3)
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;greeterHi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;greeterHi&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;greet&lt;&#x2F;span&gt;&lt;span&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (4)
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hi!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; App Application representation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;App &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;greeters &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Greeter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (1)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;startup&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;greeters &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;greet&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;greeters &lt;&#x2F;span&gt;&lt;span&gt;:= []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Greeter&lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (2)
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;greeterHello&lt;&#x2F;span&gt;&lt;span&gt;{},
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;greeterHi&lt;&#x2F;span&gt;&lt;span&gt;{},
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;greeterHello&lt;&#x2F;span&gt;&lt;span&gt;{}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;greeters&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;startup&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;App&lt;&#x2F;code&gt; accepts an array of &lt;code&gt;Greeter&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;During &lt;code&gt;App&lt;&#x2F;code&gt; instantiation we pass different implementations of &lt;code&gt;Greeter&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Greeter implementation that prints &lt;strong&gt;Hello!&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Greeter implementation that prints &lt;strong&gt;Hi!&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;It is more verbose, but there is an advantage, there is nothing hidden, everything is explicit and you have full control of instantiation order.&lt;&#x2F;p&gt;
&lt;p&gt;As soon as you use &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Dependency_injection&quot;&gt;Dependency Injection&lt;&#x2F;a&gt;, I don&#x27;t have any strong opinion about using &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Inversion_of_control&quot;&gt;IoC&lt;&#x2F;a&gt; system or doing &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Dependency_injection&quot;&gt;Dependency Injection&lt;&#x2F;a&gt; manually.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;unit-tests&quot;&gt;Unit tests&lt;&#x2F;h3&gt;
&lt;p&gt;For unit tests there are no big differences.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;golang.org&quot;&gt;Go&lt;&#x2F;a&gt; comes with a standard &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;pkg&#x2F;testing&#x2F;&quot;&gt;library for testing and benchmarking&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For &lt;a href=&quot;https:&#x2F;&#x2F;www.java.com&quot;&gt;Java&lt;&#x2F;a&gt; there are many well-known unit testing frameworks, but Spring already has quite big support for &lt;a href=&quot;https:&#x2F;&#x2F;docs.spring.io&#x2F;spring-batch&#x2F;docs&#x2F;current&#x2F;reference&#x2F;html&#x2F;testing.html&quot;&gt;unit testing&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;integration-tests&quot;&gt;Integration tests&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;go-integration-testing&quot;&gt;Go Integration Testing&lt;&#x2F;h4&gt;
&lt;p&gt;There are no support for Integration Tests in &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&quot;&gt;Go&lt;&#x2F;a&gt;, you will have to implement everything by yourself, although it is not difficult, &lt;a href=&quot;https:&#x2F;&#x2F;kpat.io&#x2F;2019&#x2F;06&#x2F;testing-with-gin&#x2F;&quot;&gt;here you can find a simple example&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;spring&quot;&gt;Spring&lt;&#x2F;h4&gt;
&lt;p&gt;On the other hand, &lt;a href=&quot;https:&#x2F;&#x2F;docs.spring.io&#x2F;spring-framework&#x2F;docs&#x2F;current&#x2F;reference&#x2F;html&#x2F;testing.html&quot;&gt;Spring has a great testing support&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To write integration tests for &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Representational_state_transfer&quot;&gt;REST&lt;&#x2F;a&gt; services, &lt;a href=&quot;https:&#x2F;&#x2F;spring.io&#x2F;guides&#x2F;gs&#x2F;testing-web&#x2F;&quot;&gt;MockMvc&lt;&#x2F;a&gt; is really convenient.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;covid-rest&#x2F;blob&#x2F;master&#x2F;src&#x2F;test&#x2F;java&#x2F;com&#x2F;carlosvin&#x2F;covid&#x2F;CountriesControllerTest.java&quot;&gt;MockMvc in the covid-rest project&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;mockmvc-code-snippet-from-countriescontrollertest-java&quot;&gt;MockMvc code snippet from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;covid-rest&#x2F;blob&#x2F;master&#x2F;src&#x2F;test&#x2F;java&#x2F;com&#x2F;carlosvin&#x2F;covid&#x2F;CountriesControllerTest.java&quot;&gt;CountriesControllerTest.java&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Autowired
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MockMvc&lt;&#x2F;span&gt;&lt;span&gt; mockMvc; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (1)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Test
&lt;&#x2F;span&gt;&lt;span&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getCountries&lt;&#x2F;span&gt;&lt;span&gt;() throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Exception &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.mockMvc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;perform&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;countries&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (2)
&lt;&#x2F;span&gt;&lt;span&gt;   .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;andDo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;andExpect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isOk&lt;&#x2F;span&gt;&lt;span&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (3)
&lt;&#x2F;span&gt;&lt;span&gt;   .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;andExpect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jsonPath&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$.*&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hasSize&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;144&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span&gt;   .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;andExpect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jsonPath&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$.ES.confirmedCases&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;comparesEqualTo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9191&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span&gt;   .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;andExpect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jsonPath&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$.ES.deathsNumber&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;comparesEqualTo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;309&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span&gt;   .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;andExpect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jsonPath&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$.ES.countryCode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;comparesEqualTo&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ES&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)))
&lt;&#x2F;span&gt;&lt;span&gt;   .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;andExpect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jsonPath&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$.ES.countryName&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;comparesEqualTo&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Spain&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)))
&lt;&#x2F;span&gt;&lt;span&gt;   .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;andExpect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jsonPath&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$.ES.path&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;comparesEqualTo&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;countries&#x2F;ES&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)))
&lt;&#x2F;span&gt;&lt;span&gt;   .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;andExpect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jsonPath&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$.VC.countryName&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;comparesEqualTo&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Saint Vincent and the Grenadines&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)))
&lt;&#x2F;span&gt;&lt;span&gt;   .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;andDo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;countries&#x2F;list&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;preprocessResponse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prettyPrint&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CropPreprocessor&lt;&#x2F;span&gt;&lt;span&gt;())));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;The Spring test runner injects the MockMvc object.&lt;&#x2F;li&gt;
&lt;li&gt;We use MockMvc to call to the endpoint we have created.&lt;&#x2F;li&gt;
&lt;li&gt;Then we validate the endpoint response: status code and body.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;performance&quot;&gt;Performance&lt;&#x2F;h2&gt;
&lt;p&gt;Besides the languages specific differences, the main difference is the performance. The CPU consumption in &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&quot;&gt;Go&lt;&#x2F;a&gt; is smaller, but about the memory the difference is really significant, &lt;strong&gt;the order of 30 times smaller fingerprint&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;memory&quot;&gt;Memory&lt;&#x2F;h3&gt;
&lt;p&gt;Here I&#x27;ve found a surprising difference, just by checking the memory consumption in my laptop.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gin-gonic&#x2F;gin&quot;&gt;Gin framework&lt;&#x2F;a&gt; &lt;code&gt;15.6MB&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spring.io&#x2F;guides&#x2F;gs&#x2F;rest-service&quot;&gt;Spring Boot (REST)&lt;&#x2F;a&gt; &lt;code&gt;465.9MB&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;carlosvin.github.io&#x2F;rest-service-go-vs-java&#x2F;memory-consumption-go-java.png&quot; alt=&quot;Memory consumption&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;speed&quot;&gt;Speed&lt;&#x2F;h3&gt;
&lt;p&gt;Following the &lt;a href=&quot;https:&#x2F;&#x2F;www.techempower.com&#x2F;benchmarks&#x2F;&quot;&gt;TechEmpower benchmarks&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gin-gonic&#x2F;gin&quot;&gt;Gin framework&lt;&#x2F;a&gt; is in 193 position, 9.9%.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spring.io&#x2F;guides&#x2F;gs&#x2F;rest-service&quot;&gt;Spring Boot (REST)&lt;&#x2F;a&gt; is in 284 position, 4%.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Following the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;the-benchmarker&#x2F;web-frameworks&quot;&gt;The Benchmarker results&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gin-gonic&#x2F;gin&quot;&gt;Gin framework&lt;&#x2F;a&gt;: position 33.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spring.io&#x2F;guides&#x2F;gs&#x2F;rest-service&quot;&gt;Spring Boot (REST)&lt;&#x2F;a&gt;: position 68.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;&#x2F;h2&gt;
&lt;p&gt;If I were you, I&#x27;d choose &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&quot;&gt;Go&lt;&#x2F;a&gt; if:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If you value the explicit over implicit, keep in mind that there is a cost, you will most likely have to write more lines of code.&lt;&#x2F;li&gt;
&lt;li&gt;If you value the simplicity, &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&quot;&gt;Go&lt;&#x2F;a&gt; has a quite reduced set of keywords, which reduces the learning curve and simplifies the code reviews.&lt;&#x2F;li&gt;
&lt;li&gt;If RAM memory usage is critical for your project, actually I&#x27;d just keep away from &lt;a href=&quot;https:&#x2F;&#x2F;spring.io&#x2F;guides&#x2F;gs&#x2F;rest-service&quot;&gt;Spring Boot (REST)&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;If the project you are going to work on is a distributed system, specially if it is based on &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hypertext_Transfer_Protocol&quot;&gt;HTTP&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Create a PWA with Create React App: Lessons Learned</title>
        <published>2019-11-04T00:00:00+00:00</published>
        <updated>2020-06-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/pwa-lessons-learned-cra/"/>
        <id>https://carlosvin.github.io/pwa-lessons-learned-cra/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/pwa-lessons-learned-cra/">&lt;p&gt;I started working with &lt;a href=&quot;https:&#x2F;&#x2F;reactjs.org&quot;&gt;React&lt;&#x2F;a&gt; few year ago, always the project creation was from scratch, not using any template&#x2F;scaffolding. Regarding bundlers normally I used either &lt;a href=&quot;https:&#x2F;&#x2F;webpack.js.org&quot;&gt;Webpack&lt;&#x2F;a&gt; at work or &lt;a href=&quot;https:&#x2F;&#x2F;parceljs.org&quot;&gt;Parcel&lt;&#x2F;a&gt; for personal projects.&lt;&#x2F;p&gt;
&lt;p&gt;Few months ago, I wanted to start a personal project to keep track of my travel expenses. I was in a kind of rush because at that time, I was almost in the middle of my gap year, I wanted to focus on implementing main functionality and get an &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Minimum_viable_product&quot;&gt;MVP&lt;&#x2F;a&gt; (minimum viable product) the sooner the better, so I thought it was the right time to try out &lt;a href=&quot;https:&#x2F;&#x2F;create-react-app.dev&quot;&gt;Create React App&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;create-react-app.dev&quot;&gt;CRA&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;create-react-app.dev&quot;&gt;CRA&lt;&#x2F;a&gt; allows you to have a production ready &lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;progressive-web-apps&#x2F;&quot;&gt;PWA&lt;&#x2F;a&gt; in &lt;a href=&quot;https:&#x2F;&#x2F;reactjs.org&quot;&gt;React&lt;&#x2F;a&gt; quickly, which is awesome. They take care of configuration and package dependencies, you only have to take care of dependencies you need for your project and of course, implement your project, &lt;a href=&quot;https:&#x2F;&#x2F;create-react-app.dev&quot;&gt;CRA&lt;&#x2F;a&gt; is good, but is not magic.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;As I said, I wanted to be implementing business logic ASAP, so together with using &lt;a href=&quot;https:&#x2F;&#x2F;create-react-app.dev&quot;&gt;CRA&lt;&#x2F;a&gt;, I also took other decisions&#x2F;shortcuts driven by the need of speeding up the development pace, I will talk about those choices in following sections describing some drawbacks and benefits.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chosen-technology-stack-for-budget-tracker&quot;&gt;Chosen Technology Stack for &lt;a href=&quot;https:&#x2F;&#x2F;btapp.netlify.com&quot;&gt;Budget Tracker&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;create-react-app.dev&quot;&gt;CRA&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;reactjs.org&quot;&gt;React&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.typescriptlang.org&quot;&gt;Typescript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;material-ui.com&quot;&gt;Material UI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&quot;https:&#x2F;&#x2F;formidable.com&#x2F;open-source&#x2F;victory&quot;&gt;Victory&lt;&#x2F;a&gt;&lt;&#x2F;del&gt; &lt;a href=&quot;https:&#x2F;&#x2F;frappe.io&#x2F;charts&quot;&gt;Frappe charts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;firestore&quot;&gt;Firestore&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;auth&quot;&gt;Firebase Authentication&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So far I am quite happy with the outcome, but with the lessons learned while developing this app, &lt;strong&gt;in the future, with enough time, most likely I will not choose same technology stack again&lt;&#x2F;strong&gt;. You can try the application &lt;a href=&quot;https:&#x2F;&#x2F;btapp.netlify.com&quot;&gt;Budget Tracker&lt;&#x2F;a&gt; and judge for yourself.&lt;&#x2F;p&gt;
&lt;p&gt;Along this post I will describe what are, in my experience, the benefits and drawbacks of taking these shortcuts and technical decisions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;create-react-application-cra&quot;&gt;Create React Application: &lt;a href=&quot;https:&#x2F;&#x2F;create-react-app.dev&quot;&gt;CRA&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;create-react-app.dev&quot;&gt;Create React App&lt;&#x2F;a&gt; doesnâ€™t support &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Web_Workers_API&#x2F;Using_web_workers&quot;&gt;Web Workers&lt;&#x2F;a&gt; neither allows to customize &lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;fundamentals&#x2F;primers&#x2F;service-workers&quot;&gt;Service Worker&lt;&#x2F;a&gt; implementation without &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;49737652&#x2F;what-does-eject-do-in-create-react-app&quot;&gt;ejecting&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;service-worker&quot;&gt;Service worker&lt;&#x2F;h3&gt;
&lt;p&gt;You might want to customize your &lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;fundamentals&#x2F;primers&#x2F;service-workers&quot;&gt;Service Worker&lt;&#x2F;a&gt; to send&#x2F;receive &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Client&#x2F;postMessage&quot;&gt;post messages&lt;&#x2F;a&gt;, to perform &lt;a href=&quot;https:&#x2F;&#x2F;wicg.github.io&#x2F;BackgroundSync&#x2F;spec&#x2F;&quot;&gt;background sync&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en&#x2F;docs&#x2F;Web&#x2F;API&#x2F;notification&quot;&gt;show web notifications&lt;&#x2F;a&gt;. In that case, you will have to &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;49737652&#x2F;what-does-eject-do-in-create-react-app&quot;&gt;eject your project&lt;&#x2F;a&gt; and maintain the configuration by yourself, which might imply a little bit of headache.&lt;&#x2F;p&gt;
&lt;p&gt;There are &lt;a href=&quot;https:&#x2F;&#x2F;www.freecodecamp.org&#x2F;news&#x2F;how-to-customize-service-workers-with-create-react-app-4424dda6210c&#x2F;&quot;&gt;other options to customize service worker and avoid ejecting CRA&lt;&#x2F;a&gt;, but they are not straightforward enough for my taste.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;web-worker&quot;&gt;Web worker&lt;&#x2F;h3&gt;
&lt;p&gt;If you need to perform any heavy processing without blocking the main thread, you can just use a &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Web_Workers_API&#x2F;Using_web_workers&quot;&gt;Web Workers&lt;&#x2F;a&gt;, but this feature is not supported by &lt;a href=&quot;https:&#x2F;&#x2F;create-react-app.dev&quot;&gt;CRA&lt;&#x2F;a&gt;. The &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Web_Workers_API&#x2F;Using_web_workers&quot;&gt;Web Workers&lt;&#x2F;a&gt; can communicate with main thread using &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Client&#x2F;postMessage&quot;&gt;post messages&lt;&#x2F;a&gt; and it can also show &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;young-coder&#x2F;a-simple-introduction-to-web-workers-in-javascript-b3504f9d9d1c&quot;&gt;web push notifications&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There are also &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@danilog1905&#x2F;how-to-use-web-workers-with-react-create-app-and-not-ejecting-in-the-attempt-3718d2a1166b&quot;&gt;other options to use Web Workers in CRA and not eject&lt;&#x2F;a&gt;, but they imply quite some extra work.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;webpack&quot;&gt;Webpack&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;webpack.js.org&quot;&gt;Webpack&lt;&#x2F;a&gt; is the bundler used by &lt;a href=&quot;https:&#x2F;&#x2F;create-react-app.dev&quot;&gt;CRA&lt;&#x2F;a&gt;. You donâ€™t need to know much about it, unless you &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;49737652&#x2F;what-does-eject-do-in-create-react-app&quot;&gt;eject your project&lt;&#x2F;a&gt;, then you will have to deal with &lt;a href=&quot;https:&#x2F;&#x2F;webpack.js.org&#x2F;configuration&#x2F;&quot;&gt;Webpack configuration file&lt;&#x2F;a&gt;, this is just a warning, just in case you are not comfortable with it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;firebase&quot;&gt;Firebase&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;btapp.netlify.com&quot;&gt;Budget Tracker&lt;&#x2F;a&gt; supports data synchronization between different devices, so it requires a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Front_and_back_ends&quot;&gt;backend&lt;&#x2F;a&gt; side to deal with authentication and to save&#x2F;read data remotely. I considered two options: &lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;&quot;&gt;Firebase&lt;&#x2F;a&gt; or implement &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Representational_state_transfer&quot;&gt;REST&lt;&#x2F;a&gt; API.&lt;&#x2F;p&gt;
&lt;p&gt;For this &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Front_and_back_ends&quot;&gt;backend&lt;&#x2F;a&gt;, I chose &lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;&quot;&gt;Firebase&lt;&#x2F;a&gt; because it is super easy to implement, because there is nothing to implement. You only have to configure &lt;a href=&quot;https:&#x2F;&#x2F;support.google.com&#x2F;firebase&#x2F;answer&#x2F;6400716?hl=en&quot;&gt;authentication methods&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;firestore&#x2F;security&#x2F;get-started&quot;&gt;security rules&lt;&#x2F;a&gt; for &lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;firestore&quot;&gt;Firestore&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But &lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;&quot;&gt;Firebase&lt;&#x2F;a&gt; brings some drawbacks you must know before choosing it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;drawbacks&quot;&gt;Drawbacks&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;bundle-size&quot;&gt;Bundle size&lt;&#x2F;h4&gt;
&lt;p&gt;I got really shocked first time I analyzed &lt;a href=&quot;https:&#x2F;&#x2F;btapp.netlify.com&quot;&gt;Budget Tracker&lt;&#x2F;a&gt; bundle size after integrating it with &lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;&quot;&gt;Firebase&lt;&#x2F;a&gt;, &lt;strong&gt;it grew around a 39%!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;27% from &lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;firestore&quot;&gt;Firestore&lt;&#x2F;a&gt; library.&lt;&#x2F;li&gt;
&lt;li&gt;12% from &lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;auth&quot;&gt;Firebase Authentication&lt;&#x2F;a&gt; library.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Happily &lt;a href=&quot;https:&#x2F;&#x2F;btapp.netlify.com&quot;&gt;Budget Tracker&lt;&#x2F;a&gt; implementation is following &lt;a href=&quot;https:&#x2F;&#x2F;reactjs.org&#x2F;docs&#x2F;code-splitting.html&quot;&gt;code-splitting&lt;&#x2F;a&gt; principle, so user experience was not really affected with this integration. But userâ€™s device will eventually have to download this extra 39% (&lt;strong&gt;539KB&lt;&#x2F;strong&gt;).&lt;&#x2F;p&gt;
&lt;h4 id=&quot;offline-first-not-really&quot;&gt;Offline first, not really&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;&#x2F;strong&gt;: This section is not relevant if your use case doesnâ€™t imply saving data linked to the user.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;firestore&quot;&gt;Firestore&lt;&#x2F;a&gt; requires user to be authenticated, but &lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;auth&#x2F;web&#x2F;anonymous-auth&quot;&gt;user can be anonymous&lt;&#x2F;a&gt;, this is really cool feature if you donâ€™t want to force the user to identify to use the app.&lt;&#x2F;p&gt;
&lt;p&gt;Another very useful and cool &lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;firestore&quot;&gt;Firestore&lt;&#x2F;a&gt; feature is that &lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;firestore&#x2F;manage-data&#x2F;enable-offline&quot;&gt;it supports offline mode&lt;&#x2F;a&gt;, so data can be saved and read even there is no Internet connection.&lt;&#x2F;p&gt;
&lt;p&gt;Anonymous user + offline mode features will allow an application to work as offline first.&lt;&#x2F;p&gt;
&lt;p&gt;Soâ€¦ what is this &lt;em&gt;Offline first, not really&lt;&#x2F;em&gt; issue about? Let me explain a tricky scenario. First time the application is opened, &lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;&quot;&gt;Firebase&lt;&#x2F;a&gt; needs to authenticate the user, to do so, userâ€™s device has to be connected to Internet, so &lt;strong&gt;you have to consider following scenario&lt;&#x2F;strong&gt; and either be OK with it or deal with it:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;progressive-web-apps&#x2F;&quot;&gt;PWA&lt;&#x2F;a&gt; is installed in your device.&lt;&#x2F;li&gt;
&lt;li&gt;User is not authenticated.&lt;&#x2F;li&gt;
&lt;li&gt;Userâ€™s device is offline.&lt;&#x2F;li&gt;
&lt;li&gt;User opens the &lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;progressive-web-apps&#x2F;&quot;&gt;PWA&lt;&#x2F;a&gt; and tries to save some data.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;That data wonâ€™t be saved correctly&lt;&#x2F;strong&gt;, because there is no user to link the data with, not even an anonymous user, because application needs to call &lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;&quot;&gt;Firebase&lt;&#x2F;a&gt; API to create an anonymous user.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This is not big deal, because it will seldom occur. If you want to deal with it anyway, check next section explaining how and why I did deal with this scenario.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;how-did-i-deal-with-this-issue-with-budget-tracker&quot;&gt;How did I deal with this issue with Budget Tracker?&lt;&#x2F;h5&gt;
&lt;p&gt;First of all, this &lt;strong&gt;might not be an issue for your use case&lt;&#x2F;strong&gt;, because it will happen only first time application is loaded. I just wanted &lt;a href=&quot;https:&#x2F;&#x2F;btapp.netlify.com&quot;&gt;Budget Tracker&lt;&#x2F;a&gt; to be fully offline first, because it brings other benefits.&lt;&#x2F;p&gt;
&lt;h6 id=&quot;implementation-details&quot;&gt;Implementation details&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;Implement 2 persistence layers: Local (&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;IndexedDB_API&quot;&gt;IndexedDB&lt;&#x2F;a&gt;) and Remote (&lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;firestore&quot;&gt;Firestore&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Save always data locally, regardless user authentication status.&lt;&#x2F;li&gt;
&lt;li&gt;If there is any authenticated user, after saving to local layer, propagate same action to remote layer (&lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;firestore&quot;&gt;Firestore&lt;&#x2F;a&gt;) asynchronously.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h6 id=&quot;benefits&quot;&gt;Benefits&lt;&#x2F;h6&gt;
&lt;ul&gt;
&lt;li&gt;If user is not authenticated, &lt;a href=&quot;https:&#x2F;&#x2F;btapp.netlify.com&quot;&gt;Budget Tracker&lt;&#x2F;a&gt; wonâ€™t load &lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;firestore&quot;&gt;Firestore&lt;&#x2F;a&gt; client bundle. As I explained before, it is 27% of application size.&lt;&#x2F;li&gt;
&lt;li&gt;Application reads and writes are faster, because latest valid data is always saved locally.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Clarification&lt;&#x2F;strong&gt;: Save data in &lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;firestore&quot;&gt;Firestore&lt;&#x2F;a&gt; is also fast, because data is also cached locally, but it does a little bit more than just saving to &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;IndexedDB_API&quot;&gt;IndexedDB&lt;&#x2F;a&gt; and you need an authenticated user.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You can find a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;budget-tracker&#x2F;blob&#x2F;master&#x2F;doc&#x2F;preformance.md#desktop-slow-clear-storage-0-budgets-1&quot;&gt;more detailed performance report&lt;&#x2F;a&gt;, where I analyze 3 different implementations:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Only &lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;firestore&quot;&gt;Firestore&lt;&#x2F;a&gt; client.&lt;&#x2F;li&gt;
&lt;li&gt;Local (&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;IndexedDB_API&quot;&gt;IndexedDB&lt;&#x2F;a&gt;) and remote (&lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;firestore&quot;&gt;Firestore&lt;&#x2F;a&gt;) persistence layers.&lt;&#x2F;li&gt;
&lt;li&gt;Same as previous one, but remote layer implemented in service worker.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The performance results were in general better for option 2.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;data-model&quot;&gt;Data model&lt;&#x2F;h4&gt;
&lt;p&gt;Firestore API is easy and intuitive, I really like it, but donâ€™t assume it will have same features as other document DBs or SQL DBs.&lt;&#x2F;p&gt;
&lt;p&gt;Check if &lt;a href=&quot;https:&#x2F;&#x2F;googleapis.github.io&#x2F;google-cloud-dotnet&#x2F;docs&#x2F;Google.Cloud.Firestore&#x2F;datamodel.html&quot;&gt;Firestore limitations&lt;&#x2F;a&gt; fit into your data model, or if it is not too late, define your data model following &lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;firestore&#x2F;docs&#x2F;best-practices&quot;&gt;Firestore best practices&lt;&#x2F;a&gt; and having those limitations in mind.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;firebase-alternatives&quot;&gt;Firebase alternatives&lt;&#x2F;h3&gt;
&lt;p&gt;Besides implementing a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Representational_state_transfer&quot;&gt;REST&lt;&#x2F;a&gt; API, there are other services similar to &lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;&quot;&gt;Firebase&lt;&#x2F;a&gt; with smaller client bundle size and other features which might fit better to your requirements.&lt;&#x2F;p&gt;
&lt;p&gt;Consider other alternatives:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Based on &lt;a href=&quot;http:&#x2F;&#x2F;couchdb.apache.org&#x2F;&quot;&gt;Apache CouchDB&lt;&#x2F;a&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;pouchdb.com&quot;&gt;PouchDB&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cloudant&quot;&gt;Cloudant&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Based on &lt;a href=&quot;https:&#x2F;&#x2F;parseplatform.org&#x2F;&quot;&gt;Parse server&lt;&#x2F;a&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;www.back4app.com&quot;&gt;back4apps&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ui-components-library-material-ui&quot;&gt;UI Components Library: &lt;a href=&quot;https:&#x2F;&#x2F;material-ui.com&quot;&gt;Material UI&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I chose &lt;a href=&quot;https:&#x2F;&#x2F;material-ui.com&quot;&gt;Material UI&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;material-ui.com&quot;&gt;Material UI&lt;&#x2F;a&gt;, from their web&lt;&#x2F;p&gt;
&lt;p&gt;React components for faster and easier web development. Build your own design system, or start with Material Design.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;There were two reasons which drove me to use &lt;a href=&quot;https:&#x2F;&#x2F;material-ui.com&quot;&gt;Material UI&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;To create simple UI components which are accessible, &lt;a href=&quot;https:&#x2F;&#x2F;material-ui.com&#x2F;guides&#x2F;responsive-ui&#x2F;#responsive-ui&quot;&gt;responsive&lt;&#x2F;a&gt; and with a consistent design is tricky and time consuming.&lt;&#x2F;li&gt;
&lt;li&gt;It has SVG set of &lt;a href=&quot;https:&#x2F;&#x2F;material-ui.com&#x2F;components&#x2F;material-icons&#x2F;&quot;&gt;Material Icons&lt;&#x2F;a&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;btapp.netlify.com&quot;&gt;Budget Tracker&lt;&#x2F;a&gt; allows to create categories defined by a name and a selectable icon, so this icon set was really convenient.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are some &lt;strong&gt;drawbacks&lt;&#x2F;strong&gt;, not very important in my opinion, maybe the most annoying for me is the first one:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jestjs.io&#x2F;docs&#x2F;en&#x2F;snapshot-testing&quot;&gt;Jest Snapshots&lt;&#x2F;a&gt; + &lt;a href=&quot;https:&#x2F;&#x2F;material-ui.com&quot;&gt;Material UI&lt;&#x2F;a&gt;: The snapshots are generated with &lt;a href=&quot;https:&#x2F;&#x2F;material-ui.com&quot;&gt;Material UI&lt;&#x2F;a&gt; CSS class names, but CSS classes order might not be deterministic, so a test might pass in your local host but not in &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Continuous_integration&quot;&gt;CI&lt;&#x2F;a&gt; host. They are working on solve &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mui-org&#x2F;material-ui&#x2F;issues&#x2F;14357&quot;&gt;this issue, more info at github&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Performance: There are some performance &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mui-org&#x2F;material-ui&#x2F;issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue+is%3Aopen+performance&quot;&gt;issues in Github&lt;&#x2F;a&gt;. During last months, whilst Iâ€™ve been using this library, I can say they are working hard on fix them and bring new features.&lt;&#x2F;li&gt;
&lt;li&gt;UI components libraries are complex and do quite a lot work, so most of them are quite heavy. &lt;a href=&quot;https:&#x2F;&#x2F;bundlephobia.com&#x2F;result?p=@material-ui&#x2F;core@4.5.2&quot;&gt;Material UI bundle size weights: 304.2kB minified&lt;&#x2F;a&gt;. You can find some &lt;a href=&quot;https:&#x2F;&#x2F;material-ui.com&#x2F;guides&#x2F;minimizing-bundle-size&quot;&gt;recommendations to reduce bundle size at Material UI website&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;charts-library&quot;&gt;Charts library&lt;&#x2F;h2&gt;
&lt;p&gt;Many of the chart libraries Iâ€™ve found are really powerful and complete, but they are also heavy because they depend on other third party libraries like &lt;a href=&quot;https:&#x2F;&#x2F;d3js.org&#x2F;&quot;&gt;D3&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Initially I chose &lt;a href=&quot;https:&#x2F;&#x2F;formidable.com&#x2F;open-source&#x2F;victory&quot;&gt;Victory&lt;&#x2F;a&gt;, but I realized that I only needed charts to show percentages and time series and &lt;a href=&quot;https:&#x2F;&#x2F;formidable.com&#x2F;open-source&#x2F;victory&quot;&gt;Victory&lt;&#x2F;a&gt;â€™s &lt;a href=&quot;https:&#x2F;&#x2F;bundlephobia.com&#x2F;result?p=victory@33.1.2&quot;&gt;bundle size is 468KB minified&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After quick search in the Internet I discovered other lighter alternatives:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;frappe.io&#x2F;charts&quot;&gt;Frappe charts&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;bundlephobia.com&#x2F;result?p=frappe-charts@1.3.0&quot;&gt;63KB minified&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gionkunz.github.io&#x2F;chartist-js&quot;&gt;Chartist&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;bundlephobia.com&#x2F;result?p=chartist@0.11.4&quot;&gt;39KB minified&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I tried them and I liked both. I chose &lt;a href=&quot;https:&#x2F;&#x2F;frappe.io&#x2F;charts&quot;&gt;Frappe charts&lt;&#x2F;a&gt; because I thought its default color scheme fits better with &lt;a href=&quot;https:&#x2F;&#x2F;btapp.netlify.com&quot;&gt;Budget Tracker&lt;&#x2F;a&gt; theme.&lt;&#x2F;p&gt;
&lt;p&gt;Both libraries come with more chart types than just bars and XY axis, take a quick look at their websites if you are interested about their supported chart set and to check how they look like.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I will try to come up with a conclusion better than: &lt;em&gt;&quot;It depends&quot;&lt;&#x2F;em&gt;, &lt;em&gt;&quot;Your use case will tell you&quot;&lt;&#x2F;em&gt; and so on.&lt;&#x2F;p&gt;
&lt;p&gt;That said. It depends on your needs :p.&lt;&#x2F;p&gt;
&lt;p&gt;Seriously, letâ€™s play &lt;em&gt;&quot;do not go for â€¦ if â€¦&quot;&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;do-not-go-for-cra-if&quot;&gt;Do not go for CRA if&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;You want to customize &lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;fundamentals&#x2F;primers&#x2F;service-workers&quot;&gt;Service Worker&lt;&#x2F;a&gt; for &lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;updates&#x2F;2015&#x2F;12&#x2F;background-sync&quot;&gt;Background sync&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en&#x2F;docs&#x2F;Web&#x2F;API&#x2F;notification&quot;&gt;showing push notifications&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;You want to use &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Web_Workers_API&#x2F;Using_web_workers&quot;&gt;Web Workers&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;do-not-go-for-firestore-if&quot;&gt;Do not go for Firestore if&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;You are aiming for your app to be hit by many users and you donâ€™t know the estimated amount of reads&#x2F;writes, otherwise you might get surprised with the bill. &lt;a href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;firestore&quot;&gt;Firestore&lt;&#x2F;a&gt; scales like charm, maybe your budget doesnâ€™t.&lt;&#x2F;li&gt;
&lt;li&gt;Bundle size is critical for your web application. Remember that bundle size is not that critical if you are implementing a &lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;progressive-web-apps&#x2F;&quot;&gt;PWA&lt;&#x2F;a&gt;, because your app files are cached.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;do-not-go-blindly-for-the-best-charting-library&quot;&gt;Do not go blindly for the best charting library&lt;&#x2F;h3&gt;
&lt;p&gt;First of all, check what kind of charts you need. In many applications you are OK with XY axis chart, time series, bars or pie charts. You can easily get an smaller bundle size by just using a simple charting library like &lt;a href=&quot;https:&#x2F;&#x2F;frappe.io&#x2F;charts&quot;&gt;Frappe charts&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;gionkunz.github.io&#x2F;chartist-js&quot;&gt;Chartist&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;&#x2F;strong&gt;: Just check what are your requirements, if you are not sure about them, [Chosen Technology Stack for &lt;a href=&quot;https:&#x2F;&#x2F;btapp.netlify.com&quot;&gt;Budget Tracker&lt;&#x2F;a&gt;](#chosen-technology-stack-for-budget-tracker) consists of awesome products which most likely will fit your use case.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;what-next&quot;&gt;What next?&lt;&#x2F;h2&gt;
&lt;p&gt;My next technology stack bet goes for &lt;a href=&quot;https:&#x2F;&#x2F;svelte.dev&quot;&gt;Svelte&lt;&#x2F;a&gt;&#x2F;&lt;a href=&quot;https:&#x2F;&#x2F;sapper.svelte.dev&quot;&gt;Sapper&lt;&#x2F;a&gt;, it is promising project, the results for small projects are really impressive, mainly in regards to bundle size, it is ridiculously small and development experience is quick and intuitive.&lt;&#x2F;p&gt;
&lt;p&gt;Iâ€™ve created a tiny &lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;progressive-web-apps&#x2F;&quot;&gt;PWA&lt;&#x2F;a&gt; to estimate &lt;a href=&quot;https:&#x2F;&#x2F;currency-loss.netlify.com&quot;&gt;currency exchange loss&lt;&#x2F;a&gt; when you go to a money changer shop: &lt;a href=&quot;https:&#x2F;&#x2F;currency-loss.netlify.com&quot;&gt;currency-loss.netlify.com&lt;&#x2F;a&gt;. Note, I got that app up and running in few hours, thanks to &lt;a href=&quot;https:&#x2F;&#x2F;svelte.dev&quot;&gt;Svelte&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Create SPA with React + Typescript + Parcel</title>
        <published>2019-01-01T00:00:00+00:00</published>
        <updated>2019-07-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/react-typescript-parcel/"/>
        <id>https://carlosvin.github.io/react-typescript-parcel/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/react-typescript-parcel/">&lt;p&gt;I was about to start yet another personal project, it consists of a SPA (Single Page Application) for a travel journal.&lt;&#x2F;p&gt;
&lt;p&gt;Some time ago I tried &lt;a href=&quot;https:&#x2F;&#x2F;parceljs.org&quot;&gt;Parcel&lt;&#x2F;a&gt;, I really loved how simple it was to create a simple project from scratch, using &lt;a href=&quot;https:&#x2F;&#x2F;www.typescriptlang.org&#x2F;&quot;&gt;Typescript&lt;&#x2F;a&gt; + &lt;a href=&quot;https:&#x2F;&#x2F;reactjs.org&quot;&gt;React&lt;&#x2F;a&gt; stack. Iâ€™ve decided to create this template or base project, so next time I want to create a new SPA with my favorite frontend stack, I will only have to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;react-typescript-parcel-template.git
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;read-this-before-parcel-is-not-as-mature-as-webpack&quot;&gt;Read this before: Parcel is not as mature as Webpack&lt;&#x2F;h2&gt;
&lt;p&gt;If you want to create a production ready React application, use &lt;a href=&quot;https:&#x2F;&#x2F;webpack.js.org&#x2F;&quot;&gt;Webpack&lt;&#x2F;a&gt; or better &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;create-react-app&#x2F;&quot;&gt;create-react-app&lt;&#x2F;a&gt; which bring everything you need to develop a &lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;progressive-web-apps&#x2F;&quot;&gt;PWA&lt;&#x2F;a&gt; with React and Typescript. Following you can find an example of an app I am developing using create-react-app: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;budget-tracker&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;budget-tracker&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Parcel is a package bundler under development, not as mature as webpack. There are no go errors for me, at least in regards to Typescript support, see this &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;parcel-bundler&#x2F;parcel&#x2F;issues&#x2F;1378&quot;&gt;issue in github #1378&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I still think it is a promising project, bringing more simplicity and speed to JS bundlers world, I will give it a try again for serious projects when Parcel 2 is ready, check &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;parcel-bundler&#x2F;parcel&#x2F;projects&#x2F;5&quot;&gt;Parcel 2 development status&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;quick-start&quot;&gt;Quick start&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;development-server&quot;&gt;Development server&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;react-typescript-parcel-template.git
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; react-typescript-parcel-template
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; install
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; start
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Last &lt;code&gt;yarn start&lt;&#x2F;code&gt; command will:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;start a development server at &lt;code&gt;http:&#x2F;&#x2F;localhost:1234&lt;&#x2F;code&gt; with &lt;a href=&quot;https:&#x2F;&#x2F;en.parceljs.org&#x2F;hmr.html&quot;&gt;hot module replacement&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;build automatically development javascript files with source maps&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;&#x2F;strong&gt; Each time you save a file, you will see automatically the result at &lt;code&gt;http:&#x2F;&#x2F;localhost:1234&lt;&#x2F;code&gt; without refreshing the page&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;build-production-bundle&quot;&gt;Build production bundle&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; build
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.parceljs.org&#x2F;production.html#optimisations&quot;&gt;Parcelâ€™s default optimizations&lt;&#x2F;a&gt; will be applied to generated files.&lt;&#x2F;p&gt;
&lt;p&gt;Files are saved at &lt;code&gt;dist&lt;&#x2F;code&gt; folder. Inside &lt;code&gt;dist&lt;&#x2F;code&gt; folder there is also a file with information about bundle content sizes: &lt;code&gt;dist&#x2F;report.html&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-by-step-project-creation&quot;&gt;Step by step project creation&lt;&#x2F;h2&gt;
&lt;p&gt;In this section I will describe how I created this project.&lt;&#x2F;p&gt;
&lt;p&gt;Firstly, create &lt;code&gt;package.json&lt;&#x2F;code&gt; with &lt;a href=&quot;https:&#x2F;&#x2F;yarnpkg.com&#x2F;lang&#x2F;en&#x2F;docs&#x2F;cli&#x2F;init&#x2F;&quot;&gt;yarn init&lt;&#x2F;a&gt; command.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; init
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;add-required-dependencies&quot;&gt;Add required dependencies&lt;&#x2F;h3&gt;
&lt;p&gt;Add React dependencies.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; add @types&#x2F;react @types&#x2F;react-dom react react-dom
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Previous command modifies &lt;code&gt;package.json&lt;&#x2F;code&gt; file adding &lt;code&gt;dependencies&lt;&#x2F;code&gt; section and will also install React packages in &lt;code&gt;node_modules&lt;&#x2F;code&gt; folder.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;project_name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1.0.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;index.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;license&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MIT&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@types&#x2F;react&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;^16.7.18&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@types&#x2F;react-dom&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;^16.0.11&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;react&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;^16.7.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;react-dom&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;^16.7.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add Typescript compiler as development dependency.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --dev&lt;&#x2F;span&gt;&lt;span&gt; typescript
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also need &lt;a href=&quot;https:&#x2F;&#x2F;parceljs.org&#x2F;&quot;&gt;Parcel bundler&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --dev&lt;&#x2F;span&gt;&lt;span&gt; parcel-bundler
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Iâ€™ve added a non-required dependency, it is a plugin to generate a report of generated bundle contents (the parcel version of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;webpack-contrib&#x2F;webpack-bundle-analyzer&quot;&gt;webpack-bundle-analyzer&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --dev&lt;&#x2F;span&gt;&lt;span&gt; parcel-plugin-bundle-visualiser
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;create-application-source-code&quot;&gt;Create application source code&lt;&#x2F;h3&gt;
&lt;p&gt;First we create the React application in &lt;code&gt;src&#x2F;index.tsx&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tsx&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-tsx &quot;&gt;&lt;code class=&quot;language-tsx&quot; data-lang=&quot;tsx&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;React &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;react&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ReactDOM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;react-dom&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;App &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;React.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;PureComponent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;gt;Hello world!&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ReactDOM&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;App &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Parcel can take &lt;code&gt;index.html&lt;&#x2F;code&gt; file as entry file and it figures out how to build the application, so letâ€™s create &lt;code&gt;src&#x2F;index.html&lt;&#x2F;code&gt; as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;index.tsx&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We need &lt;code&gt;div&lt;&#x2F;code&gt; tag for React to inject the DOM elements. The &lt;code&gt;script&lt;&#x2F;code&gt; declaration is used by Parcel to find entry point to build.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;add-commands-build-the-project&quot;&gt;Add commands build the project&lt;&#x2F;h3&gt;
&lt;p&gt;Iâ€™ve added the commands:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;build&lt;&#x2F;code&gt;: Check &lt;em&gt;&quot;Build production bundle&quot;&lt;&#x2F;em&gt; section.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;start&lt;&#x2F;code&gt;: Check &lt;em&gt;&quot;Development server&quot;&lt;&#x2F;em&gt; section.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scripts&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;parcel src&#x2F;index.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;parcel build src&#x2F;index.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then to it is really easy to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;run development server: &lt;code&gt;yarn start&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;generate a production bundle: &lt;code&gt;yarn build&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There is another approach described in &lt;a href=&quot;https:&#x2F;&#x2F;en.parceljs.org&#x2F;getting_started.html&quot;&gt;Parcel documentation&lt;&#x2F;a&gt; that consists of installing Parcel globally.&lt;&#x2F;p&gt;
&lt;p&gt;Iâ€™ve opted for more isolated approach that affects only project you are working on, you just install Parcel as &lt;code&gt;devDependency&lt;&#x2F;code&gt;. There is a tiny drawback, you canâ€™t just run &lt;code&gt;parcel index.html&lt;&#x2F;code&gt;, because it is not installed in your system, but in &lt;code&gt;node_modules&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There is a simple way to run any binary installed in &lt;code&gt;node_modules&lt;&#x2F;code&gt;, you can just run &lt;code&gt;npx parcel index.html&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I like more to define build steps in &lt;code&gt;package.json&lt;&#x2F;code&gt; file, so you can have well defined commands more suited to build your project. You can also use these commands as documentation how to build your project.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;configure-typescript-optional&quot;&gt;Configure Typescript (optional)&lt;&#x2F;h3&gt;
&lt;p&gt;Create a &lt;code&gt;tsconfig.json&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;compilerOptions&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;outDir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;dist&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sourceMap&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;noImplicitAny&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;commonjs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;es5&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;jsx&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;react&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this configuration, Typescript compiler will:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Generate files in &lt;code&gt;dist&lt;&#x2F;code&gt; folder.&lt;&#x2F;li&gt;
&lt;li&gt;Generate &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Tools&#x2F;Debugger&#x2F;How_to&#x2F;Use_a_source_map&quot;&gt;source maps&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Will not allow to declare &lt;code&gt;any&lt;&#x2F;code&gt; type, for example following declaration is not allowed: &lt;code&gt;const elements: any;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Generated module code will be &lt;a href=&quot;https:&#x2F;&#x2F;requirejs.org&#x2F;docs&#x2F;commonjs.html&quot;&gt;CommonJs&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Generated code will be &lt;a href=&quot;https:&#x2F;&#x2F;es.wikipedia.org&#x2F;wiki&#x2F;ECMAScript&quot;&gt;ECMAScript&lt;&#x2F;a&gt; 5 compliant.&lt;&#x2F;li&gt;
&lt;li&gt;Support &lt;a href=&quot;https:&#x2F;&#x2F;www.typescriptlang.org&#x2F;docs&#x2F;handbook&#x2F;jsx.html&quot;&gt;JSX&lt;&#x2F;a&gt; in &lt;code&gt;.tsx&lt;&#x2F;code&gt; files.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;full-source-code&quot;&gt;Full source code&lt;&#x2F;h2&gt;
&lt;p&gt;You can find full example at: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;react-typescript-parcel-template&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;react-typescript-parcel-template&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Or you can directly download the source code:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;react-typescript-parcel-template&#x2F;archive&#x2F;1.0.zip&quot;&gt;zip&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;react-typescript-parcel-template&#x2F;archive&#x2F;1.0.tar.gz&quot;&gt;tar.gz&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Custom Maven Plugin - Override default build lifecycle</title>
        <published>2018-05-12T00:00:00+00:00</published>
        <updated>2018-05-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/creating-custom-maven-plugin-default/"/>
        <id>https://carlosvin.github.io/creating-custom-maven-plugin-default/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/creating-custom-maven-plugin-default/">&lt;p&gt;I explained in previous article &lt;a href=&quot;&#x2F;langs&#x2F;en&#x2F;posts&#x2F;creating-custom-maven-plugin&quot;&gt;Example how to create custom Maven Plugin&lt;&#x2F;a&gt; which &lt;a href=&quot;https:&#x2F;&#x2F;maven.apache.org&#x2F;ref&#x2F;3.5.3&#x2F;maven-core&#x2F;lifecycles.html#site_Lifecycle&quot;&gt;overrides site lifecycle&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I have created another example to demonstrate how to override &lt;a href=&quot;https:&#x2F;&#x2F;maven.apache.org&#x2F;ref&#x2F;3.5.3&#x2F;maven-core&#x2F;lifecycles.html#default_Lifecycle&quot;&gt;default Maven build lifecycle&lt;&#x2F;a&gt;. Default build lifecycle is used to construct your software project, for example, it is executed when you run &lt;code&gt;mvn install&lt;&#x2F;code&gt; in a &lt;code&gt;jar&lt;&#x2F;code&gt; type project.&lt;&#x2F;p&gt;
&lt;p&gt;You can find source code example at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;lifecycle-maven-plugin&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;lifecycle-maven-plugin&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;&#x2F;strong&gt; I&#x27;ve also created an &lt;a href=&quot;https:&#x2F;&#x2F;maven.apache.org&#x2F;guides&#x2F;introduction&#x2F;introduction-to-archetypes.html&quot;&gt;archetype&lt;&#x2F;a&gt; so you can easily play with the example.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;create-an-example-project&quot;&gt;Create an example project&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;generate-the-project-using-archetype&quot;&gt;Generate the project using archetype&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mvn&lt;&#x2F;span&gt;&lt;span&gt; archetype:generate \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -DarchetypeGroupId&lt;&#x2F;span&gt;&lt;span&gt;=com.github.carlosvin.archetype \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -DartifactId&lt;&#x2F;span&gt;&lt;span&gt;=lifecycle-maven-plugin-archetype \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -DarchetypeVersion&lt;&#x2F;span&gt;&lt;span&gt;=0.6
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Example how to create custom Maven Plugin</title>
        <published>2018-03-11T00:00:00+00:00</published>
        <updated>2018-03-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/creating-custom-maven-plugin/"/>
        <id>https://carlosvin.github.io/creating-custom-maven-plugin/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/creating-custom-maven-plugin/">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;maven.apache.org&quot;&gt;Maven&lt;&#x2F;a&gt; has lots of plugins to assist you in project construction, testing, packaging and deployment. For example if you want to compile C++ code instead of Java, you can use &lt;a href=&quot;https:&#x2F;&#x2F;www.mojohaus.org&#x2F;maven-native&#x2F;native-maven-plugin&#x2F;&quot;&gt;native-maven-plugin&lt;&#x2F;a&gt;. But what if you need something more specific? Then you can create a custom Maven plugin.&lt;&#x2F;p&gt;
&lt;p&gt;I will explain how to create a simple custom maven plugin to generate static blog site from Markdown files. I know we can already do that with &lt;a href=&quot;https:&#x2F;&#x2F;maven.apache.org&#x2F;plugins&#x2F;maven-site-plugin&#x2F;examples&#x2F;creating-content.html&quot;&gt;maven-site-plugin&lt;&#x2F;a&gt; since version 3.3, I will just use it for learning purposes.&lt;&#x2F;p&gt;
&lt;p&gt;You can find the source code of this example at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;blog-maven-plugin&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;blog-maven-plugin&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;maven-plugin-concepts&quot;&gt;Maven plugin concepts&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Mojo:&lt;&#x2F;strong&gt; An executable goal in Maven, e.g: &lt;code&gt;mvn your-plugin:your-mojo&lt;&#x2F;code&gt; will execute a maven goal &lt;code&gt;your-mojo&lt;&#x2F;code&gt; declared as part of &lt;code&gt;your-plugin&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Goal:&lt;&#x2F;strong&gt; It is equivalent to Mojo execution.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Lifecycle:&lt;&#x2F;strong&gt; It is a well-defined sequence of phases. Each phase consists of a sequence of goals. Let&#x27;s see an example of lifecycle, e.g: &lt;code&gt;FooLifecycle&lt;&#x2F;code&gt; has &lt;code&gt;clean&lt;&#x2F;code&gt;, &lt;code&gt;prepare&lt;&#x2F;code&gt; and &lt;code&gt;assemble&lt;&#x2F;code&gt; phases. Each of those phases has one of more goals. &lt;em&gt;FooLifecycle&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;clean:
&lt;ul&gt;
&lt;li&gt;rmSources: a goal to remove source files&lt;&#x2F;li&gt;
&lt;li&gt;rmBuild: a goal to remove files in cache directory&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;prepare:
&lt;ul&gt;
&lt;li&gt;installDependencies: a goal to download dependencies for the project&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;assemble:
&lt;ul&gt;
&lt;li&gt;build: a goal to compile source files&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To define a custom life-cycle similar to previous one, we will use &lt;code&gt;src&#x2F;main&#x2F;resources&#x2F;META-INF&#x2F;plexus&#x2F;components.xml&lt;&#x2F;code&gt;, we will speak about that file in following sections. Normally is enough to override &lt;a href=&quot;https:&#x2F;&#x2F;maven.apache.org&#x2F;ref&#x2F;3.5.3&#x2F;maven-core&#x2F;lifecycles.html&quot;&gt;predefined lifecycles&lt;&#x2F;a&gt;, in this example, we will override &lt;em&gt;site life-cycle&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;&#x2F;strong&gt; You can find an introduction to Maven life-cycles at &lt;a href=&quot;https:&#x2F;&#x2F;maven.apache.org&#x2F;guides&#x2F;introduction&#x2F;introduction-to-the-lifecycle.html&quot;&gt;Maven life-cycle guide&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;create-your-custom-plugin-site-lifecycle&quot;&gt;Create your custom plugin (Site Lifecycle)&lt;&#x2F;h2&gt;
&lt;p&gt;The plugin we are about to explain will &lt;a href=&quot;https:&#x2F;&#x2F;maven.apache.org&#x2F;ref&#x2F;3.5.3&#x2F;maven-core&#x2F;lifecycles.html#site_Lifecycle&quot;&gt;override site lifecycle&lt;&#x2F;a&gt;, which has only 2 default phases, so when we run &lt;code&gt;mvn site&lt;&#x2F;code&gt; using our new custom plugin it will execute the goals we are about to create.&lt;&#x2F;p&gt;
&lt;p&gt;Our plugin will work with &lt;code&gt;md&lt;&#x2F;code&gt; (for &lt;a href=&quot;https:&#x2F;&#x2F;commonmark.org&#x2F;&quot;&gt;Markdown&lt;&#x2F;a&gt;) file bindings: It will build and deploy the project using &lt;a href=&quot;https:&#x2F;&#x2F;maven.apache.org&#x2F;plugins&#x2F;maven-deploy-plugin&#x2F;&quot;&gt;maven deployment plugin&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;project-structure&quot;&gt;Project structure&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;src&#x2F;main&#x2F;java&lt;&#x2F;code&gt;: Where Java source code is&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;src&#x2F;main&#x2F;resources&#x2F;META-INF&#x2F;plexus&#x2F;components.xml&lt;&#x2F;code&gt;: file to create&#x2F;override maven lifecycles and artifact types. Here we can specify which goals will be executed when for an artifact type, for example, we can say that for an artifact of type &lt;code&gt;whatever&lt;&#x2F;code&gt; when we run &lt;code&gt;mvn foo&lt;&#x2F;code&gt; it will verify the files, run tests, run linter, compile and zip all generated files.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;src&#x2F;test&#x2F;java&lt;&#x2F;code&gt;: Unit tests folder.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;src&#x2F;it&lt;&#x2F;code&gt;: Folder with all integration tests. Those integration tests are running actual projects and checking that outputs are as expected.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pom.xml&lt;&#x2F;code&gt;: File with Maven project description (&lt;a href=&quot;https:&#x2F;&#x2F;maven.apache.org&#x2F;guides&#x2F;introduction&#x2F;introduction-to-the-pom.html&quot;&gt;Project Object Model&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dependency-injection&quot;&gt;Dependency Injection&lt;&#x2F;h3&gt;
&lt;p&gt;Maven has finally chosen &lt;a href=&quot;https:&#x2F;&#x2F;maven.apache.org&#x2F;maven-jsr330.html&quot;&gt;JSR-330&lt;&#x2F;a&gt; as &lt;a href=&quot;https:&#x2F;&#x2F;javax-inject.github.io&#x2F;javax-inject&#x2F;&quot;&gt;dependency injection standard&lt;&#x2F;a&gt; (previously it was Plexus Annotations API).&lt;&#x2F;p&gt;
&lt;p&gt;To use dependency injection with Maven we have to:&lt;&#x2F;p&gt;
&lt;p&gt;Add &lt;code&gt;javax.inject&lt;&#x2F;code&gt; dependency to &lt;code&gt;pom.xml&lt;&#x2F;code&gt;, so we can use &lt;code&gt;@Inject&lt;&#x2F;code&gt;, &lt;code&gt;@Named&lt;&#x2F;code&gt;, and &lt;code&gt;@Singleton&lt;&#x2F;code&gt; annotations in plugin implementation Java code.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pom-xml-dependency&quot;&gt;pom.xml (Dependency)&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;javax.inject&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;javax.inject&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;1&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Set up the &lt;code&gt;sisu-maven-plugin&lt;&#x2F;code&gt; to index the JSR-330 components you want made available to Maven.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pom-xml-plugin&quot;&gt;pom.xml (Plugin)&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;org.eclipse.sisu&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;sisu-maven-plugin&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;0.3.3&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;executions&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execution&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;generate-index&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;goals&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;goal&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;main-index&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;goal&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;goals&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execution&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;executions&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add annotations to your Mojo, e.g:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;buildmojo-java-dependency-injection&quot;&gt;BuildMojo.java (Dependency Injection)&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Mojo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;defaultPhase &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LifecyclePhase&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;COMPILE&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;1&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BuildMojo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;AbstractMojo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;FileSetManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;fileSetManager;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MdToHtml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;mdToHtml;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Inject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;2&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;BuildMojo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;FileSetManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fileSetManager&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MdToHtml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mdToHtml&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.fileSetManager &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; fileSetManager;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.mdToHtml &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; mdToHtml;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;This annotation is not a dependency injection one, we will explain later what it is for.&lt;&#x2F;li&gt;
&lt;li&gt;It will inject an instance of FileSetManager and MdToHtml.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;write-a-custom-mojo&quot;&gt;Write a custom Mojo&lt;&#x2F;h3&gt;
&lt;p&gt;It is quite straightforward to implement a Mojo class, we have to:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;1-implement-mojo-interface&quot;&gt;1. Implement Mojo interface&lt;&#x2F;h4&gt;
&lt;p&gt;Your Mojo class has to implement &lt;code&gt;org.apache.maven.plugin.Mojo&lt;&#x2F;code&gt;, although it is more convenient to extend &lt;code&gt;org.apache.maven.plugin.AbstractMojo&lt;&#x2F;code&gt;, an abstract class to provide most of the infrastructure required to implement a Mojo except for execute method. That interface and class are described at &lt;a href=&quot;https:&#x2F;&#x2F;maven.apache.org&#x2F;developers&#x2F;mojo-api-specification.html&quot;&gt;Mojo API&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BuildMojo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;AbstractMojo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{ 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;2-configure-mojo-with-java-5-annotations&quot;&gt;2. Configure Mojo with Java 5 annotations&lt;&#x2F;h4&gt;
&lt;p&gt;Annotate Mojo class with &lt;code&gt;@Mojo&lt;&#x2F;code&gt; and input parameters with &lt;code&gt;@Parameter&lt;&#x2F;code&gt;. Those annotations belong to another set of annotations to configure Mojos, &lt;a href=&quot;https:&#x2F;&#x2F;maven.apache.org&#x2F;plugin-tools&#x2F;maven-plugin-plugin&#x2F;examples&#x2F;using-annotations.html&quot;&gt;Plugin Tools Java5 Annotations&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;* Generate HTML files from Markdown files
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Mojo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;defaultPhase &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LifecyclePhase&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;COMPILE&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;1&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BuildMojo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;AbstractMojo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    * Output directory path where HTML files are generated
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    @Parameter( &#x2F;&#x2F; &amp;lt;2&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;      defaultValue = &amp;quot;${project.reporting.outputDirectory}&amp;quot;, &#x2F;&#x2F; &amp;lt;3&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;      property = &amp;quot;siteOutputDirectory&amp;quot;, &#x2F;&#x2F; &amp;lt;4&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;      required = true) 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    private File outputDirectory;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    * A specific &amp;lt;code&amp;gt;fileSet&amp;lt;&#x2F;code&amp;gt; rule to select files and directories.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    * Fileset spec: https:&#x2F;&#x2F;maven.apache.org&#x2F;shared&#x2F;file-management&#x2F;fileset.html
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Parameter
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;FileSet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;inputFiles;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;Configures Mojo name and default life-cycle phase. To execute the Mojo in this example we will use &lt;code&gt;mvn site:build&lt;&#x2F;code&gt;: &lt;em&gt;site&lt;&#x2F;em&gt; is the plugin name and &lt;em&gt;build&lt;&#x2F;em&gt; is &lt;code&gt;name&lt;&#x2F;code&gt; parameter.&lt;&#x2F;li&gt;
&lt;li&gt;We use &lt;code&gt;@Parameter&lt;&#x2F;code&gt; annotation to pass configuration parameters to Mojo.&lt;&#x2F;li&gt;
&lt;li&gt;You can use properties placeholder or any String. If the parameter type is not a String, then Maven will try to cast it.&lt;&#x2F;li&gt;
&lt;li&gt;It allows configuration of the Mojo parameter from the command line by referencing a system property that the user sets via the -D option. E.g: &lt;code&gt;mvn site:build -DsiteOutputDirectory=&#x2F;var&#x2F;www&#x2F;html&lt;&#x2F;code&gt; will set siteOutputDirectory attribute to &lt;code&gt;&#x2F;var&#x2F;www&#x2F;html&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;&#x2F;strong&gt; More info in &lt;a href=&quot;https:&#x2F;&#x2F;maven.apache.org&#x2F;guides&#x2F;plugin&#x2F;guide-java-plugin-development.html#Parameters&quot;&gt;Maven Plugin development guide in Parameters section&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;3-implement-execute-method&quot;&gt;3. Implement &lt;em&gt;execute&lt;&#x2F;em&gt; method&lt;&#x2F;h4&gt;
&lt;p&gt;As I have explained before at &lt;strong&gt;1. Implement Mojo interface&lt;&#x2F;strong&gt;, our Mojo class extends &lt;code&gt;org.apache.maven.plugin.AbstractMojo&lt;&#x2F;code&gt; which has one unimplemented method from &lt;code&gt;org.apache.maven.plugin.Mojo&lt;&#x2F;code&gt; interface. In that method we are going to implement the Maven goal logic.&lt;&#x2F;p&gt;
&lt;p&gt;Mojo class instance is called from Maven execution life-cycle by invoking &lt;code&gt;execute()&lt;&#x2F;code&gt; method. Before calling &lt;code&gt;execute()&lt;&#x2F;code&gt;, Maven has performed some other tasks related with the Mojo:&lt;&#x2F;p&gt;
&lt;p&gt;Maven instantiates Mojo and injects dependencies (see &lt;strong&gt;Dependency Injection&lt;&#x2F;strong&gt; section).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Mojo&lt;&#x2F;span&gt;&lt;span&gt; mojo = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BuildMojo&lt;&#x2F;span&gt;&lt;span&gt;(fileSetManager, mdToHtml);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Maven configures the Mojo by assigning values to parameters.&lt;&#x2F;p&gt;
&lt;p&gt;I will simplify &lt;code&gt;execute&lt;&#x2F;code&gt; method implementation in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;blog-maven-plugin&quot;&gt;sample project in github&lt;&#x2F;a&gt;, because it is more complicated and this complexity is not relevant for learning purposes.&lt;&#x2F;p&gt;
&lt;p&gt;Maven calls execute method: &lt;code&gt;mojo.execute()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;buildmojo-java-execute-method&quot;&gt;BuildMojo.java (Execute Method)&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;() throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MojoExecutionException &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;1&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(inputFiles == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setDefaultInput&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    inputDirPath = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Paths&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(inputFiles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getDirectory&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; includedFiles = fileSetManager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getIncludedFiles&lt;&#x2F;span&gt;&lt;span&gt;(inputFiles); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;2&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    outputDirPath = outputDirectory.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toPath&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(includedFiles == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;|| includedFiles.length == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getLog&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;warn&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SKIP: There are no input files. &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getInputFilesToString&lt;&#x2F;span&gt;&lt;span&gt;()); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;3&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!outputDirectory.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span&gt;()) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;4&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            outputDirectory.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdirs&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; f : includedFiles) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;convertToHtml&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Paths&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(f), outputDirectory); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;5&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;InterruptedException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throw new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MojoExecutionException&lt;&#x2F;span&gt;&lt;span&gt;(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getLocalizedMessage&lt;&#x2F;span&gt;&lt;span&gt;(), e); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;6&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;If there is any error during execution, it should throw MojoExecutionException.&lt;&#x2F;li&gt;
&lt;li&gt;A way to get all selected files from &lt;a href=&quot;https:&#x2F;&#x2F;maven.apache.org&#x2F;shared&#x2F;file-management&#x2F;fileset.html&quot;&gt;FileSet&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;AbstractMojo supplies logger functionality.&lt;&#x2F;li&gt;
&lt;li&gt;If output directory doesn&#x27;t exist, it will be created.&lt;&#x2F;li&gt;
&lt;li&gt;It converts each file Markdown to HTML.&lt;&#x2F;li&gt;
&lt;li&gt;Convert thrown exception to MojoExecutionException.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;unit-tests&quot;&gt;Unit tests&lt;&#x2F;h2&gt;
&lt;p&gt;In the example we use &lt;a href=&quot;https:&#x2F;&#x2F;junit.org&#x2F;junit4&#x2F;&quot;&gt;JUnit 4&lt;&#x2F;a&gt;, but you can use any other testing framework.&lt;&#x2F;p&gt;
&lt;p&gt;Firstly, you have to add the unit test library dependency to &lt;code&gt;pom.xml&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pom-xml&quot;&gt;pom.xml&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;junit&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;junit&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;4.11&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;test&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then you just have to write your unit tests under &lt;code&gt;src&#x2F;test&#x2F;java&lt;&#x2F;code&gt; folder: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;blog-maven-plugin&#x2F;blob&#x2F;master&#x2F;src&#x2F;test&#x2F;java&#x2F;com&#x2F;maven&#x2F;plugins&#x2F;blog&#x2F;PathsTest.java&quot;&gt;src&#x2F;test&#x2F;java&#x2F;com&#x2F;maven&#x2F;plugins&#x2F;blog&#x2F;PathsTest.java&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To run the unit tests you just need to execute &lt;code&gt;mvn test&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;integration-tests&quot;&gt;Integration tests&lt;&#x2F;h2&gt;
&lt;p&gt;The 2 most popular ways to perform integration tests on custom maven plugins are using &lt;a href=&quot;https:&#x2F;&#x2F;maven.apache.org&#x2F;surefire&#x2F;maven-failsafe-plugin&quot;&gt;maven-failsafe-plugin&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;maven.apache.org&#x2F;plugins&#x2F;maven-invoker-plugin&quot;&gt;maven-invoker-plugin&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve chosen maven-invoker-plugin because for me it is more straightforward. There is &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;40010745&#x2F;maven-invoker-plugin-vs-maven-failsafe-plugin-which-to-use-for-integration-test&quot;&gt;an answer at stackoverflow where they explain thoroughly the differences between them&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-does-invoker-plugin-work&quot;&gt;How does Invoker Plugin work?&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;We create projects to use our custom plugin under &lt;code&gt;src&#x2F;it&lt;&#x2F;code&gt; folder, so our plugin will be applied to test projects.&lt;&#x2F;li&gt;
&lt;li&gt;Invoker plugin will simulate a previously configured Maven execution.&lt;&#x2F;li&gt;
&lt;li&gt;After Maven execution, a validation script will check if our plugin outputs are the expected ones. For example, if our plugin is supposed to generate a file named &lt;code&gt;foo.file&lt;&#x2F;code&gt;, verification plugin will check if that file exists, if it doesn&#x27;t, integration test will fail.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;configure-invoker-plugin&quot;&gt;Configure Invoker Plugin&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;maven-invoker-plugin&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;3.0.1&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;configuration&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;postBuildHookScript&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;verify&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;postBuildHookScript&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- 3 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;showVersion&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;true&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;showVersion&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;streamLogs&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;true&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;streamLogs&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;noLog&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;false&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;noLog&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;showErrors&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;true&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;showErrors&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;configuration&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;executions&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execution&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;integration-test&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;goals&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;goal&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;install&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;goal&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- 1 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;goal&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;run&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;goal&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- 2 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;goals&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execution&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;executions&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;invoker:install&lt;&#x2F;code&gt; will be executed during the phase pre-integration-test and will install the main project artifact into target&#x2F;local-repo.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;invoker:run&lt;&#x2F;code&gt; will be executed during the integration-test phase and it will execute all defined integration tests under &lt;code&gt;src&#x2F;it&lt;&#x2F;code&gt; folder.&lt;&#x2F;li&gt;
&lt;li&gt;It configures invoker plugin to execute validation script after integration test project execution. This script may be written with either BeanShell or Groovy (verify.groovy or verify.bsh).&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;We have used other properties to show errors, show maven log and save it to a file.&lt;&#x2F;p&gt;
&lt;p&gt;You can check all &lt;code&gt;invoker:run&lt;&#x2F;code&gt; configuration properties at &lt;a href=&quot;https:&#x2F;&#x2F;maven.apache.org&#x2F;plugins&#x2F;maven-invoker-plugin&#x2F;run-mojo.html&quot;&gt;maven-invoker-plugin run-mojo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;create-an-integration-test-project&quot;&gt;Create an Integration Test Project&lt;&#x2F;h3&gt;
&lt;p&gt;It is a project we use to execute custom plugin goals, so we can validate if it produces the expected output.&lt;&#x2F;p&gt;
&lt;p&gt;There are 3 important files matching with &lt;a href=&quot;http:&#x2F;&#x2F;wiki.c2.com&#x2F;?ArrangeActAssert&quot;&gt;AAA&lt;&#x2F;a&gt; phases (&quot;Arrange-Act-Assert&quot;).&lt;&#x2F;p&gt;
&lt;h4 id=&quot;arrange-pom-xml&quot;&gt;Arrange: pom.xml&lt;&#x2F;h4&gt;
&lt;p&gt;This file is a project using our custom plugin.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;blog-maven-plugin&#x2F;blob&#x2F;master&#x2F;src&#x2F;it&#x2F;md-html&#x2F;pom.xml&quot;&gt;src&#x2F;it&#x2F;md-html&#x2F;pom.xml&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;UTF-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;?&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;project &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;xmlns&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;xmlns:xsi&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;xsi:schemaLocation&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;modelVersion&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;4.0.0&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;modelVersion&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;com.maven.plugins.it&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;simple-it&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;1.0-SNAPSHOT&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;plugins&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;@project.groupId@&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;@project.artifactId@&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;@project.version@&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;plugins&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;project&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It is a very simple pom file where we use placeholders to reference to our plugin under test. When invoker plugin executes following pom file, firstly will replace those placeholders to reference to the latest version of our custom plugin which was recently installed in the local repository:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;com.maven.plugins&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;blog&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;0.0.1-SNAPSHOT&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In that way invoker plugin ensures it is testing the latest version of current project.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;act-invoker-properties&quot;&gt;Act: invoker.properties&lt;&#x2F;h4&gt;
&lt;p&gt;It configures how test project will be executed.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;blog-maven-plugin&#x2F;blob&#x2F;master&#x2F;src&#x2F;it&#x2F;md-html&#x2F;invoker.properties&quot;&gt;src&#x2F;it&#x2F;md-html&#x2F;invoker.properties&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;properties&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-properties &quot;&gt;&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;&lt;span&gt;invoker.goals = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;blog:build
&lt;&#x2F;span&gt;&lt;span&gt;invoker.name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Test build MD
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It will execute &lt;code&gt;mvn blog:build&lt;&#x2F;code&gt;, a goal defined in our custom plugin under example or what is the same, it will execute BuildMojo described in section &lt;strong&gt;Write a custom Mojo&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;assert-verify-groovy&quot;&gt;Assert: verify.groovy&lt;&#x2F;h4&gt;
&lt;p&gt;It is the script to check that plugin execution generated the expected results.&lt;&#x2F;p&gt;
&lt;p&gt;Verification script, it is checking if &lt;code&gt;target&#x2F;site&#x2F;README.html&lt;&#x2F;code&gt; file was generated by the plugin.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;blog-maven-plugin&#x2F;blob&#x2F;master&#x2F;src&#x2F;it&#x2F;md-html&#x2F;verify.groovy&quot;&gt;src&#x2F;it&#x2F;md-html&#x2F;verify.groovy&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;groovy&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-groovy &quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;File&lt;&#x2F;span&gt;&lt;span&gt; generated = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new File&lt;&#x2F;span&gt;&lt;span&gt;( basedir, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;target&#x2F;site&#x2F;README.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span&gt; generated.isFile()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Choosing a Modern C++ stack</title>
        <published>2017-09-15T00:00:00+00:00</published>
        <updated>2020-06-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/choosing-modern-cpp-stack/"/>
        <id>https://carlosvin.github.io/choosing-modern-cpp-stack/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/choosing-modern-cpp-stack/">&lt;p&gt;I&#x27;m starting a new project in C++, but I&#x27;ve run into a couple of questions before starting:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Which build system should I use?&lt;&#x2F;li&gt;
&lt;li&gt;Which unit testing framework?&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;&#x2F;strong&gt;: If you just want a project template so you can have a C++ project skeleton ready in seconds, just go to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;uuid-cpp&quot;&gt;uuid-cpp&lt;&#x2F;a&gt; and follow the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;uuid-cpp&#x2F;blob&#x2F;master&#x2F;README.md&quot;&gt;instructions in README.md&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;choosing-build-system-meson&quot;&gt;Choosing Build System (&lt;a href=&quot;https:&#x2F;&#x2F;mesonbuild.com&#x2F;&quot;&gt;Meson&lt;&#x2F;a&gt;)&lt;&#x2F;h2&gt;
&lt;p&gt;I have used before &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;make&#x2F;manual&#x2F;make.html&quot;&gt;Make&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;maven.apache.org&#x2F;&quot;&gt;Maven&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;scons.org&#x2F;&quot;&gt;Scons&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;gradle.org&#x2F;&quot;&gt;Gradle&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;automake&#x2F;manual&#x2F;html_node&#x2F;Autotools-Introduction.html&quot;&gt;Autotools&lt;&#x2F;a&gt;, but I have some reasons to try something else:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Autotools:&lt;&#x2F;strong&gt; It is not easy to configure and maintain. There are several configuration files and several configuration steps.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Gradle:&lt;&#x2F;strong&gt; CPP feature is still incubating. Not very fast. You can check a similar example project at &lt;a href=&quot;&#x2F;langs&#x2F;en&#x2F;posts&#x2F;gradle-cpp&quot;&gt;Build C++ project with Gradle&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Make:&lt;&#x2F;strong&gt; I don&#x27;t love the syntax. Files tend to get messy as the project grows.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Scons:&lt;&#x2F;strong&gt; It is just slower and not as easy to understand as Meson.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Maven:&lt;&#x2F;strong&gt; It is slow and you might end up &quot;Javatizing&quot; your C++ project structure.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt;: I&#x27;ve listed just things I don&#x27;t like; those projects have other great features.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;cmake-vs-meson&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cmake.org&#x2F;&quot;&gt;CMake&lt;&#x2F;a&gt; vs &lt;a href=&quot;https:&#x2F;&#x2F;mesonbuild.com&#x2F;&quot;&gt;Meson&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;After discarding previous ones, I&#x27;m considering Meson or CMake. Both are fast build systems:&lt;&#x2F;p&gt;
&lt;p&gt;Although Meson is written in &lt;a href=&quot;https:&#x2F;&#x2F;python.org&#x2F;&quot;&gt;Python&lt;&#x2F;a&gt;, it generates a &lt;a href=&quot;https:&#x2F;&#x2F;ninja-build.org&#x2F;&quot;&gt;Ninja&lt;&#x2F;a&gt; build project. The first time you configure the project you have to run Meson, but for building or testing you are actually running Ninja.&lt;&#x2F;p&gt;
&lt;p&gt;CMake can also generate Ninja files among other formats; &lt;a href=&quot;https:&#x2F;&#x2F;cmake.org&#x2F;cmake&#x2F;help&#x2F;latest&#x2F;manual&#x2F;cmake-generators.7.html&quot;&gt;check CMake generators documentation for more information&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CMake:&lt;&#x2F;strong&gt; It has a big advantage over Meson; it is mature and widely used in many projects, which means there are many examples and it will fulfill your C++ project building needs.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Meson:&lt;&#x2F;strong&gt; It is a young project compared with CMake, but it is growing quite fast and it has been adopted in other big projects like &lt;a href=&quot;https:&#x2F;&#x2F;www.gnome.org&#x2F;&quot;&gt;Gnome&lt;&#x2F;a&gt;, which has an initiative to &lt;a href=&quot;https:&#x2F;&#x2F;wiki.gnome.org&#x2F;Initiatives&#x2F;GnomeGoals&#x2F;MesonPorting&quot;&gt;port from Autotools to Meson&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Finally, I&#x27;ve chosen&lt;&#x2F;strong&gt; Meson because syntax is really clear to me; when I read a &lt;code&gt;meson.build&lt;&#x2F;code&gt; file I can quickly understand what is happening during the build process.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;steps-to-compile-and-test-a-project&quot;&gt;Steps to compile and test a project&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meson&lt;&#x2F;span&gt;&lt;span&gt; build .  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# First time you configure the project
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; build
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ninja&lt;&#x2F;span&gt;&lt;span&gt; build    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Each time you build it
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ninja&lt;&#x2F;span&gt;&lt;span&gt; test     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Each time you run tests
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;First time you configure the project&lt;&#x2F;li&gt;
&lt;li&gt;Each time you build it&lt;&#x2F;li&gt;
&lt;li&gt;Each time you run tests&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;other-build-systems-comparisons&quot;&gt;Other build systems comparisons&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;ve found two interesting comparisons about available C++ build systems; they might be a little biased because those comparisons come from Meson and Scons.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bitbucket.org&#x2F;scons&#x2F;scons&#x2F;wiki&#x2F;SconsVsOtherBuildTools&quot;&gt;C++ build systems comparison from Scons&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mesonbuild.com&#x2F;Simple-comparison.html&quot;&gt;C++ build systems comparison from Meson&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;unit-testing-framework&quot;&gt;Unit Testing Framework&lt;&#x2F;h2&gt;
&lt;p&gt;I have used some &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;XUnit&quot;&gt;xUnit&lt;&#x2F;a&gt;-based libraries like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;unittest-cpp&#x2F;unittest-cpp&quot;&gt;UnitTest++&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;cpputest.github.io&#x2F;&quot;&gt;CppUTest&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;googletest&quot;&gt;Google Test&lt;&#x2F;a&gt;, which pair perfectly with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;googletest&#x2F;tree&#x2F;master&#x2F;googlemock&quot;&gt;Google Mock&lt;&#x2F;a&gt;. If you want a safe bet that fulfills almost all of your testing needs I highly recommend Google Test.&lt;&#x2F;p&gt;
&lt;p&gt;But some time ago I found a testing framework with some interesting features: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;philsquared&#x2F;Catch&quot;&gt;Catch&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It is just a header file with no external dependencies, so very easy to start (wget + include downloaded file).&lt;&#x2F;li&gt;
&lt;li&gt;You can use normal unit test style or &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Behavior-driven_development&quot;&gt;BDD&lt;&#x2F;a&gt;-style.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you want to know more about Catch, I recommend you to give it a try; it takes just 2 minutes to have a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;philsquared&#x2F;Catch&#x2F;blob&#x2F;master&#x2F;docs&#x2F;tutorial.md#writing-tests&quot;&gt;simple example up and running&lt;&#x2F;a&gt;. You can also read some interesting articles like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;philsquared&#x2F;Catch&#x2F;blob&#x2F;master&#x2F;docs&#x2F;why-catch.md&quot;&gt;Why do we need yet another C++ test framework?&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;blog.coldflake.com&#x2F;posts&#x2F;Testing-C++-with-a-new-Catch&#x2F;&quot;&gt;Testing C++ With A New Catch&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;doctest-a-catch-alternative&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;onqtam&#x2F;doctest&quot;&gt;Doctest&lt;&#x2F;a&gt;: A Catch alternative&lt;&#x2F;h3&gt;
&lt;p&gt;There is another testing framework named Doctest, with the same benefits as Catch, but it promises to be faster and lighter (&lt;a href=&quot;&#x2F;content&#x2F;blog&#x2F;serialization-java-serializable-externalizable.en.md&quot;&gt;performance results&lt;&#x2F;a&gt;) than Catch.&lt;&#x2F;p&gt;
&lt;p&gt;Doctest is modeled after Catch and some parts of the code have been taken directly, but there are &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;onqtam&#x2F;doctest&#x2F;blob&#x2F;master&#x2F;doc&#x2F;markdown&#x2F;faq.md#how-is-doctest-different-from-catch&quot;&gt;differences&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It hasn&#x27;t been easy to decide; both are really similar. Below you can see some differences:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt;@@ -1,12 +1,12 @@
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-#define CATCH_CONFIG_MAIN &#x2F;&#x2F; It tells Catch to provide a main() - only do this in one cpp file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-#include &amp;quot;catch.hpp&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+#include &amp;quot;doctest.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;#include &amp;quot;Uuid.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;#include &amp;lt;string&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;constexpr int MAX_ITERS = 100;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-TEST_CASE(&amp;quot;Uuid&amp;quot;, &amp;quot;[uuid]&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+TEST_CASE(&amp;quot;Uuid&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;@@ -26,7 +26,7 @@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;TEST_CASE(&amp;quot;Uuid&amp;quot;, &amp;quot;[uuid]&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; BDD style
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-SCENARIO(&amp;quot;UUID creation&amp;quot;, &amp;quot;[Uuid]&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+SCENARIO(&amp;quot;UUID creation&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I&#x27;ve finally chosen Doctest because it promises to be faster: &lt;a href=&quot;&#x2F;content&#x2F;blog&#x2F;serialization-java-serializable-externalizable.en.md&quot;&gt;performance results&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt;: I&#x27;ve created the project using both frameworks; you can find them in the corresponding branches: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;uuid-cpp&#x2F;tree&#x2F;doctest&quot;&gt;doctest branch&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;uuid-cpp&#x2F;tree&#x2F;catch&quot;&gt;catch branch&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;example&quot;&gt;Example&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve created an example to illustrate this article: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;uuid-cpp&quot;&gt;uuid-cpp&lt;&#x2F;a&gt;. It is a basic implementation of UUID pseudo-random generator based on &lt;a href=&quot;https:&#x2F;&#x2F;www.cplusplus.com&#x2F;reference&#x2F;random&#x2F;mt19937&quot;&gt;mt19937&lt;&#x2F;a&gt;, which is not cryptographically secure.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;project-output-artifacts&quot;&gt;Project output artifacts&lt;&#x2F;h3&gt;
&lt;p&gt;When we install the project using Meson (Ninja), we will get some artifacts generated and copied in our system:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Shared library: &lt;code&gt;libuuid&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Header library for developers who want to use the shared library: &lt;code&gt;include&#x2F;Uuid.h&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Executable &lt;code&gt;uuidgen&lt;&#x2F;code&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Universally_unique_identifier&quot;&gt;UUID&lt;&#x2F;a&gt; generator).&lt;&#x2F;li&gt;
&lt;li&gt;Test executable (not installed). It tests the shared library.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For example, if you execute:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libuuid.so
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;include&#x2F;Uuid.h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;uuidgen
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;project-structure-fork-project&quot;&gt;Project structure (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;uuid-cpp&quot;&gt;Fork project&lt;&#x2F;a&gt;)&lt;&#x2F;h3&gt;
&lt;p&gt;...existing code...&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Filesystem in C++17</title>
        <published>2017-05-28T00:00:00+00:00</published>
        <updated>2017-05-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/recursive-directory-iterator/"/>
        <id>https://carlosvin.github.io/recursive-directory-iterator/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/recursive-directory-iterator/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;Since C++17 new filesystem abstractions will be added to C++ environment. So far they are available as &lt;a href=&quot;https:&#x2F;&#x2F;en.cppreference.com&#x2F;w&#x2F;cpp&#x2F;experimental&quot;&gt;Experimental C++ Features&lt;&#x2F;a&gt;. If you want to dig more about this new library, here it is the &lt;a href=&quot;http:&#x2F;&#x2F;www.open-std.org&#x2F;jtc1&#x2F;sc22&#x2F;wg21&#x2F;docs&#x2F;papers&#x2F;2014&#x2F;n4100.pdf&quot;&gt;final draft of File System Technical Specification&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gettting-started-with-experimental-filesystem-features-c-17-g&quot;&gt;Gettting started with Experimental Filesystem Features C++17 (g++)&lt;&#x2F;h2&gt;
&lt;p&gt;We just have to &quot;tell&quot; compiler that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;we write C++17 (&lt;code&gt;-c++1z&lt;&#x2F;code&gt;) and&lt;&#x2F;li&gt;
&lt;li&gt;it has to add &lt;em&gt;standard library with filesystem library&lt;&#x2F;em&gt; (&lt;code&gt;-lstdc++fs&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g++ -std&lt;&#x2F;span&gt;&lt;span&gt;=c++1z main.cpp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -lstdc&lt;&#x2F;span&gt;&lt;span&gt;++fs &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;a.out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s see a simple example with &lt;code&gt;std::filesystem::path&lt;&#x2F;code&gt; class.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;experimental&#x2F;filesystem&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;fs = std::experimental::filesystem;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    fs::path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;aPath &lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;path&#x2F;to&#x2F;file.txt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Parent path: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; aPath.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parent_path&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Filename: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; aPath.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filename&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Extension: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; aPath.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;extension&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;compile-and-run-basic-c-17-example&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;coliru.stacked-crooked.com&#x2F;a&#x2F;9f8bebb8b7f0fbe7&quot;&gt;Compile and run: Basic C++17 example&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; g++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -std&lt;&#x2F;span&gt;&lt;span&gt;=c++1z main.cpp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -lstdc&lt;&#x2F;span&gt;&lt;span&gt;++fs &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;a.out
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;a.out
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Parent&lt;&#x2F;span&gt;&lt;span&gt; path: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;path&#x2F;to&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Filename: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;file.txt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Extension: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.txt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;c-17-filesystem-features&quot;&gt;C++17 Filesystem Features&lt;&#x2F;h2&gt;
&lt;p&gt;In this section, we are going to explain some &lt;a href=&quot;https:&#x2F;&#x2F;en.cppreference.com&#x2F;w&#x2F;cpp&#x2F;filesystem&quot;&gt;std::filesystem&lt;&#x2F;a&gt; features with examples, which will help us to highlight differences between C++11 and C++17 so we can get a better idea about what this new library will supply and how it might make developer&#x27;s work easier.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;std-filesystem-path&quot;&gt;std::filesystem::path&lt;&#x2F;h3&gt;
&lt;p&gt;Upper we have seen a tiny &lt;a href=&quot;https:&#x2F;&#x2F;coliru.stacked-crooked.com&#x2F;a&#x2F;9f8bebb8b7f0fbe7&quot;&gt;use case for std::filesystem::path&lt;&#x2F;a&gt;. That is a quite powerful and convenient feature that supplies an multi-platform abstraction for paths to files using the correct directory path separator depending on the platform we are building our application for (&lt;code&gt;\&lt;&#x2F;code&gt; for Windows based systems and &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; for Unix based systems).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;directory-separator&quot;&gt;Directory separator&lt;&#x2F;h3&gt;
&lt;p&gt;When we want our application to use the correct directory separator in C++11, we could use conditional macro declaration:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;platform-independent-directory-separator-in-c-11&quot;&gt;Platform independent directory separator in C++11&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#ifdef&lt;&#x2F;span&gt;&lt;span&gt; _WIN32
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; string SEP = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; string SEP = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#endif
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Separator in my system &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; SEP &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;coliru.stacked-crooked.com&#x2F;a&#x2F;5023ee989105fc54&quot;&gt;Compile and run: C++11 separator example&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;platform-independent-directory-separator-in-c-17-cleaner-and-simpler&quot;&gt;Platform independent directory separator in C++17. Cleaner and simpler&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;experimental&#x2F;filesystem&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;fs = std::experimental::filesystem;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Separator in my system &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; fs::path::preferred_separator &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;coliru.stacked-crooked.com&#x2F;a&#x2F;1f2f63b3f5597d05&quot;&gt;Compile and run: C++17 separator example&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;directory-separator-operator&quot;&gt;Directory Separator Operator&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.cppreference.com&#x2F;w&#x2F;cpp&#x2F;filesystem&#x2F;path&quot;&gt;std::filesystem::path&lt;&#x2F;a&gt; implements &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; operator, which allows to easily concatenate paths to files and directories.&lt;&#x2F;p&gt;
&lt;p&gt;When we want to concatenate paths in C++11, we have to add extra logic to avoid adding duplicate separators and to select the correct separator for target platform:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;concatenate-paths-in-c-11&quot;&gt;Concatenate paths in C++11&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#ifdef&lt;&#x2F;span&gt;&lt;span&gt; _WIN32
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; string SEP = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; string SEP = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#endif
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;root &lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;};
&lt;&#x2F;span&gt;&lt;span&gt;    string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dir &lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;var&#x2F;www&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;};
&lt;&#x2F;span&gt;&lt;span&gt;    string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;index &lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;index.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pathToIndex&lt;&#x2F;span&gt;&lt;span&gt;{};
&lt;&#x2F;span&gt;&lt;span&gt;    pathToIndex.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(root).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(SEP).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(dir).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(SEP).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(index);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; pathToIndex &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;compile-and-run-concatenate-paths-in-c-11&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;coliru.stacked-crooked.com&#x2F;a&#x2F;290b278ec1de9573&quot;&gt;Compile and run: Concatenate paths in C++11&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;&#x2F;var&#x2F;www&#x2F;&#x2F;index.html
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Checking program output we notice it is not fully correct, we should have checked whether path parts already contains a separator so we don&#x27;t append another separator again. That logic is already implemented in &lt;a href=&quot;https:&#x2F;&#x2F;en.cppreference.com&#x2F;w&#x2F;cpp&#x2F;filesystem&#x2F;path&quot;&gt;std::filesystem::path&lt;&#x2F;a&gt;, so C++17 can be like:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;concatenate-paths-in-c-17&quot;&gt;Concatenate paths in C++17&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;experimental&#x2F;filesystem&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;fs = std::experimental::filesystem;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    fs::path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;root &lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;};
&lt;&#x2F;span&gt;&lt;span&gt;    fs::path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dir &lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;var&#x2F;www&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;};
&lt;&#x2F;span&gt;&lt;span&gt;    fs::path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;index &lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;index.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    fs::path pathToIndex = root &#x2F; dir &#x2F; index;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; pathToIndex &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;compile-and-run-concatenate-paths-in-c-17&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;coliru.stacked-crooked.com&#x2F;a&#x2F;a24d50875b4daad1&quot;&gt;Compile and run: Concatenate paths in C++17&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;www&#x2F;index.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Code is cleaner and just correct, there are no duplicated separators.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;create-remove-directories&quot;&gt;Create&#x2F;Remove Directories&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.cppreference.com&#x2F;w&#x2F;cpp&#x2F;filesystem&quot;&gt;std::filesystem&lt;&#x2F;a&gt; comes with some utilities to create and remove files and directories, but firstly let&#x27;s try to do so in C++11.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;create-and-remove-nested-directories-in-c-11&quot;&gt;Create and remove nested directories in C++11&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cstdio&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys&#x2F;stat.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; opts = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sandbox&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, opts);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sandbox&#x2F;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, opts);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sandbox&#x2F;a&#x2F;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, opts);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sandbox&#x2F;c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, opts);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sandbox&#x2F;c&#x2F;d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, opts);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ls -la sandbox&#x2F;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sandbox&#x2F;c&#x2F;d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sandbox&#x2F;a&#x2F;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sandbox&#x2F;c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sandbox&#x2F;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sandbox&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ls -la&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;compile-and-run-create-and-remove-directories-c-11&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;coliru.stacked-crooked.com&#x2F;a&#x2F;26f4763ec5b42adb&quot;&gt;Compile and run: Create and remove directories C++11&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g++-4.9 -std&lt;&#x2F;span&gt;&lt;span&gt;=c++11 main.cpp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -lm &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;a.out
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sandbox&#x2F;a:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt; 12
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwxr-xr-x&lt;&#x2F;span&gt;&lt;span&gt; 3 2001 2000 4096 May 28 12:27 .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwxr-xr-x&lt;&#x2F;span&gt;&lt;span&gt; 4 2001 2000 4096 May 28 12:27 ..
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwxr-xr-x&lt;&#x2F;span&gt;&lt;span&gt; 2 2001 2000 4096 May 28 12:27 b
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sandbox&#x2F;c:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt; 12
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwxr-xr-x&lt;&#x2F;span&gt;&lt;span&gt; 3 2001 2000 4096 May 28 12:27 .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwxr-xr-x&lt;&#x2F;span&gt;&lt;span&gt; 4 2001 2000 4096 May 28 12:27 ..
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwxr-xr-x&lt;&#x2F;span&gt;&lt;span&gt; 2 2001 2000 4096 May 28 12:27 d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt; 8012
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwxrwxrwx&lt;&#x2F;span&gt;&lt;span&gt; 2 2001 2000    4096 May 28 12:27 .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwxrwxrwx&lt;&#x2F;span&gt;&lt;span&gt; 3 2002 2000 8175616 May 28 12:27 ..
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-rwxr-xr-x&lt;&#x2F;span&gt;&lt;span&gt; 1 2001 2000    8168 May 28 12:27 a.out
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-rw-rw-rw-&lt;&#x2F;span&gt;&lt;span&gt; 1 2001 2000     517 May 28 12:27 main.cpp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have to create&#x2F;remove one by one. We could rewrite this code snippet with less lines (using a loop), but we still have to pay attention to creation&#x2F;deletion order, we cannot remove parent directory before we have removed all children.&lt;&#x2F;p&gt;
&lt;p&gt;Since C++17, we can create and remove nested directories with just one call.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;create-and-remove-nested-directories-c-17&quot;&gt;Create and remove nested directories C++17&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;experimental&#x2F;filesystem&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;fs = std::experimental::filesystem;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    fs::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;create_directories&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sandbox&#x2F;a&#x2F;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    fs::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;create_directories&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sandbox&#x2F;c&#x2F;d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ls -la sandbox&#x2F;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Were directories removed? &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; fs::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;remove_all&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sandbox&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ls -la&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;compile-and-run-create-and-remove-nested-directories-c-17&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;coliru.stacked-crooked.com&#x2F;a&#x2F;62c2d22fa0e7144c&quot;&gt;Compile and run: Create and remove nested directories C++17&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g++ -std&lt;&#x2F;span&gt;&lt;span&gt;=c++1z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -fconcepts -fgnu-tm  -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors&lt;&#x2F;span&gt;&lt;span&gt; main.cpp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -lm  -latomic -lstdc&lt;&#x2F;span&gt;&lt;span&gt;++fs &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;a.out
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sandbox&#x2F;a:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt; 12
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwxr-xr-x&lt;&#x2F;span&gt;&lt;span&gt; 3 2001 2000 4096 May 28 16:45 .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwxr-xr-x&lt;&#x2F;span&gt;&lt;span&gt; 4 2001 2000 4096 May 28 16:45 ..
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwxr-xr-x&lt;&#x2F;span&gt;&lt;span&gt; 2 2001 2000 4096 May 28 16:45 b
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sandbox&#x2F;c:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt; 12
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwxr-xr-x&lt;&#x2F;span&gt;&lt;span&gt; 3 2001 2000 4096 May 28 16:45 .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwxr-xr-x&lt;&#x2F;span&gt;&lt;span&gt; 4 2001 2000 4096 May 28 16:45 ..
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwxr-xr-x&lt;&#x2F;span&gt;&lt;span&gt; 2 2001 2000 4096 May 28 16:45 d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Were&lt;&#x2F;span&gt;&lt;span&gt; directories removed? 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt; 10132
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwxrwxrwx&lt;&#x2F;span&gt;&lt;span&gt; 2 2001 2000    4096 May 28 16:45 .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drwxrwxrwx&lt;&#x2F;span&gt;&lt;span&gt; 3 2002 2000 8175616 May 28 16:45 ..
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-rwxr-xr-x&lt;&#x2F;span&gt;&lt;span&gt; 1 2001 2000 2170976 May 28 16:45 a.out
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-rw-rw-rw-&lt;&#x2F;span&gt;&lt;span&gt; 1 2001 2000     393 May 28 16:45 main.cpp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;full-example-recursive-directory-iterator&quot;&gt;Full example: Recursive Directory Iterator&lt;&#x2F;h2&gt;
&lt;p&gt;This example consists of iterate recursively through dicrectories fintering files by extension.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;c-11&quot;&gt;C++11&lt;&#x2F;h3&gt;
&lt;p&gt;To keep C++11 example simple, I haven&#x27;t added filtering  logic, but filtering logic is present in C++17 example:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;filesystem-11-cpp&quot;&gt;filesystem.11.cpp&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dirent.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cstring&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fstream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; std::ofstream
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;system_error&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys&#x2F;stat.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; string UP_DIR = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; string CURRENT_DIR = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; string SEP = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;(initializer_list&amp;lt;string&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parts&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pathTmp &lt;&#x2F;span&gt;&lt;span&gt;{};
&lt;&#x2F;span&gt;&lt;span&gt;    string separator = &amp;quot;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; part: parts) 
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        pathTmp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(separator).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(part);
&lt;&#x2F;span&gt;&lt;span&gt;        separator = SEP;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; pathTmp;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;vector&amp;lt;string&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getDirectoryFiles&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; string&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; vector&amp;lt;string&amp;gt; &amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;extensions&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    vector&amp;lt;string&amp;gt; files;
&lt;&#x2F;span&gt;&lt;span&gt;    shared_ptr&amp;lt;DIR&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;directory_ptr&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opendir&lt;&#x2F;span&gt;&lt;span&gt;(dir.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c_str&lt;&#x2F;span&gt;&lt;span&gt;()), [](DIR* dir){ dir &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;closedir&lt;&#x2F;span&gt;&lt;span&gt;(dir); });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!directory_ptr) 
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;system_error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error_code&lt;&#x2F;span&gt;&lt;span&gt;(errno, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;system_category&lt;&#x2F;span&gt;&lt;span&gt;()), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error opening : &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + dir);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; dirent *dirent_ptr;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;((dirent_ptr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readdir&lt;&#x2F;span&gt;&lt;span&gt;(directory_ptr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;())) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fileName &lt;&#x2F;span&gt;&lt;span&gt;{dirent_ptr-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d_name&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(dirent_ptr-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d_type &lt;&#x2F;span&gt;&lt;span&gt;== DT_DIR) 
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(CURRENT_DIR != fileName &amp;amp;&amp;amp; UP_DIR != fileName) 
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; subFiles = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getDirectoryFiles&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;({dir, fileName}), extensions);
&lt;&#x2F;span&gt;&lt;span&gt;                files.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;(files), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(subFiles), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;(subFiles));
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        } 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(dirent_ptr-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d_type &lt;&#x2F;span&gt;&lt;span&gt;== DT_REG) 
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; here we should check also if filename has an extension in extensions vector
&lt;&#x2F;span&gt;&lt;span&gt;            files.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;({dir, fileName}));
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; files;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; opt = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sandbox&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, opt);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sandbox&#x2F;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, opt);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sandbox&#x2F;a&#x2F;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, opt);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; vector&amp;lt;string&amp;gt; e_files = {
&lt;&#x2F;span&gt;&lt;span&gt;     &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;sandbox&#x2F;a&#x2F;b&#x2F;file1.rst&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, 
&lt;&#x2F;span&gt;&lt;span&gt;     &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;sandbox&#x2F;a&#x2F;b&#x2F;file1.txt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;     &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;sandbox&#x2F;a&#x2F;file2.RST&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, 
&lt;&#x2F;span&gt;&lt;span&gt;     &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;sandbox&#x2F;file3.md&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;     &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;sandbox&#x2F;will_be.ignored&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; };
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create files
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;f: e_files)
&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  ofstream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt;(f, ofstream::out);
&lt;&#x2F;span&gt;&lt;span&gt;  of &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;filtered files: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;f: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getDirectoryFiles&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.rst&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.RST&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.md&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;})){
&lt;&#x2F;span&gt;&lt;span&gt;     cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; f &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;compile-and-run-c-11-example&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;coliru.stacked-crooked.com&#x2F;a&#x2F;af4228e039a281b3&quot;&gt;Compile and run C++11 example&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g++ -std&lt;&#x2F;span&gt;&lt;span&gt;=c++11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors&lt;&#x2F;span&gt;&lt;span&gt; main.cpp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -lm  -latomic -lstdc&lt;&#x2F;span&gt;&lt;span&gt;++fs &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;a.out
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filtered&lt;&#x2F;span&gt;&lt;span&gt; files: 
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;main.cpp
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;sandbox&#x2F;file3.md
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;sandbox&#x2F;will_be.ignored
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;sandbox&#x2F;a&#x2F;b&#x2F;file1.rst
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;sandbox&#x2F;a&#x2F;b&#x2F;file1.txt
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;sandbox&#x2F;a&#x2F;file2.RST
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;a.out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;c-17&quot;&gt;C++17&lt;&#x2F;h3&gt;
&lt;p&gt;Following example also filters files by extension.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;filesystem-17-cpp&quot;&gt;filesystem.17.cpp&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#include &amp;lt;dirent.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#include &amp;lt;cstring&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#include &amp;lt;fstream&amp;gt; &#x2F;&#x2F; std::ofstream
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#include &amp;lt;vector&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#include &amp;lt;memory&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#include &amp;lt;system_error&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#include &amp;lt;sys&#x2F;stat.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;using&lt;&#x2F;span&gt;&lt;span&gt; namespace std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; string UP_DIR = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; string CURRENT_DIR = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; string SEP = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt; path(initializer_list&amp;lt;string&amp;gt; parts) 
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt; pathTmp {};
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt; separator = &amp;quot;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; (auto &amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;part:&lt;&#x2F;span&gt;&lt;span&gt; parts) 
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pathTmp.append&lt;&#x2F;span&gt;&lt;span&gt;(separator)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.append&lt;&#x2F;span&gt;&lt;span&gt;(part);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;separator&lt;&#x2F;span&gt;&lt;span&gt; = SEP;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; pathTmp;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;string&amp;gt; getDirectoryFiles(const string&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dir,&lt;&#x2F;span&gt;&lt;span&gt; const vector&amp;lt;string&amp;gt; &amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;extensions&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;string&amp;gt; files;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shared_ptr&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;DIR&amp;gt; directory_ptr(opendir(dir.c_str())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt;(DIR* dir){ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dir &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;closedir&lt;&#x2F;span&gt;&lt;span&gt;(dir); });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;directory_ptr&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;throw&lt;&#x2F;span&gt;&lt;span&gt; system_error(error_code(errno, system_category())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error opening : &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + dir);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; dirent *dirent_ptr;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;((dirent_ptr = readdir(directory_ptr.get())) != nullptr) 
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        const string fileName {dirent_ptr-&amp;gt;d_name};
&lt;&#x2F;span&gt;&lt;span&gt;        if (dirent_ptr-&amp;gt;d_type == DT_DIR) 
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            if (CURRENT_DIR != fileName &amp;amp;&amp;amp; UP_DIR != fileName) 
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                auto subFiles = getDirectoryFiles(path({dir, fileName}), extensions);
&lt;&#x2F;span&gt;&lt;span&gt;                files.insert(end(files), begin(subFiles), end(subFiles));
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        } 
&lt;&#x2F;span&gt;&lt;span&gt;        else if (dirent_ptr-&amp;gt;d_type == DT_REG) 
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &#x2F;&#x2F; here we should check also if filename has an extension in extensions vector
&lt;&#x2F;span&gt;&lt;span&gt;            files.push_back(path({dir, fileName}));
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    return files;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;int main ()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    auto opt = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;
&lt;&#x2F;span&gt;&lt;span&gt;    mkdir(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sandbox&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, opt);
&lt;&#x2F;span&gt;&lt;span&gt;    mkdir(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sandbox&#x2F;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, opt);
&lt;&#x2F;span&gt;&lt;span&gt;    mkdir(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sandbox&#x2F;a&#x2F;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, opt);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; vector&amp;lt;string&amp;gt; e_files = {
&lt;&#x2F;span&gt;&lt;span&gt;     &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;sandbox&#x2F;a&#x2F;b&#x2F;file1.rst&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, 
&lt;&#x2F;span&gt;&lt;span&gt;     &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;sandbox&#x2F;a&#x2F;b&#x2F;file1.txt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;     &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;sandbox&#x2F;a&#x2F;file2.RST&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, 
&lt;&#x2F;span&gt;&lt;span&gt;     &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;sandbox&#x2F;file3.md&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;     &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;sandbox&#x2F;will_be.ignored&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; };
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;&#x2F; create files
&lt;&#x2F;span&gt;&lt;span&gt; for (auto &amp;amp;f: e_files)
&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  ofstream of(f, ofstream::out);
&lt;&#x2F;span&gt;&lt;span&gt;  of &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;filtered files: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt; for (auto &amp;amp;f: getDirectoryFiles(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.rst&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.RST&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.md&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;})){
&lt;&#x2F;span&gt;&lt;span&gt;     cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; f &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;compile-and-run-c-17-example&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;coliru.stacked-crooked.com&#x2F;a&#x2F;af4228e039a281b3&quot;&gt;Compile and run C++17 example&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;g++ -std&lt;&#x2F;span&gt;&lt;span&gt;=c++11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors&lt;&#x2F;span&gt;&lt;span&gt; main.cpp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -lm  -latomic -lstdc&lt;&#x2F;span&gt;&lt;span&gt;++fs &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;a.out
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filtered&lt;&#x2F;span&gt;&lt;span&gt; files: 
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;main.cpp
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;sandbox&#x2F;file3.md
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;sandbox&#x2F;will_be.ignored
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;sandbox&#x2F;a&#x2F;b&#x2F;file1.rst
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;sandbox&#x2F;a&#x2F;b&#x2F;file1.txt
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;sandbox&#x2F;a&#x2F;file2.RST
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;a.out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Multi-Domain Docker Containers</title>
        <published>2016-11-24T00:00:00+00:00</published>
        <updated>2016-11-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/reverse-proxy-multidomain-docker/"/>
        <id>https://carlosvin.github.io/reverse-proxy-multidomain-docker/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/reverse-proxy-multidomain-docker/">&lt;h2 id=&quot;use-case&quot;&gt;Use case&lt;&#x2F;h2&gt;
&lt;p&gt;We have several server applications in the same development environment, each application is bundled in a Docker container, e.g: &lt;strong&gt;&quot;Container A&quot;&lt;&#x2F;strong&gt; and &lt;strong&gt;&quot;Container B&quot;&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With Docker those applications have the same IP address. One way to differentiate and access to an specific application is exposing different ports.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;carlosvin.github.io&#x2F;reverse-proxy-multidomain-docker&#x2F;ip.png&quot; alt=&quot;Containers exposing the same IP address and different ports.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If we want to call to &lt;strong&gt;&quot;Application A&quot;&lt;&#x2F;strong&gt; we will do: &lt;code&gt;GET http:&#x2F;&#x2F;10.20.30.40:8080&#x2F;colors&#x2F;red&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;If we want to call to &lt;strong&gt;&quot;Application B&quot;&lt;&#x2F;strong&gt; we will do: &lt;code&gt;GET http:&#x2F;&#x2F;10.20.30.40:8081&#x2F;fruits&#x2F;tomato&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;But that solution is a little bit confusing, does 8080 mean we are accessing to &quot;application A&quot;?&lt;&#x2F;p&gt;
&lt;p&gt;It would be &lt;strong&gt;simpler and easier&lt;&#x2F;strong&gt; to remind something like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Calling &lt;strong&gt;&quot;Application A&quot;&lt;&#x2F;strong&gt;: &lt;code&gt;GET http:&#x2F;&#x2F;a.domain.com&#x2F;colors&#x2F;red&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Calling &lt;strong&gt;&quot;Application B&quot;&lt;&#x2F;strong&gt;: &lt;code&gt;GET http:&#x2F;&#x2F;b.domain.com&#x2F;fruits&#x2F;tomato&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;carlosvin.github.io&#x2F;reverse-proxy-multidomain-docker&#x2F;domain.png&quot; alt=&quot;Accessing applications by domain name.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Get that extra semantic value is much simpler than I thought at the beginning and you will see below.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-to-configure-multi-domain-reverse-proxy&quot;&gt;How to Configure Multi-Domain Reverse Proxy&lt;&#x2F;h2&gt;
&lt;p&gt;I said it is easy, because we almost have to do nothing, another container will do it for us, especifically we are going to use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jwilder&#x2F;nginx-proxy&quot;&gt;nginx-proxy&lt;&#x2F;a&gt;, it will automatically generate the required &lt;a href=&quot;https:&#x2F;&#x2F;www.nginx.com&quot;&gt;NGINX&lt;&#x2F;a&gt; configurations.&lt;&#x2F;p&gt;
&lt;p&gt;So, we will have 2 applications + 1 proxy, that is 3 containers.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;carlosvin.github.io&#x2F;reverse-proxy-multidomain-docker&#x2F;proxy.png&quot; alt=&quot;3 containers, 2 applications and 1 proxy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt;: You can download the full example at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;docker-reverse-proxy-multi-domain&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;docker-reverse-proxy-multi-domain&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;example-project-structure&quot;&gt;Example Project Structure&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;docker-compose.yaml&lt;&#x2F;strong&gt;: Main configuration file describing architecture in previous picture.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;a&lt;&#x2F;strong&gt;: Application A directory.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dockerfile&lt;&#x2F;strong&gt;: Container A configuration file.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;b&lt;&#x2F;strong&gt;: Application B directory.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dockerfile&lt;&#x2F;strong&gt;: Container B configuration file.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;docker-reverse-proxy-multi-domain&quot;&gt;View Project&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;architecture-configuration-docker-compose&quot;&gt;Architecture Configuration (docker-compose)&lt;&#x2F;h3&gt;
&lt;p&gt;The relationships between containers is the most interesting part in this example.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;docker-reverse-proxy-multi-domain-docker-compose-yaml&quot;&gt;docker-reverse-proxy-multi-domain&#x2F;docker-compose.yaml&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# (4)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;environment&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;VIRTUAL_HOST&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a.domain.com    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# (1)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;restart&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;always
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;b                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# (5)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;environment&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;VIRTUAL_HOST&lt;&#x2F;span&gt;&lt;span&gt;:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;b.domain.com   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# (2)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;restart&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;always
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx-proxy&lt;&#x2F;span&gt;&lt;span&gt;:              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# (3)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;jwilder&#x2F;nginx-proxy
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;80:80&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    - &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;443:443&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;tmp&#x2F;docker.sock:ro
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;restart&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;always
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;privileged&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;Configure the domain name for app a.&lt;&#x2F;li&gt;
&lt;li&gt;Configure the domain name for app b.&lt;&#x2F;li&gt;
&lt;li&gt;From this line there is proxy configuration (copy&#x2F;paste part).&lt;&#x2F;li&gt;
&lt;li&gt;We tell docker-compose has to build Docker images within specified directory.&lt;&#x2F;li&gt;
&lt;li&gt;For example, we are saying that docker-compose has to build a Docker image using ..&#x2F;b&#x2F;Dockerfile file.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;application-image-configuration&quot;&gt;Application Image Configuration&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;a-dockerfile&quot;&gt;a&#x2F;Dockerfile&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;dockerfile&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-dockerfile &quot;&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; httpd:2.4                       # (1)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;echo &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;A&amp;lt;&#x2F;h1&amp;gt;App A works!&amp;lt;&#x2F;body&amp;gt;&amp;lt;&#x2F;html&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt; &#x2F;usr&#x2F;local&#x2F;apache2&#x2F;htdocs&#x2F;index.html  # (2)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;We import an image with an apache server.&lt;&#x2F;li&gt;
&lt;li&gt;It serves a file that prints &quot;Host A&quot; as default page.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The configuration for application B is pretty much the same:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;b-dockerfile&quot;&gt;b&#x2F;Dockerfile&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;dockerfile&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-dockerfile &quot;&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; httpd:2.4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;echo &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;B&amp;lt;&#x2F;h1&amp;gt;App B works!&amp;lt;&#x2F;body&amp;gt;&amp;lt;&#x2F;html&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt; &#x2F;usr&#x2F;local&#x2F;apache2&#x2F;htdocs&#x2F;index.html
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;adding-domain-names-to-your-development-environment-configuration&quot;&gt;Adding domain names to your development environment configuration&lt;&#x2F;h3&gt;
&lt;p&gt;In Linux we just have to map the local address to domain names you have chosen, in the example &lt;code&gt;a.domain.com&lt;&#x2F;code&gt; and &lt;code&gt;b.domain.com&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;etc-hosts&quot;&gt;&#x2F;etc&#x2F;hosts&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;127.0.0.1&lt;&#x2F;span&gt;&lt;span&gt;    localhost.localdomain localhost
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;::1&lt;&#x2F;span&gt;&lt;span&gt;          localhost6.localdomain6 localhost6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;127.0.0.1&lt;&#x2F;span&gt;&lt;span&gt;    a.domain.com         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# (1)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;127.0.0.1&lt;&#x2F;span&gt;&lt;span&gt;    b.domain.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;We just added last 2 lines.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;everything-ready&quot;&gt;Everything ready&lt;&#x2F;h3&gt;
&lt;p&gt;Now we just have to test the example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker-compose&lt;&#x2F;span&gt;&lt;span&gt; build
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker-compose&lt;&#x2F;span&gt;&lt;span&gt; up
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The 3 containers are running now.&lt;&#x2F;p&gt;
&lt;p&gt;So we can open our favorite web browser and go to &lt;code&gt;a.domain.com&lt;&#x2F;code&gt;. It will show &lt;strong&gt;App A works!&lt;&#x2F;strong&gt;. If we go to &lt;code&gt;b.domain.com&lt;&#x2F;code&gt; then we will see &lt;strong&gt;App B works!&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;carlosvin.github.io&#x2F;reverse-proxy-multidomain-docker&#x2F;a.screenshot.png&quot; alt=&quot;App A works!&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;carlosvin.github.io&#x2F;reverse-proxy-multidomain-docker&#x2F;b.screenshot.png&quot; alt=&quot;App B works!&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt;: In most of the Linux distros you will need privileges to run Docker commands (&lt;code&gt;sudo&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Convert files formats - Windows to Unix</title>
        <published>2016-02-12T00:00:00+00:00</published>
        <updated>2016-02-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/recursive-dos-unix/"/>
        <id>https://carlosvin.github.io/recursive-dos-unix/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/recursive-dos-unix/">&lt;p&gt;If you are developing from a Windows environment to a Unix target environment, most likely you have had this issue: You install source files in Windows format in your Unix environment.&lt;&#x2F;p&gt;
&lt;p&gt;Windows and Unix systems use different line endings: Windows uses carriage return and line feed (&lt;code&gt;\r\n&lt;&#x2F;code&gt;), while Unix uses just line feed (&lt;code&gt;\n&lt;&#x2F;code&gt;). This difference can cause issues with scripts, code, and configuration files when moving files between systems.&lt;&#x2F;p&gt;
&lt;p&gt;There is a quite simple way to convert all your files from Windows to Unix format:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt; .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -type&lt;&#x2F;span&gt;&lt;span&gt; f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -print0 &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xargs -0&lt;&#x2F;span&gt;&lt;span&gt; dos2unix
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I got it, of course, from &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;11929461&#x2F;how-can-i-run-dos2unix-on-an-entire-directory&quot;&gt;this Stack Overflow answer&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>REST URLs</title>
        <published>2015-08-16T00:00:00+00:00</published>
        <updated>2015-08-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/rest-urls/"/>
        <id>https://carlosvin.github.io/rest-urls/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/rest-urls/">&lt;p&gt;First time I designed a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Representational_state_transfer&quot;&gt;REST&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Application_programming_interface&quot;&gt;API&lt;&#x2F;a&gt; I made several mistakes, of course. Following I&#x27;m going to explain common mistakes and what I&#x27;ve learned about &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Representational_state_transfer&quot;&gt;REST&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Uniform_resource_locator&quot;&gt;URL&lt;&#x2F;a&gt; with examples.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rest-basics&quot;&gt;REST Basics&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Using &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Uniform_resource_locator&quot;&gt;URL&lt;&#x2F;a&gt;s for get resources.&lt;&#x2F;li&gt;
&lt;li&gt;Using &lt;em&gt;verbs&lt;&#x2F;em&gt; for modify resources.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;em&gt;verbs&lt;&#x2F;em&gt; are provided by the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hypertext_Transfer_Protocol&quot;&gt;HTTP&lt;&#x2F;a&gt; protocol.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;em&gt;verbs&lt;&#x2F;em&gt; have a direct equivalency with &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;CRUD&quot;&gt;CRUD&lt;&#x2F;a&gt; (Create, Read, Update, Delete).&lt;&#x2F;li&gt;
&lt;li&gt;To access to an existent resource we need an identifier.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;rest-verbs&quot;&gt;REST Verbs&lt;&#x2F;h3&gt;
&lt;p&gt;POST: &lt;strong&gt;Create&lt;&#x2F;strong&gt; new resources.&lt;br &#x2F;&gt;
GET: &lt;strong&gt;Read&lt;&#x2F;strong&gt; already existing resources.&lt;br &#x2F;&gt;
PUT: &lt;strong&gt;Update&lt;&#x2F;strong&gt; already existing resources.&lt;br &#x2F;&gt;
DELETE: &lt;strong&gt;Delete&lt;&#x2F;strong&gt; already existing resources.&lt;&#x2F;p&gt;
&lt;p&gt;It is clearer in the following table:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;REST Verb&lt;&#x2F;th&gt;&lt;th&gt;CRUD Action&lt;&#x2F;th&gt;&lt;th&gt;Resource must exist&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;POST&lt;&#x2F;td&gt;&lt;td&gt;Create&lt;&#x2F;td&gt;&lt;td&gt;No&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;GET&lt;&#x2F;td&gt;&lt;td&gt;Read&lt;&#x2F;td&gt;&lt;td&gt;Yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;PUT&lt;&#x2F;td&gt;&lt;td&gt;Update&lt;&#x2F;td&gt;&lt;td&gt;Yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DELETE&lt;&#x2F;td&gt;&lt;td&gt;Delete&lt;&#x2F;td&gt;&lt;td&gt;Yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;accessing-to-resources&quot;&gt;Accessing to Resources&lt;&#x2F;h3&gt;
&lt;p&gt;A resource is &lt;em&gt;what we want to get&lt;&#x2F;em&gt;. For example, a car.&lt;&#x2F;p&gt;
&lt;p&gt;To be able to get a car, that information is not enough, you can&#x27;t go to your car dealer and ask for whatever car, you have to specify which one you want:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Good morning. I&#x27;d like to have a Fiat Bravo 1.9 Emotion 120CV.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In this manner the seller knows which one is.&lt;&#x2F;p&gt;
&lt;p&gt;&quot;Fiat Bravo 1.9 Emotion 120CV&quot; is the &lt;strong&gt;identifier&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Transferring the example to &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Representational_state_transfer&quot;&gt;REST&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Application_programming_interface&quot;&gt;API&lt;&#x2F;a&gt;s:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GET&lt;&#x2F;span&gt;&lt;span&gt;   https:&#x2F;&#x2F;cardealer.com&#x2F;api&#x2F;cars&#x2F;fiat-bravo-19-emotion-120cv
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now our &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Application_programming_interface&quot;&gt;API&lt;&#x2F;a&gt; can supply the car info.&lt;&#x2F;p&gt;
&lt;p&gt;This is a very simple example, but actually when we access to a specific resource, we have to use something to identify it, a common and recommendable practice is use &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Universally_unique_identifier&quot;&gt;UUID&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GET&lt;&#x2F;span&gt;&lt;span&gt;  https:&#x2F;&#x2F;cardealer.com&#x2F;api&#x2F;cars&#x2F;cce05bee-386b-11e5-a151-feff819cdc9f
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But our &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Application_programming_interface&quot;&gt;API&lt;&#x2F;a&gt;, like a shop, it hasn&#x27;t to be so strict. We can ask for cars with several features:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Good morning, I want a Fiat Bravo.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Then, the dealer kindly will show you all Fiat Bravo he has available. Let&#x27;s see how &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Application_programming_interface&quot;&gt;API&lt;&#x2F;a&gt; says that.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GET&lt;&#x2F;span&gt;&lt;span&gt;  https:&#x2F;&#x2F;cardealer.com&#x2F;api&#x2F;cars&#x2F;?brand=fiat&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bravo
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Application_programming_interface&quot;&gt;API&lt;&#x2F;a&gt; will return all cars with Fiat brand and Bravo model.&lt;&#x2F;p&gt;
&lt;p&gt;Brand and model are so called &lt;strong&gt;query parameters&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As you might already notice, to get resource information, we have always used &lt;strong&gt;GET&lt;&#x2F;strong&gt; &lt;em&gt;verb&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;update-resources&quot;&gt;Update resources&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Application_programming_interface&quot;&gt;API&lt;&#x2F;a&gt; should also support updating resources. Like reading resources, to update a resource we have to specify which resource we want to update, so we again need an &lt;em&gt;identifier&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Before, we wanted to get information (read) and we used &lt;strong&gt;GET&lt;&#x2F;strong&gt; &lt;em&gt;verb&lt;&#x2F;em&gt;. Now the only difference is the verb.&lt;&#x2F;p&gt;
&lt;p&gt;We want to &lt;strong&gt;update&lt;&#x2F;strong&gt; so we use the equivalency &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hypertext_Transfer_Protocol&quot;&gt;HTTP&lt;&#x2F;a&gt; verb: &lt;strong&gt;PUT&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PUT&lt;&#x2F;span&gt;&lt;span&gt;   https:&#x2F;&#x2F;cardealer.com&#x2F;api&#x2F;cars&#x2F;cce05bee-386b-11e5-a151-feff819cdc9f
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Actually something else is missing, we have to say what thing of the car we want to change, for example, let&#x27;s imagine we want to change the engine power and set it to 100CV.&lt;&#x2F;p&gt;
&lt;p&gt;We have to send the new engine power to following &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Uniform_resource_locator&quot;&gt;URL&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;cardealer.com&#x2F;api&#x2F;cars&#x2F;cce05bee-386b-11e5-a151-feff819cdc9f&quot;&gt;https:&#x2F;&#x2F;cardealer.com&#x2F;api&#x2F;cars&#x2F;cce05bee-386b-11e5-a151-feff819cdc9f&lt;&#x2F;a&gt; through &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hypertext_Transfer_Protocol&quot;&gt;HTTP&lt;&#x2F;a&gt; using &lt;strong&gt;PUT&lt;&#x2F;strong&gt; verb.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hypertext_Transfer_Protocol&quot;&gt;HTTP&lt;&#x2F;a&gt; protocol allows sending data within PUT message, we have to choose a sending format.&lt;&#x2F;p&gt;
&lt;p&gt;We can use &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;JSON&quot;&gt;JSON&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;XML&quot;&gt;XML&lt;&#x2F;a&gt; or whatever, we only have to ensure that sent format is expected in server side.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt; Designing a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Representational_state_transfer&quot;&gt;REST&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Application_programming_interface&quot;&gt;API&lt;&#x2F;a&gt; requires to select a data format.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;JSON example:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;enginePower&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;delete-resources&quot;&gt;Delete Resources&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s imagine that now we are the car dealer and we don&#x27;t want to sell the Fiat Bravo Emotion 1.9CV anymore (the cce05bee-386b-11e5-a151-feff819cdc9f). We&#x27;ll keep the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Uniform_resource_locator&quot;&gt;URL&lt;&#x2F;a&gt; that identifies the resource, but we change the verb: we don&#x27;t want to read (GET), we don&#x27;t want to update (PUT), we want to &lt;strong&gt;delete (DELETE)&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DELETE&lt;&#x2F;span&gt;&lt;span&gt;   https:&#x2F;&#x2F;cardealer.com&#x2F;api&#x2F;cars&#x2F;cce05bee-386b-11e5-a151-feff819cdc9f
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We don&#x27;t have to supply any additional info, only the verb (DELETE) and the resource identifier.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;create-resources&quot;&gt;Create Resources&lt;&#x2F;h3&gt;
&lt;p&gt;And the last verb is &lt;strong&gt;create (POST)&lt;&#x2F;strong&gt;. In this case we don&#x27;t have to identify the resource, because it still doesn&#x27;t exist.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;POST&lt;&#x2F;span&gt;&lt;span&gt;   https:&#x2F;&#x2F;cardealer.com&#x2F;api&#x2F;cars&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But we have to send the data to create the resource.&lt;&#x2F;p&gt;
&lt;p&gt;Following with the example, let&#x27;s create a new car, so we include the necessary data within POST &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hypertext_Transfer_Protocol&quot;&gt;HTTP&lt;&#x2F;a&gt; message, it is something similar what we did at section &quot;Update resources&quot;, but we are going to send &lt;strong&gt;all required data&lt;&#x2F;strong&gt;, not only the engine power.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;JSON example:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brand&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Fiat&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Bravo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;year&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2010&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;doors&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;enginePower&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;120&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Emotion&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;clima&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ac&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fuel&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Diesel&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can delegate on the system to assign a new &lt;strong&gt;identifier&lt;&#x2F;strong&gt;, or simply send it within the message:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;identifier&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cce05bee-386b-11e5-a151-feff819cdc9f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brand&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Fiat&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Bravo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;year&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2010&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;doors&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;enginePower&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;120&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Emotion&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;clima&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ac&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fuel&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Diesel&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;collections&quot;&gt;Collections&lt;&#x2F;h3&gt;
&lt;p&gt;All actions we have already explained were actually applied over a cars collection.&lt;&#x2F;p&gt;
&lt;p&gt;But, what happens if a resource has a nested collection?&lt;&#x2F;p&gt;
&lt;p&gt;Continuing with cars example, a car can use a set of engine oils. So the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Application_programming_interface&quot;&gt;API&lt;&#x2F;a&gt; must allow update, delete or create elements in the set.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt; For the example we will assume that &lt;em&gt;the oil identifier&lt;&#x2F;em&gt; is the attribute &lt;em&gt;type&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;add-an-element-to-collection&quot;&gt;Add an element to collection&lt;&#x2F;h4&gt;
&lt;p&gt;When we add a car to cars collection, what we do is create a new car, so it is the case of &quot;Create Resources&quot;.&lt;&#x2F;p&gt;
&lt;p&gt;To add a new engine oil to the car cce05bee-386b-11e5-a151-feff819cdc9f, that already exists:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Request:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;POST&lt;&#x2F;span&gt;&lt;span&gt;   https:&#x2F;&#x2F;cardealer.com&#x2F;api&#x2F;cars&#x2F;cce05bee-386b-11e5-a151-feff819cdc9f&#x2F;oils&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Response:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;5W30&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;otherInfo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;This is the best oil for this car&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we want to add another one:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Request:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;POST&lt;&#x2F;span&gt;&lt;span&gt;   https:&#x2F;&#x2F;cardealer.com&#x2F;api&#x2F;cars&#x2F;cce05bee-386b-11e5-a151-feff819cdc9f&#x2F;oils&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Response:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;10W30&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;otherInfo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;This is very good for cold weather&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;update-a-collection-item&quot;&gt;Update a collection item&lt;&#x2F;h4&gt;
&lt;p&gt;If we want to update the info of oil &lt;em&gt;5W30&lt;&#x2F;em&gt; of car &lt;em&gt;cce05bee-386b-11e5-a151-feff819cdc9f&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Request:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PUT&lt;&#x2F;span&gt;&lt;span&gt;   https:&#x2F;&#x2F;cardealer.com&#x2F;api&#x2F;cars&#x2F;cce05bee-386b-11e5-a151-feff819cdc9f&#x2F;oils&#x2F;5W30&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Response:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;5W30&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;otherInfo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;This is no longer the best oil for this car&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;delete-a-collection-item&quot;&gt;Delete a collection item&lt;&#x2F;h4&gt;
&lt;p&gt;To delete an oil &lt;em&gt;10W30&lt;&#x2F;em&gt; from car &lt;em&gt;cce05bee-386b-11e5-a151-feff819cdc9f&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Request:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DELETE&lt;&#x2F;span&gt;&lt;span&gt;   https:&#x2F;&#x2F;cardealer.com&#x2F;api&#x2F;cars&#x2F;cce05bee-386b-11e5-a151-feff819cdc9f&#x2F;oils&#x2F;10W30
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;read-a-collection-item&quot;&gt;Read a collection item&lt;&#x2F;h4&gt;
&lt;p&gt;To get the oil info &lt;em&gt;10W30&lt;&#x2F;em&gt; of the car &lt;em&gt;cce05bee-386b-11e5-a151-feff819cdc9f&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Request:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GET&lt;&#x2F;span&gt;&lt;span&gt;   https:&#x2F;&#x2F;cardealer.com&#x2F;api&#x2F;cars&#x2F;cce05bee-386b-11e5-a151-feff819cdc9f&#x2F;oils&#x2F;10W30
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;list-collection-items&quot;&gt;List collection items&lt;&#x2F;h4&gt;
&lt;p&gt;As we have seen at &quot;Read a collection item&quot;, we can get the info of every collection element, but we also can get multiple collection elements, sorted, paged and apply typical collection actions.&lt;&#x2F;p&gt;
&lt;p&gt;We can get all supported oils for a car &lt;em&gt;cce05bee-386b-11e5-a151-feff819cdc9f&lt;&#x2F;em&gt;, it is as simple as:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Request:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GET&lt;&#x2F;span&gt;&lt;span&gt;   https:&#x2F;&#x2F;cardealer.com&#x2F;api&#x2F;cars&#x2F;cce05bee-386b-11e5-a151-feff819cdc9f&#x2F;oils&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can also get sorted items:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Request:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GET&lt;&#x2F;span&gt;&lt;span&gt;   https:&#x2F;&#x2F;cardealer.com&#x2F;api&#x2F;cars&#x2F;cce05bee-386b-11e5-a151-feff819cdc9f&#x2F;oils&#x2F;?sort_by=type&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;order&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;asc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can ask &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Application_programming_interface&quot;&gt;API&lt;&#x2F;a&gt; to return the first 10 oils for car &lt;em&gt;cce05bee-386b-11e5-a151-feff819cdc9f&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Request:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GET&lt;&#x2F;span&gt;&lt;span&gt;   https:&#x2F;&#x2F;cardealer.com&#x2F;api&#x2F;cars&#x2F;cce05bee-386b-11e5-a151-feff819cdc9f&#x2F;oils&#x2F;?number_of_elements=10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Application_programming_interface&quot;&gt;API&lt;&#x2F;a&gt; can support also pagination:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Request:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GET&lt;&#x2F;span&gt;&lt;span&gt;   https:&#x2F;&#x2F;cardealer.com&#x2F;api&#x2F;cars&#x2F;cce05bee-386b-11e5-a151-feff819cdc9f&#x2F;oils&#x2F;?page=3&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number_of_elements&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Above request is telling &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Application_programming_interface&quot;&gt;API&lt;&#x2F;a&gt; that returns the page 3 of all oils of car &lt;em&gt;cce05bee-386b-11e5-a151-feff819cdc9f&lt;&#x2F;em&gt; and it has to show 2 oils per page. If we want to go to next page:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Request:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GET&lt;&#x2F;span&gt;&lt;span&gt;   https:&#x2F;&#x2F;cardealer.com&#x2F;api&#x2F;cars&#x2F;cce05bee-386b-11e5-a151-feff819cdc9f&#x2F;oils&#x2F;?page=4&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number_of_elements&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All those features are supported by &lt;strong&gt;query parameters&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;common-mistake&quot;&gt;Common mistake&lt;&#x2F;h2&gt;
&lt;p&gt;First time I tried to design a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Application_programming_interface&quot;&gt;API&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Representational_state_transfer&quot;&gt;REST&lt;&#x2F;a&gt; I designed an &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Application_programming_interface&quot;&gt;API&lt;&#x2F;a&gt;, but not &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Representational_state_transfer&quot;&gt;REST&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;My main mistake was the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Uniform_resource_locator&quot;&gt;URL&lt;&#x2F;a&gt;s design, I added my own &lt;em&gt;verbs&lt;&#x2F;em&gt; skipping &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hypertext_Transfer_Protocol&quot;&gt;HTTP&lt;&#x2F;a&gt; &lt;em&gt;verbs&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Wrong:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;POST&lt;&#x2F;span&gt;&lt;span&gt;    https:&#x2F;&#x2F;example.com&#x2F;api&#x2F;cars&#x2F;ford-focus&#x2F;delete-oil&#x2F;5W30
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;The correct way:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DELETE&lt;&#x2F;span&gt;&lt;span&gt;  https:&#x2F;&#x2F;example.com&#x2F;api&#x2F;cars&#x2F;ford-focus&#x2F;oils&#x2F;5W30
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Build C++ project with Gradle</title>
        <published>2014-09-27T00:00:00+00:00</published>
        <updated>2014-09-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/gradle-cpp/"/>
        <id>https://carlosvin.github.io/gradle-cpp/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/gradle-cpp/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;I am more and more worried about building, dependency management and distribution of my projects. I&#x27;d like to find a tool that unifies those processes with independence of the language. I know several tools which almost fit to what I&#x27;m looking for, like &lt;a href=&quot;https:&#x2F;&#x2F;www.scons.org&quot;&gt;SCons&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;automake&#x2F;manual&#x2F;html_node&#x2F;Autotools-Introduction.html#Autotools-Introduction&quot;&gt;Autotools&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;ant.apache.org&quot;&gt;Ant&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;maven.apache.org&quot;&gt;Maven&lt;&#x2F;a&gt; and lately &lt;a href=&quot;https:&#x2F;&#x2F;www.gradle.org&quot;&gt;Gradle&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve made several projects with Gradle, but always they were &lt;a href=&quot;https:&#x2F;&#x2F;www.java.com&quot;&gt;Java&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;developer.android.com&#x2F;studio&#x2F;build&quot;&gt;Android&lt;&#x2F;a&gt; projects. &lt;del&gt;In Java projects I&#x27;ve found a Maven replacement, because it is faster, easier and less verbose&lt;&#x2F;del&gt;. &lt;strong&gt;Update 2020&lt;&#x2F;strong&gt;: With the experience, now if I have to pick a build system for a Java project I&#x27;d pick Maven, especially for a professional project, but it is not the topic of this post.&lt;&#x2F;p&gt;
&lt;p&gt;About Android projects I suffered the early adoption of &lt;a href=&quot;https:&#x2F;&#x2F;developer.android.com&#x2F;sdk&#x2F;installing&#x2F;studio-build.html&quot;&gt;Android Studio + Gradle&lt;&#x2F;a&gt;, although currently I think they are more mature and they work fine.&lt;&#x2F;p&gt;
&lt;p&gt;First of all, I have to say: building C&#x2F;C++&#x2F;Objective-C projects with Gradle is in &lt;a href=&quot;https:&#x2F;&#x2F;docs.gradle.org&#x2F;current&#x2F;userguide&#x2F;feature_lifecycle.html#sec:incubating_state&quot;&gt;incubation&lt;&#x2F;a&gt; phase, although now we can perform advanced tasks like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Generation several artifacts within same project (libraries and executables).&lt;&#x2F;li&gt;
&lt;li&gt;Dependency management between artifacts (no versions).&lt;&#x2F;li&gt;
&lt;li&gt;Different &quot;flavors&quot; of the same software, e.g: we can generate a &quot;Community&quot; release and other one with more enabled features called &quot;Enterprise&quot;.&lt;&#x2F;li&gt;
&lt;li&gt;It allows multi-platform binary generation.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As I said, this plugin is still having limitations although they are working on it: &lt;a href=&quot;https:&#x2F;&#x2F;blog.gradle.org&#x2F;state-and-future-of-the-gradle-software-model#a-way-forward&quot;&gt;Gradle C++ roadmap&lt;&#x2F;a&gt;. &lt;del&gt;If they achieve it I&#x27;ll leave Autotools (I&#x27;m going to regret saying that)&lt;&#x2F;del&gt;. &lt;strong&gt;Update 2020&lt;&#x2F;strong&gt;: Actually few years later I am not using Autotools, neither Gradle, but I am using &lt;a href=&quot;https:&#x2F;&#x2F;mesonbuild.com&#x2F;&quot;&gt;Meson&lt;&#x2F;a&gt; and considering &lt;a href=&quot;https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;tutorial&#x2F;cpp.html&quot;&gt;Bazel&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;case-study&quot;&gt;Case study&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve extracted all the case study from &lt;a href=&quot;https:&#x2F;&#x2F;docs.gradle.org&#x2F;current&#x2F;userguide&#x2F;native_software.html&quot;&gt;Gradle user guide for native software&lt;&#x2F;a&gt;. I&#x27;ve adapted the project to be multi-platform with 2 versions &quot;Community&quot; and &quot;Enterprise&quot;.&lt;&#x2F;p&gt;
&lt;p&gt;The application consists of an executable and a dynamic library. The executable will use the library.&lt;&#x2F;p&gt;
&lt;p&gt;Gradle also is able to generate a distributable version and a debug version.&lt;&#x2F;p&gt;
&lt;p&gt;You can fork the code on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;cpp_gradle&quot;&gt;GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;project-structure&quot;&gt;Project Structure&lt;&#x2F;h3&gt;
&lt;p&gt;We can create whichever directory structure, but it is easier using the proposed by Gradle, if not we&#x27;ll have to specify where the code is located.&lt;&#x2F;p&gt;
&lt;p&gt;This is the project structure:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;gradle-cpp: Root directory.
&lt;ul&gt;
&lt;li&gt;build.gradle: File where is configured Gradle project, it is the equivalent to: build.xml for Ant, &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;make&#x2F;manual&#x2F;html_node&#x2F;Makefiles.html&quot;&gt;Makefile&lt;&#x2F;a&gt; for C&#x2F;C++ or pom.xml for Maven.&lt;&#x2F;li&gt;
&lt;li&gt;src: Folder where the source code is located.
&lt;ul&gt;
&lt;li&gt;hello: This folder contains the module hello. This module will generate hello library.
&lt;ul&gt;
&lt;li&gt;cpp: This folder contains C++ source files.
&lt;ul&gt;
&lt;li&gt;Hello.cpp: Â File with the implementation of Hello class.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;headers: Folder with header files.
&lt;ul&gt;
&lt;li&gt;Hello.h: Class Hello declaration.&lt;&#x2F;li&gt;
&lt;li&gt;Msg.h: File with constants declarations. Â &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;main: This folder contains the module which produces the executable that uses hello library.
&lt;ul&gt;
&lt;li&gt;cpp: This folder contains C++ source files.
&lt;ul&gt;
&lt;li&gt;main.cpp: Source code of main function. Â &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;build: Folder created automatically by Gradle where it leaves all execution results like unit tests reports, compiled files, package distributions, etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;c-application&quot;&gt;C++ Application&lt;&#x2F;h3&gt;
&lt;p&gt;It consists of an executable that uses the functionality implemented at &lt;code&gt;hello&lt;&#x2F;code&gt; library.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;main-cpp&quot;&gt;main.cpp&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hello &lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pepito&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    hello.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sayHello&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;hello&lt;&#x2F;code&gt; library allows greet &lt;code&gt;n&lt;&#x2F;code&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#n&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; times to someone who is passed as argument to constructor class.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;n&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&#x27;n&#x27; Positive integer&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h4 id=&quot;hello-h&quot;&gt;Hello.h&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Hello
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const char &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; who;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const char &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;who&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sayHello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;building-with-gradle&quot;&gt;Building with Gradle&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;base-case&quot;&gt;Base case&lt;&#x2F;h4&gt;
&lt;p&gt;The only we need to build the application with Gradle is: having Gradle&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#wrapper&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; and the file &lt;code&gt;build.gradle&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;wrapper&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;Actually Gradle is not required if we use the &quot;wrapper&quot;, but we aren&#x27;t going to explain it here, &lt;a href=&quot;https:&#x2F;&#x2F;docs.gradle.org&#x2F;current&#x2F;userguide&#x2F;gradle_wrapper.html&quot;&gt;here you can get more info about Gradle Wrapper&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h4 id=&quot;build-gradle-base-case&quot;&gt;build.gradle (Base Case)&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;groovy&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-groovy &quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span&gt;apply &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cpp&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;model {
&lt;&#x2F;span&gt;&lt;span&gt;  components {
&lt;&#x2F;span&gt;&lt;span&gt;    hello(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;NativeLibrarySpec&lt;&#x2F;span&gt;&lt;span&gt;) {}
&lt;&#x2F;span&gt;&lt;span&gt;    main(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;NativeExecutableSpec&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      binaries.all {
&lt;&#x2F;span&gt;&lt;span&gt;        lib &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;library&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this simple file, we&#x27;ll be able to compile and install the application in Debug mode for the platform where we are executing Gradle (in my case X64).&lt;&#x2F;p&gt;
&lt;p&gt;If we execute &lt;code&gt;gradle task&lt;&#x2F;code&gt; from the root of the project, we&#x27;ll get all the tasks we can do with Gradle.&lt;&#x2F;p&gt;
&lt;p&gt;In our case, we just want our compiled application ready to run, so we have to execute: &lt;code&gt;gradle installMainExecutable&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Once execution has finished, we can run the program calling to &lt;code&gt;build&#x2F;install&#x2F;mainExecutable&#x2F;main&lt;&#x2F;code&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#bat&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;bat&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;.bat in Windows. Without extension in Linux.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h4 id=&quot;output&quot;&gt;Output&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; build&#x2F;install&#x2F;mainExecutable&#x2F;main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1.&lt;&#x2F;span&gt;&lt;span&gt;  Hello Mr. Pepito (Community)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2.&lt;&#x2F;span&gt;&lt;span&gt;  Hello Mr. Pepito (Community)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;3.&lt;&#x2F;span&gt;&lt;span&gt;  Hello Mr. Pepito (Community)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;4.&lt;&#x2F;span&gt;&lt;span&gt;  Hello Mr. Pepito (Community)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5.&lt;&#x2F;span&gt;&lt;span&gt;  Hello Mr. Pepito (Community)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;6.&lt;&#x2F;span&gt;&lt;span&gt;  Hello Mr. Pepito (Community)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;7.&lt;&#x2F;span&gt;&lt;span&gt;  Hello Mr. Pepito (Community)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;8.&lt;&#x2F;span&gt;&lt;span&gt;  Hello Mr. Pepito (Community)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;9.&lt;&#x2F;span&gt;&lt;span&gt;  Hello Mr. Pepito (Community)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10.&lt;&#x2F;span&gt;&lt;span&gt; Hello Mr. Pepito (Community)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;different-flavors&quot;&gt;Different &quot;Flavors&quot;&lt;&#x2F;h4&gt;
&lt;p&gt;With a few lines more we can generate different versions of same application. In our example we are going to build &quot;Community&quot; and &quot;Enterprise&quot; flavors.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;build-gradle-flavors&quot;&gt;build.gradle (Flavors)&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;groovy&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-groovy &quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span&gt;apply &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cpp&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;model {
&lt;&#x2F;span&gt;&lt;span&gt;  flavors {
&lt;&#x2F;span&gt;&lt;span&gt;      community
&lt;&#x2F;span&gt;&lt;span&gt;      enterprise
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  components {
&lt;&#x2F;span&gt;&lt;span&gt;    hello(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;NativeLibrarySpec&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      binaries.all {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (flavor == flavors.enterprise) {
&lt;&#x2F;span&gt;&lt;span&gt;          cppCompiler.define &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ENTERPRISE&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    main(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;NativeExecutableSpec&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      binaries.all {
&lt;&#x2F;span&gt;&lt;span&gt;        lib &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;library&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also have to prepare our application to use compilation parameters.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;msg-h&quot;&gt;Msg.h&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#ifdef&lt;&#x2F;span&gt;&lt;span&gt; ENTERPRISE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static const char &lt;&#x2F;span&gt;&lt;span&gt;* EDITION = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enterprise&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static const char &lt;&#x2F;span&gt;&lt;span&gt;* EDITION = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Community&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#endif
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this way it selects a string depending on used flavor.&lt;&#x2F;p&gt;
&lt;p&gt;If we execute &lt;code&gt;gradle clean task&lt;&#x2F;code&gt; in the root folder, we&#x27;ll get more available tasks. Before, we had &lt;code&gt;installMainExecutable&lt;&#x2F;code&gt; which has been replaced by &lt;code&gt;installCommunityMainExecutable&lt;&#x2F;code&gt; and &lt;code&gt;installEnterpriseMainExecutable&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If we execute both tasks, we&#x27;ll get the application installed in both flavors:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gradle&lt;&#x2F;span&gt;&lt;span&gt; installEnterpriseMainExecutable installCommunityMainExecutable
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:compileEnterpriseHelloSharedLibraryHelloCpp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:linkEnterpriseHelloSharedLibrary
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:enterpriseHelloSharedLibrary
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:compileEnterpriseMainExecutableMainCpp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:linkEnterpriseMainExecutable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:enterpriseMainExecutable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:installEnterpriseMainExecutable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:compileCommunityHelloSharedLibraryHelloCpp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:linkCommunityHelloSharedLibrary
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:communityHelloSharedLibrary
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:compileCommunityMainExecutableMainCpp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:linkCommunityMainExecutable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:communityMainExecutable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:installCommunityMainExecutable
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BUILD&lt;&#x2F;span&gt;&lt;span&gt; SUCCESSFUL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Total&lt;&#x2F;span&gt;&lt;span&gt; time: 9.414 secs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can run the application in both flavors:&lt;&#x2F;p&gt;
&lt;h5 id=&quot;community&quot;&gt;Community&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; build&#x2F;install&#x2F;mainExecutable&#x2F;community&#x2F;main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1.&lt;&#x2F;span&gt;&lt;span&gt;      Hello Mr. Pepito        (Community)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2.&lt;&#x2F;span&gt;&lt;span&gt;      Hello Mr. Pepito        (Community)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;3.&lt;&#x2F;span&gt;&lt;span&gt;      Hello Mr. Pepito        (Community)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;4.&lt;&#x2F;span&gt;&lt;span&gt;      Hello Mr. Pepito        (Community)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5.&lt;&#x2F;span&gt;&lt;span&gt;      Hello Mr. Pepito        (Community)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;6.&lt;&#x2F;span&gt;&lt;span&gt;      Hello Mr. Pepito        (Community)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;7.&lt;&#x2F;span&gt;&lt;span&gt;      Hello Mr. Pepito        (Community)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;8.&lt;&#x2F;span&gt;&lt;span&gt;      Hello Mr. Pepito        (Community)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;9.&lt;&#x2F;span&gt;&lt;span&gt;      Hello Mr. Pepito        (Community)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10.&lt;&#x2F;span&gt;&lt;span&gt;     Hello Mr. Pepito        (Community)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h5 id=&quot;enterprise&quot;&gt;Enterprise&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; build&#x2F;install&#x2F;mainExecutable&#x2F;enterprise&#x2F;main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1.&lt;&#x2F;span&gt;&lt;span&gt;      Hello Mr. Pepito        (Enterprise)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2.&lt;&#x2F;span&gt;&lt;span&gt;      Hello Mr. Pepito        (Enterprise)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;3.&lt;&#x2F;span&gt;&lt;span&gt;      Hello Mr. Pepito        (Enterprise)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;4.&lt;&#x2F;span&gt;&lt;span&gt;      Hello Mr. Pepito        (Enterprise)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5.&lt;&#x2F;span&gt;&lt;span&gt;      Hello Mr. Pepito        (Enterprise)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;6.&lt;&#x2F;span&gt;&lt;span&gt;      Hello Mr. Pepito        (Enterprise)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;7.&lt;&#x2F;span&gt;&lt;span&gt;      Hello Mr. Pepito        (Enterprise)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;8.&lt;&#x2F;span&gt;&lt;span&gt;      Hello Mr. Pepito        (Enterprise)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;9.&lt;&#x2F;span&gt;&lt;span&gt;      Hello Mr. Pepito        (Enterprise)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10.&lt;&#x2F;span&gt;&lt;span&gt;     Hello Mr. Pepito        (Enterprise)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;release-or-debug&quot;&gt;Release or Debug&lt;&#x2F;h4&gt;
&lt;p&gt;By default Gradle compiles in Debug mode, but we can add the Release mode which enables several optimizations and remove debug flags&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#optimizations&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;optimizations&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;We can also specify&#x2F;modify which optimizations to apply.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h4 id=&quot;build-gradle-release-debug&quot;&gt;build.gradle (Release&#x2F;Debug)&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;groovy&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-groovy &quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span&gt;apply &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cpp&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;model {
&lt;&#x2F;span&gt;&lt;span&gt;    buildTypes {
&lt;&#x2F;span&gt;&lt;span&gt;        debug
&lt;&#x2F;span&gt;&lt;span&gt;        release
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ... the rest of file below doesn&amp;#39;t change
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we execute &lt;code&gt;gradle clean task&lt;&#x2F;code&gt; we will get more tasks, they have been split, for example &lt;code&gt;installCommunityMainExecutable&lt;&#x2F;code&gt; has been split in &lt;code&gt;installDebugCommunityMainExecutable&lt;&#x2F;code&gt; and &lt;code&gt;installReleaseCommunityMainExecutable&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;multi-platform&quot;&gt;Multi-platform&lt;&#x2F;h4&gt;
&lt;p&gt;Also we can use cross-compiling features provided by compilers and generate native components for other platforms. To do so we just have to add the supported platforms.&lt;&#x2F;p&gt;
&lt;p&gt;This only works if we have installed the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Toolchain&quot;&gt;Toolchain&lt;&#x2F;a&gt; for the target platform.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;build-gradle&quot;&gt;build.gradle&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;groovy&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-groovy &quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span&gt;apply &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cpp&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;model {
&lt;&#x2F;span&gt;&lt;span&gt;  buildTypes {
&lt;&#x2F;span&gt;&lt;span&gt;    debug
&lt;&#x2F;span&gt;&lt;span&gt;    release
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  platforms {
&lt;&#x2F;span&gt;&lt;span&gt;    x86 {
&lt;&#x2F;span&gt;&lt;span&gt;      architecture &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x86&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    x64 {
&lt;&#x2F;span&gt;&lt;span&gt;      architecture &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x86_64&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    itanium {
&lt;&#x2F;span&gt;&lt;span&gt;      architecture &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ia-64&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  flavors {
&lt;&#x2F;span&gt;&lt;span&gt;    community
&lt;&#x2F;span&gt;&lt;span&gt;    enterprise
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  components {
&lt;&#x2F;span&gt;&lt;span&gt;    hello(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;NativeLibrarySpec&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      binaries.all {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (flavor == flavors.enterprise) {
&lt;&#x2F;span&gt;&lt;span&gt;          cppCompiler.define &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ENTERPRISE&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    main(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;NativeExecutableSpec&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      binaries.all {
&lt;&#x2F;span&gt;&lt;span&gt;        lib &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;library&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When execute &lt;code&gt;gradle clean task&lt;&#x2F;code&gt; we get the different build options we have.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt; In this example, we can build different versions of the application in different flavors for different platforms in Debug or Release mode.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;try-it-yourself&quot;&gt;Try it yourself&lt;&#x2F;h3&gt;
&lt;p&gt;You can find the project at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;cpp_gradle&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;cpp_gradle&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Requirements:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Java 6 or higher.&lt;&#x2F;li&gt;
&lt;li&gt;An installed compiler (e.g &lt;a href=&quot;https:&#x2F;&#x2F;gcc.gnu.org&#x2F;&quot;&gt;GCC&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You just have to follow next steps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git clone git@github.com:carlosvin&#x2F;cpp_gradle.git&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cd cpp_gradle&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;.&#x2F;gradlew task&lt;&#x2F;code&gt; or &lt;code&gt;.&#x2F;gradlew.bat task&lt;&#x2F;code&gt; if you are in Windows. In this way you&#x27;ll see available tasks for this project. The first execution will take more time, because it downloads Gradle runtime.&lt;&#x2F;li&gt;
&lt;li&gt;If you are in a 64 bits platform, you can use this command to install the application: &lt;code&gt;.&#x2F;gradlew installX64ReleaseEnterpriseMainExecutable&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Run the application you just built: &lt;code&gt;build&#x2F;install&#x2F;mainExecutable&#x2F;x64ReleaseEnterprise&#x2F;main&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;&#x2F;h2&gt;
&lt;p&gt;With a small configuration file, we can achieve many different build combinations.&lt;&#x2F;p&gt;
&lt;p&gt;Gradle for C++ has a promising future, and I hope it will follow the successful path of Java and Android support.&lt;&#x2F;p&gt;
&lt;p&gt;It is well supported by continuous integration systems and offers many plugins and features.&lt;&#x2F;p&gt;
&lt;p&gt;However, Gradle for C++ is still under development, so we need to be cautious:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Do not use it in production environments.&lt;&#x2F;li&gt;
&lt;li&gt;Many things may change or be removed in future versions.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The full example is available at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;cpp_gradle&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;cpp_gradle&lt;&#x2F;a&gt;. I encourage you to try it yourself.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt; If you find any issues in this example, please leave a comment, open an issue, or submit a fix at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;cpp_gradle&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;cpp_gradle&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;For more information, see &lt;a href=&quot;https:&#x2F;&#x2F;docs.gradle.org&#x2F;current&#x2F;userguide&#x2F;native_software.html&quot;&gt;Getting Started with Gradle Native&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Embedded Java Databases - Performance Comparison</title>
        <published>2014-06-07T00:00:00+00:00</published>
        <updated>2014-06-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/java-embedded-db-performance-comparison/"/>
        <id>https://carlosvin.github.io/java-embedded-db-performance-comparison/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/java-embedded-db-performance-comparison/">&lt;h2 id=&quot;embedded-databases&quot;&gt;Embedded Databases&lt;&#x2F;h2&gt;
&lt;p&gt;These are databases that do not require a server, are embedded within the application itself, and are usually stored in local files. This, combined with the fact that they often have a mode where data is kept in memory, can result in very high performance.&lt;&#x2F;p&gt;
&lt;p&gt;However, this high degree of coupling to the application means they perform worse when shared between multiple applications due to access collisions.&lt;&#x2F;p&gt;
&lt;p&gt;Another advantage is that you don&#x27;t have to maintain and manage a database server.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m going to do a performance comparison between 3 transactional embedded databases (ACID). NoSQL databases are not included in this comparison as they are in a different performance league.&lt;&#x2F;p&gt;
&lt;p&gt;Contents&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sqlitedb&quot;&gt;SqliteDB&lt;&#x2F;h3&gt;
&lt;p&gt;This is a library written in &lt;a href=&quot;https:&#x2F;&#x2F;es.wikipedia.org&#x2F;wiki&#x2F;ANSI_C&quot;&gt;ANSI C&lt;&#x2F;a&gt;, less than 500KB, multi-platform, with no external dependencies, and stores all database content in a single file.&lt;&#x2F;p&gt;
&lt;p&gt;It gives the best performance in the test results below.&lt;&#x2F;p&gt;
&lt;p&gt;It can be used from C and C++, but also &lt;a href=&quot;https:&#x2F;&#x2F;es.wikipedia.org&#x2F;wiki&#x2F;Sqlite#Lenguajes_de_programaci.C3.B3n&quot;&gt;from other programming languages&lt;&#x2F;a&gt; (PHP, Python, Java, .NET ...).&lt;&#x2F;p&gt;
&lt;p&gt;In the case of Java, we can manage this database through JDBC. The library can be obtained from &lt;a href=&quot;https:&#x2F;&#x2F;bitbucket.org&#x2F;xerial&#x2F;sqlite-jdbc&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example of inserting a series of objects of the class &lt;a href=&quot;..&#x2F;java_embedded_databases&#x2F;blob&#x2F;master&#x2F;src&#x2F;main&#x2F;java&#x2F;domain&#x2F;Price.java&quot;&gt;Price.java&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;JdbcDb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Column &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;INSTRUMENT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MARKET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;PRICE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;DATE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;TABLE_NAME &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;PRICES&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;SQL_INSERT &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;INSERT INTO &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TABLE_NAME
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;+ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; (INSTRUMENT, MARKET, PRICE, DATE) VALUES (?,?,?,?)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Price &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PreparedStatement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;preparedStatement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;SQLException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        preparedStatement.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getInstrument&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;());
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        preparedStatement.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getMarket&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;());
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        preparedStatement.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setDouble&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getPrice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;());
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        preparedStatement.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setTimestamp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Timestamp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getDate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        preparedStatement.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addBatch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Price&lt;&#x2F;span&gt;&lt;span&gt;... &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;SQLException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PreparedStatement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; preparedStatement &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; conn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prepareStatement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;SQL_INSERT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Price&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; p &lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; prices) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(p, preparedStatement);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        preparedStatement.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;executeBatch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        preparedStatement.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        conn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;derbydb-or-javadb&quot;&gt;DerbyDB or JavaDB&lt;&#x2F;h3&gt;
&lt;p&gt;JavaDB is an Oracle distribution of the open-source DerbyDB database. It supports the &lt;a href=&quot;https:&#x2F;&#x2F;es.wikipedia.org&#x2F;wiki&#x2F;SQL&quot;&gt;ANSI&#x2F;ISO SQL&lt;&#x2F;a&gt; standard via JDBC and &lt;a href=&quot;https:&#x2F;&#x2F;es.wikipedia.org&#x2F;wiki&#x2F;Java_EE&quot;&gt;Java EE&lt;&#x2F;a&gt;. These libraries are included in the JDK.&lt;&#x2F;p&gt;
&lt;p&gt;It stores the database in multiple files, which can be useful for scaling storage.&lt;&#x2F;p&gt;
&lt;p&gt;It can only be used in Java, not from other languages.&lt;&#x2F;p&gt;
&lt;p&gt;As we will see later, it was the slowest in the test results.&lt;&#x2F;p&gt;
&lt;p&gt;The example implementation for inserting a series of objects of the class &lt;a href=&quot;..&#x2F;java_embedded_databases&#x2F;blob&#x2F;master&#x2F;src&#x2F;main&#x2F;java&#x2F;domain&#x2F;Price.java&quot;&gt;Price.java&lt;&#x2F;a&gt; is exactly the same as above for SqliteDB. This is one of the benefits of JDBC, which allows us to obtain a connection for a specific database, but from there we can almost always forget about the specific database as long as it supports our SQL queries.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;objectdb&quot;&gt;ObjectDB&lt;&#x2F;h3&gt;
&lt;p&gt;This is an &lt;a href=&quot;https:&#x2F;&#x2F;es.wikipedia.org&#x2F;wiki&#x2F;Base_de_datos_orientada_a_objetos&quot;&gt;object-oriented database&lt;&#x2F;a&gt; that allows access via &lt;a href=&quot;https:&#x2F;&#x2F;es.wikipedia.org&#x2F;wiki&#x2F;Java_Persistence_API&quot;&gt;JPA&lt;&#x2F;a&gt;, a Java standard that aims to retain the advantages of object orientation, which are often lost when dealing with persistence layers.&lt;&#x2F;p&gt;
&lt;p&gt;It is really easy to perform typical database actions, abstracting away from SQL. For example, here is how you would insert an array of Price objects with ObjectDB:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Price&lt;&#x2F;span&gt;&lt;span&gt;... prices) throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;SQLException &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    em.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getTransaction&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Price&lt;&#x2F;span&gt;&lt;span&gt; p : prices) {
&lt;&#x2F;span&gt;&lt;span&gt;        em.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;persist&lt;&#x2F;span&gt;&lt;span&gt;(p);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    em.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getTransaction&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;commit&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you add this ease of use to the fact that its performance in the test results was very good (close to SqliteDB), I can say that I have discovered an embedded database to consider for future Java projects. However, as with JavaDB, it is only useful if you are programming in Java.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-tests&quot;&gt;The Tests&lt;&#x2F;h2&gt;
&lt;p&gt;The tests simply consist of repeatedly performing a series of &lt;a href=&quot;https:&#x2F;&#x2F;es.wikipedia.org&#x2F;wiki&#x2F;CRUD&quot;&gt;CRUD&lt;&#x2F;a&gt; operations. For each database, the test performs a series of inserts, selects, updates, and deletions of objects of the Price class.&lt;&#x2F;p&gt;
&lt;p&gt;I used 100,000 instances of the &lt;a href=&quot;..&#x2F;java_embedded_databases&#x2F;blob&#x2F;master&#x2F;src&#x2F;main&#x2F;java&#x2F;domain&#x2F;Price.java&quot;&gt;Price.java&lt;&#x2F;a&gt; class, the same for each type of database.&lt;&#x2F;p&gt;
&lt;p&gt;For this, I created a &lt;a href=&quot;..&#x2F;java_embedded_databases&#x2F;blob&#x2F;master&#x2F;src&#x2F;main&#x2F;java&#x2F;db&#x2F;DB.java&quot;&gt;DB.java&lt;&#x2F;a&gt; interface that each implementation for each database shares.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public interface &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Price&lt;&#x2F;span&gt;&lt;span&gt;... &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;SQLException&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;createTable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;deleteAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Price&lt;&#x2F;span&gt;&lt;span&gt;... &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;SQLException&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Price&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;selectAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;jdbc-databases&quot;&gt;JDBC Databases&lt;&#x2F;h3&gt;
&lt;p&gt;Only the data needed to obtain the driver and the database connection changes, so all the logic is in the &lt;a href=&quot;..&#x2F;java_embedded_databases&#x2F;blob&#x2F;master&#x2F;src&#x2F;main&#x2F;java&#x2F;db&#x2F;JdbcDb.java&quot;&gt;JdbcDb.java&lt;&#x2F;a&gt; class, from which SqliteDB and DerbyDB inherit.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;source-code&quot;&gt;Source Code&lt;&#x2F;h3&gt;
&lt;p&gt;You can download the source code from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;java_embedded_databases&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It is a Gradle project, so to run the tests you just have to execute: &lt;code&gt;gradle test&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Gradle will automatically download the necessary libraries, compile, and run the tests.&lt;&#x2F;p&gt;
&lt;p&gt;You can also see the execution directly at &lt;a href=&quot;https:&#x2F;&#x2F;travis-ci.org&#x2F;carlosvin&#x2F;java_embedded_databases&quot;&gt;Travis CI&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;travis-ci.org&#x2F;carlosvin&#x2F;java_embedded_databases.svg&quot; alt=&quot;Build Status&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;test-results&quot;&gt;Test Results&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db.DbTest &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; testSqliteDB STANDARD_OUT
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Testing&lt;&#x2F;span&gt;&lt;span&gt; with 100000 elements
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;100000&lt;&#x2F;span&gt;&lt;span&gt; Prices SqliteDB, total time 3455 ms &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Insert:&lt;&#x2F;span&gt;&lt;span&gt;  1508 ms
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Select:&lt;&#x2F;span&gt;&lt;span&gt;  605 ms
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Update:&lt;&#x2F;span&gt;&lt;span&gt;  1319 ms
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Delete:&lt;&#x2F;span&gt;&lt;span&gt;  23 ms
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;----------------------------------------------
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db.DbTest &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; testObjectDB STANDARD_OUT
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Testing&lt;&#x2F;span&gt;&lt;span&gt; with 100000 elements
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;100000&lt;&#x2F;span&gt;&lt;span&gt; Prices ObjectDB, total time 6467 ms &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Insert:&lt;&#x2F;span&gt;&lt;span&gt;  2579 ms
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Select:&lt;&#x2F;span&gt;&lt;span&gt;  1126 ms
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Update:&lt;&#x2F;span&gt;&lt;span&gt;  1698 ms
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Delete:&lt;&#x2F;span&gt;&lt;span&gt;  1064 ms
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;----------------------------------------------
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db.DbTest &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; testDerbyDB STANDARD_OUT
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Testing&lt;&#x2F;span&gt;&lt;span&gt; with 100000 elements
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;100000&lt;&#x2F;span&gt;&lt;span&gt; Prices DerbyDB, total time 24808 ms &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Insert:&lt;&#x2F;span&gt;&lt;span&gt;  11467 ms
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Select:&lt;&#x2F;span&gt;&lt;span&gt;  695 ms
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Update:&lt;&#x2F;span&gt;&lt;span&gt;  6983 ms
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Delete:&lt;&#x2F;span&gt;&lt;span&gt;  5663 ms
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&amp;lt;1&amp;gt; SqliteDB is the fastest.
&amp;lt;2&amp;gt; ObjectDB is twice as slow as SqliteDB.
&amp;lt;3&amp;gt; JavaDB or DerbyDB is the slowest, about 8 times slower than SqliteDB.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Java serialization ways: Performance Comparison</title>
        <published>2014-05-13T00:00:00+00:00</published>
        <updated>2014-05-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/serialization-java-serializable-externalizable/"/>
        <id>https://carlosvin.github.io/serialization-java-serializable-externalizable/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/serialization-java-serializable-externalizable/">&lt;p&gt;Recently I&#x27;ve had to serialize&#x2F;deserialize some data in &lt;a href=&quot;https:&#x2F;&#x2F;www.java.com&quot;&gt;Java&lt;&#x2F;a&gt; binary format. Lately I use &lt;a href=&quot;https:&#x2F;&#x2F;www.json.org&quot;&gt;JSON&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;XML&quot;&gt;XML&lt;&#x2F;a&gt; formats.&lt;&#x2F;p&gt;
&lt;p&gt;I remember that to serialize &lt;a href=&quot;https:&#x2F;&#x2F;www.java.com&quot;&gt;Java&lt;&#x2F;a&gt; objects they must implement the &lt;a href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;7&#x2F;docs&#x2F;api&#x2F;java&#x2F;io&#x2F;Serializable.html&quot;&gt;Serializable&lt;&#x2F;a&gt; interface, but I had also read in Internet other way, implementing the &lt;a href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;7&#x2F;docs&#x2F;api&#x2F;java&#x2F;io&#x2F;Externalizable.html&quot;&gt;Externalizable&lt;&#x2F;a&gt; interface, then, which interface must I implement? It depends on what you want such as everything in the life.&lt;&#x2F;p&gt;
&lt;p&gt;When to use &lt;a href=&quot;https:&#x2F;&#x2F;carlosvin.github.io&#x2F;serialization-java-serializable-externalizable&#x2F;#serializable&quot;&gt;Serializable&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;carlosvin.github.io&#x2F;serialization-java-serializable-externalizable&#x2F;#externalizable&quot;&gt;Externalizable&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;serializable&quot;&gt;Serializable&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;To serialize easily. You have to write less code.&lt;&#x2F;li&gt;
&lt;li&gt;This way has some restrictions: The object to serialize must implement the default constructor (0 args). It must be responsible to manage the parent class attributes.&lt;&#x2F;li&gt;
&lt;li&gt;The performance is not as important, we will see more about that in &lt;a href=&quot;https:&#x2F;&#x2F;carlosvin.github.io&#x2F;serialization-java-serializable-externalizable&#x2F;#performance-tests-serializable-vs-externalizable&quot;&gt;Performance tests (Serializable vs. Externalizable)&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;externalizable&quot;&gt;Externalizable&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;You must implement the serialization&#x2F;deserialization methods, so you have to write more code.&lt;&#x2F;li&gt;
&lt;li&gt;When you cannot use &lt;a href=&quot;https:&#x2F;&#x2F;carlosvin.github.io&#x2F;serialization-java-serializable-externalizable&#x2F;#serializable&quot;&gt;Serializable&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;When you want to improve the performance, as we&#x27;ll see in &lt;a href=&quot;https:&#x2F;&#x2F;carlosvin.github.io&#x2F;serialization-java-serializable-externalizable&#x2F;#performance-tests-serializable-vs-externalizable&quot;&gt;Performance tests (Serializable vs. Externalizable)&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;If you have to manage the serialization of parent class attributes, then I recommend you use &lt;a href=&quot;https:&#x2F;&#x2F;carlosvin.github.io&#x2F;serialization-java-serializable-externalizable&#x2F;#externalizable&quot;&gt;Externalizable&lt;&#x2F;a&gt;, because we&#x27;ll avoid a weird private methods overriding.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;writeObject&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ObjectOutputStream&lt;&#x2F;span&gt;&lt;span&gt; oos)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readObject&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ObjectInputStream&lt;&#x2F;span&gt;&lt;span&gt; ois)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;performance-tests-serializable-vs-externalizable&quot;&gt;Performance tests (Serializable vs. Externalizable)&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;7&#x2F;docs&#x2F;api&#x2F;java&#x2F;io&#x2F;Serializable.html&quot;&gt;Serializable&lt;&#x2F;a&gt;: Java, through introspection, guesses the types of class attributes to know how to serialize&#x2F;deserialize them, but this &quot;magic&quot; is not free, it has a performance penalty.&lt;&#x2F;p&gt;
&lt;p&gt;When we use &lt;a href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;7&#x2F;docs&#x2F;api&#x2F;java&#x2F;io&#x2F;Externalizable.html&quot;&gt;Externalizable&lt;&#x2F;a&gt; interface, we decide how to serialize&#x2F;deserialize, namely we have to write the code that does it. We&#x27;ve lost ease, but also we avoid that &lt;a href=&quot;https:&#x2F;&#x2F;www.java.com&quot;&gt;Java&lt;&#x2F;a&gt; does some tasks, so if we override the methods properly, we&#x27;ll get a performance improvement.&lt;&#x2F;p&gt;
&lt;p&gt;To know how big is the performance difference between both interfaces, I&#x27;ve written a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;serializations-performance-java&quot;&gt;tiny example in which we serialize an object with 2 collections with 100000 elements each one&lt;&#x2F;a&gt;. Here you can find the &lt;a href=&quot;http:&#x2F;&#x2F;carlosvin.github.io&#x2F;serializations-performance-java&#x2F;classes&#x2F;com.github.carlosvin.contacts.SerializationTest.html&quot;&gt;tests execution results&lt;&#x2F;a&gt;. There are 3 different implementations:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;implementing-serializable&quot;&gt;Implementing Serializable&lt;&#x2F;h3&gt;
&lt;p&gt;As we mentioned above, &lt;a href=&quot;https:&#x2F;&#x2F;www.java.com&quot;&gt;Java&lt;&#x2F;a&gt; has to guess certain things. During this process it sacrifices some of performance (slowest way), in exchange we get really simple source code, the class to serialize just has to implement the &lt;a href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;7&#x2F;docs&#x2F;api&#x2F;java&#x2F;io&#x2F;Serializable.html&quot;&gt;Serializable&lt;&#x2F;a&gt; interface.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Contacts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Serializable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;serializing: 1133 millisecond&lt;&#x2F;li&gt;
&lt;li&gt;deserializing: 506 millisecond&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;implementing-externalizable-wrong-way&quot;&gt;Implementing Externalizable (wrong way)&lt;&#x2F;h3&gt;
&lt;p&gt;If the class implements &lt;a href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;7&#x2F;docs&#x2F;api&#x2F;java&#x2F;io&#x2F;Externalizable.html&quot;&gt;Externalizable&lt;&#x2F;a&gt;, we must tell to &lt;a href=&quot;https:&#x2F;&#x2F;www.java.com&quot;&gt;Java&lt;&#x2F;a&gt; how it has to serialize&#x2F;deserialize the class attributes. We just have to be careful, because if we did it bad, then we&#x27;ll get the worst of the both worlds: more complex implementation and bad performance, i.e: If we serialize&#x2F;deserialize complex class attributes (like collections), &lt;a href=&quot;https:&#x2F;&#x2F;www.java.com&quot;&gt;Java&lt;&#x2F;a&gt; will also have to guess many things about the attributes type.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readExternal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ObjectInput&lt;&#x2F;span&gt;&lt;span&gt; in) throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IOException&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ClassNotFoundException &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setEmails&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) in.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readObject&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setPhones&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) in.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readObject&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;writeExternal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ObjectOutput&lt;&#x2F;span&gt;&lt;span&gt; out) throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IOException &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;writeObject&lt;&#x2F;span&gt;&lt;span&gt;(emails);
&lt;&#x2F;span&gt;&lt;span&gt;  out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;writeObject&lt;&#x2F;span&gt;&lt;span&gt;(phones);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;serializing: 737 millisecond&lt;&#x2F;li&gt;
&lt;li&gt;deserializing: 367 millisecond&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;implementing-externalizable-right-way&quot;&gt;Implementing Externalizable (right way)&lt;&#x2F;h3&gt;
&lt;p&gt;If we serialize one by one the collection elements, then we&#x27;ll save more time, because &lt;a href=&quot;https:&#x2F;&#x2F;www.java.com&quot;&gt;Java&lt;&#x2F;a&gt; serializes simple types, this way avoids guessing things that we actually know.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readExternal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ObjectInput&lt;&#x2F;span&gt;&lt;span&gt; in) throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IOException&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ClassNotFoundException &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  emails.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  phones.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; nEmails = in.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readInt&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; nEmails; i++) {
&lt;&#x2F;span&gt;&lt;span&gt;    emails.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(in.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readUTF&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; nPhones = in.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readInt&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; nPhones; i++) {
&lt;&#x2F;span&gt;&lt;span&gt;    phones.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(in.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readUTF&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;writeExternal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ObjectOutput&lt;&#x2F;span&gt;&lt;span&gt; out) throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IOException &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;writeInt&lt;&#x2F;span&gt;&lt;span&gt;(emails.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; e : emails) {
&lt;&#x2F;span&gt;&lt;span&gt;    out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;writeUTF&lt;&#x2F;span&gt;&lt;span&gt;(e);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;writeInt&lt;&#x2F;span&gt;&lt;span&gt;(phones.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; p : phones) {
&lt;&#x2F;span&gt;&lt;span&gt;    out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;writeUTF&lt;&#x2F;span&gt;&lt;span&gt;(p);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;serializing: 204 millisecond&lt;&#x2F;li&gt;
&lt;li&gt;deserializing: 92 millisecond&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We&#x27;ve gained performance at expense of write more code.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;results-analysis&quot;&gt;Results Analysis&lt;&#x2F;h3&gt;
&lt;p&gt;We don&#x27;t gain performance due to use an interface or the other one.&lt;&#x2F;p&gt;
&lt;p&gt;We gain performance because &lt;a href=&quot;https:&#x2F;&#x2F;carlosvin.github.io&#x2F;serialization-java-serializable-externalizable&#x2F;#externalizable&quot;&gt;Externalizable&lt;&#x2F;a&gt; interface forces us to implement ourselves the guessing code, so &lt;a href=&quot;https:&#x2F;&#x2F;www.java.com&quot;&gt;Java&lt;&#x2F;a&gt; doesn&#x27;t have to do that.&lt;&#x2F;p&gt;
&lt;p&gt;As we have seen at &lt;a href=&quot;https:&#x2F;&#x2F;carlosvin.github.io&#x2F;serialization-java-serializable-externalizable&#x2F;#implementing-externalizable-wrong-way&quot;&gt;Implementing Externalizable (wrong way)&lt;&#x2F;a&gt;, si no tenemos cuidado, conseguiremos una mejora poco significativa a costa de complicar nuestro cÃ³digo fuente.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;carlosvin.github.io&#x2F;serializations-performance-java&#x2F;classes&#x2F;com.github.carlosvin.contacts.SerializationTest.html&quot;&gt;Test results&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carlosvin&#x2F;serializations-performance-java&#x2F;&quot;&gt;Code in Github&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Mutex C++</title>
        <published>2014-04-24T00:00:00+00:00</published>
        <updated>2014-04-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/cpp-mutex/"/>
        <id>https://carlosvin.github.io/cpp-mutex/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/cpp-mutex/">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;C++11&quot;&gt;C++11&lt;&#x2F;a&gt; has added many improvements to help us developing multi-thread systems. I&#x27;m going to talk about &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mutex&quot;&gt;Mutex&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;clang.llvm.org&#x2F;cxx_status.html&quot;&gt;previous C++11 compiler versions&lt;&#x2F;a&gt;, we can get a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;POSIX_Threads&quot;&gt;pthread&lt;&#x2F;a&gt; mutex, but we must initialize it and destroy it in old C style, in the end you must do more things than just lock&#x2F;unlock.&lt;&#x2F;p&gt;
&lt;p&gt;With &lt;a href=&quot;https:&#x2F;&#x2F;en.cppreference.com&#x2F;w&#x2F;cpp&#x2F;thread&#x2F;mutex&quot;&gt;C++11 Mutex Class&lt;&#x2F;a&gt;, we just lock&#x2F;unlock the object.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mutex&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;std::mutex mtx;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;do_something &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  mtx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; critical section
&lt;&#x2F;span&gt;&lt;span&gt;  mtx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unlock&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or you can just use Mutex with a &lt;a href=&quot;https:&#x2F;&#x2F;en.cppreference.com&#x2F;w&#x2F;cpp&#x2F;thread&#x2F;lock_guard&quot;&gt;generic lock guard&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;&#x2F;strong&gt; If you still have to stick to previous C++11 compiler versions, maybe it is useful to you a wrapper class I created that helps you to work with pthread mutex, so you just have to lock&#x2F;unlock the Mutex object: &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;carlosvin&#x2F;11257689&quot;&gt;Gist code&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Android Studio Portable Download</title>
        <published>2013-10-29T00:00:00+00:00</published>
        <updated>2013-10-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/android-studio-portable-download/"/>
        <id>https://carlosvin.github.io/android-studio-portable-download/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/android-studio-portable-download/">&lt;p&gt;If you want to use &lt;a href=&quot;https:&#x2F;&#x2F;developer.android.com&#x2F;studio&quot;&gt;Android Studio&lt;&#x2F;a&gt; without installation, as a portable software, here you have the link to &lt;a href=&quot;https:&#x2F;&#x2F;developer.android.com&#x2F;studio&#x2F;preview&#x2F;&quot;&gt;last portable version of Android Studio&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Debugging library generated with libtool</title>
        <published>2013-02-01T15:30:00+00:00</published>
        <updated>2013-02-01T15:30:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/debug-libtool-lib/"/>
        <id>https://carlosvin.github.io/debug-libtool-lib/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/debug-libtool-lib/">&lt;p&gt;When debugging an executable that uses a library generated with &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;libtool&#x2F;libtool.html&quot;&gt;libtool&lt;&#x2F;a&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, you might encounter the following error:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; gdb .&#x2F;tests-mylib
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tests-mylib&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; not in executable format: File format not recognized
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;libmylib.so&lt;&#x2F;code&gt;: is a dynamic library generated with libtool.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;tests-mylib&lt;&#x2F;code&gt;: is an executable that uses the mylib library.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For those thinking I forgot to add the &lt;code&gt;-g&lt;&#x2F;code&gt; compilation option, this error occurs even when using &lt;code&gt;-g&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The error is due to the fact that we are trying to execute a script generated by libtool, which is a wrapper over the actual program to facilitate its execution&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;to-debug-our-test-program-tests-mylib&quot;&gt;To debug our test program &lt;code&gt;tests-mylib&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;libtool --mode&lt;&#x2F;span&gt;&lt;span&gt;=execute gdb tests-mylib
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;Tool that belongs to the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;GNU_Build_System&quot;&gt;Autotools&lt;&#x2F;a&gt; used to create portable software libraries.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;More information in &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;libtool&#x2F;manual&#x2F;libtool.html#Debugging-executables&quot;&gt;libtool documentation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>C++ Struct memory alignment</title>
        <published>2012-11-26T00:00:00+00:00</published>
        <updated>2012-11-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/cpp-pragma-pack/"/>
        <id>https://carlosvin.github.io/cpp-pragma-pack/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/cpp-pragma-pack/">&lt;p&gt;A C++ struct is an element that groups attributes with different types so we can manipulate them all together using same reference. It is like a class with public visibility by default for functions and attributes.&lt;&#x2F;p&gt;
&lt;p&gt;If we want to work in a lower level, closer to machine, it might be useful to understand how that data structure is stored in memory and how to control that mapping.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;struct-example&quot;&gt;Struct example&lt;&#x2F;h2&gt;
&lt;p&gt;It has two attributes: an integer (4 bytes) and a boolean (1 byte).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;SampleStruct {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; flag;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; timeout;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we get the instance size using &lt;code&gt;sizeof&lt;&#x2F;code&gt; we should get 5 bytes size and memory would be like:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;carlosvin.github.io&#x2F;cpp-pragma-pack&#x2F;.&#x2F;5b.png&quot; alt=&quot;5 bytes struct which uses 5 bytes in memory&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;But&lt;&#x2F;strong&gt; is not that simple, memory alignment depends on compiler and system. We will learn how to control compiler alignment policy, so we can avoid getting unexpected allocation memory sizes.&lt;&#x2F;p&gt;
&lt;p&gt;For example, in my local host, if I get the &lt;code&gt;sizeof&lt;&#x2F;code&gt; the previous structure without &lt;code&gt;pragma&lt;&#x2F;code&gt; declarations, &lt;strong&gt;I get a 8 bytes size&lt;&#x2F;strong&gt;. We are getting 8 Bytes instead of expected 5 Bytes because the compiler allocates more memory at the end of structure so it fits in 2n bytes blocks. Memory actually looks like:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;carlosvin.github.io&#x2F;cpp-pragma-pack&#x2F;.&#x2F;8b.png&quot; alt=&quot;5 bytes structure that actually spends 8 bytes in memory&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Example output:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SampleStruct
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag:&lt;&#x2F;span&gt;&lt;span&gt; 1 Bytes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeout:&lt;&#x2F;span&gt;&lt;span&gt; 4 Bytes
&lt;&#x2F;span&gt;&lt;span&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt; Bytes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span&gt; struct:  8 Bytes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;TIP: If we want to know the exact structure size we have to specify compiler how to align the memory, to do so we have &lt;code&gt;#pragma pack(n)&lt;&#x2F;code&gt; directive.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pragma-pack-directive-in-c-struct&quot;&gt;&lt;code&gt;#pragma pack&lt;&#x2F;code&gt; directive in C++ struct&lt;&#x2F;h2&gt;
&lt;p&gt;It is a preprocessor directive to indicate to compiler how to align data in memory.&lt;&#x2F;p&gt;
&lt;p&gt;Example with different memory alignment configurations:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; pack (1)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;SampleStructPack1 {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; flag;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; timeout;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; pack(0)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; pack (2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;SampleStructPack2 {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; flag;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; timeout;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; pack(0)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; pack (4)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;SampleStructPack4 {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; flag;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; timeout;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; pack(0)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;SampleStruct {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; flag;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; timeout;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Example output:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SampleStructPack1
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag:&lt;&#x2F;span&gt;&lt;span&gt; 1 Bytes
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeout:&lt;&#x2F;span&gt;&lt;span&gt; 4Bytes
&lt;&#x2F;span&gt;&lt;span&gt; =
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5Bytes
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span&gt; struct:  5 Bytes
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SampleStructPack2
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag:&lt;&#x2F;span&gt;&lt;span&gt; 1 Bytes
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeout:&lt;&#x2F;span&gt;&lt;span&gt; 4Bytes
&lt;&#x2F;span&gt;&lt;span&gt; =
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5Bytes
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span&gt; struct:  6 Bytes
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SampleStructPack4
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag:&lt;&#x2F;span&gt;&lt;span&gt; 1 Bytes
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeout:&lt;&#x2F;span&gt;&lt;span&gt; 4Bytes
&lt;&#x2F;span&gt;&lt;span&gt; =
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5Bytes
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span&gt; struct:  8 Bytes
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SampleStruct
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag:&lt;&#x2F;span&gt;&lt;span&gt; 1 Bytes
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeout:&lt;&#x2F;span&gt;&lt;span&gt; 4Bytes
&lt;&#x2F;span&gt;&lt;span&gt; =
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5Bytes
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span&gt; struct:  8 Bytes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;SampleStructPack1 &lt;code&gt;#pragma pack (1)&lt;&#x2F;code&gt;: It allocates 1 byte memory block, so our sample struct fits perfectly, in this case it is true that &lt;code&gt;4 + 1 = 5&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;SampleStructPack2 &lt;code&gt;#pragma pack (2)&lt;&#x2F;code&gt;: Minimum block size is 2 bytes. Integer attribute fits because it just needs 2 blocks of 2 Bytes. Boolean attribute needs just 1 Byte, but minimum block size is 2 Bytes, that&#x27;s why total allocated memory is 6 bytes, &lt;code&gt;4 + 2 = 6&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;SampleStructPack4 &lt;code&gt;#pragma pack (4)&lt;&#x2F;code&gt;: It is like previous one, but in this case we are wasting more memory for boolean attribute, it needs 1 Byte, but we are allocating 4 Bytes.&lt;&#x2F;li&gt;
&lt;li&gt;SampleStruct (default compiler alignment): As you can see it behaves exactly like &lt;code&gt;#pragma pack (4)&lt;&#x2F;code&gt;, so we can deduce it is the default compiler alignment.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;&#x2F;strong&gt; Why don&#x27;t we always use smallest memory alignment (&lt;code&gt;#pragma pack (1)&lt;&#x2F;code&gt;) so we can save more memory?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;WARNING:&lt;&#x2F;strong&gt; Because of performance loss.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;performance-test&quot;&gt;Performance test&lt;&#x2F;h2&gt;
&lt;p&gt;The test will allocate same number of elements in arrays for each structure type (1, 2, 4).&lt;&#x2F;p&gt;
&lt;p&gt;Example output:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SampleStructPack1:&lt;&#x2F;span&gt;&lt;span&gt; 500000000000000000 bytes allocated in 94311 nanoseconds
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SampleStructPack2:&lt;&#x2F;span&gt;&lt;span&gt; 600000000000000000 bytes allocated in 1777 nanoseconds
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SampleStructPack4:&lt;&#x2F;span&gt;&lt;span&gt; 800000000000000000 bytes allocated in 1519 nanoseconds
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, the smallest memory alignment spends more time allocating and releasing memory.&lt;&#x2F;p&gt;
&lt;p&gt;Performance test source code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;chrono&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; pack (1)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;SampleStructPack1 {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; flag;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; timeout;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; pack(0)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; pack (2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;SampleStructPack2 {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; flag;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; timeout;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; pack(0)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; pack (4)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;SampleStructPack4 {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; flag;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; timeout;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span&gt; pack(0)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;SampleStruct {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; flag;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; timeout;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static const long&lt;&#x2F;span&gt;&lt;span&gt; MAX_ELEMENTS = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100000000000000000&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std::chrono;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;allocate1&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    SampleStructPack1 elements [MAX_ELEMENTS];
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SampleStructPack1: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; sizeof(elements) &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; bytes allocated&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;allocate2&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    SampleStructPack2 elements [MAX_ELEMENTS];
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SampleStructPack2: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; sizeof(elements) &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; bytes allocated&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;allocate4&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    SampleStructPack4 elements [MAX_ELEMENTS];
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SampleStructPack4: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; sizeof(elements) &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; bytes allocated&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;chrono1&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; begin = high_resolution_clock::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;() ;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allocate1&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; in &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;duration_cast&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;nanoseconds&amp;gt;(high_resolution_clock::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;() - begin).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; nanoseconds&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;chrono2&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; begin = high_resolution_clock::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;() ;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allocate2&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; in &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;duration_cast&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;nanoseconds&amp;gt;(high_resolution_clock::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;() - begin).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; nanoseconds&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;chrono4&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; begin = high_resolution_clock::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;() ;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allocate4&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; in &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;duration_cast&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;nanoseconds&amp;gt;(high_resolution_clock::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;() - begin).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; nanoseconds&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;[]) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chrono1&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chrono2&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chrono4&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Git Proxy Configuration</title>
        <published>2012-11-15T12:00:00+00:00</published>
        <updated>2012-11-15T12:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/git-proxy-config/"/>
        <id>https://carlosvin.github.io/git-proxy-config/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/git-proxy-config/">&lt;p&gt;Working with Git through a corporate proxy can be challenging. Here&#x27;s a quick guide to configure Git proxy settings.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;configure-http-proxy&quot;&gt;Configure HTTP Proxy&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --global&lt;&#x2F;span&gt;&lt;span&gt; http.proxy http:&#x2F;&#x2F;&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;ip_host&amp;gt;:&amp;lt;port&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;configure-https-proxy&quot;&gt;Configure HTTPS Proxy&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --global&lt;&#x2F;span&gt;&lt;span&gt; https.proxy https:&#x2F;&#x2F;&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;ip_host&amp;gt;:&amp;lt;port&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;disable-proxy&quot;&gt;Disable Proxy&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --global --unset&lt;&#x2F;span&gt;&lt;span&gt; http.proxy
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --global --unset&lt;&#x2F;span&gt;&lt;span&gt; https.proxy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;parameters&quot;&gt;Parameters&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;username&lt;&#x2F;code&gt;: Proxy username&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;password&lt;&#x2F;code&gt;: Proxy password&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ip_host&lt;&#x2F;code&gt;: Proxy server address&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;port&lt;&#x2F;code&gt;: Proxy server port&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;verify-configuration&quot;&gt;Verify Configuration&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --global --get&lt;&#x2F;span&gt;&lt;span&gt; http.proxy
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --global --get&lt;&#x2F;span&gt;&lt;span&gt; https.proxy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;more-secure-environment-variables&quot;&gt;More secure: Environment Variables&lt;&#x2F;h2&gt;
&lt;p&gt;Using environment variables is a more secure method, as entering credentials directly in commands can expose them in your shell history. Instead, set your proxy credentials using environment variables:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HTTP_PROXY&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;ip_host&amp;gt;:&amp;lt;port&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HTTPS_PROXY&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;ip_host&amp;gt;:&amp;lt;port&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note: Setting environment variables in the shell will also save them in the history, so this approach is more secure if you just set the environment variables in a file like &lt;code&gt;~&#x2F;.bash_profile&lt;&#x2F;code&gt; (if you are using &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bash_(Unix_shell)&quot;&gt;bash shell&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;For more details, see the &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;docs&#x2F;git-config&quot;&gt;official Git configuration documentation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Security Note:&lt;&#x2F;strong&gt; Storing credentials in environment variables or in files like &lt;code&gt;~&#x2F;.bash_profile&lt;&#x2F;code&gt; is not inherently secure, as these files are stored in plain text and can be read by anyone with access to your home directory. For better security, consider using &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;docs&#x2F;git-credential&quot;&gt;Git credential helpers&lt;&#x2F;a&gt; or a dedicated credential manager. If you must store sensitive data in profile files, restrict access with &lt;code&gt;chmod 600 ~&#x2F;.bash_profile&lt;&#x2F;code&gt; to limit who can read the file.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Replace punctuation symbols in Python</title>
        <published>2012-10-23T00:00:00+00:00</published>
        <updated>2012-05-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/remove-replace-punctuation-py/"/>
        <id>https://carlosvin.github.io/remove-replace-punctuation-py/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/remove-replace-punctuation-py/">&lt;p&gt;Below is an explanation of how to replace punctuation symbols with whitespace in Python.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;re, string
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;remove_punctuation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; % re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;escape&lt;&#x2F;span&gt;&lt;span&gt;(string.punctuation), &amp;#39; &amp;#39;, text)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Calling the previous function:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;remove_punctuation&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;El perro, de San Roque, no tiene rabo; ni nunca lo ha tenido.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;We will get this output:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;El perro  de San Roque  no tiene rabo  ni nunca lo ha tenido &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We could make the function a little bit more generic to replace punctuation symbols with any other string.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;re, string
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;replace_punctuation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; % re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;escape&lt;&#x2F;span&gt;&lt;span&gt;(string.punctuation), replace, text)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Calling the function to replace punctuation symbols by &quot;[stop]&quot;:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace_punctuation&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;El perro, de San Roque, no tiene rabo; ni nunca lo ha tenido.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[stop]&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# output
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;El perro[stop] de San Roque[stop] no tiene rabo[stop] ni nunca lo ha tenido[stop]&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Text Normalization in Python</title>
        <published>2012-10-02T18:00:00+00:00</published>
        <updated>2012-10-02T18:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/normalize-text-py/"/>
        <id>https://carlosvin.github.io/normalize-text-py/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/normalize-text-py/">&lt;p&gt;In many languages, such as Spanish, there are characters that do not have &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;ASCII&quot;&gt;ASCII&lt;&#x2F;a&gt; representation, such as &lt;strong&gt;Ã¡&lt;&#x2F;strong&gt;, which does have representation in &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unicode&quot;&gt;Unicode&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To avoid problems or for simplification, an equivalence has been established between &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unicode&quot;&gt;Unicode&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;ASCII&quot;&gt;ASCII&lt;&#x2F;a&gt; characters. Below I&#x27;ll show you a piece of &lt;a href=&quot;https:&#x2F;&#x2F;www.python.org&quot;&gt;Python&lt;&#x2F;a&gt; code that performs this conversion.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# -*- coding: utf-8 -*-
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;unicodedata &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;normalize
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;normalize_text&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;normalize&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NFKD&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, text)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# (1)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ASCII&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ignore&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# (2)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;We specify the normal form that we apply in the normalization. In this case &lt;code&gt;NFKD&lt;&#x2F;code&gt;. More information about &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unicode_equivalence#Normal_forms&quot;&gt;normal form types&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;We convert the normalization result to ASCII. In case a character is erroneous, it will simply be ignored.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;running-the-function&quot;&gt;Running the function&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;normalize_text&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;aÃ¡aÃ¡ eÃ©eÃ© iÃ­iÃ­ oÃ³oÃ³ Ã±nÃ±n AÃ€AÃ€&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;aaaa eeee iiii oooo nnnn AAAA&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Remove HTML Tags</title>
        <published>2012-10-02T11:30:00+00:00</published>
        <updated>2012-10-02T11:30:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/delete-html-tags-py-django/"/>
        <id>https://carlosvin.github.io/delete-html-tags-py-django/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/delete-html-tags-py-django/">&lt;p&gt;Below we&#x27;ll see how to remove HTML tags from a character string.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;with-python&quot;&gt;With Python&lt;&#x2F;h2&gt;
&lt;p&gt;Function responsible for removing HTML tags:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;main-py&quot;&gt;main.py&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;re
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;strip_tags&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;gt;]&lt;&#x2F;span&gt;&lt;span&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&amp;#39;, value)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s test an HTML fragment with the &lt;code&gt;strip_tags&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;example-usage&quot;&gt;Example usage&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;re
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;strip_tags&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;gt;]&lt;&#x2F;span&gt;&lt;span&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&amp;#39;, value)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;html_text = &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    &amp;lt;!DOCTYPE HTML&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    &amp;lt;html&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        &amp;lt;head&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            &amp;lt;title&amp;gt;Title&amp;lt;&#x2F;title&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        &amp;lt;&#x2F;head&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        &amp;lt;body&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            &amp;lt;p&amp;gt;Paragraph&amp;lt;&#x2F;p&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        &amp;lt;&#x2F;body&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    &amp;lt;&#x2F;html&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strip_tags&lt;&#x2F;span&gt;&lt;span&gt;(html_text))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we run the script we get the following result:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Title
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Paragraph
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If it was easy with &lt;a href=&quot;https:&#x2F;&#x2F;www.python.org&quot;&gt;Python&lt;&#x2F;a&gt;, let&#x27;s see how it works with &lt;a href=&quot;https:&#x2F;&#x2F;www.djangoproject.com&quot;&gt;Django&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;django&quot;&gt;Django&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.djangoproject.com&quot;&gt;Django&lt;&#x2F;a&gt; offers a function for this: &lt;a href=&quot;https:&#x2F;&#x2F;docs.djangoproject.com&#x2F;en&#x2F;3.0&#x2F;ref&#x2F;utils&#x2F;#django.utils.html.strip_tags&quot;&gt;&lt;code&gt;strip_tags&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;First, you just need to install the library: &lt;code&gt;pip install django&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;using-django-s-strip-tags&quot;&gt;Using Django&#x27;s strip_tags&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;django.utils.html &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;strip_tags
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;html_text = &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    &amp;lt;!DOCTYPE HTML&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    &amp;lt;html&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        &amp;lt;head&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            &amp;lt;title&amp;gt;Title&amp;lt;&#x2F;title&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        &amp;lt;&#x2F;head&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        &amp;lt;body&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            &amp;lt;p&amp;gt;Paragraph&amp;lt;&#x2F;p&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        &amp;lt;&#x2F;body&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    &amp;lt;&#x2F;html&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strip_tags&lt;&#x2F;span&gt;&lt;span&gt;(html_text))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Remove orphaned packages (Linux)</title>
        <published>2012-10-02T00:00:00+00:00</published>
        <updated>2012-10-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Carlos Martin Sanchez
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://carlosvin.github.io/linux-remove-orphaned-files/"/>
        <id>https://carlosvin.github.io/linux-remove-orphaned-files/</id>
        
        <content type="html" xml:base="https://carlosvin.github.io/linux-remove-orphaned-files/">&lt;p&gt;When we install a package in most Linux distributions, the package system installs other packages needed by the package that we are installing. If we uninstall the package, its dependencies might not be uninstalled; these unused dependencies are called orphaned packages.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see how to remove orphaned packages.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;archlinux&quot;&gt;Archlinux&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pacman -Rsn &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pacman -Qdtq&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;How does the command work?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pacman -Qdt&lt;&#x2F;code&gt; lists all orphaned packages&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pacman -Rsn&lt;&#x2F;code&gt; uninstalls the listed packages&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;debian&quot;&gt;Debian&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apt-get&lt;&#x2F;span&gt;&lt;span&gt; remove&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --purge &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deborphan&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
</feed>
