{"type":"data","nodes":[null,{"type":"data","data":[{"path":1,"lang":2,"translations":3,"version":14},"/langs/es/posts/rest-service-go-vs-java/","es",{"lang":2,"author":4,"siteName":5,"siteDescription":6,"categories":7,"Categories":8,"RecentPosts":9,"NoPosts":10,"SubscribeTo":11,"AboutMe":12,"AllPosts":13},"Carlos Martin Sanchez","Carlos dice bla bla","Qué está pasando por mi cabeza y alrededores","categorías","Categorías","Últimas entradas","No hay entradas","Suscríbete al feed","Sobre mi","Todas las entradas","1.0.1"],"uses":{"params":["lang"],"url":1},"slash":"always"},{"type":"data","data":[{"html":1,"props":2,"jsonLd":21},"\u003Cdiv id=\"toc\" class=\"toc\">\n\u003Cdiv id=\"toctitle\">Table of Contents\u003C/div>\n\u003Cul class=\"sectlevel1\">\n\u003Cli>\u003Ca href=\"#_actual_project_examples\">Actual project examples\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_the_ecosystems\">The Ecosystems\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_routing\">Routing\u003C/a>\n\u003Cul class=\"sectlevel2\">\n\u003Cli>\u003Ca href=\"#_go_without_framework\">Go - Without framework\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_go_gin_framework\">Go - Gin Framework\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_java_spring_io\">Java + Spring.io\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#_validations\">Validations\u003C/a>\n\u003Cul class=\"sectlevel2\">\n\u003Cli>\u003Ca href=\"#_go_gin_framework_2\">Go - Gin Framework\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_java_spring_io_2\">Java + Spring.io\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_filtering_and_middleware\">Filtering and Middleware\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#_dependency_injection_ioc\">Dependency injection / IoC\u003C/a>\n\u003Cul class=\"sectlevel2\">\n\u003Cli>\u003Ca href=\"#_spring_ioc\">Spring IoC\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_go\">Go\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#_testing\">Testing\u003C/a>\n\u003Cul class=\"sectlevel2\">\n\u003Cli>\u003Ca href=\"#_unit_tests\">Unit tests\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_integration_tests\">Integration tests\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#_performance\">Performance\u003C/a>\n\u003Cul class=\"sectlevel2\">\n\u003Cli>\u003Ca href=\"#_memory\">Memory\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_speed\">Speed\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#_conclusions\">Conclusions\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv id=\"preamble\">\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Lately I&#8217;ve been working with two different technology stacks almost in parallel, in both cases we were using them to develop \u003Ca href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\" rel=\"noopener\">REST\u003C/a> services.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>During this time I&#8217;ve come up with some conclusions and opinions I&#8217;d like to share.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>A disclaimer, few months ago, I had several years of experience with Java and 0 days of professional experience with Golang.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_actual_project_examples\">Actual project examples\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Few months ago I created \u003Ca href=\"https://covid-rest.appspot.com/docs\" target=\"_blank\" rel=\"noopener\">an API to extract and structure COVID-19 data\u003C/a> from \u003Ca href=\"https://www.ecdc.europa.eu/en/publications-data/download-todays-data-geographic-distribution-covid-19-cases-worldwide\" target=\"_blank\" rel=\"noopener\">ECDC website\u003C/a>. I developed it in \u003Ca href=\"https://spring.io/guides/gs/rest-service\" target=\"_blank\" rel=\"noopener\">Spring Boot (REST)\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Few months later I had the luck of work on my first professional project in \u003Ca href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go\u003C/a> and I decided to create a port of \u003Ca href=\"https://covid-rest.appspot.com/docs\" target=\"_blank\" rel=\"noopener\">the API to extract COVID-19 data\u003C/a> in \u003Ca href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go\u003C/a>, just for learning and for fun.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Now we have two REST services, almost functionally identical, but developed in two different tech stacks, so we can easily compare some relevant aspects of both.\u003C/p>\n\u003C/div>\n\u003Ctable class=\"tableblock frame-all grid-all stretch\">\n\u003Ccaption class=\"title\">Table 1. Source code for the 2 REST services implementations\u003C/caption>\n\u003Ccolgroup>\n\u003Ccol style=\"width: 50%;\">\n\u003Ccol style=\"width: 50%;\">\n\u003C/colgroup>\n\u003Cthead>\n\u003Ctr>\n\u003Cth class=\"tableblock halign-left valign-top\">\u003Ca href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java\u003C/a> + \u003Ca href=\"https://spring.io/guides/gs/rest-service\" target=\"_blank\" rel=\"noopener\">Spring Boot (REST)\u003C/a>\u003C/th>\n\u003Cth class=\"tableblock halign-left valign-top\">\u003Ca href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go\u003C/a> + \u003Ca href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" rel=\"noopener\">Gin framework\u003C/a>\u003C/th>\n\u003C/tr>\n\u003C/thead>\n\u003Ctbody>\n\u003Ctr>\n\u003Ctd class=\"tableblock halign-left valign-top\">\u003Cp class=\"tableblock\">\u003Ca href=\"https://github.com/carlosvin/covid-rest\" class=\"bare\">https://github.com/carlosvin/covid-rest\u003C/a>\u003C/p>\u003C/td>\n\u003Ctd class=\"tableblock halign-left valign-top\">\u003Cp class=\"tableblock\">\u003Ca href=\"https://github.com/carlosvin/covid-rest-go\" class=\"bare\">https://github.com/carlosvin/covid-rest-go\u003C/a>\u003C/p>\u003C/td>\n\u003C/tr>\n\u003C/tbody>\n\u003C/table>\n\u003Cdiv class=\"admonitionblock note\">\n\u003Ctable>\n\u003Ctr>\n\u003Ctd class=\"icon\">\n\u003Cdiv class=\"title\">Note\u003C/div>\n\u003C/td>\n\u003Ctd class=\"content\">\nI actually created that \u003Ca href=\"https://covid-rest.appspot.com/docs\">COVID-19 data REST API\u003C/a> to be the data source for the \u003Ca href=\"https://covid-stats-pwa.netlify.app\" target=\"_blank\" rel=\"noopener\">COVID19-Stats App\u003C/a>, a \u003Ca href=\"https://web.dev/progressive-web-apps\" target=\"_blank\" rel=\"noopener\">PWA\u003C/a> built with \u003Ca href=\"https://svelte.dev\" target=\"_blank\" rel=\"noopener\">Svelte\u003C/a>, but that&#8217;s another topic.\n\u003C/td>\n\u003C/tr>\n\u003C/table>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_the_ecosystems\">The Ecosystems\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>If you want to create a \u003Ca href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\" rel=\"noopener\">REST\u003C/a> service just in plain Java you will have extra work to do, in Golang a little bit less. That&#8217;s why we use framework, because they&#8217;ve already solved many common problems for us.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>For this comparison I am going to use \u003Ca href=\"https://spring.io/guides/gs/rest-service\" target=\"_blank\" rel=\"noopener\">Spring Boot (REST)\u003C/a> for \u003Ca href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java\u003C/a> and \u003Ca href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" rel=\"noopener\">Gin framework\u003C/a> for \u003Ca href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go\u003C/a>, but in both languages there are a lot of production ready nice options.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_routing\">Routing\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_go_without_framework\">Go - Without framework\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Go uses the concept of \u003Ca href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\" target=\"_blank\" rel=\"noopener\">HTTP\u003C/a> multiplexer or router. You can specify routes using patterns and link those routes to handlers. The router will decide which handler has to execute the request based on the path received.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">router.go file\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-go\" data-lang=\"go\">\u003Cspan class=\"hljs-keyword\">package\u003C/span> main\n\n\u003Cspan class=\"hljs-keyword\">import\u003C/span> (\n\t\u003Cspan class=\"hljs-string\">&quot;log&quot;\u003C/span>\n\t\u003Cspan class=\"hljs-string\">&quot;net/http&quot;\u003C/span>\n)\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-keyword\">func\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\u003C/span> {\n\trouter := http.NewServeMux()\n\trouter.Handle(\u003Cspan class=\"hljs-string\">&quot;/redirect&quot;\u003C/span>, http.RedirectHandler(\u003Cspan class=\"hljs-string\">&quot;https://carlosvin.github.io/&quot;\u003C/span>, \u003Cspan class=\"hljs-number\">307\u003C/span>))\n\trouter.HandleFunc(\u003Cspan class=\"hljs-string\">&quot;/hello&quot;\u003C/span>, \u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-keyword\">func\u003C/span>\u003Cspan class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)\u003C/span>\u003C/span> {\n\t\tw.Write([]\u003Cspan class=\"hljs-type\">byte\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;Hello world!&quot;\u003C/span>))\n\t})\n\tlog.Println(\u003Cspan class=\"hljs-string\">&quot;Listening...&quot;\u003C/span>)\n\thttp.ListenAndServe(\u003Cspan class=\"hljs-string\">&quot;:3000&quot;\u003C/span>, router)\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Source code is already quite simple, but there might more complex routing use cases.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_go_gin_framework\">Go - Gin Framework\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Happily there are frameworks that help us to keep our base code simple, for example when we need to extract path parameters, which is quite common use case in \u003Ca href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\" rel=\"noopener\">REST\u003C/a> \u003Ca href=\"https://en.wikipedia.org/wiki/Application_programming_interface\" target=\"_blank\" rel=\"noopener\">API\u003C/a>s, we can use a routing library, I&#8217;ve used \u003Ca href=\"https://github.com/gorilla/mux\" target=\"_blank\" rel=\"noopener\">Gorilla Mux\u003C/a> and \u003Ca href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" rel=\"noopener\">Gin framework\u003C/a> and I liked more \u003Ca href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" rel=\"noopener\">Gin framework\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">\u003Ca href=\"https://github.com/carlosvin/covid-rest-go/blob/master/main.go\">Full example\u003C/a>\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-go\" data-lang=\"go\">\u003Cspan class=\"hljs-keyword\">import\u003C/span> (\n\t\u003Cspan class=\"hljs-string\">&quot;github.com/carlosvin/covid-rest-go/handlers&quot;\u003C/span>\n\t\u003Cspan class=\"hljs-string\">&quot;github.com/carlosvin/covid-rest-go/readers&quot;\u003C/span>\n\t\u003Cspan class=\"hljs-string\">&quot;github.com/gin-gonic/gin&quot;\u003C/span>\n)\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-keyword\">func\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\u003C/span> {\n\n\t\u003Cspan class=\"hljs-comment\">// ...\u003C/span>\n\n\tr := gin.Default()\n\tr.GET(\u003Cspan class=\"hljs-string\">&quot;/countries&quot;\u003C/span>, router.Countries)\n\tr.GET(\u003Cspan class=\"hljs-string\">&quot;/countries/:code&quot;\u003C/span>, router.Country)\n\tr.GET(\u003Cspan class=\"hljs-string\">&quot;/countries/:code/dates&quot;\u003C/span>, router.CountryDates)\n\tr.GET(\u003Cspan class=\"hljs-string\">&quot;/countries/:code/dates/:date&quot;\u003C/span>, router.CountryDate)\n\tr.Run()\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">\u003Ca href=\"https://github.com/carlosvin/covid-rest-go/blob/master/handlers/countries.go\">And this is a handler example\u003C/a>, the router.Countries one\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-go\" data-lang=\"go\">\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-keyword\">func\u003C/span> \u003Cspan class=\"hljs-params\">(r *routerImpl)\u003C/span>\u003C/span> Countries(c *gin.Context) {\n\tc.JSON(\u003Cspan class=\"hljs-number\">200\u003C/span>, r.countries())\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_java_spring_io\">Java + Spring.io\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>The \u003Ca href=\"https://spring.io/guides/gs/rest-service\" target=\"_blank\" rel=\"noopener\">Spring Boot (REST)\u003C/a> is based on the concept of Controller, it is implemented using annotations on the class and methods.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">\u003Ca href=\"https://github.com/carlosvin/covid-rest/blob/master/src/main/java/com/carlosvin/covid/controllers/CountriesController.java\" target=\"_blank\" rel=\"noopener\">CountriesController.java\u003C/a>\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-java\" data-lang=\"java\">\u003Cspan class=\"hljs-meta\">@Validated\u003C/span>\n\u003Cspan class=\"hljs-meta\">@RestController\u003C/span> \u003Cb class=\"conum\">(1)\u003C/b>\n\u003Cspan class=\"hljs-meta\">@RequestMapping(&quot;/countries&quot;)\u003C/span> \u003Cb class=\"conum\">(2)\u003C/b>\n\u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">class\u003C/span> \u003Cspan class=\"hljs-title class_\">CountriesController\u003C/span> {\n\n\t\u003Cspan class=\"hljs-comment\">// Some source code is not shown, you can find the complete example in the repository\u003C/span>\n\n\t\u003Cspan class=\"hljs-meta\">@GetMapping(&quot;/{country}/dates/{isoDateStr}&quot;)\u003C/span>  \u003Cb class=\"conum\">(3)\u003C/b>\n\t\u003Cspan class=\"hljs-keyword\">public\u003C/span> DateStatsDto \u003Cspan class=\"hljs-title function_\">getDateByCountry\u003C/span>\u003Cspan class=\"hljs-params\">(\u003Cspan class=\"hljs-meta\">@Size(min = 2, max = 2)\u003C/span> \u003Cspan class=\"hljs-meta\">@PathVariable\u003C/span> String country, \u003Cspan class=\"hljs-meta\">@Size(min = 10, max = 20)\u003C/span> \u003Cspan class=\"hljs-meta\">@PathVariable\u003C/span> String isoDateStr)\u003C/span> \u003Cspan class=\"hljs-keyword\">throws\u003C/span> NotFoundException {\n\t\t\u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-keyword\">new\u003C/span> \u003Cspan class=\"hljs-title class_\">DateStatsDto\u003C/span>(service.getDate(country, DateUtils.convert(isoDateStr)));\n\t}\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"colist arabic\">\n\u003Col>\n\u003Cli>\n\u003Cp>Declare the class as Controller so it is registered in \u003Ca href=\"https://spring.io/guides/gs/rest-service\" target=\"_blank\" rel=\"noopener\">Spring Boot (REST)\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Controller base path definition\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Handler definition for a nested path under the main controller path. \u003Ca href=\"https://spring.io/guides/gs/rest-service\" target=\"_blank\" rel=\"noopener\">Spring Boot (REST)\u003C/a> makes easy to extract path variables defined in the route, you can directly use them as method arguments.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_validations\">Validations\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_go_gin_framework_2\">Go - Gin Framework\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" rel=\"noopener\">Gin framework\u003C/a> uses an external validation package \u003Ca href=\"https://godoc.org/github.com/go-playground/validator\">validator\u003C/a>, besides that it is fully integrated with \u003Ca href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" rel=\"noopener\">Gin framework\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-go\" data-lang=\"go\">\u003Cspan class=\"hljs-keyword\">type\u003C/span> User \u003Cspan class=\"hljs-keyword\">struct\u003C/span> {\n\tName  \u003Cspan class=\"hljs-type\">string\u003C/span> \u003Cspan class=\"hljs-string\">`validate:&quot;required&quot;`\u003C/span> \u003Cb class=\"conum\">(1)\u003C/b>\n\tEmail \u003Cspan class=\"hljs-type\">string\u003C/span> \u003Cspan class=\"hljs-string\">`validate:&quot;required,email&quot;`\u003C/span>\n}\n\nerr := validate.Struct(user) \u003Cb class=\"conum\">(2)\u003C/b>\nvalidationErrors := err.(validator.ValidationErrors) \u003Cb class=\"conum\">(3)\u003C/b>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"colist arabic\">\n\u003Col>\n\u003Cli>\n\u003Cp>The validation system uses \u003Ca href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go\u003C/a> tags, it is not the same as \u003Ca href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java\u003C/a> annotations, but in the validation case, it works in pretty same way as annotations.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Executes the validation explicitly\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Extracts validation errors\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_java_spring_io_2\">Java + Spring.io\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>You can enable the validation in the controller level, then in the handlers you can also specify the type of validation. Let&#8217;s explain it using the previous example:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">\u003Ca href=\"https://github.com/carlosvin/covid-rest/blob/master/src/main/java/com/carlosvin/covid/controllers/CountriesController.java\" target=\"_blank\" rel=\"noopener\">CountriesController.java\u003C/a>\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-java\" data-lang=\"java\">\u003Cspan class=\"hljs-meta\">@Validated\u003C/span> \u003Cb class=\"conum\">(1)\u003C/b>\n\u003Cspan class=\"hljs-meta\">@RestController\u003C/span>\n\u003Cspan class=\"hljs-meta\">@RequestMapping(&quot;/countries&quot;)\u003C/span>\n\u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">class\u003C/span> \u003Cspan class=\"hljs-title class_\">CountriesController\u003C/span> {\n\n\t\u003Cspan class=\"hljs-comment\">// Some source code is not shown, you can find the complete example in the repository\u003C/span>\n\n\t\u003Cspan class=\"hljs-meta\">@GetMapping(&quot;/{country}/dates/{isoDateStr}&quot;)\u003C/span>\n\t\u003Cspan class=\"hljs-keyword\">public\u003C/span> DateStatsDto \u003Cspan class=\"hljs-title function_\">getDateByCountry\u003C/span>\u003Cspan class=\"hljs-params\">(\n\t\t\u003Cspan class=\"hljs-meta\">@Size(min = 2, max = 2)\u003C/span> \u003Cspan class=\"hljs-meta\">@PathVariable\u003C/span> String country, \u003Cb class=\"conum\">(2)\u003C/b>\n\t\t\u003Cspan class=\"hljs-meta\">@Size(min = 10, max = 20)\u003C/span> \u003Cspan class=\"hljs-meta\">@PathVariable\u003C/span> String isoDateStr)\u003C/span> \u003Cspan class=\"hljs-keyword\">throws\u003C/span> NotFoundException {\n\t\t\u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-keyword\">new\u003C/span> \u003Cspan class=\"hljs-title class_\">DateStatsDto\u003C/span>(service.getDate(country, DateUtils.convert(isoDateStr)));\n\t}\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"colist arabic\">\n\u003Col>\n\u003Cli>\n\u003Cp>Declare the class as Controller so it is registered in \u003Ca href=\"https://spring.io/guides/gs/rest-service\" target=\"_blank\" rel=\"noopener\">Spring Boot (REST)\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode>@Size\u003C/code> validates that the input argument country has 2 characters\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>The validation system is more powerful than you can see in this code snippet, for example adding \u003Ccode>@Valid\u003C/code> annotation opens the door to complex types validation.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_filtering_and_middleware\">Filtering and Middleware\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Different approaches, pretty much the same end result.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>I will elaborate this topic in following days.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_dependency_injection_ioc\">Dependency injection / IoC\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_spring_ioc\">\u003Ca href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators\" target=\"_blank\" rel=\"noopener\">Spring IoC\u003C/a>\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators\" target=\"_blank\" rel=\"noopener\">Spring IoC\u003C/a> is the most complete and powerful systems I&#8217;ve ever used for \u003Ca href=\"https://en.wikipedia.org/wiki/Inversion_of_control\" target=\"_blank\" rel=\"noopener\">IoC\u003C/a>, actually, the first time I used Spring professionally was just to deal with \u003Ca href=\"https://en.wikipedia.org/wiki/Inversion_of_control\" target=\"_blank\" rel=\"noopener\">IoC\u003C/a>. It supports XML configuration files or \u003Ca href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java\u003C/a> annotations, I like annotations more, here a simple example from \u003Ca href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators\" target=\"_blank\" rel=\"noopener\">Spring IoC\u003C/a> documentation:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Spring IoC example\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-java\" data-lang=\"java\">\u003Cspan class=\"hljs-meta\">@Repository\u003C/span>\n\u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">class\u003C/span> \u003Cspan class=\"hljs-title class_\">JpaMovieFinder\u003C/span> \u003Cspan class=\"hljs-keyword\">implements\u003C/span> \u003Cspan class=\"hljs-title class_\">MovieFinder\u003C/span> { \u003Cb class=\"conum\">(1)\u003C/b>\n    \u003Cspan class=\"hljs-comment\">// implementation elided for clarity\u003C/span>\n}\n\n\u003Cspan class=\"hljs-comment\">//\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">class\u003C/span> \u003Cspan class=\"hljs-title class_\">SimpleMovieLister\u003C/span> {\n\n    \u003Cspan class=\"hljs-keyword\">private\u003C/span> MovieFinder movieFinder;\n\n    \u003Cspan class=\"hljs-meta\">@Autowired\u003C/span> \u003Cb class=\"conum\">(2)\u003C/b>\n    \u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">void\u003C/span> \u003Cspan class=\"hljs-title function_\">setMovieFinder\u003C/span>\u003Cspan class=\"hljs-params\">(MovieFinder movieFinder)\u003C/span> {\n        \u003Cspan class=\"hljs-built_in\">this\u003C/span>.movieFinder = movieFinder;\n    }\n\n    \u003Cspan class=\"hljs-comment\">// ...\u003C/span>\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"colist arabic\">\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Ccode>JpaMovieFinder\u003C/code> is instantiated by \u003Ca href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators\" target=\"_blank\" rel=\"noopener\">Spring IoC\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>With \u003Ccode>@Autowired\u003C/code> annotation \u003Ca href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators\" target=\"_blank\" rel=\"noopener\">Spring IoC\u003C/a> knows that has to inject \u003Ccode>movieFinder\u003C/code> argument. It should be a class implementing \u003Ccode>MovieFinder\u003C/code>\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_go\">Go\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Neither \u003Ca href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go\u003C/a> nor \u003Ca href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" rel=\"noopener\">Gin framework\u003C/a> has any \u003Ca href=\"https://en.wikipedia.org/wiki/Inversion_of_control\" target=\"_blank\" rel=\"noopener\">IoC\u003C/a> solution, but you can still apply \u003Ca href=\"https://en.wikipedia.org/wiki/Dependency_injection\" target=\"_blank\" rel=\"noopener\">Dependency Injection\u003C/a> technique to decouple your components and improve the testability of your system.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Dependency injection simple example in \u003Ca href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go\u003C/a>\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-go\" data-lang=\"go\">\u003Cspan class=\"hljs-keyword\">package\u003C/span> main\n\n\u003Cspan class=\"hljs-keyword\">import\u003C/span> \u003Cspan class=\"hljs-string\">&quot;fmt&quot;\u003C/span>\n\n\u003Cspan class=\"hljs-comment\">// Greeter interface to greet the caller\u003C/span>\n\u003Cspan class=\"hljs-keyword\">type\u003C/span> Greeter \u003Cspan class=\"hljs-keyword\">interface\u003C/span> {\n\tgreet()\n}\n\n\u003Cspan class=\"hljs-keyword\">type\u003C/span> greeterHello \u003Cspan class=\"hljs-keyword\">struct\u003C/span>{}\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-keyword\">func\u003C/span> \u003Cspan class=\"hljs-params\">(g *greeterHello)\u003C/span>\u003C/span> greet() { \u003Cb class=\"conum\">(3)\u003C/b>\n\tfmt.Println(\u003Cspan class=\"hljs-string\">&quot;Hello!&quot;\u003C/span>)\n}\n\n\u003Cspan class=\"hljs-keyword\">type\u003C/span> greeterHi \u003Cspan class=\"hljs-keyword\">struct\u003C/span>{}\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-keyword\">func\u003C/span> \u003Cspan class=\"hljs-params\">(g *greeterHi)\u003C/span>\u003C/span> greet() { \u003Cb class=\"conum\">(4)\u003C/b>\n\tfmt.Println(\u003Cspan class=\"hljs-string\">&quot;Hi!&quot;\u003C/span>)\n}\n\n\u003Cspan class=\"hljs-comment\">// App Application representation\u003C/span>\n\u003Cspan class=\"hljs-keyword\">type\u003C/span> App \u003Cspan class=\"hljs-keyword\">struct\u003C/span> {\n\tgreeters []Greeter \u003Cb class=\"conum\">(1)\u003C/b>\n}\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-keyword\">func\u003C/span> \u003Cspan class=\"hljs-params\">(app *App)\u003C/span>\u003C/span> startup() {\n\t\u003Cspan class=\"hljs-keyword\">for\u003C/span> _, v := \u003Cspan class=\"hljs-keyword\">range\u003C/span> app.greeters {\n\t\tv.greet()\n\t}\n}\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-keyword\">func\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\u003C/span> {\n\tgreeters := []Greeter{ \u003Cb class=\"conum\">(2)\u003C/b>\n\t\t&amp;greeterHello{},\n\t\t&amp;greeterHi{},\n\t\t&amp;greeterHello{}}\n\n\tapp := &amp;App{greeters}\n\n\tapp.startup()\n}\n\n\u003Cspan class=\"hljs-comment\">/*\n&lt;1&gt; `App` accepts an array of `Greeter`\n&lt;2&gt; During `App` instantiation we pass different implementations of `Greeter`\n&lt;3&gt; Greeter implementation that prints *Hello!*\n&lt;4&gt; Greeter implementation that prints *Hi!*\n*/\u003C/span>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>It is more verbose, but there is an advantage, there is nothing hidden, everything is explicit and you have full control of instantiation order.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>As soon as you use \u003Ca href=\"https://en.wikipedia.org/wiki/Dependency_injection\" target=\"_blank\" rel=\"noopener\">Dependency Injection\u003C/a>, I don&#8217;t have any strong opinion about using \u003Ca href=\"https://en.wikipedia.org/wiki/Inversion_of_control\" target=\"_blank\" rel=\"noopener\">IoC\u003C/a> system or doing \u003Ca href=\"https://en.wikipedia.org/wiki/Dependency_injection\" target=\"_blank\" rel=\"noopener\">Dependency Injection\u003C/a> manually.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_testing\">Testing\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_unit_tests\">Unit tests\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>For unit tests there are no big differences.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go\u003C/a> comes with a standard \u003Ca href=\"https://golang.org/pkg/testing/\" target=\"_blank\" rel=\"noopener\">library for testing and benchmarking\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>For \u003Ca href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java\u003C/a> there are many well-known unit testing frameworks, but Spring already has quite big support for \u003Ca href=\"https://docs.spring.io/spring-batch/docs/current/reference/html/testing.html\" target=\"_blank\" rel=\"noopener\">unit testing\u003C/a>.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_integration_tests\">Integration tests\u003C/h3>\n\u003Cdiv class=\"sect3\">\n\u003Ch4 id=\"_go_2\">Go\u003C/h4>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>There are no support for Integration Tests in \u003Ca href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go\u003C/a>, you will have to implement everything by yourself, although it is not difficult, \u003Ca href=\"https://kpat.io/2019/06/testing-with-gin/\" target=\"_blank\" rel=\"noopener\">here you can find a simple example\u003C/a>.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect3\">\n\u003Ch4 id=\"_spring\">Spring\u003C/h4>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>On the other hand, \u003Ca href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/testing.html\" target=\"_bank\">Spring has a great testing support\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>To write integration tests for \u003Ca href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\" rel=\"noopener\">REST\u003C/a> services, \u003Ca href=\"https://spring.io/guides/gs/testing-web/\" target=\"_blank\" rel=\"noopener\">MockMvc\u003C/a> is really convenient.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>I&#8217;ve used \u003Ca href=\"https://github.com/carlosvin/covid-rest/blob/master/src/test/java/com/carlosvin/covid/CountriesControllerTest.java\" target=\"_blank\" rel=\"noopener\">MockMvc in the covid-rest project\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">MockMvc code snippet from \u003Ca href=\"https://github.com/carlosvin/covid-rest/blob/master/src/test/java/com/carlosvin/covid/CountriesControllerTest.java\" target=\"_blank\" rel=\"noopener\">CountriesControllerTest.java\u003C/a>\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-java\" data-lang=\"java\">\t\u003Cspan class=\"hljs-meta\">@Autowired\u003C/span>\n\t\u003Cspan class=\"hljs-keyword\">private\u003C/span> MockMvc mockMvc; \u003Cb class=\"conum\">(1)\u003C/b>\n\n\t\u003Cspan class=\"hljs-meta\">@Test\u003C/span>\n\t\u003Cspan class=\"hljs-keyword\">void\u003C/span> \u003Cspan class=\"hljs-title function_\">getCountries\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span> \u003Cspan class=\"hljs-keyword\">throws\u003C/span> Exception {\n\t\t\u003Cspan class=\"hljs-built_in\">this\u003C/span>.mockMvc.perform(get(\u003Cspan class=\"hljs-string\">&quot;/countries&quot;\u003C/span>)) \u003Cb class=\"conum\">(2)\u003C/b>\n\t\t\t\t.andDo(print()).andExpect(status().isOk()) \u003Cb class=\"conum\">(3)\u003C/b>\n\t\t\t\t.andExpect(jsonPath(\u003Cspan class=\"hljs-string\">&quot;$.*&quot;\u003C/span>, hasSize(\u003Cspan class=\"hljs-number\">144\u003C/span>)))\n\t\t\t\t.andExpect(jsonPath(\u003Cspan class=\"hljs-string\">&quot;$.ES.confirmedCases&quot;\u003C/span>,comparesEqualTo(\u003Cspan class=\"hljs-number\">9191\u003C/span>)))\n\t\t\t\t.andExpect(jsonPath(\u003Cspan class=\"hljs-string\">&quot;$.ES.deathsNumber&quot;\u003C/span>, comparesEqualTo(\u003Cspan class=\"hljs-number\">309\u003C/span>)))\n\t\t\t\t.andExpect(jsonPath(\u003Cspan class=\"hljs-string\">&quot;$.ES.countryCode&quot;\u003C/span>, comparesEqualTo(\u003Cspan class=\"hljs-string\">&quot;ES&quot;\u003C/span>)))\n\t\t\t\t.andExpect(jsonPath(\u003Cspan class=\"hljs-string\">&quot;$.ES.countryName&quot;\u003C/span>, comparesEqualTo(\u003Cspan class=\"hljs-string\">&quot;Spain&quot;\u003C/span>)))\n\t\t\t\t.andExpect(jsonPath(\u003Cspan class=\"hljs-string\">&quot;$.ES.path&quot;\u003C/span>, comparesEqualTo(\u003Cspan class=\"hljs-string\">&quot;/countries/ES&quot;\u003C/span>)))\n\t\t\t\t.andExpect(jsonPath(\u003Cspan class=\"hljs-string\">&quot;$.VC.countryName&quot;\u003C/span>, comparesEqualTo(\u003Cspan class=\"hljs-string\">&quot;Saint Vincent and the Grenadines&quot;\u003C/span>)))\n\t\t\t\t.andDo(document(\u003Cspan class=\"hljs-string\">&quot;countries/list&quot;\u003C/span>, preprocessResponse(prettyPrint(), \u003Cspan class=\"hljs-keyword\">new\u003C/span> \u003Cspan class=\"hljs-title class_\">CropPreprocessor\u003C/span>())));\n\t}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"colist arabic\">\n\u003Col>\n\u003Cli>\n\u003Cp>The Spring test runner injects the MockMvc object.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>We use MockMvc to call to the endpoint we have created.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Then we validate the endpoint response: status code and body.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_performance\">Performance\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Besides the languages specific differences, the main difference is the performance. The CPU consumption in \u003Ca href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go\u003C/a> is smaller, but about the memory the difference is really significant, \u003Cstrong>the order of 30 times smaller fingerprint\u003C/strong>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_memory\">Memory\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Here I&#8217;ve found a surprising difference, just by checking the memory consumption in my laptop.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Ca href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" rel=\"noopener\">Gin framework\u003C/a> \u003Ccode>15.6MB\u003C/code>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ca href=\"https://spring.io/guides/gs/rest-service\" target=\"_blank\" rel=\"noopener\">Spring Boot (REST)\u003C/a> \u003Ccode>465.9MB\u003C/code>\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"imageblock\">\n\u003Cdiv class=\"content\">\n\u003Cimg src=\"/posts/rest-service-go-vs-java/memory-consumption-go-java.png\" alt=\"Memory consumption\">\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_speed\">Speed\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Following the \u003Ca href=\"https://www.techempower.com/benchmarks/\" target=\"_blank\" rel=\"noopener\">TechEmpower benchmarks\u003C/a>:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Ca href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" rel=\"noopener\">Gin framework\u003C/a> is in 193 position, 9.9%.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ca href=\"https://spring.io/guides/gs/rest-service\" target=\"_blank\" rel=\"noopener\">Spring Boot (REST)\u003C/a> is in 284 position, 4%.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Following the \u003Ca href=\"https://github.com/the-benchmarker/web-frameworks\" target=\"_blank\" rel=\"noopener\">The Benchmarker results\u003C/a>:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Ca href=\"https://github.com/gin-gonic/gin\" target=\"_blank\" rel=\"noopener\">Gin framework\u003C/a>: position 33.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ca href=\"https://spring.io/guides/gs/rest-service\" target=\"_blank\" rel=\"noopener\">Spring Boot (REST)\u003C/a>: position 68.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_conclusions\">Conclusions\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>If I were you, I&#8217;d choose \u003Ca href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go\u003C/a> if:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>If you value the explicit over implicit, keep in mind that there is a cost, you will most likely have to write more lines of code.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>If you value the simplicity, \u003Ca href=\"https://golang.org\" target=\"_blank\" rel=\"noopener\">Go\u003C/a> has a quite reduced set of keywords, which reduces the learning curve and simplifies the code reviews.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>If RAM memory usage is critical for your project, actually I&#8217;d just keep away from \u003Ca href=\"https://spring.io/guides/gs/rest-service\" target=\"_blank\" rel=\"noopener\">Spring Boot (REST)\u003C/a>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>If the project you are going to work on is a distributed system, specially if it is based on \u003Ca href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\" target=\"_blank\" rel=\"noopener\">HTTP\u003C/a>.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003C/div>\n\u003C/div>",{"title":3,"lang":4,"summary":5,"slug":6,"keywords":7,"filepath":15,"dirpath":16,"created":17,"modified":17,"otherLangs":18,"author":19,"previewimage":-1,"path":20},"Golang over Java for REST services","es","Why I'd pick Golang over Java to create any new distributed system. I am going to compare a REST service implementation in Java vs the implementation in Golang","rest-service-go-vs-java",[8,9,10,11,12,13,14],"REST","API","Web Services","Java","Golang","Gingonic","Spring","/static/posts/rest-service-go-vs-java/rest-service-go-vs-java.adoc","/static/posts/rest-service-go-vs-java",1604188800000,[4],"Carlos Martin Sanchez","/langs/en/posts/rest-service-go-vs-java","\u003Cscript type=\"application/ld+json\">{\"@context\":\"https://schema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"Webpage\",\"@id\":\"https://google.com/article\"},\"headline\":\"Golang over Java for REST services\",\"alternativeHeadline\":\"Why I'd pick Golang over Java to create any new distributed system. I am going to compare a REST service implementation in Java vs the implementation in Golang\",\"description\":\"Why I'd pick Golang over Java to create any new distributed system. I am going to compare a REST service implementation in Java vs the implementation in Golang\",\"datePublished\":\"2020-11-01T00:00:00.000Z\",\"dateModified\":\"2020-11-01T00:00:00.000Z\",\"keywords\":[\"REST\",\"API\",\"Web Services\",\"Java\",\"Golang\",\"Gingonic\",\"Spring\"],\"author\":{\"@type\":\"Person\",\"name\":\"Carlos Martin Sanchez\"},\"publisher\":{\"@type\":\"Person\",\"name\":\"Carlos Martin Sanchez\"}}\u003C/script>"],"uses":{"params":["slug","lang"]}}]}
