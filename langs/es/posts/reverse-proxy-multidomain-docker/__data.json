{"type":"data","nodes":[null,{"type":"data","data":[{"path":1,"lang":2,"translations":3,"version":14},"/langs/es/posts/reverse-proxy-multidomain-docker/","es",{"lang":2,"author":4,"siteName":5,"siteDescription":6,"categories":7,"Categories":8,"RecentPosts":9,"NoPosts":10,"SubscribeTo":11,"AboutMe":12,"AllPosts":13},"Carlos Martin Sanchez","Carlos dice bla bla","Qué está pasando por mi cabeza y alrededores","categorías","Categorías","Últimas entradas","No hay entradas","Suscríbete al feed","Sobre mi","Todas las entradas","1.0.1"],"uses":{"params":["lang"],"url":1},"slash":"always"},{"type":"data","data":[{"html":1,"props":2,"jsonLd":17},"\u003Cdiv id=\"toc\" class=\"toc\">\n\u003Cdiv id=\"toctitle\">Table of Contents\u003C/div>\n\u003Cul class=\"sectlevel1\">\n\u003Cli>\u003Ca href=\"#_caso_de_uso\">Caso de Uso\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_cómo_configurar_un_proxy_inverso_multi_dominio\">Cómo configurar un Proxy Inverso Multi-Dominio\u003C/a>\n\u003Cul class=\"sectlevel2\">\n\u003Cli>\u003Ca href=\"#_estructura_del_proyecto_de_ejemplo\">Estructura del proyecto de ejemplo\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_configuración_de_la_arquitectura_docker_compose\">Configuración de la arquitectura (docker-compose)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_configuración_de_la_imágen_de_la_aplicación\">Configuración de la imágen de la aplicación\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_añadiendo_los_nombres_de_dominio_a_tu_configuración\">Añadiendo los nombres de dominio a tu configuración\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_todo_listo\">¡Todo listo!\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_caso_de_uso\">Caso de Uso\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Tenemos varias aplicaciones servidoras a la vez en un mismo entorno de desarrollo, cada una encapsulada en un contenedor, llamémosles de ahora en adelante \u003Cstrong>\"Contenedor A\"\u003C/strong> y \u003Cstrong>\"Contenedor B\"\u003C/strong>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Utilizando docker estas aplicaciones tienen la misma dirección IP en nuestra máquina, una forma de distinguirlas es cambiando el puerto que exponen.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"imageblock center\">\n\u003Cdiv class=\"content\">\n\u003Cimg src=\"/posts/reverse-proxy-multidomain-docker/ip.png\" alt=\"ip\">\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Aplicaciones exponiendo la misma dirección IP utilizando diferentes puertos para diferenciar las aplicaciones.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>Si queremos llamar a la \u003Cstrong>\"aplicación A\"\u003C/strong> haremos algo así: \u003Ccode>GET \u003Ca href=\"http://10.20.30.40:8080/colors/red\" class=\"bare\">http://10.20.30.40:8080/colors/red\u003C/a>\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Si queremos llamar a la \u003Cstrong>\"aplicación B\"\u003C/strong> haremos algo así: \u003Ccode>GET \u003Ca href=\"http://10.20.30.40:8081/fruits/tomato\" class=\"bare\">http://10.20.30.40:8081/fruits/tomato\u003C/a>\u003C/code>.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Pero esto es un poco confuso, ¿8080 sigfica que accedemos a las \"aplicación A\" y 8081 significa \"aplicación B\"?\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Sería mucho más sencillo de recordar algo así:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>Si queremos llamar a la \"aplicación A\" haremos algo así: \u003Ccode>GET \u003Ca href=\"http://a.domain.com/colors/red\" class=\"bare\">http://a.domain.com/colors/red\u003C/a>\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Si queremos llamar a la \"aplicación B\" haremos algo así: \u003Ccode>GET \u003Ca href=\"http://b.domain.com/fruits/tomato\" class=\"bare\">http://b.domain.com/fruits/tomato\u003C/a>\u003C/code>.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"imageblock center\">\n\u003Cdiv class=\"content\">\n\u003Cimg src=\"/posts/reverse-proxy-multidomain-docker/domain.png\" alt=\"domain\">\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Diferenciando aplicaciones por nombre de dominio\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Obtener este valor semántico extra es más sencillo de lo que parece.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_cómo_configurar_un_proxy_inverso_multi_dominio\">Cómo configurar un Proxy Inverso Multi-Dominio\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Dije que era fácil porque no vamos a tener que hacer casi nada, ya que otro contenedor hará casi todo el trabajo por nosotros. Vamos a utilizar \u003Ca href=\"https://github.com/jwilder/nginx-proxy\" target=\"_blank\" rel=\"noopener\">nginx-proxy\u003C/a>, que generará automáticamente las configuraciones necesarias para \u003Ca href=\"https://www.nginx.com\" target=\"_blank\" rel=\"noopener\">NGINX\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Así que al final no tendremos 2 contenedores, sino también tendremos un tercero que hará las veces de proxy.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"imageblock center\">\n\u003Cdiv class=\"content\">\n\u003Cimg src=\"/posts/reverse-proxy-multidomain-docker/proxy.png\" alt=\"domain\">\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Los 2 contenedores y el proxy.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"admonitionblock note\">\n\u003Ctable>\n\u003Ctr>\n\u003Ctd class=\"icon\">\n\u003Cdiv class=\"title\">Note\u003C/div>\n\u003C/td>\n\u003Ctd class=\"content\">\nPuedes descargar el ejemplo completo desde: \u003Ca href=\"https://github.com/carlosvin/docker-reverse-proxy-multi-domain\" class=\"bare\">https://github.com/carlosvin/docker-reverse-proxy-multi-domain\u003C/a>.\n\u003C/td>\n\u003C/tr>\n\u003C/table>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_estructura_del_proyecto_de_ejemplo\">Estructura del proyecto de ejemplo\u003C/h3>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">docker-compose.yaml\u003C/dt>\n\u003Cdd>\n\u003Cp>Archivo con la configuración descrita en la imágen previa.\u003C/p>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">a\u003C/dt>\n\u003Cdd>\n\u003Cp>Directorio para la aplicación A.\u003C/p>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">Dockerfile\u003C/dt>\n\u003Cdd>\n\u003Cp>Archivo con la configuración del contenedor A.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">b\u003C/dt>\n\u003Cdd>\n\u003Cp>Directorio para la aplicación B.\u003C/p>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">Dockerfile\u003C/dt>\n\u003Cdd>\n\u003Cp>Archivo con la configuración del contenedor B.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://github.com/carlosvin/docker-reverse-proxy-multi-domain\" target=\"_blank\" rel=\"noopener\">Ver proyecto\u003C/a>.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_configuración_de_la_arquitectura_docker_compose\">Configuración de la arquitectura (docker-compose)\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>La parte más importante es la configuración de las relaciones entre los contenedores.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">docker-reverse-proxy-multi-domain/docker-compose.yaml\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-yaml\" data-lang=\"yaml\">\u003Cspan class=\"hljs-attr\">a:\u003C/span>\n  \u003Cspan class=\"hljs-attr\">build:\u003C/span> \u003Cspan class=\"hljs-string\">a\u003C/span> \u003Cb class=\"conum\">(4)\u003C/b>\n  \u003Cspan class=\"hljs-attr\">environment:\u003C/span>\n    \u003Cspan class=\"hljs-attr\">VIRTUAL_HOST:\u003C/span> \u003Cspan class=\"hljs-string\">a.domain.com\u003C/span> \u003Cb class=\"conum\">(1)\u003C/b>\n  \u003Cspan class=\"hljs-attr\">restart:\u003C/span> \u003Cspan class=\"hljs-string\">always\u003C/span>\n\n\u003Cspan class=\"hljs-attr\">b:\u003C/span>\n  \u003Cspan class=\"hljs-attr\">build:\u003C/span> \u003Cspan class=\"hljs-string\">b\u003C/span> \u003Cb class=\"conum\">(5)\u003C/b>\n  \u003Cspan class=\"hljs-attr\">environment:\u003C/span>\n    \u003Cspan class=\"hljs-attr\">VIRTUAL_HOST:\u003C/span>  \u003Cspan class=\"hljs-string\">b.domain.com\u003C/span> \u003Cb class=\"conum\">(2)\u003C/b>\n  \u003Cspan class=\"hljs-attr\">restart:\u003C/span> \u003Cspan class=\"hljs-string\">always\u003C/span>\n\n\u003Cspan class=\"hljs-attr\">nginx-proxy:\u003C/span> \u003Cb class=\"conum\">(3)\u003C/b>\n  \u003Cspan class=\"hljs-attr\">image:\u003C/span> \u003Cspan class=\"hljs-string\">jwilder/nginx-proxy\u003C/span>\n  \u003Cspan class=\"hljs-attr\">ports:\u003C/span>\n    \u003Cspan class=\"hljs-bullet\">-\u003C/span> \u003Cspan class=\"hljs-string\">&quot;80:80&quot;\u003C/span>\n    \u003Cspan class=\"hljs-bullet\">-\u003C/span> \u003Cspan class=\"hljs-string\">&quot;443:443&quot;\u003C/span>\n  \u003Cspan class=\"hljs-attr\">volumes:\u003C/span>\n    \u003Cspan class=\"hljs-bullet\">-\u003C/span> \u003Cspan class=\"hljs-string\">/var/run/docker.sock:/tmp/docker.sock:ro\u003C/span>\n\n  \u003Cspan class=\"hljs-attr\">restart:\u003C/span> \u003Cspan class=\"hljs-string\">always\u003C/span>\n  \u003Cspan class=\"hljs-attr\">privileged:\u003C/span> \u003Cspan class=\"hljs-literal\">true\u003C/span>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"colist arabic\">\n\u003Col>\n\u003Cli>\n\u003Cp>Configuramos el nombre de dominio que queremos utilizar para la aplicación a.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Lo mismo para la aplicación b.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>A partir de aquí configuramos el proxy (esta es la parte de copiar y pegar).\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Indicamos a docker-compose que tiene que construir las imágenes dentro del directorio indicado.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Por ejemplo, aquí, estamos indicando que docker-compose tiene que construir la imágen docker utilizando ./b/Dockerfile.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_configuración_de_la_imágen_de_la_aplicación\">Configuración de la imágen de la aplicación\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>A continuación vamos a comentar la configuración de la imágen del contenedor para la aplicación A.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">a/Dockerfile\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-docker\" data-lang=\"docker\">\u003Cspan class=\"hljs-keyword\">FROM\u003C/span> httpd:\u003Cspan class=\"hljs-number\">2.4\u003C/span> \u003Cb class=\"conum\">(1)\u003C/b>\n\u003Cspan class=\"hljs-keyword\">RUN\u003C/span>\u003Cspan class=\"language-bash\"> \u003Cspan class=\"hljs-built_in\">echo\u003C/span> \u003Cspan class=\"hljs-string\">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;A&lt;/h1&gt;App A works!&lt;/body&gt;&lt;/html&gt;&quot;\u003C/span> &gt; /usr/local/apache2/htdocs/index.html \u003C/span>\u003Cb class=\"conum\">(2)\u003C/b>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"colist arabic\">\n\u003Col>\n\u003Cli>\n\u003Cp>Importamos una imágen con un servidor apache.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Servimos un archivo que muestra \"Host A\" como página por defecto.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>La configuración para la aplicación B, es prácticamente la misma:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">b/Dockerfile\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-docker\" data-lang=\"docker\">\u003Cspan class=\"hljs-keyword\">FROM\u003C/span> httpd:\u003Cspan class=\"hljs-number\">2.4\u003C/span>\n\u003Cspan class=\"hljs-keyword\">RUN\u003C/span>\u003Cspan class=\"language-bash\"> \u003Cspan class=\"hljs-built_in\">echo\u003C/span> \u003Cspan class=\"hljs-string\">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;B&lt;/h1&gt;App B works!&lt;/body&gt;&lt;/html&gt;&quot;\u003C/span> &gt; /usr/local/apache2/htdocs/index.html\u003C/span>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_añadiendo_los_nombres_de_dominio_a_tu_configuración\">Añadiendo los nombres de dominio a tu configuración\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>En Linux simplemente tenemos mapear la dirección local a los nombres de dominio que hayas elegido, en nuestro ejemplo es \u003Ccode>a.domain.com\u003C/code> y \u003Ccode>b.domain.com\u003C/code>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">/etc/hosts\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">127.0.0.1     localhost.localdomain localhost\n::1             localhost6.localdomain6 localhost6\n127.0.0.1   a.domain.com \u003Cb class=\"conum\">(1)\u003C/b>\n127.0.0.1   b.domain.com\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"colist arabic\">\n\u003Col>\n\u003Cli>\n\u003Cp>Simplemente he añadido las líneas 4 y 5.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_todo_listo\">¡Todo listo!\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Ya solo nos queda probar el ejemplo.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">docker-compose build\ndocker-compose up\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Ya están las tres contenedores arrancados.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Ahora podemos abrir nuestro navegador y escribir a.domain.com y nos mostrará el texto \u003Cem>App A works!\u003C/em>. Si escribimos b.domain.com entonces veremos \u003Cem>App B works!\u003C/em>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"imageblock center\">\n\u003Cdiv class=\"content\">\n\u003Cimg src=\"/posts/reverse-proxy-multidomain-docker/a.screenshot.png\" alt=\"App A works!\">\n\u003C/div>\n\u003Cdiv class=\"title\">Figure 1. a.domain.com\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"imageblock center\">\n\u003Cdiv class=\"content\">\n\u003Cimg src=\"/posts/reverse-proxy-multidomain-docker/b.screenshot.png\" alt=\"App B works!\">\n\u003C/div>\n\u003Cdiv class=\"title\">Figure 2. b.domain.com\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"admonitionblock note\">\n\u003Ctable>\n\u003Ctr>\n\u003Ctd class=\"icon\">\n\u003Cdiv class=\"title\">Note\u003C/div>\n\u003C/td>\n\u003Ctd class=\"content\">\nEn la mayoría de distribuciones Linux necesitarás privilegios para ejecutar los comandos docker (\u003Ccode>sudo\u003C/code>).\n\u003C/td>\n\u003C/tr>\n\u003C/table>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>",{"title":3,"lang":4,"summary":5,"slug":6,"keywords":7,"filepath":10,"dirpath":11,"created":12,"modified":12,"otherLangs":13,"author":15,"previewimage":-1,"path":16},"Contenedores Docker multi-dominio","es","Cómo crear varios contenedores Docker con diferentes dominios en la misma máquina.","reverse-proxy-multidomain-docker",[8,9],"Docker","Microservices","/static/posts/reverse-proxy-multidomain-docker/reverse-proxy-multidomain-docker.es.adoc","/static/posts/reverse-proxy-multidomain-docker",1479931200000,[14],"en","Carlos Martin Sanchez","/langs/es/posts/reverse-proxy-multidomain-docker","\u003Cscript type=\"application/ld+json\">{\"@context\":\"https://schema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"Webpage\",\"@id\":\"https://google.com/article\"},\"headline\":\"Contenedores Docker multi-dominio\",\"alternativeHeadline\":\"Cómo crear varios contenedores Docker con diferentes dominios en la misma máquina.\",\"description\":\"Cómo crear varios contenedores Docker con diferentes dominios en la misma máquina.\",\"datePublished\":\"2016-11-23T20:00:00.000Z\",\"dateModified\":\"2016-11-23T20:00:00.000Z\",\"keywords\":[\"Docker\",\"Microservices\"],\"author\":{\"@type\":\"Person\",\"name\":\"Carlos Martin Sanchez\"},\"publisher\":{\"@type\":\"Person\",\"name\":\"Carlos Martin Sanchez\"}}\u003C/script>"],"uses":{"params":["slug","lang"]}}]}
