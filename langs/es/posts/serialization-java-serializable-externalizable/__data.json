{"type":"data","nodes":[null,{"type":"data","data":[{"path":1,"lang":2,"translations":3},"/langs/es/posts/serialization-java-serializable-externalizable/","es",{"lang":2,"author":4,"siteName":5,"siteDescription":6,"categories":7,"Categories":8,"RecentPosts":9,"NoPosts":10,"SubscribeTo":11,"AboutMe":12,"AllPosts":13},"Carlos Martin Sanchez","Carlos dice bla bla","Qué está pasando por mi cabeza y alrededores","categorías","Categorías","Últimas entradas","No hay entradas","Suscríbete al feed","Sobre mi","Todas las entradas"],"uses":{"params":["lang"],"url":1},"slash":"always"},{"type":"data","data":[{"html":1,"props":2,"jsonLd":17},"\u003Cdiv id=\"toc\" class=\"toc\">\n\u003Cdiv id=\"toctitle\">Table of Contents\u003C/div>\n\u003Cul class=\"sectlevel1\">\n\u003Cli>\u003Ca href=\"#_serializable\">Serializable\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_externalizable\">Externalizable\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_pruebas_de_rendimiento_serializable_vs_externalizable\">Pruebas de Rendimiento (Serializable vs Externalizable)\u003C/a>\n\u003Cul class=\"sectlevel2\">\n\u003Cli>\u003Ca href=\"#_implementando_el_interfaz_serializable\">Implementando el interfaz Serializable\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_utilizando_el_interfaz_externalizable_mal\">Utilizando el interfaz Externalizable (mal)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_utilizando_el_interfaz_externalizable_correctamente\">Utilizando el interfaz Externalizable (correctamente)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_analizando_los_resultados\">Analizando los resultados\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv id=\"preamble\">\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Hace poco, he tenido que serializar/deserializar unos datos en \u003Ca href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java\u003C/a>, hacía mucho que no lo hacía en formato binario directamente (ultimamente he utilizado \u003Ca href=\"https://www.json.org\" target=\"_blank\" rel=\"noopener\">JSON\u003C/a> o \u003Ca href=\"https://en.wikipedia.org/wiki/XML\" target=\"_blank\" rel=\"noopener\">XML\u003C/a>). Recordaba haber serializado objetos implementando el interfaz \u003Ca href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\" target=\"_blank\" rel=\"noopener\">Serializable\u003C/a>, pero había visto por Internet otra forma implementando el interfaz \u003Ca href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html\" target=\"_blank\" rel=\"noopener\">Externalizable\u003C/a>, ¿cuál interfaz utilizo? Pues depende lo que quieras y necesites, como todo.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Veamos cuándo utilizar \u003Ca href=\"#_serializable\">Serializable\u003C/a> o \u003Ca href=\"#_externalizable\">Externalizable\u003C/a>.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_serializable\">Serializable\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>Cuando quieras escribir poco código, es la forma fácil.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Pero tiene algunas restricciones: El objeto a serializar debe implementar el constructor por defecto. Debe hacerse responsable de los atributos no accesibles de la clase padre.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Cuando no te importe mucho el rendimiento, como veremos en la sección \u003Ca href=\"#_pruebas_de_rendimiento_serializable_vs_externalizable\">Pruebas de Rendimiento (Serializable vs Externalizable)\u003C/a>.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_externalizable\">Externalizable\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>Vas a tener que implementar tú mismo los métodos de serialización.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Cuando no puedas utilizar \u003Ca href=\"#_serializable\">Serializable\u003C/a>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Cuando quieras obtener un mejor rendimiento, como veremos en la sección \u003Ca href=\"#_pruebas_de_rendimiento_serializable_vs_externalizable\">Pruebas de Rendimiento (Serializable vs Externalizable)\u003C/a>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Si tienes que encargarte de la serialización de los atributos de la clase padre, te recomiendo utilizar \u003Ca href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html\" target=\"_blank\" rel=\"noopener\">Externalizable\u003C/a>, porque evitamos una sobrescritura extraña de métodos privados.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-java\" data-lang=\"java\">\u003Cspan class=\"hljs-keyword\">private\u003C/span> \u003Cspan class=\"hljs-keyword\">void\u003C/span> \u003Cspan class=\"hljs-title function_\">writeObject\u003C/span>\u003Cspan class=\"hljs-params\">(ObjectOutputStream oos)\u003C/span>\n\u003Cspan class=\"hljs-keyword\">private\u003C/span> \u003Cspan class=\"hljs-keyword\">void\u003C/span> \u003Cspan class=\"hljs-title function_\">readObject\u003C/span>\u003Cspan class=\"hljs-params\">(ObjectInputStream ois)\u003C/span>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_pruebas_de_rendimiento_serializable_vs_externalizable\">Pruebas de Rendimiento (Serializable vs Externalizable)\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>El interfaz \u003Ca href=\"#_serializable\">Serializable\u003C/a> utilizando la introspección de \u003Ca href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java\u003C/a>, adivina los tipos de los atributos de las clases que va a serializar/deserializar, pero esta \"magia\" tiene una penalización en el rendimiento.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Al utilizar el interfaz \u003Ca href=\"#_externalizable\">Externalizable\u003C/a> somos nosotros los que decidimos cómo serializar/deserializar los objetos, es decir, tenemos que escribir nosotros el código que hace esto. Hemos perdido comodidad, pero evitamos que \u003Ca href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java\u003C/a> haga algunas tareas y, si sobrescribimos correctamente los métodos del interfaz \u003Ca href=\"#_externalizable\">Externalizable\u003C/a>, conseguiremos una mejora de rendimiento.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Para saber cuánto es la diferencia de rendimiento, he escrito un \u003Ca href=\"https://github.com/carlosvin/serializations-performance-java\" target=\"_blank\" rel=\"noopener\">pequeño ejemplo en el que se serializa un objeto con dos colecciones con 100000 emails y 100000 teléfonos\u003C/a>. He contemplado 3 casos:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_implementando_el_interfaz_serializable\">Implementando el interfaz Serializable\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Como dijimos más arriba, cuando implementamos el interfaz \u003Ca href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\" target=\"_blank\" rel=\"noopener\">Serializable\u003C/a>, \u003Ca href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java\u003C/a> tiene que adivinar ciertas cosas, en este proceso sacrifica algo de rendimiento (es el que más tarda), a cambio ĺo único que tenemos que hacer es que nuestra clase implemente el interfaz \u003Ca href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\" target=\"_blank\" rel=\"noopener\">Serializable\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-java\" data-lang=\"java\">\u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">class\u003C/span> \u003Cspan class=\"hljs-title class_\">Contacts\u003C/span> \u003Cspan class=\"hljs-keyword\">implements\u003C/span> \u003Cspan class=\"hljs-title class_\">Serializable\u003C/span> {\n  \u003Cspan class=\"hljs-comment\">// ...\u003C/span>\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>1133 milisegundos en serializar\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>506 milisegundos en deserializar\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_utilizando_el_interfaz_externalizable_mal\">Utilizando el interfaz Externalizable (mal)\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>En este caso somos nosotros los encargados de \"decir\" a \u003Ca href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java\u003C/a> cómo debe serializar/deserializar, pero debemos ser cuidadosos, de lo contrario podemos quedarnos con lo peor de los dos mundos, por ejemplo: Si simplemente serializamos/deserializamos los atributos de la clase, y estos son atributos complejos (como colecciones), \u003Ca href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java\u003C/a> también tiene que adivinar bastantes cosas y también sacrificamos algo de rendimiento y además hemos tenido que escribir más código.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-java\" data-lang=\"java\">\u003Cspan class=\"hljs-meta\">@Override\u003C/span>\n\u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">void\u003C/span> \u003Cspan class=\"hljs-title function_\">readExternal\u003C/span>\u003Cspan class=\"hljs-params\">(ObjectInput in)\u003C/span> \u003Cspan class=\"hljs-keyword\">throws\u003C/span> IOException, ClassNotFoundException {\n  setEmails((Set&lt;String&gt;) in.readObject());\n  setPhones((Set&lt;String&gt;) in.readObject());\n}\n\n\u003Cspan class=\"hljs-meta\">@Override\u003C/span>\n\u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">void\u003C/span> \u003Cspan class=\"hljs-title function_\">writeExternal\u003C/span>\u003Cspan class=\"hljs-params\">(ObjectOutput out)\u003C/span> \u003Cspan class=\"hljs-keyword\">throws\u003C/span> IOException {\n  out.writeObject(emails);\n  out.writeObject(phones);\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>737 milisegundos en serializar\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>367 milisegundos en deserializar\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_utilizando_el_interfaz_externalizable_correctamente\">Utilizando el interfaz Externalizable (correctamente)\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Si serializamos/deserializamos uno por uno los elementos de las colecciones, ahorramos aún más tiempo, porque \u003Ca href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java\u003C/a> está serializando tipos más simples (en este caso java.lang.String).\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-java\" data-lang=\"java\">\u003Cspan class=\"hljs-meta\">@Override\u003C/span>\n\u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">void\u003C/span> \u003Cspan class=\"hljs-title function_\">readExternal\u003C/span>\u003Cspan class=\"hljs-params\">(ObjectInput in)\u003C/span> \u003Cspan class=\"hljs-keyword\">throws\u003C/span> IOException, ClassNotFoundException {\n  emails.clear();\n  phones.clear();\n  \u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-variable\">nEmails\u003C/span> \u003Cspan class=\"hljs-operator\">=\u003C/span> in.readInt();\n  \u003Cspan class=\"hljs-keyword\">for\u003C/span> (\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-variable\">i\u003C/span> \u003Cspan class=\"hljs-operator\">=\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>; i &lt; nEmails; i++) {\n    emails.add(in.readUTF());\n  }\n  \u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-variable\">nPhones\u003C/span> \u003Cspan class=\"hljs-operator\">=\u003C/span> in.readInt();\n  \u003Cspan class=\"hljs-keyword\">for\u003C/span> (\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-variable\">i\u003C/span> \u003Cspan class=\"hljs-operator\">=\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>; i &lt; nPhones; i++) {\n    phones.add(in.readUTF());\n  }\n}\n\n\u003Cspan class=\"hljs-meta\">@Override\u003C/span>\n\u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">void\u003C/span> \u003Cspan class=\"hljs-title function_\">writeExternal\u003C/span>\u003Cspan class=\"hljs-params\">(ObjectOutput out)\u003C/span> \u003Cspan class=\"hljs-keyword\">throws\u003C/span> IOException {\n  out.writeInt(emails.size());\n  \u003Cspan class=\"hljs-keyword\">for\u003C/span> (String e : emails) {\n    out.writeUTF(e);\n  }\n  out.writeInt(phones.size());\n  \u003Cspan class=\"hljs-keyword\">for\u003C/span> (String p : phones) {\n    out.writeUTF(p);\n  }\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>204 milisegundos en serializar\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>92 milisegundos en deserializar\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Hemos ganado rendimiento a costa de escribir un poco más de código.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_analizando_los_resultados\">Analizando los resultados\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Por el hecho de utilizar un interfaz u otro, no ganamos rendimiento.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Ganamos rendimiento porque el interfaz \u003Ca href=\"#_externalizable\">Externalizable\u003C/a> nos \"obliga\" a implementar parte de la serialización y quitamos esta carga a \u003Ca href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Aunque como hemos visto en \u003Ca href=\"#_utilizando_el_interfaz_externalizable_mal\">Utilizando el interfaz Externalizable (mal)\u003C/a>, si no tenemos cuidado, conseguiremos una mejora poco significativa a costa de complicar nuestro código fuente.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>A continuación os dejo los enlaces a:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Ca href=\"http://carlosvin.github.io/serializations-performance-java/classes/com.github.carlosvin.contacts.SerializationTest.html\">Resultados de los tests\u003C/a>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ca href=\"https://github.com/carlosvin/serializations-performance-java/\">Código en github\u003C/a>.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>",{"title":3,"lang":4,"summary":5,"slug":6,"keywords":7,"filepath":10,"dirpath":11,"created":12,"modified":12,"otherLangs":13,"author":15,"previewimage":-1,"path":16},"Distintas formas de serialización en Java: Comparación de rendimiento","es","Comparación de rendimientos entre distintas formas de serialización en Java","serialization-java-serializable-externalizable",[8,9],"Java","Performance","/static/posts/serialization-java-serializable-externalizable.es.adoc","/static/posts",1399993200000,[14],"en","Carlos","/langs/es/posts/serialization-java-serializable-externalizable","\u003Cscript type=\"application/ld+json\">{\"@context\":\"https://schema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"Webpage\",\"@id\":\"https://google.com/article\"},\"headline\":\"Distintas formas de serialización en Java: Comparación de rendimiento\",\"alternativeHeadline\":\"Comparación de rendimientos entre distintas formas de serialización en Java\",\"description\":\"Comparación de rendimientos entre distintas formas de serialización en Java\",\"datePublished\":\"2014-05-13T15:00:00.000Z\",\"dateModified\":\"2014-05-13T15:00:00.000Z\",\"keywords\":[\"Java\",\"Performance\"],\"author\":{\"@type\":\"Person\",\"name\":\"Carlos\"},\"publisher\":{\"@type\":\"Person\",\"name\":\"Carlos\"}}\u003C/script>"],"uses":{"params":["slug","lang"]}}]}
