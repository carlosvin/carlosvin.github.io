{"html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_introducción\">Introducción</a></li>\n<li><a href=\"#_comenzar_a_utilizar_característica_experimental_filesystem_c17_g\">Comenzar a utilizar característica experimental filesystem C&#43;&#43;17 (g++)</a></li>\n<li><a href=\"#_características_de_filesystem_c17\">Características de filesystem C&#43;&#43;17</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_stdfilesystempath\">std::filesystem::path</a></li>\n<li><a href=\"#_separador_de_directorios\">Separador de directorios</a></li>\n<li><a href=\"#_operador_de_separador_de_directorios\">Operador de separador de directorios</a></li>\n<li><a href=\"#_crear_y_borrar_directorios\">Crear y borrar directorios</a></li>\n</ul>\n</li>\n<li><a href=\"#_ejemplo_completo_iterar_recursivamente_por_directorios\">Ejemplo completo: Iterar Recursivamente por Directorios</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_c11\">C&#43;&#43;11</a></li>\n<li><a href=\"#_c17\">C&#43;&#43;17</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_introducción\">Introducción</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>A partir de C&#43;&#43;17 se añadirán nuevas abstracciones sobre el sistema de ficheros. De momento están disponibles como parte de las <a href=\"https://en.cppreference.com/w/cpp/experimental\">Características Experimentales de C&#43;&#43;</a>. Si queréis profundizar aquí está el <a href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4100.pdf\" target=\"_blank\" rel=\"noopener\">borrador final de la Especificación Técnica del Sistema de Ficheros</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_comenzar_a_utilizar_característica_experimental_filesystem_c17_g\">Comenzar a utilizar característica experimental filesystem C&#43;&#43;17 (g++)</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Simplemente debemos \"decir\" al compilador que:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>estamos escribiendo código C&#43;&#43;17 (<code>-c++1z</code>) y</p>\n</li>\n<li>\n<p>que añada la librería estándar con la librería filesystem (<code>-lstdc++fs</code>).</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++ -std=c++1z main.cpp -lstdc++fs &amp;&amp; ./a.out</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Veamos un ejemplo muy simple utilizando la clase <code>std::filesystem::path</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;experimental/filesystem&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">namespace</span> fs = std::experimental::filesystem;\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    fs::path aPath {<span class=\"hljs-string\">&quot;./path/to/file.txt&quot;</span>};\n\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Parent path: &quot;</span> &lt;&lt; aPath.<span class=\"hljs-built_in\">parent_path</span>() &lt;&lt; endl;\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Filename: &quot;</span> &lt;&lt; aPath.<span class=\"hljs-built_in\">filename</span>() &lt;&lt; endl;\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Extension: &quot;</span> &lt;&lt; aPath.<span class=\"hljs-built_in\">extension</span>() &lt;&lt; endl;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/9f8bebb8b7f0fbe7\" target=\"_blank\" rel=\"noopener\">Resultado de compilar y ejecutar el ejemplo anterior C&#43;&#43;17</a></div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ g++ -std=c++1z main.cpp -lstdc++fs &amp;&amp; ./a.out\n$ ./a.out\n\nParent path: <span class=\"hljs-string\">&quot;./path/to&quot;</span>\nFilename: <span class=\"hljs-string\">&quot;file.txt&quot;</span>\nExtension: <span class=\"hljs-string\">&quot;.txt&quot;</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_características_de_filesystem_c17\">Características de filesystem C&#43;&#43;17</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>A continuación vamos a analizar algunas características que nos proporciona <a href=\"https://en.cppreference.com/w/cpp/filesystem\" target=\"_blank\" rel=\"noopener\">std::filesystem</a> con ejemplos en C&#43;&#43;11 y C&#43;&#43;17, de esta forma podremos hacernos una idea de las utilidades que esta nueva librería nos trae y cómo efectivamente ayuda al desarrollador a escribir código más claro y seguro.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_stdfilesystempath\">std::filesystem::path</h3>\n<div class=\"paragraph\">\n<p>Más arriba ya hemos visto un pequeño <a href=\"https://coliru.stacked-crooked.com/a/9f8bebb8b7f0fbe7\" target=\"_blank\" rel=\"noopener\">ejemplo de uso de clase std::filesystem::path</a>. Ésta abstracción nos proporciona una ruta a ficheros y directorios multi-plataforma, utilizando el separador de directorios correspondiente a la plataforma en la que trabajamos <code>\\</code> en sistemas basados en Windows y <code>/</code> en sistemas basados en Unix.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_separador_de_directorios\">Separador de directorios</h3>\n<div class=\"paragraph\">\n<p>Si quisiéramos que nuestro software utilizase el separador de directorios correcto para una plataforma, en C&#43;&#43;11 podríamos utilizar una macro de compilación condicional:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Separador de directorios independiente de la plataforma en C&#43;&#43;11</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _WIN32</span>\n<span class=\"hljs-type\">const</span> string SEP = <span class=\"hljs-string\">&quot;\\\\&quot;</span>;\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\n<span class=\"hljs-type\">const</span> string SEP = <span class=\"hljs-string\">&quot;/&quot;</span>;\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Separator in my system &quot;</span> &lt;&lt; SEP &lt;&lt; endl;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://coliru.stacked-crooked.com/a/5023ee989105fc54\" target=\"_blank\" rel=\"noopener\">Compilar y ejecutar: ejemplo separador C&#43;&#43;11</a>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Separador de directorios independiente de la plataforma en C&#43;&#43;17. Más sencillo y claro.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;experimental/filesystem&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">namespace</span> fs = std::experimental::filesystem;\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Separator in my system &quot;</span> &lt;&lt; fs::path::preferred_separator &lt;&lt; endl;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://coliru.stacked-crooked.com/a/1f2f63b3f5597d05\" target=\"_blank\" rel=\"noopener\">Compilar y ejecutar: ejemplo separador C&#43;&#43;17</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_operador_de_separador_de_directorios\">Operador de separador de directorios</h3>\n<div class=\"paragraph\">\n<p><a href=\"https://en.cppreference.com/w/cpp/filesystem/path\">std::filesystem::path</a> implementa el operador <code>/</code>, el cual nos permite concatenar fácilmente rutas a ficheros o directorios.</p>\n</div>\n<div class=\"paragraph\">\n<p>Si quisiéramos construir rutas a directorios en C&#43;&#43;11, tendríamos que implementar cierta lógica extra para detectar que no añadimos separadores extra y para utilizar el separador correcto:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Concatenar paths en C&#43;&#43;11</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _WIN32</span>\n<span class=\"hljs-type\">const</span> string SEP = <span class=\"hljs-string\">&quot;\\\\&quot;</span>;\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\n<span class=\"hljs-type\">const</span> string SEP = <span class=\"hljs-string\">&quot;/&quot;</span>;\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    string root {<span class=\"hljs-string\">&quot;/&quot;</span>};\n    string dir {<span class=\"hljs-string\">&quot;var/www/&quot;</span>};\n    string index {<span class=\"hljs-string\">&quot;index.html&quot;</span>};\n\n    string pathToIndex{};\n    pathToIndex.<span class=\"hljs-built_in\">append</span>(root).<span class=\"hljs-built_in\">append</span>(SEP).<span class=\"hljs-built_in\">append</span>(dir).<span class=\"hljs-built_in\">append</span>(SEP).<span class=\"hljs-built_in\">append</span>(index);\n\n    cout &lt;&lt; pathToIndex &lt;&lt; endl;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/290b278ec1de9573\" target=\"_blank\" rel=\"noopener\">Compilar y ejecutar: ejemplo concatenar rutas C&#43;&#43;11</a></div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">//var/www//index.html</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Como vemos el resultado no es del todo correcto, deberíamos comprobar si las partes de la ruta ya contienen separador, para no añadirlo.</p>\n</div>\n<div class=\"paragraph\">\n<p>Toda esta lógica ya está implementada en <a href=\"https://en.cppreference.com/w/cpp/filesystem/path\">std::filesystem::path</a>, así que el código en C&#43;&#43;17 sería algo así:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Concatenar paths en C&#43;&#43;17</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;experimental/filesystem&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">namespace</span> fs = std::experimental::filesystem;\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    fs::path root {<span class=\"hljs-string\">&quot;/&quot;</span>};\n    fs::path dir {<span class=\"hljs-string\">&quot;var/www/&quot;</span>};\n    fs::path index {<span class=\"hljs-string\">&quot;index.html&quot;</span>};\n\n    fs::path pathToIndex = root / dir / index;\n\n    cout &lt;&lt; pathToIndex &lt;&lt; endl;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/a24d50875b4daad1\">Compilar y ejecutar: ejemplo concatenar rutas C&#43;&#43;17</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\"><span class=\"hljs-string\">&quot;/var/www/index.html&quot;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Aquí el código es más limpio y el resultado es simplemente correcto, no hay separadores duplicados.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_crear_y_borrar_directorios\">Crear y borrar directorios</h3>\n<div class=\"paragraph\">\n<p><a href=\"https://en.cppreference.com/w/cpp/filesystem\" target=\"_blank\" rel=\"noopener\">std::filesystem</a> introduce algunas facilidades para crear y borrar directorios y ficheros, primero vamos a ver una de las formas de hacerlo en C&#43;&#43;11.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Crear y borrar directorios anidados en C&#43;&#43;11</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/stat.h&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">auto</span> opts = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;\n    <span class=\"hljs-built_in\">mkdir</span>(<span class=\"hljs-string\">&quot;sandbox&quot;</span>, opts);\n    <span class=\"hljs-built_in\">mkdir</span>(<span class=\"hljs-string\">&quot;sandbox/a&quot;</span>, opts);\n    <span class=\"hljs-built_in\">mkdir</span>(<span class=\"hljs-string\">&quot;sandbox/a/b&quot;</span>, opts);\n    <span class=\"hljs-built_in\">mkdir</span>(<span class=\"hljs-string\">&quot;sandbox/c&quot;</span>, opts);\n    <span class=\"hljs-built_in\">mkdir</span>(<span class=\"hljs-string\">&quot;sandbox/c/d&quot;</span>, opts);\n\n    <span class=\"hljs-built_in\">system</span>(<span class=\"hljs-string\">&quot;ls -la sandbox/*&quot;</span>);\n\n    <span class=\"hljs-built_in\">remove</span>(<span class=\"hljs-string\">&quot;sandbox/c/d&quot;</span>);\n    <span class=\"hljs-built_in\">remove</span>(<span class=\"hljs-string\">&quot;sandbox/a/b&quot;</span>);\n    <span class=\"hljs-built_in\">remove</span>(<span class=\"hljs-string\">&quot;sandbox/c&quot;</span>);\n    <span class=\"hljs-built_in\">remove</span>(<span class=\"hljs-string\">&quot;sandbox/a&quot;</span>);\n    <span class=\"hljs-built_in\">remove</span>(<span class=\"hljs-string\">&quot;sandbox&quot;</span>);\n\n    <span class=\"hljs-built_in\">system</span>(<span class=\"hljs-string\">&quot;ls -la&quot;</span>);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/26f4763ec5b42adb\">Compilar y ejecutar: crear y borrar directorios C&#43;&#43;11</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++-4.9 -std=c++11 main.cpp -lm &amp;&amp; ./a.out\nsandbox/a:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 12:27 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 12:27 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 12:27 b\n\nsandbox/c:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 12:27 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 12:27 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 12:27 d\ntotal 8012\ndrwxrwxrwx 2 2001 2000    4096 May 28 12:27 .\ndrwxrwxrwx 3 2002 2000 8175616 May 28 12:27 ..\n-rwxr-xr-x 1 2001 2000    8168 May 28 12:27 a.out\n-rw-rw-rw- 1 2001 2000     517 May 28 12:27 main.cpp</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Para crear y borrar directorios anidados, debemos hacerlo uno por uno. Podemos escribir este fragmento de código con menos líneas, pero aún así tendremos que tener cuidado del orden en el que creamos/borramos los directorios.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">En C&#43;&#43;17 podemos borrar y crear directorios anidados con una sola llamada.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;experimental/filesystem&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">namespace</span> fs = std::experimental::filesystem;\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    fs::<span class=\"hljs-built_in\">create_directories</span>(<span class=\"hljs-string\">&quot;sandbox/a/b&quot;</span>);\n    fs::<span class=\"hljs-built_in\">create_directories</span>(<span class=\"hljs-string\">&quot;sandbox/c/d&quot;</span>);\n    <span class=\"hljs-built_in\">system</span>(<span class=\"hljs-string\">&quot;ls -la sandbox/*&quot;</span>);\n\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Were directories removed? &quot;</span> &lt;&lt; fs::<span class=\"hljs-built_in\">remove_all</span>(<span class=\"hljs-string\">&quot;sandbox&quot;</span>) &lt;&lt; endl;\n    <span class=\"hljs-built_in\">system</span>(<span class=\"hljs-string\">&quot;ls -la&quot;</span>);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/62c2d22fa0e7144c\">Compilar y ejecutar: crear y borrar directorios C&#43;&#43;17</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++ -std=c++1z -fconcepts -fgnu-tm  -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;&amp; ./a.out\nsandbox/a:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 16:45 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 16:45 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 16:45 b\n\nsandbox/c:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 16:45 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 16:45 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 16:45 d\nWere directories removed? 1\ntotal 10132\ndrwxrwxrwx 2 2001 2000    4096 May 28 16:45 .\ndrwxrwxrwx 3 2002 2000 8175616 May 28 16:45 ..\n-rwxr-xr-x 1 2001 2000 2170976 May 28 16:45 a.out\n-rw-rw-rw- 1 2001 2000     393 May 28 16:45 main.cpp</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_ejemplo_completo_iterar_recursivamente_por_directorios\">Ejemplo completo: Iterar Recursivamente por Directorios</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Vamos a ver un ejemplo algo más completo, consiste en iterar recursivamente a través de directorios, filtrando los ficheros por extension.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_c11\">C&#43;&#43;11</h3>\n<div class=\"paragraph\">\n<p>Este es el ejemplo en C&#43;&#43;11, sin filtrar por extension, para evitar complicarlo:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">filesystem.11.cpp</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;dirent.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;fstream&gt;</span> <span class=\"hljs-comment\">// std::ofstream</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;memory&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;system_error&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/stat.h&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-type\">const</span> string UP_DIR = <span class=\"hljs-string\">&quot;..&quot;</span>;\n<span class=\"hljs-type\">const</span> string CURRENT_DIR = <span class=\"hljs-string\">&quot;.&quot;</span>;\n<span class=\"hljs-type\">const</span> string SEP = <span class=\"hljs-string\">&quot;/&quot;</span>;\n\n\n<span class=\"hljs-function\">string <span class=\"hljs-title\">path</span><span class=\"hljs-params\">(initializer_list&lt;string&gt; parts)</span>\n</span>{\n    string pathTmp {};\n    string separator = <span class=\"hljs-string\">&quot;&quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> &amp; part: parts)\n    {\n        pathTmp.<span class=\"hljs-built_in\">append</span>(separator).<span class=\"hljs-built_in\">append</span>(part);\n        separator = SEP;\n    }\n    <span class=\"hljs-keyword\">return</span> pathTmp;\n}\n\n<span class=\"hljs-function\">vector&lt;string&gt; <span class=\"hljs-title\">getDirectoryFiles</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> string&amp; dir, <span class=\"hljs-type\">const</span> vector&lt;string&gt; &amp; extensions)</span>\n</span>{\n    vector&lt;string&gt; files;\n    <span class=\"hljs-function\">shared_ptr&lt;DIR&gt; <span class=\"hljs-title\">directory_ptr</span><span class=\"hljs-params\">(opendir(dir.c_str()), [](DIR* dir){ dir &amp;&amp; closedir(dir); })</span></span>;\n    <span class=\"hljs-keyword\">if</span> (!directory_ptr)\n    {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-built_in\">system_error</span>(<span class=\"hljs-built_in\">error_code</span>(errno, <span class=\"hljs-built_in\">system_category</span>()), <span class=\"hljs-string\">&quot;Error opening : &quot;</span> + dir);\n    }\n\n    <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">dirent</span> *dirent_ptr;\n    <span class=\"hljs-keyword\">while</span> ((dirent_ptr = <span class=\"hljs-built_in\">readdir</span>(directory_ptr.<span class=\"hljs-built_in\">get</span>())) != <span class=\"hljs-literal\">nullptr</span>)\n    {\n        <span class=\"hljs-type\">const</span> string fileName {dirent_ptr-&gt;d_name};\n        <span class=\"hljs-keyword\">if</span> (dirent_ptr-&gt;d_type == DT_DIR)\n        {\n            <span class=\"hljs-keyword\">if</span> (CURRENT_DIR != fileName &amp;&amp; UP_DIR != fileName)\n            {\n                <span class=\"hljs-keyword\">auto</span> subFiles = <span class=\"hljs-built_in\">getDirectoryFiles</span>(<span class=\"hljs-built_in\">path</span>({dir, fileName}), extensions);\n                files.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-built_in\">end</span>(files), <span class=\"hljs-built_in\">begin</span>(subFiles), <span class=\"hljs-built_in\">end</span>(subFiles));\n            }\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (dirent_ptr-&gt;d_type == DT_REG)\n        {\n            <span class=\"hljs-comment\">// here we should check also if filename has an extension in extensions vector</span>\n            files.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-built_in\">path</span>({dir, fileName}));\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> files;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">auto</span> opt = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;\n    <span class=\"hljs-built_in\">mkdir</span>(<span class=\"hljs-string\">&quot;sandbox&quot;</span>, opt);\n    <span class=\"hljs-built_in\">mkdir</span>(<span class=\"hljs-string\">&quot;sandbox/a&quot;</span>, opt);\n    <span class=\"hljs-built_in\">mkdir</span>(<span class=\"hljs-string\">&quot;sandbox/a/b&quot;</span>, opt);\n\n\tvector&lt;string&gt; e_files = {\n\t    <span class=\"hljs-string\">&quot;./sandbox/a/b/file1.rst&quot;</span>,\n\t    <span class=\"hljs-string\">&quot;./sandbox/a/b/file1.txt&quot;</span>,\n\t    <span class=\"hljs-string\">&quot;./sandbox/a/file2.RST&quot;</span>,\n\t    <span class=\"hljs-string\">&quot;./sandbox/file3.md&quot;</span>,\n\t    <span class=\"hljs-string\">&quot;./sandbox/will_be.ignored&quot;</span>\n\t};\n\n\t<span class=\"hljs-comment\">// create files</span>\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> &amp;f: e_files)\n\t{\n\t\t<span class=\"hljs-function\">ofstream <span class=\"hljs-title\">of</span><span class=\"hljs-params\">(f, ofstream::out)</span></span>;\n\t\tof &lt;&lt; <span class=\"hljs-string\">&quot;test&quot;</span>;\n\t}\n\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;filtered files: &quot;</span> &lt;&lt; endl;\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> &amp;f: <span class=\"hljs-built_in\">getDirectoryFiles</span>(<span class=\"hljs-string\">&quot;.&quot;</span>, {<span class=\"hljs-string\">&quot;.rst&quot;</span>, <span class=\"hljs-string\">&quot;.RST&quot;</span>, <span class=\"hljs-string\">&quot;.md&quot;</span>})){\n\t    cout &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span> &lt;&lt; f &lt;&lt; endl;\n\t}\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/af4228e039a281b3\" target=\"_blank\" rel=\"noopener\">Compilar y ejecutar el ejemplo C&#43;&#43;11</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++ -std=c++11 -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;&amp; ./a.out\nfiltered files:\n\t./main.cpp\n\t./sandbox/file3.md\n\t./sandbox/will_be.ignored\n\t./sandbox/a/b/file1.rst\n\t./sandbox/a/b/file1.txt\n\t./sandbox/a/file2.RST\n\t./a.out</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_c17\">C&#43;&#43;17</h3>\n<div class=\"paragraph\">\n<p>El siguiente ejemplo filtra los ficheros por extension.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">filesystem.17.cpp</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\"><span class=\"hljs-comment\">#include &lt;dirent.h&gt;</span>\n<span class=\"hljs-comment\">#include &lt;cstring&gt;</span>\n<span class=\"hljs-comment\">#include &lt;iostream&gt;</span>\n<span class=\"hljs-comment\">#include &lt;fstream&gt; // std::ofstream</span>\n<span class=\"hljs-comment\">#include &lt;vector&gt;</span>\n<span class=\"hljs-comment\">#include &lt;memory&gt;</span>\n<span class=\"hljs-comment\">#include &lt;system_error&gt;</span>\n<span class=\"hljs-comment\">#include &lt;sys/stat.h&gt;</span>\n\nusing namespace std;\n\nconst string UP_DIR = <span class=\"hljs-string\">&quot;..&quot;</span>;\nconst string CURRENT_DIR = <span class=\"hljs-string\">&quot;.&quot;</span>;\nconst string SEP = <span class=\"hljs-string\">&quot;/&quot;</span>;\n\n\nstring path(initializer_list&lt;string&gt; parts)\n{\n    string pathTmp {};\n    string separator = <span class=\"hljs-string\">&quot;&quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (auto &amp; part: parts)\n    {\n        pathTmp.append(separator).append(part);\n        separator = SEP;\n    }\n    <span class=\"hljs-built_in\">return</span> pathTmp;\n}\n\nvector&lt;string&gt; getDirectoryFiles(const string&amp; <span class=\"hljs-built_in\">dir</span>, const vector&lt;string&gt; &amp; extensions)\n{\n    vector&lt;string&gt; files;\n    shared_ptr&lt;DIR&gt; directory_ptr(opendir(dir.c_str()), [](DIR* <span class=\"hljs-built_in\">dir</span>){ <span class=\"hljs-built_in\">dir</span> &amp;&amp; closedir(<span class=\"hljs-built_in\">dir</span>); });\n    <span class=\"hljs-keyword\">if</span> (!directory_ptr)\n    {\n        throw system_error(error_code(errno, system_category()), <span class=\"hljs-string\">&quot;Error opening : &quot;</span> + <span class=\"hljs-built_in\">dir</span>);\n    }\n\n    struct dirent *dirent_ptr;\n    <span class=\"hljs-keyword\">while</span> ((dirent_ptr = readdir(directory_ptr.get())) != nullptr)\n    {\n        const string fileName {dirent_ptr-&gt;d_name};\n        <span class=\"hljs-keyword\">if</span> (dirent_ptr-&gt;d_type == DT_DIR)\n        {\n            <span class=\"hljs-keyword\">if</span> (CURRENT_DIR != fileName &amp;&amp; UP_DIR != fileName)\n            {\n                auto subFiles = getDirectoryFiles(path({<span class=\"hljs-built_in\">dir</span>, fileName}), extensions);\n                files.insert(end(files), begin(subFiles), end(subFiles));\n            }\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (dirent_ptr-&gt;d_type == DT_REG)\n        {\n            // here we should check also <span class=\"hljs-keyword\">if</span> filename has an extension <span class=\"hljs-keyword\">in</span> extensions vector\n            files.push_back(path({<span class=\"hljs-built_in\">dir</span>, fileName}));\n        }\n    }\n    <span class=\"hljs-built_in\">return</span> files;\n}\n\nint <span class=\"hljs-function\"><span class=\"hljs-title\">main</span></span> ()\n{\n    auto opt = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;\n    <span class=\"hljs-built_in\">mkdir</span>(<span class=\"hljs-string\">&quot;sandbox&quot;</span>, opt);\n    <span class=\"hljs-built_in\">mkdir</span>(<span class=\"hljs-string\">&quot;sandbox/a&quot;</span>, opt);\n    <span class=\"hljs-built_in\">mkdir</span>(<span class=\"hljs-string\">&quot;sandbox/a/b&quot;</span>, opt);\n\n\tvector&lt;string&gt; e_files = {\n\t    <span class=\"hljs-string\">&quot;./sandbox/a/b/file1.rst&quot;</span>,\n\t    <span class=\"hljs-string\">&quot;./sandbox/a/b/file1.txt&quot;</span>,\n\t    <span class=\"hljs-string\">&quot;./sandbox/a/file2.RST&quot;</span>,\n\t    <span class=\"hljs-string\">&quot;./sandbox/file3.md&quot;</span>,\n\t    <span class=\"hljs-string\">&quot;./sandbox/will_be.ignored&quot;</span>\n\t};\n\n\t// create files\n\t<span class=\"hljs-keyword\">for</span> (auto &amp;f: e_files)\n\t{\n\t\tofstream of(f, ofstream::out);\n\t\tof &lt;&lt; <span class=\"hljs-string\">&quot;test&quot;</span>;\n\t}\n\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;filtered files: &quot;</span> &lt;&lt; <span class=\"hljs-string\">endl;\n\tfor (auto &amp;f: getDirectoryFiles(&quot;.&quot;, {&quot;.rst&quot;, &quot;.RST&quot;, &quot;.md&quot;})){\n\t    cout &lt;&lt; &quot;\\t&quot; &lt;&lt; f &lt;&lt; endl</span>;\n\t}\n\n    <span class=\"hljs-built_in\">return</span> 0;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/af4228e039a281b3\" target=\"_blank\" rel=\"noopener\">Compilar y ejecutar el ejemplo C&#43;&#43;17</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++ -std=c++11 -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;&amp; ./a.out\nfiltered files:\n\t./main.cpp\n\t./sandbox/file3.md\n\t./sandbox/will_be.ignored\n\t./sandbox/a/b/file1.rst\n\t./sandbox/a/b/file1.txt\n\t./sandbox/a/file2.RST\n\t./a.out</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>","props":{"title":"Sistema de Ficheros en C++17","created":1495954800000,"modified":1495954800000,"filepath":"/home/carlos/workspace/pers/blablablog/posts/recursive-directory-iterator.es.adoc","dirpath":"/home/carlos/workspace/pers/blablablog/posts","keywords":["C++","C++11","C++17","IO","Filesystem"],"lang":"es","otherLangs":["en"],"slug":"recursive-directory-iterator","summary":"Vamos a analizar con un ejemplo la forma de recorrer directorios de manera recursiva a partir de C++17","author":"Carlos","path":"/langs/es/posts/recursive-directory-iterator"}}