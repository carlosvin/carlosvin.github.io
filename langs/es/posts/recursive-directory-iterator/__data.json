{"type":"data","nodes":[null,{"type":"data","data":[{"path":1,"lang":2,"translations":3},"/langs/es/posts/recursive-directory-iterator/","es",{"lang":2,"author":4,"siteName":5,"siteDescription":6,"categories":7,"Categories":8,"RecentPosts":9,"NoPosts":10,"SubscribeTo":11,"AboutMe":12,"AllPosts":13},"Carlos Martin Sanchez","Carlos dice bla bla","Qué está pasando por mi cabeza y alrededores","categorías","Categorías","Últimas entradas","No hay entradas","Suscríbete al feed","Sobre mi","Todas las entradas"],"uses":{"params":["lang"],"url":1},"slash":"always"},{"type":"data","data":[{"html":1,"props":2,"jsonLd":20},"\u003Cdiv id=\"toc\" class=\"toc\">\n\u003Cdiv id=\"toctitle\">Table of Contents\u003C/div>\n\u003Cul class=\"sectlevel1\">\n\u003Cli>\u003Ca href=\"#_introducción\">Introducción\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_comenzar_a_utilizar_característica_experimental_filesystem_c17_g\">Comenzar a utilizar característica experimental filesystem C&#43;&#43;17 (g++)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_características_de_filesystem_c17\">Características de filesystem C&#43;&#43;17\u003C/a>\n\u003Cul class=\"sectlevel2\">\n\u003Cli>\u003Ca href=\"#_stdfilesystempath\">std::filesystem::path\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_separador_de_directorios\">Separador de directorios\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_operador_de_separador_de_directorios\">Operador de separador de directorios\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_crear_y_borrar_directorios\">Crear y borrar directorios\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#_ejemplo_completo_iterar_recursivamente_por_directorios\">Ejemplo completo: Iterar Recursivamente por Directorios\u003C/a>\n\u003Cul class=\"sectlevel2\">\n\u003Cli>\u003Ca href=\"#_c11\">C&#43;&#43;11\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_c17\">C&#43;&#43;17\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_introducción\">Introducción\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>A partir de C&#43;&#43;17 se añadirán nuevas abstracciones sobre el sistema de ficheros. De momento están disponibles como parte de las \u003Ca href=\"https://en.cppreference.com/w/cpp/experimental\">Características Experimentales de C&#43;&#43;\u003C/a>. Si queréis profundizar aquí está el \u003Ca href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4100.pdf\" target=\"_blank\" rel=\"noopener\">borrador final de la Especificación Técnica del Sistema de Ficheros\u003C/a>.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_comenzar_a_utilizar_característica_experimental_filesystem_c17_g\">Comenzar a utilizar característica experimental filesystem C&#43;&#43;17 (g++)\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Simplemente debemos \"decir\" al compilador que:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>estamos escribiendo código C&#43;&#43;17 (\u003Ccode>-c++1z\u003C/code>) y\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>que añada la librería estándar con la librería filesystem (\u003Ccode>-lstdc++fs\u003C/code>).\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">g++ -std=c++1z main.cpp -lstdc++fs &amp;&amp; ./a.out\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Veamos un ejemplo muy simple utilizando la clase \u003Ccode>std::filesystem::path\u003C/code>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;experimental/filesystem&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;iostream&gt;\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">namespace\u003C/span> fs = std::experimental::filesystem;\n\u003Cspan class=\"hljs-keyword\">using\u003C/span> \u003Cspan class=\"hljs-keyword\">namespace\u003C/span> std;\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    fs::path aPath {\u003Cspan class=\"hljs-string\">&quot;./path/to/file.txt&quot;\u003C/span>};\n\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;Parent path: &quot;\u003C/span> &lt;&lt; aPath.\u003Cspan class=\"hljs-built_in\">parent_path\u003C/span>() &lt;&lt; endl;\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;Filename: &quot;\u003C/span> &lt;&lt; aPath.\u003Cspan class=\"hljs-built_in\">filename\u003C/span>() &lt;&lt; endl;\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;Extension: &quot;\u003C/span> &lt;&lt; aPath.\u003Cspan class=\"hljs-built_in\">extension\u003C/span>() &lt;&lt; endl;\n\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">\u003Ca href=\"https://coliru.stacked-crooked.com/a/9f8bebb8b7f0fbe7\" target=\"_blank\" rel=\"noopener\">Resultado de compilar y ejecutar el ejemplo anterior C&#43;&#43;17\u003C/a>\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">$ g++ -std=c++1z main.cpp -lstdc++fs &amp;&amp; ./a.out\n$ ./a.out\n\nParent path: \u003Cspan class=\"hljs-string\">&quot;./path/to&quot;\u003C/span>\nFilename: \u003Cspan class=\"hljs-string\">&quot;file.txt&quot;\u003C/span>\nExtension: \u003Cspan class=\"hljs-string\">&quot;.txt&quot;\u003C/span>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_características_de_filesystem_c17\">Características de filesystem C&#43;&#43;17\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>A continuación vamos a analizar algunas características que nos proporciona \u003Ca href=\"https://en.cppreference.com/w/cpp/filesystem\" target=\"_blank\" rel=\"noopener\">std::filesystem\u003C/a> con ejemplos en C&#43;&#43;11 y C&#43;&#43;17, de esta forma podremos hacernos una idea de las utilidades que esta nueva librería nos trae y cómo efectivamente ayuda al desarrollador a escribir código más claro y seguro.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_stdfilesystempath\">std::filesystem::path\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Más arriba ya hemos visto un pequeño \u003Ca href=\"https://coliru.stacked-crooked.com/a/9f8bebb8b7f0fbe7\" target=\"_blank\" rel=\"noopener\">ejemplo de uso de clase std::filesystem::path\u003C/a>. Ésta abstracción nos proporciona una ruta a ficheros y directorios multi-plataforma, utilizando el separador de directorios correspondiente a la plataforma en la que trabajamos \u003Ccode>\\\u003C/code> en sistemas basados en Windows y \u003Ccode>/\u003C/code> en sistemas basados en Unix.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_separador_de_directorios\">Separador de directorios\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Si quisiéramos que nuestro software utilizase el separador de directorios correcto para una plataforma, en C&#43;&#43;11 podríamos utilizar una macro de compilación condicional:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Separador de directorios independiente de la plataforma en C&#43;&#43;11\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;iostream&gt;\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">using\u003C/span> \u003Cspan class=\"hljs-keyword\">namespace\u003C/span> std;\n\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">ifdef\u003C/span> _WIN32\u003C/span>\n\u003Cspan class=\"hljs-type\">const\u003C/span> string SEP = \u003Cspan class=\"hljs-string\">&quot;\\\\&quot;\u003C/span>;\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">else\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-type\">const\u003C/span> string SEP = \u003Cspan class=\"hljs-string\">&quot;/&quot;\u003C/span>;\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">endif\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;Separator in my system &quot;\u003C/span> &lt;&lt; SEP &lt;&lt; endl;\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://coliru.stacked-crooked.com/a/5023ee989105fc54\" target=\"_blank\" rel=\"noopener\">Compilar y ejecutar: ejemplo separador C&#43;&#43;11\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Separador de directorios independiente de la plataforma en C&#43;&#43;17. Más sencillo y claro.\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;experimental/filesystem&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;iostream&gt;\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">namespace\u003C/span> fs = std::experimental::filesystem;\n\u003Cspan class=\"hljs-keyword\">using\u003C/span> \u003Cspan class=\"hljs-keyword\">namespace\u003C/span> std;\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;Separator in my system &quot;\u003C/span> &lt;&lt; fs::path::preferred_separator &lt;&lt; endl;\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://coliru.stacked-crooked.com/a/1f2f63b3f5597d05\" target=\"_blank\" rel=\"noopener\">Compilar y ejecutar: ejemplo separador C&#43;&#43;17\u003C/a>.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_operador_de_separador_de_directorios\">Operador de separador de directorios\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://en.cppreference.com/w/cpp/filesystem/path\">std::filesystem::path\u003C/a> implementa el operador \u003Ccode>/\u003C/code>, el cual nos permite concatenar fácilmente rutas a ficheros o directorios.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Si quisiéramos construir rutas a directorios en C&#43;&#43;11, tendríamos que implementar cierta lógica extra para detectar que no añadimos separadores extra y para utilizar el separador correcto:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Concatenar paths en C&#43;&#43;11\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;iostream&gt;\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">using\u003C/span> \u003Cspan class=\"hljs-keyword\">namespace\u003C/span> std;\n\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">ifdef\u003C/span> _WIN32\u003C/span>\n\u003Cspan class=\"hljs-type\">const\u003C/span> string SEP = \u003Cspan class=\"hljs-string\">&quot;\\\\&quot;\u003C/span>;\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">else\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-type\">const\u003C/span> string SEP = \u003Cspan class=\"hljs-string\">&quot;/&quot;\u003C/span>;\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">endif\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    string root {\u003Cspan class=\"hljs-string\">&quot;/&quot;\u003C/span>};\n    string dir {\u003Cspan class=\"hljs-string\">&quot;var/www/&quot;\u003C/span>};\n    string index {\u003Cspan class=\"hljs-string\">&quot;index.html&quot;\u003C/span>};\n\n    string pathToIndex{};\n    pathToIndex.\u003Cspan class=\"hljs-built_in\">append\u003C/span>(root).\u003Cspan class=\"hljs-built_in\">append\u003C/span>(SEP).\u003Cspan class=\"hljs-built_in\">append\u003C/span>(dir).\u003Cspan class=\"hljs-built_in\">append\u003C/span>(SEP).\u003Cspan class=\"hljs-built_in\">append\u003C/span>(index);\n\n    cout &lt;&lt; pathToIndex &lt;&lt; endl;\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">\u003Ca href=\"https://coliru.stacked-crooked.com/a/290b278ec1de9573\" target=\"_blank\" rel=\"noopener\">Compilar y ejecutar: ejemplo concatenar rutas C&#43;&#43;11\u003C/a>\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">//var/www//index.html\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Como vemos el resultado no es del todo correcto, deberíamos comprobar si las partes de la ruta ya contienen separador, para no añadirlo.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Toda esta lógica ya está implementada en \u003Ca href=\"https://en.cppreference.com/w/cpp/filesystem/path\">std::filesystem::path\u003C/a>, así que el código en C&#43;&#43;17 sería algo así:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Concatenar paths en C&#43;&#43;17\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;experimental/filesystem&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;iostream&gt;\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">namespace\u003C/span> fs = std::experimental::filesystem;\n\u003Cspan class=\"hljs-keyword\">using\u003C/span> \u003Cspan class=\"hljs-keyword\">namespace\u003C/span> std;\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    fs::path root {\u003Cspan class=\"hljs-string\">&quot;/&quot;\u003C/span>};\n    fs::path dir {\u003Cspan class=\"hljs-string\">&quot;var/www/&quot;\u003C/span>};\n    fs::path index {\u003Cspan class=\"hljs-string\">&quot;index.html&quot;\u003C/span>};\n\n    fs::path pathToIndex = root / dir / index;\n\n    cout &lt;&lt; pathToIndex &lt;&lt; endl;\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">\u003Ca href=\"https://coliru.stacked-crooked.com/a/a24d50875b4daad1\">Compilar y ejecutar: ejemplo concatenar rutas C&#43;&#43;17\u003C/a>.\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">\u003Cspan class=\"hljs-string\">&quot;/var/www/index.html&quot;\u003C/span>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Aquí el código es más limpio y el resultado es simplemente correcto, no hay separadores duplicados.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_crear_y_borrar_directorios\">Crear y borrar directorios\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://en.cppreference.com/w/cpp/filesystem\" target=\"_blank\" rel=\"noopener\">std::filesystem\u003C/a> introduce algunas facilidades para crear y borrar directorios y ficheros, primero vamos a ver una de las formas de hacerlo en C&#43;&#43;11.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Crear y borrar directorios anidados en C&#43;&#43;11\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;iostream&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;cstdio&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;sys/stat.h&gt;\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">using\u003C/span> \u003Cspan class=\"hljs-keyword\">namespace\u003C/span> std;\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    \u003Cspan class=\"hljs-keyword\">auto\u003C/span> opts = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;\n    \u003Cspan class=\"hljs-built_in\">mkdir\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox&quot;\u003C/span>, opts);\n    \u003Cspan class=\"hljs-built_in\">mkdir\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/a&quot;\u003C/span>, opts);\n    \u003Cspan class=\"hljs-built_in\">mkdir\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/a/b&quot;\u003C/span>, opts);\n    \u003Cspan class=\"hljs-built_in\">mkdir\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/c&quot;\u003C/span>, opts);\n    \u003Cspan class=\"hljs-built_in\">mkdir\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/c/d&quot;\u003C/span>, opts);\n\n    \u003Cspan class=\"hljs-built_in\">system\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;ls -la sandbox/*&quot;\u003C/span>);\n\n    \u003Cspan class=\"hljs-built_in\">remove\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/c/d&quot;\u003C/span>);\n    \u003Cspan class=\"hljs-built_in\">remove\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/a/b&quot;\u003C/span>);\n    \u003Cspan class=\"hljs-built_in\">remove\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/c&quot;\u003C/span>);\n    \u003Cspan class=\"hljs-built_in\">remove\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/a&quot;\u003C/span>);\n    \u003Cspan class=\"hljs-built_in\">remove\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox&quot;\u003C/span>);\n\n    \u003Cspan class=\"hljs-built_in\">system\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;ls -la&quot;\u003C/span>);\n\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">\u003Ca href=\"https://coliru.stacked-crooked.com/a/26f4763ec5b42adb\">Compilar y ejecutar: crear y borrar directorios C&#43;&#43;11\u003C/a>.\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">g++-4.9 -std=c++11 main.cpp -lm &amp;&amp; ./a.out\nsandbox/a:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 12:27 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 12:27 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 12:27 b\n\nsandbox/c:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 12:27 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 12:27 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 12:27 d\ntotal 8012\ndrwxrwxrwx 2 2001 2000    4096 May 28 12:27 .\ndrwxrwxrwx 3 2002 2000 8175616 May 28 12:27 ..\n-rwxr-xr-x 1 2001 2000    8168 May 28 12:27 a.out\n-rw-rw-rw- 1 2001 2000     517 May 28 12:27 main.cpp\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Para crear y borrar directorios anidados, debemos hacerlo uno por uno. Podemos escribir este fragmento de código con menos líneas, pero aún así tendremos que tener cuidado del orden en el que creamos/borramos los directorios.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">En C&#43;&#43;17 podemos borrar y crear directorios anidados con una sola llamada.\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;experimental/filesystem&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;iostream&gt;\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">namespace\u003C/span> fs = std::experimental::filesystem;\n\u003Cspan class=\"hljs-keyword\">using\u003C/span> \u003Cspan class=\"hljs-keyword\">namespace\u003C/span> std;\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    fs::\u003Cspan class=\"hljs-built_in\">create_directories\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/a/b&quot;\u003C/span>);\n    fs::\u003Cspan class=\"hljs-built_in\">create_directories\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/c/d&quot;\u003C/span>);\n    \u003Cspan class=\"hljs-built_in\">system\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;ls -la sandbox/*&quot;\u003C/span>);\n\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;Were directories removed? &quot;\u003C/span> &lt;&lt; fs::\u003Cspan class=\"hljs-built_in\">remove_all\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox&quot;\u003C/span>) &lt;&lt; endl;\n    \u003Cspan class=\"hljs-built_in\">system\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;ls -la&quot;\u003C/span>);\n\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">\u003Ca href=\"https://coliru.stacked-crooked.com/a/62c2d22fa0e7144c\">Compilar y ejecutar: crear y borrar directorios C&#43;&#43;17\u003C/a>.\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">g++ -std=c++1z -fconcepts -fgnu-tm  -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;&amp; ./a.out\nsandbox/a:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 16:45 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 16:45 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 16:45 b\n\nsandbox/c:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 16:45 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 16:45 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 16:45 d\nWere directories removed? 1\ntotal 10132\ndrwxrwxrwx 2 2001 2000    4096 May 28 16:45 .\ndrwxrwxrwx 3 2002 2000 8175616 May 28 16:45 ..\n-rwxr-xr-x 1 2001 2000 2170976 May 28 16:45 a.out\n-rw-rw-rw- 1 2001 2000     393 May 28 16:45 main.cpp\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_ejemplo_completo_iterar_recursivamente_por_directorios\">Ejemplo completo: Iterar Recursivamente por Directorios\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Vamos a ver un ejemplo algo más completo, consiste en iterar recursivamente a través de directorios, filtrando los ficheros por extension.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_c11\">C&#43;&#43;11\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Este es el ejemplo en C&#43;&#43;11, sin filtrar por extension, para evitar complicarlo:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">filesystem.11.cpp\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;dirent.h&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;cstring&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;iostream&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;fstream&gt;\u003C/span> \u003Cspan class=\"hljs-comment\">// std::ofstream\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;vector&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;memory&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;system_error&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;sys/stat.h&gt;\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">using\u003C/span> \u003Cspan class=\"hljs-keyword\">namespace\u003C/span> std;\n\n\u003Cspan class=\"hljs-type\">const\u003C/span> string UP_DIR = \u003Cspan class=\"hljs-string\">&quot;..&quot;\u003C/span>;\n\u003Cspan class=\"hljs-type\">const\u003C/span> string CURRENT_DIR = \u003Cspan class=\"hljs-string\">&quot;.&quot;\u003C/span>;\n\u003Cspan class=\"hljs-type\">const\u003C/span> string SEP = \u003Cspan class=\"hljs-string\">&quot;/&quot;\u003C/span>;\n\n\n\u003Cspan class=\"hljs-function\">string \u003Cspan class=\"hljs-title\">path\u003C/span>\u003Cspan class=\"hljs-params\">(initializer_list&lt;string&gt; parts)\u003C/span>\n\u003C/span>{\n    string pathTmp {};\n    string separator = \u003Cspan class=\"hljs-string\">&quot;&quot;\u003C/span>;\n    \u003Cspan class=\"hljs-keyword\">for\u003C/span> (\u003Cspan class=\"hljs-keyword\">auto\u003C/span> &amp; part: parts)\n    {\n        pathTmp.\u003Cspan class=\"hljs-built_in\">append\u003C/span>(separator).\u003Cspan class=\"hljs-built_in\">append\u003C/span>(part);\n        separator = SEP;\n    }\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> pathTmp;\n}\n\n\u003Cspan class=\"hljs-function\">vector&lt;string&gt; \u003Cspan class=\"hljs-title\">getDirectoryFiles\u003C/span>\u003Cspan class=\"hljs-params\">(\u003Cspan class=\"hljs-type\">const\u003C/span> string&amp; dir, \u003Cspan class=\"hljs-type\">const\u003C/span> vector&lt;string&gt; &amp; extensions)\u003C/span>\n\u003C/span>{\n    vector&lt;string&gt; files;\n    \u003Cspan class=\"hljs-function\">shared_ptr&lt;DIR&gt; \u003Cspan class=\"hljs-title\">directory_ptr\u003C/span>\u003Cspan class=\"hljs-params\">(opendir(dir.c_str()), [](DIR* dir){ dir &amp;&amp; closedir(dir); })\u003C/span>\u003C/span>;\n    \u003Cspan class=\"hljs-keyword\">if\u003C/span> (!directory_ptr)\n    {\n        \u003Cspan class=\"hljs-keyword\">throw\u003C/span> \u003Cspan class=\"hljs-built_in\">system_error\u003C/span>(\u003Cspan class=\"hljs-built_in\">error_code\u003C/span>(errno, \u003Cspan class=\"hljs-built_in\">system_category\u003C/span>()), \u003Cspan class=\"hljs-string\">&quot;Error opening : &quot;\u003C/span> + dir);\n    }\n\n    \u003Cspan class=\"hljs-keyword\">struct\u003C/span> \u003Cspan class=\"hljs-title class_\">dirent\u003C/span> *dirent_ptr;\n    \u003Cspan class=\"hljs-keyword\">while\u003C/span> ((dirent_ptr = \u003Cspan class=\"hljs-built_in\">readdir\u003C/span>(directory_ptr.\u003Cspan class=\"hljs-built_in\">get\u003C/span>())) != \u003Cspan class=\"hljs-literal\">nullptr\u003C/span>)\n    {\n        \u003Cspan class=\"hljs-type\">const\u003C/span> string fileName {dirent_ptr-&gt;d_name};\n        \u003Cspan class=\"hljs-keyword\">if\u003C/span> (dirent_ptr-&gt;d_type == DT_DIR)\n        {\n            \u003Cspan class=\"hljs-keyword\">if\u003C/span> (CURRENT_DIR != fileName &amp;&amp; UP_DIR != fileName)\n            {\n                \u003Cspan class=\"hljs-keyword\">auto\u003C/span> subFiles = \u003Cspan class=\"hljs-built_in\">getDirectoryFiles\u003C/span>(\u003Cspan class=\"hljs-built_in\">path\u003C/span>({dir, fileName}), extensions);\n                files.\u003Cspan class=\"hljs-built_in\">insert\u003C/span>(\u003Cspan class=\"hljs-built_in\">end\u003C/span>(files), \u003Cspan class=\"hljs-built_in\">begin\u003C/span>(subFiles), \u003Cspan class=\"hljs-built_in\">end\u003C/span>(subFiles));\n            }\n        }\n        \u003Cspan class=\"hljs-keyword\">else\u003C/span> \u003Cspan class=\"hljs-keyword\">if\u003C/span> (dirent_ptr-&gt;d_type == DT_REG)\n        {\n            \u003Cspan class=\"hljs-comment\">// here we should check also if filename has an extension in extensions vector\u003C/span>\n            files.\u003Cspan class=\"hljs-built_in\">push_back\u003C/span>(\u003Cspan class=\"hljs-built_in\">path\u003C/span>({dir, fileName}));\n        }\n    }\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> files;\n}\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span> \u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    \u003Cspan class=\"hljs-keyword\">auto\u003C/span> opt = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;\n    \u003Cspan class=\"hljs-built_in\">mkdir\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox&quot;\u003C/span>, opt);\n    \u003Cspan class=\"hljs-built_in\">mkdir\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/a&quot;\u003C/span>, opt);\n    \u003Cspan class=\"hljs-built_in\">mkdir\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/a/b&quot;\u003C/span>, opt);\n\n\tvector&lt;string&gt; e_files = {\n\t    \u003Cspan class=\"hljs-string\">&quot;./sandbox/a/b/file1.rst&quot;\u003C/span>,\n\t    \u003Cspan class=\"hljs-string\">&quot;./sandbox/a/b/file1.txt&quot;\u003C/span>,\n\t    \u003Cspan class=\"hljs-string\">&quot;./sandbox/a/file2.RST&quot;\u003C/span>,\n\t    \u003Cspan class=\"hljs-string\">&quot;./sandbox/file3.md&quot;\u003C/span>,\n\t    \u003Cspan class=\"hljs-string\">&quot;./sandbox/will_be.ignored&quot;\u003C/span>\n\t};\n\n\t\u003Cspan class=\"hljs-comment\">// create files\u003C/span>\n\t\u003Cspan class=\"hljs-keyword\">for\u003C/span> (\u003Cspan class=\"hljs-keyword\">auto\u003C/span> &amp;f: e_files)\n\t{\n\t\t\u003Cspan class=\"hljs-function\">ofstream \u003Cspan class=\"hljs-title\">of\u003C/span>\u003Cspan class=\"hljs-params\">(f, ofstream::out)\u003C/span>\u003C/span>;\n\t\tof &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;test&quot;\u003C/span>;\n\t}\n\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;filtered files: &quot;\u003C/span> &lt;&lt; endl;\n\t\u003Cspan class=\"hljs-keyword\">for\u003C/span> (\u003Cspan class=\"hljs-keyword\">auto\u003C/span> &amp;f: \u003Cspan class=\"hljs-built_in\">getDirectoryFiles\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;.&quot;\u003C/span>, {\u003Cspan class=\"hljs-string\">&quot;.rst&quot;\u003C/span>, \u003Cspan class=\"hljs-string\">&quot;.RST&quot;\u003C/span>, \u003Cspan class=\"hljs-string\">&quot;.md&quot;\u003C/span>})){\n\t    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;\\t&quot;\u003C/span> &lt;&lt; f &lt;&lt; endl;\n\t}\n\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">\u003Ca href=\"https://coliru.stacked-crooked.com/a/af4228e039a281b3\" target=\"_blank\" rel=\"noopener\">Compilar y ejecutar el ejemplo C&#43;&#43;11\u003C/a>.\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">g++ -std=c++11 -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;&amp; ./a.out\nfiltered files:\n\t./main.cpp\n\t./sandbox/file3.md\n\t./sandbox/will_be.ignored\n\t./sandbox/a/b/file1.rst\n\t./sandbox/a/b/file1.txt\n\t./sandbox/a/file2.RST\n\t./a.out\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_c17\">C&#43;&#43;17\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>El siguiente ejemplo filtra los ficheros por extension.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">filesystem.17.cpp\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">\u003Cspan class=\"hljs-comment\">#include &lt;dirent.h&gt;\u003C/span>\n\u003Cspan class=\"hljs-comment\">#include &lt;cstring&gt;\u003C/span>\n\u003Cspan class=\"hljs-comment\">#include &lt;iostream&gt;\u003C/span>\n\u003Cspan class=\"hljs-comment\">#include &lt;fstream&gt; // std::ofstream\u003C/span>\n\u003Cspan class=\"hljs-comment\">#include &lt;vector&gt;\u003C/span>\n\u003Cspan class=\"hljs-comment\">#include &lt;memory&gt;\u003C/span>\n\u003Cspan class=\"hljs-comment\">#include &lt;system_error&gt;\u003C/span>\n\u003Cspan class=\"hljs-comment\">#include &lt;sys/stat.h&gt;\u003C/span>\n\nusing namespace std;\n\nconst string UP_DIR = \u003Cspan class=\"hljs-string\">&quot;..&quot;\u003C/span>;\nconst string CURRENT_DIR = \u003Cspan class=\"hljs-string\">&quot;.&quot;\u003C/span>;\nconst string SEP = \u003Cspan class=\"hljs-string\">&quot;/&quot;\u003C/span>;\n\n\nstring path(initializer_list&lt;string&gt; parts)\n{\n    string pathTmp {};\n    string separator = \u003Cspan class=\"hljs-string\">&quot;&quot;\u003C/span>;\n    \u003Cspan class=\"hljs-keyword\">for\u003C/span> (auto &amp; part: parts)\n    {\n        pathTmp.append(separator).append(part);\n        separator = SEP;\n    }\n    \u003Cspan class=\"hljs-built_in\">return\u003C/span> pathTmp;\n}\n\nvector&lt;string&gt; getDirectoryFiles(const string&amp; \u003Cspan class=\"hljs-built_in\">dir\u003C/span>, const vector&lt;string&gt; &amp; extensions)\n{\n    vector&lt;string&gt; files;\n    shared_ptr&lt;DIR&gt; directory_ptr(opendir(dir.c_str()), [](DIR* \u003Cspan class=\"hljs-built_in\">dir\u003C/span>){ \u003Cspan class=\"hljs-built_in\">dir\u003C/span> &amp;&amp; closedir(\u003Cspan class=\"hljs-built_in\">dir\u003C/span>); });\n    \u003Cspan class=\"hljs-keyword\">if\u003C/span> (!directory_ptr)\n    {\n        throw system_error(error_code(errno, system_category()), \u003Cspan class=\"hljs-string\">&quot;Error opening : &quot;\u003C/span> + \u003Cspan class=\"hljs-built_in\">dir\u003C/span>);\n    }\n\n    struct dirent *dirent_ptr;\n    \u003Cspan class=\"hljs-keyword\">while\u003C/span> ((dirent_ptr = readdir(directory_ptr.get())) != nullptr)\n    {\n        const string fileName {dirent_ptr-&gt;d_name};\n        \u003Cspan class=\"hljs-keyword\">if\u003C/span> (dirent_ptr-&gt;d_type == DT_DIR)\n        {\n            \u003Cspan class=\"hljs-keyword\">if\u003C/span> (CURRENT_DIR != fileName &amp;&amp; UP_DIR != fileName)\n            {\n                auto subFiles = getDirectoryFiles(path({\u003Cspan class=\"hljs-built_in\">dir\u003C/span>, fileName}), extensions);\n                files.insert(end(files), begin(subFiles), end(subFiles));\n            }\n        }\n        \u003Cspan class=\"hljs-keyword\">else\u003C/span> \u003Cspan class=\"hljs-keyword\">if\u003C/span> (dirent_ptr-&gt;d_type == DT_REG)\n        {\n            // here we should check also \u003Cspan class=\"hljs-keyword\">if\u003C/span> filename has an extension \u003Cspan class=\"hljs-keyword\">in\u003C/span> extensions vector\n            files.push_back(path({\u003Cspan class=\"hljs-built_in\">dir\u003C/span>, fileName}));\n        }\n    }\n    \u003Cspan class=\"hljs-built_in\">return\u003C/span> files;\n}\n\nint \u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-title\">main\u003C/span>\u003C/span> ()\n{\n    auto opt = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;\n    \u003Cspan class=\"hljs-built_in\">mkdir\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox&quot;\u003C/span>, opt);\n    \u003Cspan class=\"hljs-built_in\">mkdir\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/a&quot;\u003C/span>, opt);\n    \u003Cspan class=\"hljs-built_in\">mkdir\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/a/b&quot;\u003C/span>, opt);\n\n\tvector&lt;string&gt; e_files = {\n\t    \u003Cspan class=\"hljs-string\">&quot;./sandbox/a/b/file1.rst&quot;\u003C/span>,\n\t    \u003Cspan class=\"hljs-string\">&quot;./sandbox/a/b/file1.txt&quot;\u003C/span>,\n\t    \u003Cspan class=\"hljs-string\">&quot;./sandbox/a/file2.RST&quot;\u003C/span>,\n\t    \u003Cspan class=\"hljs-string\">&quot;./sandbox/file3.md&quot;\u003C/span>,\n\t    \u003Cspan class=\"hljs-string\">&quot;./sandbox/will_be.ignored&quot;\u003C/span>\n\t};\n\n\t// create files\n\t\u003Cspan class=\"hljs-keyword\">for\u003C/span> (auto &amp;f: e_files)\n\t{\n\t\tofstream of(f, ofstream::out);\n\t\tof &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;test&quot;\u003C/span>;\n\t}\n\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;filtered files: &quot;\u003C/span> &lt;&lt; \u003Cspan class=\"hljs-string\">endl;\n\tfor (auto &amp;f: getDirectoryFiles(&quot;.&quot;, {&quot;.rst&quot;, &quot;.RST&quot;, &quot;.md&quot;})){\n\t    cout &lt;&lt; &quot;\\t&quot; &lt;&lt; f &lt;&lt; endl\u003C/span>;\n\t}\n\n    \u003Cspan class=\"hljs-built_in\">return\u003C/span> 0;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">\u003Ca href=\"https://coliru.stacked-crooked.com/a/af4228e039a281b3\" target=\"_blank\" rel=\"noopener\">Compilar y ejecutar el ejemplo C&#43;&#43;17\u003C/a>.\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">g++ -std=c++11 -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;&amp; ./a.out\nfiltered files:\n\t./main.cpp\n\t./sandbox/file3.md\n\t./sandbox/will_be.ignored\n\t./sandbox/a/b/file1.rst\n\t./sandbox/a/b/file1.txt\n\t./sandbox/a/file2.RST\n\t./a.out\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>",{"title":3,"lang":4,"summary":5,"slug":6,"keywords":7,"filepath":13,"dirpath":14,"created":15,"modified":15,"otherLangs":16,"author":18,"previewimage":-1,"path":19},"Sistema de Ficheros en C++17","es","Vamos a analizar con un ejemplo la forma de recorrer directorios de manera recursiva a partir de C++17","recursive-directory-iterator",[8,9,10,11,12],"C++","C++11","C++17","IO","Filesystem","/static/posts/recursive-directory-iterator.es.adoc","/static/posts",1495954800000,[17],"en","Carlos","/langs/es/posts/recursive-directory-iterator","\u003Cscript type=\"application/ld+json\">{\"@context\":\"https://schema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"Webpage\",\"@id\":\"https://google.com/article\"},\"headline\":\"Sistema de Ficheros en C++17\",\"alternativeHeadline\":\"Vamos a analizar con un ejemplo la forma de recorrer directorios de manera recursiva a partir de C++17\",\"description\":\"Vamos a analizar con un ejemplo la forma de recorrer directorios de manera recursiva a partir de C++17\",\"datePublished\":\"2017-05-28T07:00:00.000Z\",\"dateModified\":\"2017-05-28T07:00:00.000Z\",\"keywords\":[\"C++\",\"C++11\",\"C++17\",\"IO\",\"Filesystem\"],\"author\":{\"@type\":\"Person\",\"name\":\"Carlos\"},\"publisher\":{\"@type\":\"Person\",\"name\":\"Carlos\"}}\u003C/script>"],"uses":{"params":["slug","lang"]}}]}
