{"type":"data","nodes":[null,{"type":"data","data":[{"path":1,"lang":2,"translations":3,"version":14},"/langs/es/posts/choosing-modern-cpp-stack/","es",{"lang":2,"author":4,"siteName":5,"siteDescription":6,"categories":7,"Categories":8,"RecentPosts":9,"NoPosts":10,"SubscribeTo":11,"AboutMe":12,"AllPosts":13},"Carlos Martin Sanchez","Carlos dice bla bla","Qué está pasando por mi cabeza y alrededores","categorías","Categorías","Últimas entradas","No hay entradas","Suscríbete al feed","Sobre mi","Todas las entradas","1.0.0-1"],"uses":{"params":["lang"],"url":1},"slash":"always"},{"type":"data","data":[{"html":1,"props":2,"jsonLd":22},"\u003Cdiv id=\"toc\" class=\"toc\">\n\u003Cdiv id=\"toctitle\">Table of Contents\u003C/div>\n\u003Cul class=\"sectlevel1\">\n\u003Cli>\u003Ca href=\"#_elegir_un_sistema_de_construcción_meson\">Elegir un Sistema de Construcción (Meson)\u003C/a>\n\u003Cul class=\"sectlevel2\">\n\u003Cli>\u003Ca href=\"#_cmake_vs_meson\">CMake vs Meson\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_otras_comparaciones_entre_sistemas_de_construcción\">Otras comparaciones entre sistemas de construcción\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#_framework_the_pruebas_unitarias\">Framework the Pruebas Unitarias\u003C/a>\n\u003Cul class=\"sectlevel2\">\n\u003Cli>\u003Ca href=\"#_doctest_una_alternativa_a_catch\">doctest: Una alternativa a Catch\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#_ejemplo\">Ejemplo\u003C/a>\n\u003Cul class=\"sectlevel2\">\n\u003Cli>\u003Ca href=\"#_artefactos_del_proyecto\">Artefactos del Proyecto\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_estructura_del_proyecto_fork_project\">Estructura del Proyecto (Fork project)\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv id=\"preamble\">\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Estoy empezando un pequeño proyecto en C++ y antes de nada me han surgido un par de preguntas:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"olist arabic\">\n\u003Col class=\"arabic\">\n\u003Cli>\n\u003Cp>¿Cómo voy a construirlo?\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>¿Qué framework para pruebas unitarias utilizar?\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003Cdiv class=\"admonitionblock tip\">\n\u003Ctable>\n\u003Ctr>\n\u003Ctd class=\"icon\">\n\u003Cdiv class=\"title\">Tip\u003C/div>\n\u003C/td>\n\u003Ctd class=\"content\">\nSi simplemente quieres comenzar un proyecto en C++, fácil de construir, con una librería y pruebas unitarias listas, simplemente visita el repositorio del proyecto de ejemplo \u003Ca href=\"https://github.com/carlosvin/uuid-cpp\" class=\"bare\">https://github.com/carlosvin/uuid-cpp\u003C/a> y sigue las \u003Ca href=\"https://github.com/carlosvin/uuid-cpp/blob/master/README.md\" target=\"blank_\">instrucciones en el README.md\u003C/a>.\n\u003C/td>\n\u003C/tr>\n\u003C/table>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_elegir_un_sistema_de_construcción_meson\">Elegir un Sistema de Construcción (\u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a>)\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Ya he utilizado antes \u003Ca href=\"https://www.gnu.org/software/make/manual/make.html\" target=\"_blank\" rel=\"noopener\">Make\u003C/a>, \u003Ca href=\"https://maven.apache.org/\" target=\"_blank\" rel=\"noopener\">Maven\u003C/a>, \u003Ca href=\"https://scons.org/\" target=\"_blank\" rel=\"noopener\">Scons\u003C/a>, \u003Ca href=\"https://gradle.org/\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a> y \u003Ca href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html\" target=\"_blank\" rel=\"noopener\">Autotools\u003C/a>, pero tengo algunas razones para probar algo diferente, hay algunas cosas que no me gustan:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html\" target=\"_blank\" rel=\"noopener\">Autotools\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>No es fácil de configurar y mantener: hay distintos ficheros de configuración y distintos pasos de configuración.\u003C/p>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://gradle.org/\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>La construcción de proyectos CPP está todavía en desarrollo, los modelos y APIs están cambiando. No es muy rápido. Puedes ver un ejemplo en este artículo \u003Ca href=\"/langs/es/posts/gradle-cpp\" target=\"_blank\" rel=\"noopener\">Construir un proyecto Cpp con Gradle\u003C/a>.\u003C/p>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://www.gnu.org/software/make/manual/make.html\" target=\"_blank\" rel=\"noopener\">Make\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>A medida que el proyecto crece los archivos de configuración se van complicando y volviendo poco manejables. La sintáxis no me parece clara (esto es una custión de gustos).\u003C/p>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://scons.org/\" target=\"_blank\" rel=\"noopener\">Scons\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>Es más lento y un poco más difícil de comprender que \u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a>.\u003C/p>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://maven.apache.org/\" target=\"_blank\" rel=\"noopener\">Maven\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>Es lento y puedes terminar \"\u003Cem>Javatizando\u003C/em>\" la estructura del proyecto.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003Cdiv class=\"admonitionblock note\">\n\u003Ctable>\n\u003Ctr>\n\u003Ctd class=\"icon\">\n\u003Cdiv class=\"title\">Note\u003C/div>\n\u003C/td>\n\u003Ctd class=\"content\">\nHe nombrado solo las cosas que no gustan, pero estos sistemas de construcción tienen otras grandes virtudes, personalmente me encantan \u003Ca href=\"https://gradle.org/\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a>, \u003Ca href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html\" target=\"_blank\" rel=\"noopener\">Autotools\u003C/a> y \u003Ca href=\"https://maven.apache.org/\" target=\"_blank\" rel=\"noopener\">Maven\u003C/a> (solo para projectos Java).\n\u003C/td>\n\u003C/tr>\n\u003C/table>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_cmake_vs_meson\">\u003Ca href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake\u003C/a> vs \u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a>\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Después de descartar los anteriores, estoy considerando \u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a> y \u003Ca href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake\u003C/a>. Los dos son bastante rápidos:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Aunque \u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a> está hecho en \u003Ca href=\"https://python.org/\" target=\"_blank\" rel=\"noopener\">Python\u003C/a>, simplemente genera projectos \u003Ca href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja\u003C/a>. La primera vez tenemos que ejecutar \u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a> para configurar el proyecto, el resto de ejecuciones para compilar o ejecutar pruebas, realmente estaremos ejecutando directamente \u003Ca href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake\u003C/a> también puede generar proyectos \u003Ca href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja\u003C/a> entre otros formatos, \u003Ca href=\"https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html\">mira la documentación \"CMake generators\"\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>Tiene una gran ventaja sobre \u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a>, es mucho más maduro y es mucho más usado, lo que significa que podrás encontrar muy fácilmente ejemplos, documentación y ayuda en Internet. No importa el tipo de proyecto que estés empezando, lo más seguro es que \u003Ca href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake\u003C/a> sea una buena elección.\u003C/p>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>Es un proyecto jóven comparado con \u003Ca href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake\u003C/a>, pero está creciendo rápido y ya ha sido adoptado por algunos proyectos importantes como \u003Ca href=\"https://www.gnome.org/\" target=\"_blank\" rel=\"noopener\">Gnome\u003C/a>, donde han comenzado una iniciativa para \u003Ca href=\"https://wiki.gnome.org/Initiatives/GnomeGoals/MesonPorting\">migrar desde Autotools a Meson\u003C/a>.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Cstrong>Finalmente he elegido\u003C/strong> \u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a> porque:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>La sintáxis es muy clara para mí, cuando leo un archivo \u003Cspan class=\"title-ref\">meson.build\u003C/span> entiendo rápidamente lo ue está pasando durante el proceso de construcción.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Es rápido, aunque está escrito en \u003Ca href=\"https://python.org/\" target=\"_blank\" rel=\"noopener\">Python\u003C/a> utiliza \u003Ca href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja\u003C/a> para construir el proyecto. La primera vez tienes que utilizar \u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a> para configurar el proyecto, pero para construir y probar el proyecto relmente estamos ejecutando \u003Ca href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja\u003C/a>.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Pasos para compilar y ejectuar tests\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">$ meson build . \u003Cb class=\"conum\">(1)\u003C/b>\n$ \u003Cspan class=\"hljs-built_in\">cd\u003C/span> build\n$ ninja build   \u003Cb class=\"conum\">(2)\u003C/b>\n$ ninja \u003Cspan class=\"hljs-built_in\">test\u003C/span>    \u003Cb class=\"conum\">(3)\u003C/b>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"colist arabic\">\n\u003Col>\n\u003Cli>\n\u003Cp>Primera vez, configuración del proyecto\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Cada vez que construyes el projecto\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Cada vez que ejecutas tests\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_otras_comparaciones_entre_sistemas_de_construcción\">Otras comparaciones entre sistemas de construcción\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>He encontrado un par de comparaciones interesantes entre algunos de los sistemas de construcción en C++, aunque puede que no sean del todo imparciales porque han sido realizadas por \u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a> y \u003Ca href=\"https://scons.org/\" target=\"_blank\" rel=\"noopener\">Scons\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Ca href=\"https://bitbucket.org/scons/scons/wiki/SconsVsOtherBuildTools\">C++ build systems comparison from Scons\u003C/a>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ca href=\"https://mesonbuild.com/Simple-comparison.html\">C++ build systems comparison from Meson\u003C/a>.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_framework_the_pruebas_unitarias\">Framework the Pruebas Unitarias\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Anteriorment he utilizado algunas librerías del tipo \u003Ca href=\"https://en.wikipedia.org/wiki/XUnit\" target=\"_blank\" rel=\"noopener\">xUnit\u003C/a> como \u003Ca href=\"https://github.com/unittest-cpp/unittest-cpp\">UnitTest++\u003C/a>, \u003Ca href=\"https://cpputest.github.io/\">CppUTest\u003C/a> o \u003Ca href=\"https://github.com/google/googletest\">Google Test\u003C/a> que encaja perfectamente con \u003Ca href=\"https://github.com/google/googletest/tree/master/googlemock\">Google Mock\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Si quires una apuesta segura que cumpla tus expectativas, te recomiendo \u003Ca href=\"https://github.com/google/googletest\">Google Test\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Pero hace algún tiempo encontré un framework de pruebas con algunas características no tan comunes en librerías de pruebas C++ y que resultaba realmente fácil de utilizar, estoy hablando de \u003Ca href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch\u003C/a>:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>Es simplemente un fichero de cabeceras C++ sin dependencias adicionales, por lo que resulta realmente rápido comenzar (wget y utilizar el fichero descargado desde tus pruebas).\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Puedes utilizar el estilo normal de pruebas unitarias o el estilo \u003Ca href=\"https://en.wikipedia.org/wiki/Behavior-driven_development\" target=\"_blank\" rel=\"noopener\">BDD\u003C/a>.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Si quieres saber más sobre \u003Ca href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch\u003C/a>, te recomiendo que directamente lo pruebes, el siguiente ejemplo, es cuestión de dos minutos \u003Ca href=\"https://github.com/philsquared/Catch/blob/master/docs/tutorial.md#writing-tests\">simple example up and running\u003C/a>. Puedes también leer algunos artículos como \u003Ca href=\"https://github.com/philsquared/Catch/blob/master/docs/why-catch.md\">Why do we need yet another C test framework?] o https://blog.coldflake.com/posts/Testing-C-with-a-new-Catch/[Testing C++ With A New Catch\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_doctest_una_alternativa_a_catch\">\u003Ca href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest\u003C/a>: Una alternativa a \u003Ca href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch\u003C/a>\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Hay otro framework de pruebas llamado \u003Ca href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest\u003C/a>, con los mismos principios que \u003Ca href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch\u003C/a>, pero promete ser más rápido y ligero (\u003Ca href=\"https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md\">resultados de las comparaciones de rendimiento\u003C/a>) que \u003Ca href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest\u003C/a> fue diseñado basándose en los puntos fuertes de \u003Ca href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch\u003C/a>, pero hay algunas \u003Ca href=\"https://github.com/onqtam/doctest/blob/master/doc/markdown/faq.md#how-is-doctest-different-from-catch\">diferencias\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>No es fácil decidirse por uno, los dos son muy parecidos, puedes comprobar las diferencias a continuación:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Differencias entre la rama usando \u003Ca href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest\u003C/a> y la rama usando \u003Ca href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch\u003C/a>\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-diff\" data-lang=\"diff\">\u003Cspan class=\"hljs-meta\">@@ -1,12 +1,12 @@\u003C/span>\n\u003Cspan class=\"hljs-deletion\">-#define CATCH_CONFIG_MAIN // It tells Catch to provide a main() - only do this in one cpp file\u003C/span>\n\u003Cspan class=\"hljs-addition\">+#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN\u003C/span>\n\n\u003Cspan class=\"hljs-deletion\">-#include &quot;catch.hpp&quot;\u003C/span>\n\u003Cspan class=\"hljs-addition\">+#include &quot;doctest.h&quot;\u003C/span>\n#include &quot;Uuid.h&quot;\n#include &lt;string&gt;\n\nconstexpr int MAX_ITERS = 100;\n\n\u003Cspan class=\"hljs-deletion\">-TEST_CASE(&quot;Uuid&quot;, &quot;[uuid]&quot;)\u003C/span>\n\u003Cspan class=\"hljs-addition\">+TEST_CASE(&quot;Uuid&quot;)\u003C/span>\n{\nfor (int i = 0; i &lt; MAX_ITERS; i++)\n{\n\u003Cspan class=\"hljs-meta\">@@ -26,7 +26,7 @@\u003C/span> TEST_CASE(&quot;Uuid&quot;, &quot;[uuid]&quot;)\n\n// BDD style\n\n\u003Cspan class=\"hljs-deletion\">-SCENARIO(&quot;UUID creation&quot;, &quot;[Uuid]&quot;)\u003C/span>\n\u003Cspan class=\"hljs-addition\">+SCENARIO(&quot;UUID creation&quot;)\u003C/span>\n{\n\nGIVEN(&quot;A random UUID &quot;)\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Finalmente he elegido \u003Ca href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest\u003C/a> simplemente porque es más rápido: \u003Ca href=\"https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md\">resultados de las comparaciones de rendimiento\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"admonitionblock note\">\n\u003Ctable>\n\u003Ctr>\n\u003Ctd class=\"icon\">\n\u003Cdiv class=\"title\">Note\u003C/div>\n\u003C/td>\n\u003Ctd class=\"content\">\nHe creado el proyecto de ejemplo utilizando ambos frameworks, puedes encontrarlos en diferentes ramas del repositorio: \u003Ca href=\"https://github.com/carlosvin/uuid-cpp/tree/doctest\">rama doctest\u003C/a> or \u003Ca href=\"https://github.com/carlosvin/uuid-cpp/tree/catch\">rama catch\u003C/a>.\n\u003C/td>\n\u003C/tr>\n\u003C/table>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_ejemplo\">Ejemplo\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>He creado un ejemplo para ilustrar este artículo: \u003Ca href=\"https://github.com/carlosvin/uuid-cpp\" class=\"bare\">https://github.com/carlosvin/uuid-cpp\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Consiste en una implementación básica de un generador pseudo-aleatorio de \u003Ca href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier\" target=\"_blank\" rel=\"noopener\">UUID\u003C/a>, está basado en \u003Ca href=\"https://www.cplusplus.com/reference/random/mt19937\" target=\"_blank\" rel=\"noopener\">mt19937\u003C/a> que no es criptográficamente seguro.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_artefactos_del_proyecto\">Artefactos del Proyecto\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Cuando instalemos el proyecto, \u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a> (\u003Ca href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja\u003C/a> realmente) generará una serie de artefactos en nuestro sistema.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>Librería compartida: \u003Ccode>libuuid\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Fichero de cabeceras para que los desarrolladores puedan usar la librería: \u003Ccode>include/Uuid.h\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Fichero ejecutable \u003Ccode>uuidgen\u003C/code> (Generador de \u003Ca href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier\" target=\"_blank\" rel=\"noopener\">UUID\u003C/a>).\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Ejecutable de las pruebas unitarias (no será instalado).\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Si ejecutamos \u003Ccode>ninja install\u003C/code> en Linux obtendremos los siguientes ficheros:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">/usr/local/lib/libuuid.so\n/usr/local/include/Uuid.h\n/usr/local/bin/uuidgen\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_estructura_del_proyecto_fork_project\">Estructura del Proyecto (\u003Ca href=\"https://github.com/carlosvin/uuid-cpp\">Fork project\u003C/a>)\u003C/h3>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://github.com/carlosvin/uuid-cpp/blob/master/meson.build\">meson.build\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>Fichero principal de configuración para construir el proyecto.\nLo utilizamos para especificar las propiedades y subdirectorios del proyecto.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">meson.build\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-python\" data-lang=\"python\">project(\n    \u003Cspan class=\"hljs-string\">&#x27;cpp-meson-example&#x27;\u003C/span>, \u003Cspan class=\"hljs-comment\"># project name\u003C/span>\n    \u003Cspan class=\"hljs-string\">&#x27;cpp&#x27;\u003C/span>, \u003Cspan class=\"hljs-comment\"># C++ project, e.g: for C project\u003C/span>\n    version : \u003Cspan class=\"hljs-string\">&#x27;1.0.0&#x27;\u003C/span>,\n    license : \u003Cspan class=\"hljs-string\">&#x27;MIT&#x27;\u003C/span>,\n    default_options : [\u003Cspan class=\"hljs-string\">&#x27;cpp_std=c++11&#x27;\u003C/span>]) \u003Cspan class=\"hljs-comment\"># compile for C++\u003C/span>\n\n\u003Cspan class=\"hljs-comment\"># it will be referred from subdir projects\u003C/span>\ninc = include_directories(\u003Cspan class=\"hljs-string\">&#x27;include&#x27;\u003C/span>)\n\n\u003Cspan class=\"hljs-comment\"># meson will try to find a meson.build file inside following directories\u003C/span>\nsubdir(\u003Cspan class=\"hljs-string\">&#x27;include&#x27;\u003C/span>)\nsubdir(\u003Cspan class=\"hljs-string\">&#x27;src&#x27;\u003C/span>)\nsubdir(\u003Cspan class=\"hljs-string\">&#x27;test&#x27;\u003C/span>)\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://github.com/carlosvin/uuid-cpp/blob/master/include/\">include\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">meson.build\u003C/dt>\n\u003Cdd>\n\u003Cp>Archivo de configuración para construir este directorio, no hay mucho que hacer aquí, simplemente indicamos qué ficheros de cabeceras han de ser instalados\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">include/meson.build\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-python\" data-lang=\"python\">\u003Cspan class=\"hljs-comment\"># Select header files to be installed\u003C/span>\ninstall_headers(\u003Cspan class=\"hljs-string\">&#x27;Uuid.h&#x27;\u003C/span>)\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://github.com/carlosvin/uuid-cpp/blob/master/include/Uuid.h\">Uuid.h\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>Archivos de cabeceras, es el interfaz que expone la librería y que será incluido por los usuarios de la misma.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">include/Uuid.h\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-keyword\">namespace\u003C/span> ids {\n\n\u003Cspan class=\"hljs-keyword\">class\u003C/span> \u003Cspan class=\"hljs-title class_\">Uuid\u003C/span> {\n    \u003Cspan class=\"hljs-keyword\">private\u003C/span>:\n    \u003Cspan class=\"hljs-comment\">// ...\u003C/span>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src\">src\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src/meson.build\">meson.build (src)\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>Declara 2 artefactos de salida: La librería \u003Ccode>libuuid\u003C/code> y el ejecutable \u003Ccode>uuidgen\u003C/code>.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">src/meson.build\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-python\" data-lang=\"python\">libuuid = shared_library(\n    \u003Cspan class=\"hljs-string\">&#x27;uuid&#x27;\u003C/span>, \u003Cb class=\"conum\">(1)\u003C/b>\n    \u003Cspan class=\"hljs-string\">&#x27;Uuid.cpp&#x27;\u003C/span>, \u003Cb class=\"conum\">(2)\u003C/b>\n    include_directories : inc, \u003Cb class=\"conum\">(3)\u003C/b>\n    install : true) \u003Cb class=\"conum\">(4)\u003C/b>\n\nuuidgen = executable(\n    \u003Cspan class=\"hljs-string\">&#x27;uuidgen&#x27;\u003C/span>, \u003Cb class=\"conum\">(5)\u003C/b>\n    \u003Cspan class=\"hljs-string\">&#x27;main.cpp&#x27;\u003C/span>, \u003Cb class=\"conum\">(6)\u003C/b>\n    include_directories : inc, \u003Cb class=\"conum\">(7)\u003C/b>\n    link_with : libuuid, \u003Cb class=\"conum\">(8)\u003C/b>\n    install : true) \u003Cb class=\"conum\">(9)\u003C/b>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"colist arabic\">\n\u003Col>\n\u003Cli>\n\u003Cp>library name\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>source files to be compile\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>previously declared include directories in root \u003Ccode>meson.build\u003C/code>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode>libuuid\u003C/code> will be part of project installation\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>executable name\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>source files to compile\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>previously declared include directories in root \u003Ccode>meson.build\u003C/code>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>linking executable with shared previously declared shared library \u003Ccode>libuuid\u003C/code>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode>uuidgen\u003C/code> executable be part of project installation\u003C/p>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src/main.cpp\">main.cpp\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>Código fuente del ejecutable de la aplicación: \u003Ccode>uuidgen\u003C/code>\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">src/main.cpp\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&quot;Uuid.h&quot;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;iostream&gt;\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    ids::Uuid uuid;\n    std::cout &lt;&lt; uuid.\u003Cspan class=\"hljs-built_in\">to_str\u003C/span>() &lt;&lt; std::endl;\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src/Uuid.cpp\">Uuid.cpp\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>Implementación de la clase declarada en el fichero de cabeceras \u003Ccode>Uuid.h\u003C/code>.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">src/Uuid.cpp\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&quot;Uuid.h&quot;\u003C/span>\u003C/span>\n\nUuid::\u003Cspan class=\"hljs-built_in\">Uuid\u003C/span>()\n{ \u003Cspan class=\"hljs-comment\">// ...\u003C/span>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://github.com/carlosvin/uuid-cpp/blob/master/test/\">test\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://github.com/carlosvin/uuid-cpp/blob/master/test/meson.build\">meson.build (test)\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>Archivo de configuración para construir y ejecutar las pruebas unitarias.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">test/meson.build\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-python\" data-lang=\"python\">testexe = executable(\n    \u003Cspan class=\"hljs-string\">&#x27;testexe&#x27;\u003C/span>, \u003Cb class=\"conum\">(1)\u003C/b>\n    \u003Cspan class=\"hljs-string\">&#x27;uuid_test.cpp&#x27;\u003C/span>, \u003Cb class=\"conum\">(2)\u003C/b>\n    include_directories : inc, \u003Cb class=\"conum\">(3)\u003C/b>\n    link_with : libuuid) \u003Cb class=\"conum\">(4)\u003C/b>\n\ntest(\u003Cspan class=\"hljs-string\">&#x27;Uuid test&#x27;\u003C/span>, testexe) \u003Cb class=\"conum\">(5)\u003C/b>\n\ntest(\u003Cspan class=\"hljs-string\">&#x27;Uuid test with args and env&#x27;\u003C/span>, testexe, args : [\u003Cspan class=\"hljs-string\">&#x27;arg1&#x27;\u003C/span>, \u003Cspan class=\"hljs-string\">&#x27;arg2&#x27;\u003C/span>], env : [\u003Cspan class=\"hljs-string\">&#x27;FOO=bar&#x27;\u003C/span>]) \u003Cb class=\"conum\">(6)\u003C/b>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"colist arabic\">\n\u003Col>\n\u003Cli>\n\u003Cp>test executable name\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>tests source files to be compiled\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>declared include directories in root \u003Ccode>meson.build\u003C/code>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>link test executable with previously declared shared library \u003Ccode>libuuid\u003C/code>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>test execution\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>we can specify other test execution passing arguments or environment variables\u003C/p>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">doctest.h\u003C/dt>\n\u003Cdd>\n\u003Cp>Librería \u003Ca href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest\u003C/a> en un único fichero de cabeceras. Puedes tratar de automatizar el proceso de instalación de la librería, yo por el momento la he instalado manualmente, ya que es un proceso muy sencillo:\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Añadir \u003Ca href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest\u003C/a> al proyecto\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">\u003Cspan class=\"hljs-built_in\">cd\u003C/span> \u003Cspan class=\"hljs-built_in\">test\u003C/span>\nwget https://raw.githubusercontent.com/onqtam/doctest/master/doctest/doctest.h\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://github.com/carlosvin/uuid-cpp/blob/master/test/uuid_test.cpp\">uuid_test.cpp\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>Implementación de las pruebas unitarias.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">test/uuid_test.cpp\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">define\u003C/span> DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN\u003C/span>\n\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&quot;doctest.h&quot;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&quot;Uuid.h&quot;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;string&gt;\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">constexpr\u003C/span> \u003Cspan class=\"hljs-type\">int\u003C/span> MAX_ITERS = \u003Cspan class=\"hljs-number\">100\u003C/span>;\n\n\u003Cspan class=\"hljs-built_in\">TEST_CASE\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;Uuid&quot;\u003C/span>)\n{\n    \u003Cspan class=\"hljs-keyword\">for\u003C/span> (\u003Cspan class=\"hljs-type\">int\u003C/span> i = \u003Cspan class=\"hljs-number\">0\u003C/span>; i &lt; MAX_ITERS; i++)\n    {\n        ids::Uuid uuid;\n        std::string uuid_str{uuid.\u003Cspan class=\"hljs-built_in\">to_str\u003C/span>()};\n\n        \u003Cspan class=\"hljs-built_in\">INFO\u003C/span>(uuid_str);\n\n        \u003Cspan class=\"hljs-comment\">// If assertion fails test execution is stopped\u003C/span>\n        \u003Cspan class=\"hljs-built_in\">REQUIRE\u003C/span>(uuid_str.\u003Cspan class=\"hljs-built_in\">size\u003C/span>() == \u003Cspan class=\"hljs-number\">36\u003C/span>);\n\n        \u003Cspan class=\"hljs-comment\">// If assertion fails test execution continues\u003C/span>\n        \u003Cspan class=\"hljs-built_in\">CHECK\u003C/span>(uuid.most &gt; \u003Cspan class=\"hljs-number\">0\u003C/span>);\n        \u003Cspan class=\"hljs-built_in\">CHECK\u003C/span>(uuid.least &gt; \u003Cspan class=\"hljs-number\">0\u003C/span>);\n    }\n}\n\n\u003Cspan class=\"hljs-comment\">// BDD style\u003C/span>\n\n\u003Cspan class=\"hljs-built_in\">SCENARIO\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;UUID creation&quot;\u003C/span>)\n{\n\n    \u003Cspan class=\"hljs-built_in\">GIVEN\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;A random UUID &quot;\u003C/span>)\n    {\n\n        ids::Uuid uuid;\n        std::string uuid_str{uuid.\u003Cspan class=\"hljs-built_in\">to_str\u003C/span>()};\n\n        \u003Cspan class=\"hljs-built_in\">REQUIRE\u003C/span>(uuid_str.\u003Cspan class=\"hljs-built_in\">size\u003C/span>() == \u003Cspan class=\"hljs-number\">36\u003C/span>);\n\n        \u003Cspan class=\"hljs-built_in\">WHEN\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;get the most and least&quot;\u003C/span>)\n        {\n            \u003Cspan class=\"hljs-built_in\">THEN\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;should be more than 0&quot;\u003C/span>)\n            {\n                \u003Cspan class=\"hljs-built_in\">CHECK\u003C/span>(uuid.most &gt; \u003Cspan class=\"hljs-number\">0\u003C/span>);\n                \u003Cspan class=\"hljs-built_in\">CHECK\u003C/span>(uuid.least &gt; \u003Cspan class=\"hljs-number\">0\u003C/span>);\n            }\n        }\n    }\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"admonitionblock tip\">\n\u003Ctable>\n\u003Ctr>\n\u003Ctd class=\"icon\">\n\u003Cdiv class=\"title\">Tip\u003C/div>\n\u003C/td>\n\u003Ctd class=\"content\">\nPuedes encontrar las instrucciones para construir y ejecutar el proyecto de ejemplo en: \u003Ca href=\"https://github.com/carlosvin/uuid-cpp#how-to-build-the-example\" class=\"bare\">https://github.com/carlosvin/uuid-cpp#how-to-build-the-example\u003C/a>\n\u003C/td>\n\u003C/tr>\n\u003C/table>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>",{"title":3,"lang":4,"summary":5,"slug":6,"keywords":7,"filepath":15,"dirpath":16,"created":17,"modified":17,"otherLangs":18,"author":20,"previewimage":-1,"path":21},"Elegir tecnologías para mi nuevo proyeco C++","es","Las razones por las que he elegido Meson+Doctest para crear un proyecto en C++. También contiene un ejemplo fácil de ejecutar y de reutilizar como template.","choosing-modern-cpp-stack",[8,9,10,11,12,13,14],"C++","Unit Testing","Build System","Build Software","Meson","Catch","doctest","/static/posts/choosing-modern-cpp-stack.es.adoc","/static/posts",1506211200000,[19],"en","Carlos Martin Sanchez","/langs/es/posts/choosing-modern-cpp-stack","\u003Cscript type=\"application/ld+json\">{\"@context\":\"https://schema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"Webpage\",\"@id\":\"https://google.com/article\"},\"headline\":\"Elegir tecnologías para mi nuevo proyeco C++\",\"alternativeHeadline\":\"Las razones por las que he elegido Meson+Doctest para crear un proyecto en C++. También contiene un ejemplo fácil de ejecutar y de reutilizar como template.\",\"description\":\"Las razones por las que he elegido Meson+Doctest para crear un proyecto en C++. También contiene un ejemplo fácil de ejecutar y de reutilizar como template.\",\"datePublished\":\"2017-09-24T00:00:00.000Z\",\"dateModified\":\"2017-09-24T00:00:00.000Z\",\"keywords\":[\"C++\",\"Unit Testing\",\"Build System\",\"Build Software\",\"Meson\",\"Catch\",\"doctest\"],\"author\":{\"@type\":\"Person\",\"name\":\"Carlos Martin Sanchez\"},\"publisher\":{\"@type\":\"Person\",\"name\":\"Carlos Martin Sanchez\"}}\u003C/script>"],"uses":{"params":["slug","lang"]}}]}
