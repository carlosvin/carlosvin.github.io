{"type":"data","nodes":[null,{"type":"data","data":[{"path":1,"lang":2,"translations":3},"/langs/en/posts/java-embedded-db-performance-comparison/","en",{"lang":2,"author":4,"siteName":5,"siteDescription":6,"categories":7,"Categories":8,"RecentPosts":9,"NoPosts":10,"SubscribeTo":11,"AboutMe":12,"AllPosts":13},"Carlos Martin Sanchez","Carlos Say's Bla Bla","What is going on in my mind and its surroundings","categories","Categories","Recent posts","There are no posts","Subscribe to the feed","About me","All posts"],"uses":{"params":["lang"],"url":1},"slash":"always"},{"type":"data","data":[{"html":1,"props":2,"jsonLd":17},"\u003Cdiv id=\"toc\" class=\"toc\">\n\u003Cdiv id=\"toctitle\">Table of Contents\u003C/div>\n\u003Cul class=\"sectlevel1\">\n\u003Cli>\u003Ca href=\"#_bases_de_datos_embebidas\">Bases de datos embebidas\u003C/a>\n\u003Cul class=\"sectlevel2\">\n\u003Cli>\u003Ca href=\"#_sqlitedb\">SqliteDB\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_derbydb_o_javadb\">DerbyDB o JavaDB\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_objectdb\">ObjectDb\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#_los_tests\">Los Tests\u003C/a>\n\u003Cul class=\"sectlevel2\">\n\u003Cli>\u003Ca href=\"#_las_bases_de_datos_jdbc\">Las Bases de Datos JDBC\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_el_código_fuente\">El código fuente\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_resultados_de_los_tests\">Resultados de los tests\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_bases_de_datos_embebidas\">Bases de datos embebidas\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Se trata de bases de datos que carecen de servidor, están inscrustadas en la propia aplicación y suelen estar almacenadas en ficheros locales. Esto último unido a que suelen tener un modo de funcionamiento en el que mantienen los datos en memoria hace que puedan tener un rendimiento muy alto.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Eso sí, este gran grado acoplamiento a la aplicación, hace que tengan peor rendimiento cuando se comparten entre varias aplicaciones debido a colisiones de acceso.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Otra ventaja es que no tenemos que encargarnos de mantener y gestionar un servidor de bases de datos.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Voy a hacer una comparativa de rendimiento entre 3 bases de datos embebidas \u003Ca href=\"https://es.wikipedia.org/wiki/ACID\" target=\"_blank\" rel=\"noopener\">ACID\u003C/a> (transaccionales), las \u003Ca href=\"https://es.wikipedia.org/wiki/NoSQL\" target=\"_blank\" rel=\"noopener\">NoSQL\u003C/a> no entran en esta comparativa que están en otra liga de rendimiento.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Contenidos\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_sqlitedb\">\u003Ca href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/SqliteDB.java\" target=\"_blank\" rel=\"noopener\">SqliteDB\u003C/a>\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Se trata de una librería escrita en \u003Ca href=\"https://es.wikipedia.org/wiki/ANSI_C\" target=\"_blank\" rel=\"noopener\">ANSI C\u003C/a>, de menos de 500KB, multi-plataforma, sin dependencias externas, almacena todo el contenido de la base de datos en un solo fichero.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Es la que da mejor rendimiento en los \u003Ca href=\"#_resultados_de_los_tests\">Resultados de los tests\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Se puede utilizar desde C y C++, pero también \u003Ca href=\"https://es.wikipedia.org/wiki/Sqlite#Lenguajes_de_programaci.C3.B3n\" target=\"_blank\" rel=\"noopener\">desde otros lenguajes de programación\u003C/a> (PHP, Python, Java, .NET &#8230;&#8203;).\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>En el caso de \u003Ca href=\"https://es.wikipedia.org/wiki/Java_(lenguaje_de_programaci%C3%B3n)\" target=\"_blank\" rel=\"noopener\">Java\u003C/a> podemos gestionar esta base de datos a través de \u003Ca href=\"https://es.wikipedia.org/wiki/Java_Database_Connectivity\" target=\"_blank\" rel=\"noopener\">JDBC\u003C/a>. Podemos obtener la librería de \u003Ca href=\"https://bitbucket.org/xerial/sqlite-jdbc\" class=\"bare\">https://bitbucket.org/xerial/sqlite-jdbc\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Veamos un ejemplo de la inserción de una serie de objetos de la clase \u003Ca href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/domain/Price.java\" target=\"_blank\" rel=\"noopener\">Price.java\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-java\" data-lang=\"java\">\u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">class\u003C/span> \u003Cspan class=\"hljs-title class_\">JdbcDb\u003C/span> \u003Cspan class=\"hljs-keyword\">implements\u003C/span> \u003Cspan class=\"hljs-title class_\">DB\u003C/span> {\n\n    \u003Cspan class=\"hljs-keyword\">enum\u003C/span> \u003Cspan class=\"hljs-title class_\">Column\u003C/span> {\n        INSTRUMENT,\n        MARKET,\n        PRICE,\n        DATE;\n    }\n\n    \u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">static\u003C/span> \u003Cspan class=\"hljs-keyword\">final\u003C/span> \u003Cspan class=\"hljs-type\">String\u003C/span> \u003Cspan class=\"hljs-variable\">TABLE_NAME\u003C/span> \u003Cspan class=\"hljs-operator\">=\u003C/span> \u003Cspan class=\"hljs-string\">&quot;PRICES&quot;\u003C/span>;\n    \u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">static\u003C/span> \u003Cspan class=\"hljs-keyword\">final\u003C/span> \u003Cspan class=\"hljs-type\">String\u003C/span> \u003Cspan class=\"hljs-variable\">SQL_INSERT\u003C/span> \u003Cspan class=\"hljs-operator\">=\u003C/span> \u003Cspan class=\"hljs-string\">&quot;INSERT INTO &quot;\u003C/span> + TABLE_NAME\n            + \u003Cspan class=\"hljs-string\">&quot; (INSTRUMENT, MARKET, PRICE, DATE) VALUES (?,?,?,?)&quot;\u003C/span>;\n\n    \u003Cspan class=\"hljs-comment\">// ...\u003C/span>\n\n    \u003Cspan class=\"hljs-keyword\">private\u003C/span> \u003Cspan class=\"hljs-keyword\">void\u003C/span> \u003Cspan class=\"hljs-title function_\">insert\u003C/span>\u003Cspan class=\"hljs-params\">(Price p, PreparedStatement preparedStatement)\u003C/span> \u003Cspan class=\"hljs-keyword\">throws\u003C/span> SQLException {\n        preparedStatement.setString(\u003Cspan class=\"hljs-number\">1\u003C/span>, p.getInstrument());\n        preparedStatement.setString(\u003Cspan class=\"hljs-number\">2\u003C/span>, p.getMarket());\n        preparedStatement.setDouble(\u003Cspan class=\"hljs-number\">3\u003C/span>, p.getPrice());\n        preparedStatement.setTimestamp(\u003Cspan class=\"hljs-number\">4\u003C/span>, \u003Cspan class=\"hljs-keyword\">new\u003C/span> \u003Cspan class=\"hljs-title class_\">Timestamp\u003C/span>(p.getDate().getTime()));\n        preparedStatement.addBatch();\n    }\n\n    \u003Cspan class=\"hljs-meta\">@Override\u003C/span>\n    \u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">void\u003C/span> \u003Cspan class=\"hljs-title function_\">insert\u003C/span>\u003Cspan class=\"hljs-params\">(Price... prices)\u003C/span> \u003Cspan class=\"hljs-keyword\">throws\u003C/span> SQLException {\n        \u003Cspan class=\"hljs-type\">PreparedStatement\u003C/span> \u003Cspan class=\"hljs-variable\">preparedStatement\u003C/span> \u003Cspan class=\"hljs-operator\">=\u003C/span> conn.prepareStatement(SQL_INSERT);\n        \u003Cspan class=\"hljs-keyword\">for\u003C/span> (Price p : prices) {\n            insert(p, preparedStatement);\n        }\n        preparedStatement.executeBatch();\n        preparedStatement.close();\n        conn.commit();\n    }\n\n    \u003Cspan class=\"hljs-comment\">// ...\u003C/span>\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_derbydb_o_javadb\">\u003Ca href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/DerbyDB.java\" target=\"_blank\" rel=\"noopener\">DerbyDB\u003C/a> o \u003Ca href=\"https://www.oracle.com/technetwork/es/java/javadb/overview/index.html\" target=\"_blank\" rel=\"noopener\">JavaDB\u003C/a>\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://www.oracle.com/technetwork/es/java/javadb/overview/index.html\" target=\"_blank\" rel=\"noopener\">JavaDB\u003C/a> es una distribución de Oracle de la base de datos de código libre \u003Ca href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/DerbyDB.java\" target=\"_blank\" rel=\"noopener\">DerbyDB\u003C/a>. Soporta el estándar \u003Ca href=\"https://es.wikipedia.org/wiki/SQL\" target=\"_blank\" rel=\"noopener\">ANSI/ISO SQL\u003C/a> a través de \u003Ca href=\"https://es.wikipedia.org/wiki/Java_Database_Connectivity\" target=\"_blank\" rel=\"noopener\">JDBC\u003C/a> y \u003Ca href=\"https://es.wikipedia.org/wiki/Java_EE\" target=\"_blank\" rel=\"noopener\">Java EE\u003C/a>. Estas librerías están incluidas en el \u003Ca href=\"https://es.wikipedia.org/wiki/Java_Development_Kit\" target=\"_blank\" rel=\"noopener\">JDK\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Almacena la base de datos en multiples archivos, lo que puede resultar útil para escalar el almacenamiento.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Solo podemos utilizarlo en \u003Ca href=\"https://es.wikipedia.org/wiki/Java_(lenguaje_de_programaci%C3%B3n)\" target=\"_blank\" rel=\"noopener\">Java\u003C/a>, no desde otros lenguajes.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Como veremos más adelante ha sido la más lenta en los \u003Ca href=\"#_resultados_de_los_tests\">Resultados de los tests\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>La implementación de ejemplo de una inserción de una serie de objetos de la clase \u003Ca href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/domain/Price.java\" target=\"_blank\" rel=\"noopener\">Price.java\u003C/a>, es exactamente la misma que la que hemos hecho más arriba en \u003Ca href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/SqliteDB.java\" target=\"_blank\" rel=\"noopener\">SqliteDB\u003C/a>, esto es una de las bondades de \u003Ca href=\"https://es.wikipedia.org/wiki/Java_Database_Connectivity\" target=\"_blank\" rel=\"noopener\">JDBC\u003C/a>, que nos permite obtener una conexión para una base de datos específica, pero a partir de ahí casi siempre nos podemos olvidar de la base de datos con la que trabajamos, siempre y cuando soporte nuestras consultas \u003Ca href=\"https://es.wikipedia.org/wiki/SQL\" target=\"_blank\" rel=\"noopener\">SQL\u003C/a>.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_objectdb\">\u003Ca href=\"https://www.objectdb.com/\" target=\"_blank\" rel=\"noopener\">ObjectDb\u003C/a>\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Es una \u003Ca href=\"https://es.wikipedia.org/wiki/Base_de_datos_orientada_a_objetos\">base de datos orientada a objetos\u003C/a> que nos permite acceso \u003Ca href=\"https://es.wikipedia.org/wiki/Java_Persistence_API\" target=\"_blank\" rel=\"noopener\">JPA\u003C/a>, un estándar de Java que persigue no perder las ventajas de la orientación a objetos; esto se suele perder cuando nos acercamos a la capa de persistencia.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Resulta realmente sencillo realizar acciones típicas de una base de datos, abstrayéndonos del SQL, por ejemplo veamos cómo quedaría una inserción de un array de objetos de la clase Price con \u003Ca href=\"https://www.objectdb.com/\" target=\"_blank\" rel=\"noopener\">ObjectDb\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-java\" data-lang=\"java\">\u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">void\u003C/span> \u003Cspan class=\"hljs-title function_\">insert\u003C/span>\u003Cspan class=\"hljs-params\">(Price... prices)\u003C/span> \u003Cspan class=\"hljs-keyword\">throws\u003C/span> SQLException {\n    em.getTransaction().begin();\n    \u003Cspan class=\"hljs-keyword\">for\u003C/span> (Price p : prices) {\n        em.persist(p);\n    }\n    em.getTransaction().commit();\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Si a esta facilidad de uso, le unimos que los \u003Ca href=\"#_resultados_de_los_tests\">Resultados de los tests\u003C/a> de rendimiento han sido muy buenos (cerca de \u003Ca href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/SqliteDB.java\" target=\"_blank\" rel=\"noopener\">SqliteDB\u003C/a>), puedo decir que he descubierto una base de datos embebida a tener muy en cuenta en futuros proyectos \u003Ca href=\"https://es.wikipedia.org/wiki/Java_(lenguaje_de_programaci%C3%B3n)\" target=\"_blank\" rel=\"noopener\">Java\u003C/a>, eso sí, al igual que con \u003Ca href=\"https://www.oracle.com/technetwork/es/java/javadb/overview/index.html\" target=\"_blank\" rel=\"noopener\">JavaDB\u003C/a>, solo nos sirve si vamos a programar en \u003Ca href=\"https://es.wikipedia.org/wiki/Java_(lenguaje_de_programaci%C3%B3n)\" target=\"_blank\" rel=\"noopener\">Java\u003C/a>.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_los_tests\">Los Tests\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Simplemente consisten en realizar repetidamente una serie operaciones \u003Ca href=\"https://es.wikipedia.org/wiki/CRUD\" target=\"_blank\" rel=\"noopener\">CRUD\u003C/a>. Para cada base de datos, el test realiza una serie de inserciones, selects, actualizaciones y borrado de objetos de la clase Precio.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>He utilizado 100000 instancias de la clase \u003Ca href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/domain/Price.java\" target=\"_blank\" rel=\"noopener\">Price.java\u003C/a>, las mismas para cada tipo de base de datos.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Para esto he creado una interfaz \u003Ca href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/DB.java\" target=\"_blank\" rel=\"noopener\">DB.java\u003C/a> que compartirán cada una de las implementaciones para cada base de datos.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">DB.java\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-java\" data-lang=\"java\">\u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">interface\u003C/span> \u003Cspan class=\"hljs-title class_\">DB\u003C/span> {\n\n    \u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">void\u003C/span> \u003Cspan class=\"hljs-title function_\">insert\u003C/span>\u003Cspan class=\"hljs-params\">(Price... prices)\u003C/span> \u003Cspan class=\"hljs-keyword\">throws\u003C/span> SQLException;\n\n    \u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">void\u003C/span> \u003Cspan class=\"hljs-title function_\">createTable\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>;\n\n    \u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">void\u003C/span> \u003Cspan class=\"hljs-title function_\">deleteAll\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>;\n\n    \u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">void\u003C/span> \u003Cspan class=\"hljs-title function_\">update\u003C/span>\u003Cspan class=\"hljs-params\">(Price... prices)\u003C/span> \u003Cspan class=\"hljs-keyword\">throws\u003C/span> SQLException;\n\n    \u003Cspan class=\"hljs-keyword\">public\u003C/span> Set&lt;Price&gt; \u003Cspan class=\"hljs-title function_\">selectAll\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>;\n\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_las_bases_de_datos_jdbc\">Las Bases de Datos JDBC\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Solo cambian los datos necesarios para obtener el driver y la conexión a la base de datos, por eso toda la lógica está en la clase \u003Ca href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/JdbcDb.java\" target=\"_blank\" rel=\"noopener\">JdbcDb\u003C/a> de la que heredan \u003Ca href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/SqliteDB.java\" target=\"_blank\" rel=\"noopener\">SqliteDB\u003C/a> y \u003Ca href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/DerbyDB.java\" target=\"_blank\" rel=\"noopener\">DerbyDB\u003C/a>.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_el_código_fuente\">El código fuente\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Podéis descargar el código fuente de \u003Ca href=\"https://github.com/carlosvin/java_embedded_databases\" class=\"bare\">https://github.com/carlosvin/java_embedded_databases\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Se trata de un proyecto \u003Ca href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a>, por lo que para ejecutar los tests solo tenéis que ejecutar: \u003Ccode>grade test\u003C/code>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a> descargará automáticamente las librerías necesarias, compilará y ejecutará los tests.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>También podéis ver directamente la ejecución en \u003Ca href=\"https://travis-ci.org/carlosvin/java_embedded_databases\" class=\"bare\">https://travis-ci.org/carlosvin/java_embedded_databases\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://travis-ci.org/carlosvin/java_embedded_databases\">\u003Cspan class=\"image\">\u003Cimg src=\"https://travis-ci.org/carlosvin/java_embedded_databases.svg\" alt=\"image\">\u003C/span>\u003C/a>\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_resultados_de_los_tests\">Resultados de los tests\u003C/h3>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">db.DbTest &gt; testSqliteDB STANDARD_OUT\n    Testing with 100000 elements\n    100000 Prices SqliteDB, total time 3455 ms \u003Cb class=\"conum\">(1)\u003C/b>\n    \tInsert:\t 1508 ms\n    \tSelect:\t 605 ms\n    \tUpdate:\t 1319 ms\n    \tDelete:\t 23 ms\n    ----------------------------------------------\ndb.DbTest &gt; testObjectDB STANDARD_OUT\n    Testing with 100000 elements\n    100000 Prices ObjectDB, total time 6467 ms \u003Cb class=\"conum\">(2)\u003C/b>\n    \tInsert:\t 2579 ms\n    \tSelect:\t 1126 ms\n    \tUpdate:\t 1698 ms\n    \tDelete:\t 1064 ms\n    ----------------------------------------------\ndb.DbTest &gt; testDerbyDB STANDARD_OUT\n    Testing with 100000 elements\n    100000 Prices DerbyDB, total time 24808 ms \u003Cb class=\"conum\">(3)\u003C/b>\n    \tInsert:\t 11467 ms\n    \tSelect:\t 695 ms\n    \tUpdate:\t 6983 ms\n    \tDelete:\t 5663 ms\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"colist arabic\">\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Ca href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/SqliteDB.java\" target=\"_blank\" rel=\"noopener\">SqliteDB\u003C/a> es el más rápido.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ca href=\"https://www.objectdb.com/\" target=\"_blank\" rel=\"noopener\">ObjectDb\u003C/a> es dos veces más lento que \u003Ca href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/SqliteDB.java\" target=\"_blank\" rel=\"noopener\">SqliteDB\u003C/a>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ca href=\"https://www.oracle.com/technetwork/es/java/javadb/overview/index.html\" target=\"_blank\" rel=\"noopener\">JavaDB\u003C/a> o \u003Ca href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/DerbyDB.java\" target=\"_blank\" rel=\"noopener\">DerbyDB\u003C/a> es el más lento, unas 8 veces más lento que \u003Ca href=\"https://github.com/carlosvin/java_embedded_databases/blob/master/src/main/java/db/SqliteDB.java\" target=\"_blank\" rel=\"noopener\">SqliteDB\u003C/a>\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>",{"title":3,"lang":4,"summary":5,"slug":6,"keywords":7,"filepath":11,"dirpath":12,"created":13,"modified":13,"otherLangs":14,"author":15,"previewimage":-1,"path":16},"Bases de Datos Embebidas Java: Comparación de Rendimiento","en","Comparación de rendimiento en Java entre tres bases de datos embebidas: Derby/JavaDB, Sqlite y ObjectDB","java-embedded-db-performance-comparison",[8,9,10],"Java","database","embedded","/static/posts/java-embedded-db-performance-comparison.es.adoc","/static/posts",1402157340000,[4],"Carlos","/langs/es/posts/java-embedded-db-performance-comparison","\u003Cscript type=\"application/ld+json\">{\"@context\":\"https://schema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"Webpage\",\"@id\":\"https://google.com/article\"},\"headline\":\"Bases de Datos Embebidas Java: Comparación de Rendimiento\",\"alternativeHeadline\":\"Comparación de rendimiento en Java entre tres bases de datos embebidas: Derby/JavaDB, Sqlite y ObjectDB\",\"description\":\"Comparación de rendimiento en Java entre tres bases de datos embebidas: Derby/JavaDB, Sqlite y ObjectDB\",\"datePublished\":\"2014-06-07T16:09:00.000Z\",\"dateModified\":\"2014-06-07T16:09:00.000Z\",\"keywords\":[\"Java\",\"database\",\"embedded\"],\"author\":{\"@type\":\"Person\",\"name\":\"Carlos\"},\"publisher\":{\"@type\":\"Person\",\"name\":\"Carlos\"}}\u003C/script>"],"uses":{"params":["slug","lang"]}}]}
