{"type":"data","nodes":[null,{"type":"data","data":[{"path":1,"lang":2,"translations":3,"version":14},"/langs/en/posts/creating-custom-maven-plugin/","en",{"lang":2,"author":4,"siteName":5,"siteDescription":6,"categories":7,"Categories":8,"RecentPosts":9,"NoPosts":10,"SubscribeTo":11,"AboutMe":12,"AllPosts":13},"Carlos Martin Sanchez","Carlos Say's Bla Bla","What is going on in my mind and its surroundings","categories","Categories","Recent posts","There are no posts","Subscribe to the feed","About me","All posts","1.0.1"],"uses":{"params":["lang"],"url":1},"slash":"always"},{"type":"data","data":[{"html":1,"props":2,"jsonLd":20},"\u003Cdiv id=\"toc\" class=\"toc\">\n\u003Cdiv id=\"toctitle\">Table of Contents\u003C/div>\n\u003Cul class=\"sectlevel1\">\n\u003Cli>\u003Ca href=\"#_maven_plugin_concepts\">Maven plugin concepts\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_create_your_custom_plugin_site_lifecycle\">Create your custom plugin (Site Lifecycle)\u003C/a>\n\u003Cul class=\"sectlevel2\">\n\u003Cli>\u003Ca href=\"#_project_structure\">Project structure\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_dependency_injection\">Dependency Injection\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_write_a_custom_mojo\">Write a custom Mojo\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#_unit_tests\">Unit tests\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_integration_tests\">Integration tests\u003C/a>\n\u003Cul class=\"sectlevel2\">\n\u003Cli>\u003Ca href=\"#_how_does_invoker_plugin_work\">How does Invoker Plugin work?\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_configure_invoker_plugin\">Configure Invoker Plugin\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_create_an_integration_test_project\">Create an Integration Test Project\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv id=\"preamble\">\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Maven has lots of plugins to assist you in project construction, testing, packaging and deployment. For example if you want to compile C++ code instead of Java, you can use \u003Ca href=\"https://www.mojohaus.org/maven-native/native-maven-plugin/\">native-maven-plugin\u003C/a>. But what if you need something more specific? Then you can create a custom Maven plugin.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>I will explain how to create a simple custom maven plugin to generate static blog site from Markdown files. I know we can already do that with \u003Ca href=\"https://maven.apache.org/plugins/maven-site-plugin/examples/creating-content.html\">maven-site-plugin\u003C/a> since version 3.3, I will just use it for learning purposes.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>You can find the source code of this example at \u003Ca href=\"https://github.com/carlosvin/blog-maven-plugin\" class=\"bare\">https://github.com/carlosvin/blog-maven-plugin\u003C/a>.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_maven_plugin_concepts\">Maven plugin concepts\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://maven.apache.org/plugin-developers/index.html\" target=\"_blank\" rel=\"noopener\">Mojo\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>An executable goal in Maven, e.g: \u003Ccode>mvn your-plugin:your-mojo\u003C/code> will execute a maven goal \u003Ccode>your-mojo\u003C/code> declared as part of \u003Ccode>your-plugin\u003C/code>.\u003C/p>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">Goal\u003C/dt>\n\u003Cdd>\n\u003Cp>It is equivalent to \u003Ca href=\"https://maven.apache.org/plugin-developers/index.html\" target=\"_blank\" rel=\"noopener\">Mojo\u003C/a> execution.\u003C/p>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">Lifecycle\u003C/dt>\n\u003Cdd>\n\u003Cp>It is a well-defined sequence of phases. Each phase consists of a sequence of goals. Let&#8217;s see an example of lifecycle, e.g: \u003Ccode>FooLifecycle\u003C/code> has \u003Ccode>clean\u003C/code>, \u003Ccode>prepare\u003C/code> and \u003Ccode>assemble\u003C/code> phases. Each of those phases has one of more goals. \u003Cstrong>FooLifecycle\u003C/strong>:\u003C/p>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">clean\u003C/dt>\n\u003Cdd>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Cstrong>rmSources\u003C/strong>\u003C/dt>\n\u003Cdd>\n\u003Cp>a goal to remove source files\u003C/p>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">\u003Cstrong>rmBuild\u003C/strong>\u003C/dt>\n\u003Cdd>\n\u003Cp>a goal to remove files in cache directory\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">prepare\u003C/dt>\n\u003Cdd>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Cstrong>installDependencies\u003C/strong>\u003C/dt>\n\u003Cdd>\n\u003Cp>a goal to download dependencies for the project\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">assemble\u003C/dt>\n\u003Cdd>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Cstrong>build\u003C/strong>\u003C/dt>\n\u003Cdd>\n\u003Cp>a goal to compile source files\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>To define a custom life-cycle similar to previous one, we will use \u003Ccode>src/main/resources/META-INF/plexus/components.xml\u003C/code>, we will speak about that file in following sections. Normally is enough to override \u003Ca href=\"https://maven.apache.org/ref/3.5.3/maven-core/lifecycles.html\">predefined lifecycles\u003C/a>, in this example, we will override \u003Cstrong>site life-cycle\u003C/strong>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"admonitionblock tip\">\n\u003Ctable>\n\u003Ctr>\n\u003Ctd class=\"icon\">\n\u003Cdiv class=\"title\">Tip\u003C/div>\n\u003C/td>\n\u003Ctd class=\"content\">\nYou can find an introduction to Maven life-cycles at \u003Ca href=\"https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html\" class=\"bare\">https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html\u003C/a>\n\u003C/td>\n\u003C/tr>\n\u003C/table>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_create_your_custom_plugin_site_lifecycle\">Create your custom plugin (Site Lifecycle)\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>The plugin we are about to explain will \u003Ca href=\"https://maven.apache.org/ref/3.5.3/maven-core/lifecycles.html#site_Lifecycle\">override site lifecycle\u003C/a>, which has only 2 default phases, so when we run \u003Ccode>mvn site\u003C/code> using our new custom plugin it will execute the goals we are about to create.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Our plugin will work with \u003Ccode>md\u003C/code> (for \u003Ca href=\"https://commonmark.org/\" target=\"_blank\" rel=\"noopener\">Markdown\u003C/a>) file bindings: It will build and deploy the project using \u003Ca href=\"https://maven.apache.org/plugins/maven-deploy-plugin/\">maven deployment plugin\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_project_structure\">Project structure\u003C/h3>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ccode>src/main/java\u003C/code>\u003C/dt>\n\u003Cdd>\n\u003Cp>Where Java source code is\u003C/p>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">\u003Ccode>src/main/resources/META-INF/plexus/components.xml\u003C/code>\u003C/dt>\n\u003Cdd>\n\u003Cp>file to create/override maven lifecycles and artifact types. Here we can specify which goals will be executed when for an artifact type, for example, we can say that for an artifact of type \u003Ccode>whatever\u003C/code> when we run \u003Ccode>mvn foo\u003C/code> it will verify the files, run tests, run linter, compile and zip al generated files.\u003C/p>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">\u003Ccode>src/test/java\u003C/code>\u003C/dt>\n\u003Cdd>\n\u003Cp>Unit tests folder.\u003C/p>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">\u003Ccode>src/it\u003C/code>\u003C/dt>\n\u003Cdd>\n\u003Cp>Folder with all integration tests. Those integration tests are running actual projects and checking that outputs are as expected.\u003C/p>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">\u003Ccode>pom.xml\u003C/code>\u003C/dt>\n\u003Cdd>\n\u003Cp>File to with Maven project description \u003Ca href=\"https://maven.apache.org/guides/introduction/introduction-to-the-pom.html\">(Project Object Model)\u003C/a>\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_dependency_injection\">Dependency Injection\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Maven has finally chosen \u003Ca href=\"https://maven.apache.org/maven-jsr330.html\" target=\"_blank\" rel=\"noopener\">JSR-330\u003C/a> as \u003Ca href=\"https://javax-inject.github.io/javax-inject/\">dependency injection standard\u003C/a> (previously it was Plexus Annotations API).\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>To use dependency injection with Maven we have to:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Add \u003Ccode>javax.inject\u003C/code> dependency to \u003Ccode>pom.xml\u003C/code>, so we can use \u003Ccode>@Inject\u003C/code>, \u003Ccode>@Named\u003C/code>, and \u003Ccode>@Singleton\u003C/code> annotations in plugin implementation Java code.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">pom.xml\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-xml\" data-lang=\"xml\">\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">dependency\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">groupId\u003C/span>&gt;\u003C/span>javax.inject\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">groupId\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">artifactId\u003C/span>&gt;\u003C/span>javax.inject\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">artifactId\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">version\u003C/span>&gt;\u003C/span>1\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">version\u003C/span>&gt;\u003C/span>\n\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">dependency\u003C/span>&gt;\u003C/span>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Set up the \u003Ccode>sisu-maven-plugin\u003C/code> to index the \u003Ca href=\"https://maven.apache.org/maven-jsr330.html\" target=\"_blank\" rel=\"noopener\">JSR-330\u003C/a> components you want made available to Maven.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">pom.xml\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-xml\" data-lang=\"xml\">\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">plugin\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">groupId\u003C/span>&gt;\u003C/span>org.eclipse.sisu\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">groupId\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">artifactId\u003C/span>&gt;\u003C/span>sisu-maven-plugin\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">artifactId\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">version\u003C/span>&gt;\u003C/span>0.3.3\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">version\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">executions\u003C/span>&gt;\u003C/span>\n        \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">execution\u003C/span>&gt;\u003C/span>\n            \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">id\u003C/span>&gt;\u003C/span>generate-index\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">id\u003C/span>&gt;\u003C/span>\n            \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">goals\u003C/span>&gt;\u003C/span>\n                \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">goal\u003C/span>&gt;\u003C/span>main-index\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">goal\u003C/span>&gt;\u003C/span>\n            \u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">goals\u003C/span>&gt;\u003C/span>\n        \u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">execution\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">executions\u003C/span>&gt;\u003C/span>\n\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">plugin\u003C/span>&gt;\u003C/span>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Add annotations to your Mojo, e.g:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">BuildMojo.java\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-java\" data-lang=\"java\">\u003Cspan class=\"hljs-meta\">@Mojo(name = &quot;build&quot;, defaultPhase = LifecyclePhase.COMPILE)\u003C/span> \u003Cb class=\"conum\">(1)\u003C/b>\n\u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">class\u003C/span> \u003Cspan class=\"hljs-title class_\">BuildMojo\u003C/span> \u003Cspan class=\"hljs-keyword\">extends\u003C/span> \u003Cspan class=\"hljs-title class_\">AbstractMojo\u003C/span> {\n\n    \u003Cspan class=\"hljs-keyword\">private\u003C/span> \u003Cspan class=\"hljs-keyword\">final\u003C/span> FileSetManager fileSetManager;\n    \u003Cspan class=\"hljs-keyword\">private\u003C/span> \u003Cspan class=\"hljs-keyword\">final\u003C/span> MdToHtml mdToHtml;\n\n\n    \u003Cspan class=\"hljs-meta\">@Inject\u003C/span> \u003Cb class=\"conum\">(2)\u003C/b>\n    \u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-title function_\">BuildMojo\u003C/span>\u003Cspan class=\"hljs-params\">(FileSetManager fileSetManager, MdToHtml mdToHtml)\u003C/span> {\n        \u003Cspan class=\"hljs-built_in\">this\u003C/span>.fileSetManager = fileSetManager;\n        \u003Cspan class=\"hljs-built_in\">this\u003C/span>.mdToHtml = mdToHtml;\n        \u003Cspan class=\"hljs-comment\">//\u003C/span>\n    }\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"colist arabic\">\n\u003Col>\n\u003Cli>\n\u003Cp>This annotation is not a dependency injection one, we will explain later what it is for.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>It will inject an instance of FileSetManager and MdToHtml.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_write_a_custom_mojo\">Write a custom \u003Ca href=\"https://maven.apache.org/plugin-developers/index.html\" target=\"_blank\" rel=\"noopener\">Mojo\u003C/a>\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>It is quite straightforward to implement a \u003Ca href=\"https://maven.apache.org/plugin-developers/index.html\" target=\"_blank\" rel=\"noopener\">Mojo\u003C/a> class, we have to:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"sect3\">\n\u003Ch4 id=\"_1_implement_mojo_interface\">1. Implement Mojo interface\u003C/h4>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Your \u003Ca href=\"https://maven.apache.org/plugin-developers/index.html\" target=\"_blank\" rel=\"noopener\">Mojo\u003C/a> class has to implement \u003Ccode>org.apache.maven.plugin.Mojo\u003C/code>, although it is more convenient to extend \u003Ccode>org.apache.maven.plugin.AbstractMojo\u003C/code>, an abstract class to provide most of the infrastructure required to implement a Mojo except for execute method. That interface and class are described at \u003Ca href=\"https://maven.apache.org/developers/mojo-api-specification.html\">Mojo API\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-java\" data-lang=\"java\">\u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">class\u003C/span> \u003Cspan class=\"hljs-title class_\">BuildMojo\u003C/span> \u003Cspan class=\"hljs-keyword\">extends\u003C/span> \u003Cspan class=\"hljs-title class_\">AbstractMojo\u003C/span> {\n    \u003Cspan class=\"hljs-comment\">// ...\u003C/span>\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect3\">\n\u003Ch4 id=\"_2_configure_mojo_with_java_5_annotations\">2. Configure Mojo with Java 5 annotations\u003C/h4>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Annotate \u003Ca href=\"https://maven.apache.org/plugin-developers/index.html\" target=\"_blank\" rel=\"noopener\">Mojo\u003C/a> class with \u003Ccode>@Mojo\u003C/code> and input parameters with \u003Ccode>@Parameter\u003C/code>. Those annotations belong to another set of annotations to configure Mojos, \u003Ca href=\"https://maven.apache.org/plugin-tools/maven-plugin-plugin/examples/using-annotations.html\">Plugin Tools Java5 Annotations\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-java\" data-lang=\"java\">\u003Cspan class=\"hljs-comment\">/**\n* Generate HTML files from Markdown files\n*/\u003C/span>\n\u003Cspan class=\"hljs-meta\">@Mojo(name = &quot;build&quot;, defaultPhase = LifecyclePhase.COMPILE)\u003C/span> \u003Cb class=\"conum\">(1)\u003C/b>\n\u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">class\u003C/span> \u003Cspan class=\"hljs-title class_\">BuildMojo\u003C/span> \u003Cspan class=\"hljs-keyword\">extends\u003C/span> \u003Cspan class=\"hljs-title class_\">AbstractMojo\u003C/span> {\n\n    \u003Cspan class=\"hljs-comment\">/**\n    * Output directory path where HTML files are generated\n    */\u003C/span>\n    \u003Cspan class=\"hljs-meta\">@Parameter( \u003Cb class=\"conum\">(2)\u003C/b>\n      defaultValue = &quot;${project.reporting.outputDirectory}&quot;, \u003Cb class=\"conum\">(3)\u003C/b>\n      property = &quot;siteOutputDirectory&quot;, \u003Cb class=\"conum\">(4)\u003C/b>\n      required = true)\u003C/span>\n    \u003Cspan class=\"hljs-keyword\">private\u003C/span> File outputDirectory;\n\n    \u003Cspan class=\"hljs-comment\">/**\n    * A specific &lt;code&gt;fileSet&lt;/code&gt; rule to select files and directories.\n    * Fileset spec: https://maven.apache.org/shared/file-management/fileset.html\n    */\u003C/span>\n    \u003Cspan class=\"hljs-meta\">@Parameter\u003C/span>\n    \u003Cspan class=\"hljs-keyword\">private\u003C/span> FileSet inputFiles;\n    \u003Cspan class=\"hljs-comment\">//\u003C/span>\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"colist arabic\">\n\u003Col>\n\u003Cli>\n\u003Cp>Configures Mojo name and default life-cycle phase. To execute the Mojo in this example we will use \u003Ccode>mvn site:build\u003C/code>: \u003Cem>site\u003C/em> is the plugin name and \u003Cem>build\u003C/em> is \u003Ccode>name\u003C/code> parameter.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>We use \u003Ccode>@Parameter\u003C/code> annotation to pass configuration parameters to Mojo.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>You can use properties placeholder or any String. If the parameter type is not a String, then Maven will try to cast it.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>It allows configuration of the Mojo parameter from the command line by referencing a system property that the user sets via the -D option. E.g: \u003Ccode>mvn site:build -DsiteOutputDirectory=/var/www/html\u003C/code> will set siteOutputDirectory attribute to \u003Ccode>/var/www/html\u003C/code>.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003Cdiv class=\"admonitionblock tip\">\n\u003Ctable>\n\u003Ctr>\n\u003Ctd class=\"icon\">\n\u003Cdiv class=\"title\">Tip\u003C/div>\n\u003C/td>\n\u003Ctd class=\"content\">\nMore info in \u003Ca href=\"https://maven.apache.org/guides/plugin/guide-java-plugin-development.html#Parameters\">Maven Plugin development guide in Parametera section\u003C/a>.\n\u003C/td>\n\u003C/tr>\n\u003C/table>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect3\">\n\u003Ch4 id=\"_3_implement_execute_method\">3. Implement \u003Cem>execute\u003C/em> method\u003C/h4>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>As I have explained before at \u003Ca href=\"#_1_implement_mojo_interface\">1. Implement Mojo interface\u003C/a>, our \u003Ca href=\"https://maven.apache.org/plugin-developers/index.html\" target=\"_blank\" rel=\"noopener\">Mojo\u003C/a> class extends \u003Ccode>org.apache.maven.plugin.AbstractMojo\u003C/code> which has one unimplemented method from \u003Ccode>org.apache.maven.plugin.Mojo\u003C/code> interface. In that method we are going to implement the Maven goal logic.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://maven.apache.org/plugin-developers/index.html\" target=\"_blank\" rel=\"noopener\">Mojo\u003C/a> class instance is called from \u003Ca href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven\u003C/a> execution life-cycle by invoking \u003Ccode>execute()\u003C/code> method. Before calling \u003Ccode>execute()\u003C/code>, \u003Ca href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven\u003C/a> has performed some other tasks related with the Mojo:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">\u003Ca href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven\u003C/a> instantiates Mojo and injects dependencies (\u003Ca href=\"#_dependency_injection\">Dependency Injection\u003C/a>).\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-java\" data-lang=\"java\">\u003Cspan class=\"hljs-type\">Mojo\u003C/span> \u003Cspan class=\"hljs-variable\">mojo\u003C/span> \u003Cspan class=\"hljs-operator\">=\u003C/span> \u003Cspan class=\"hljs-keyword\">new\u003C/span> \u003Cspan class=\"hljs-title class_\">BuildMojo\u003C/span>(fileSetManager, mdToHtml);\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven\u003C/a> configures the \u003Ca href=\"https://maven.apache.org/plugin-developers/index.html\" target=\"_blank\" rel=\"noopener\">Mojo\u003C/a> by assigning values to parameters.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>I will simplify \u003Ccode>execute\u003C/code> method implementation in the \u003Ca href=\"https://github.com/carlosvin/blog-maven-plugin\">sample project in github\u003C/a>, because it is more complicated and this complexity is not relevant for learning purposes.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven\u003C/a> calls execute method: \u003Ccode>mojo.execute()\u003C/code>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">BuildMojo.java\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-java\" data-lang=\"java\">\u003Cspan class=\"hljs-keyword\">public\u003C/span> \u003Cspan class=\"hljs-keyword\">void\u003C/span> \u003Cspan class=\"hljs-title function_\">execute\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span> \u003Cspan class=\"hljs-keyword\">throws\u003C/span> MojoExecutionException { \u003Cb class=\"conum\">(1)\u003C/b>\n    \u003Cspan class=\"hljs-keyword\">if\u003C/span> (inputFiles == \u003Cspan class=\"hljs-literal\">null\u003C/span>) {\n        setDefaultInput();\n    }\n    inputDirPath = Paths.get(inputFiles.getDirectory());\n\n    String[] includedFiles = fileSetManager.getIncludedFiles(inputFiles); \u003Cb class=\"conum\">(2)\u003C/b>\n\n    outputDirPath = outputDirectory.toPath();\n    \u003Cspan class=\"hljs-keyword\">if\u003C/span> (includedFiles == \u003Cspan class=\"hljs-literal\">null\u003C/span> || includedFiles.length == \u003Cspan class=\"hljs-number\">0\u003C/span>) {\n        getLog().warn(\u003Cspan class=\"hljs-string\">&quot;SKIP: There are no input files. &quot;\u003C/span> + getInputFilesToString()); \u003Cb class=\"conum\">(3)\u003C/b>\n    } \u003Cspan class=\"hljs-keyword\">else\u003C/span> {\n        \u003Cspan class=\"hljs-keyword\">if\u003C/span> (!outputDirectory.exists()) { \u003Cb class=\"conum\">(4)\u003C/b>\n            outputDirectory.mkdirs();\n        }\n        \u003Cspan class=\"hljs-keyword\">try\u003C/span> {\n            \u003Cspan class=\"hljs-keyword\">for\u003C/span> (String f : includedFiles) {\n                convertToHtml(Paths.get(f), outputDirectory); \u003Cb class=\"conum\">(5)\u003C/b>\n            }\n        } \u003Cspan class=\"hljs-keyword\">catch\u003C/span> (InterruptedException e) {\n            \u003Cspan class=\"hljs-keyword\">throw\u003C/span> \u003Cspan class=\"hljs-keyword\">new\u003C/span> \u003Cspan class=\"hljs-title class_\">MojoExecutionException\u003C/span>(e.getLocalizedMessage(), e); \u003Cb class=\"conum\">(6)\u003C/b>\n        }\n    }\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"colist arabic\">\n\u003Col>\n\u003Cli>\n\u003Cp>If there is any error during execution, it should throw MojoExecutionException.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>A way to get all selected files from \u003Ca href=\"https://maven.apache.org/shared/file-management/fileset.html\">FileSet\u003C/a>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>AbstractMojo supplies logger functionality.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>If output directory doesn&#8217;t exist, it will be created.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>It converts each file Markdown to HTML.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Convert thrown exception to MojoExecutionException.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_unit_tests\">Unit tests\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>In the example we use \u003Ca href=\"https://junit.org/junit4/\">JUnit 4\u003C/a>, but you can use any other testing framework.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Firstly, you have to add the unit test library dependency to \u003Ccode>pom.xml\u003C/code>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">pom.xml\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-xml\" data-lang=\"xml\">\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">dependency\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">groupId\u003C/span>&gt;\u003C/span>junit\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">groupId\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">artifactId\u003C/span>&gt;\u003C/span>junit\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">artifactId\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">version\u003C/span>&gt;\u003C/span>4.11\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">version\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">scope\u003C/span>&gt;\u003C/span>test\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">scope\u003C/span>&gt;\u003C/span>\n\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">dependency\u003C/span>&gt;\u003C/span>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Then you just have to write your unit tests under \u003Ccode>src/test/java\u003C/code> folder: \u003Ca href=\"https://github.com/carlosvin/blog-maven-plugin/blob/master/src/test/java/com/maven/plugins/blog/PathsTest.java\">src/test/java/com/maven/plugins/blog/PathsTest.java\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>To run the unit tests you just need to execute \u003Ccode>mvn test\u003C/code>.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_integration_tests\">Integration tests\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>The 2 most popular ways to perform integration tests on custom maven plugins are using \u003Ca href=\"https://maven.apache.org/surefire/maven-failsafe-plugin\">maven-failsafe-plugin\u003C/a> or \u003Ca href=\"https://maven.apache.org/plugins/maven-invoker-plugin\">maven-invoker-plugin\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>I&#8217;ve chosen \u003Ca href=\"https://maven.apache.org/plugins/maven-invoker-plugin\">maven-invoker-plugin\u003C/a> because for me it is more straightforward. There is \u003Ca href=\"https://stackoverflow.com/questions/40010745/maven-invoker-plugin-vs-maven-failsafe-plugin-which-to-use-for-integration-test\">an answer at stackoverflow where they explain thoroughly the differences between them\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_how_does_invoker_plugin_work\">How does Invoker Plugin work?\u003C/h3>\n\u003Cdiv class=\"olist arabic\">\n\u003Col class=\"arabic\">\n\u003Cli>\n\u003Cp>We create projects to use our custom plugin under \u003Ccode>src/it\u003C/code> folder, so our plugin will be applied to test projects.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Invoker plugin will simulate a previously configured \u003Ca href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven\u003C/a> execution.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>After Maven execution, A validation script will check if our plugin outputs are the expected ones. For example, if our plugin is supposed to generate a file named \u003Ccode>foo.file\u003C/code>, verification plugin will check if that file exists, if it doesn&#8217;t, integration test will fail.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_configure_invoker_plugin\">Configure Invoker Plugin\u003C/h3>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-xml\" data-lang=\"xml\">\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">plugin\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">artifactId\u003C/span>&gt;\u003C/span>maven-invoker-plugin\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">artifactId\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">version\u003C/span>&gt;\u003C/span>3.0.1\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">version\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">configuration\u003C/span>&gt;\u003C/span>\n        \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">postBuildHookScript\u003C/span>&gt;\u003C/span>verify\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">postBuildHookScript\u003C/span>&gt;\u003C/span> \u003Cb class=\"conum\">(3)\u003C/b>\n        \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">showVersion\u003C/span>&gt;\u003C/span>true\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">showVersion\u003C/span>&gt;\u003C/span>\n        \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">streamLogs\u003C/span>&gt;\u003C/span>true\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">streamLogs\u003C/span>&gt;\u003C/span>\n        \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">noLog\u003C/span>&gt;\u003C/span>false\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">noLog\u003C/span>&gt;\u003C/span>\n        \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">showErrors\u003C/span>&gt;\u003C/span>true\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">showErrors\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">configuration\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">executions\u003C/span>&gt;\u003C/span>\n        \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">execution\u003C/span>&gt;\u003C/span>\n            \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">id\u003C/span>&gt;\u003C/span>integration-test\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">id\u003C/span>&gt;\u003C/span>\n            \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">goals\u003C/span>&gt;\u003C/span>\n                \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">goal\u003C/span>&gt;\u003C/span>install\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">goal\u003C/span>&gt;\u003C/span> \u003Cb class=\"conum\">(1)\u003C/b>\n                \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">goal\u003C/span>&gt;\u003C/span>run\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">goal\u003C/span>&gt;\u003C/span> \u003Cb class=\"conum\">(2)\u003C/b>\n            \u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">goals\u003C/span>&gt;\u003C/span>\n        \u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">execution\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">executions\u003C/span>&gt;\u003C/span>\n\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">plugin\u003C/span>&gt;\u003C/span>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"colist arabic\">\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Ccode>invoker:install\u003C/code> will be executed during the phase pre-integration-test and will install the main project artifact into target/local-repo.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode>invoker:run\u003C/code> will be executed during the integration-test phase and it will execute all defined integration tests under \u003Ccode>src/it\u003C/code> folder.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>It configures invoker plugin to execute validation script after integration test project execution. This script may be written with either BeanShell or Groovy (verify.groovy or verify.bsh).\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>We have used other properties to show errors, show maven log and save it to a file.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>You can check all \u003Ccode>invoker:run\u003C/code> configuration properties at \u003Ca href=\"https://maven.apache.org/plugins/maven-invoker-plugin/run-mojo.html\" class=\"bare\">https://maven.apache.org/plugins/maven-invoker-plugin/run-mojo.html\u003C/a>.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_create_an_integration_test_project\">Create an Integration Test Project\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>It is a project we use to execute custom plugin goals, so we can validate if it produces the expected output.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>There are 3 important files matching with \u003Ca href=\"http://wiki.c2.com/?ArrangeActAssert\" target=\"_blank\" rel=\"noopener\">AAA\u003C/a> phases (\"Arrange-Act-Assert\").\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"sect3\">\n\u003Ch4 id=\"_arrange_pom_xml\">Arrange: pom.xml\u003C/h4>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>This file is a project using our custom plugin.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://github.com/carlosvin/blog-maven-plugin/blob/master/src/it/md-html/pom.xml\">src/it/md-html/pom.xml\u003C/a>\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-xml\" data-lang=\"xml\">\u003Cspan class=\"hljs-meta\">&lt;?xml version=\u003Cspan class=\"hljs-string\">&quot;1.0&quot;\u003C/span> encoding=\u003Cspan class=\"hljs-string\">&quot;UTF-8&quot;\u003C/span>?&gt;\u003C/span>\n\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">project\u003C/span> \u003Cspan class=\"hljs-attr\">xmlns\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;http://maven.apache.org/POM/4.0.0&quot;\u003C/span> \u003Cspan class=\"hljs-attr\">xmlns:xsi\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\u003C/span>\n\u003Cspan class=\"hljs-attr\">xsi:schemaLocation\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">modelVersion\u003C/span>&gt;\u003C/span>4.0.0\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">modelVersion\u003C/span>&gt;\u003C/span>\n\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">groupId\u003C/span>&gt;\u003C/span>com.maven.plugins.it\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">groupId\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">artifactId\u003C/span>&gt;\u003C/span>simple-it\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">artifactId\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">version\u003C/span>&gt;\u003C/span>1.0-SNAPSHOT\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">version\u003C/span>&gt;\u003C/span>\n\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">build\u003C/span>&gt;\u003C/span>\n        \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">plugins\u003C/span>&gt;\u003C/span>\n            \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">plugin\u003C/span>&gt;\u003C/span>\n                \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">groupId\u003C/span>&gt;\u003C/span>@project.groupId@\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">groupId\u003C/span>&gt;\u003C/span>\n                \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">artifactId\u003C/span>&gt;\u003C/span>@project.artifactId@\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">artifactId\u003C/span>&gt;\u003C/span>\n                \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">version\u003C/span>&gt;\u003C/span>@project.version@\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">version\u003C/span>&gt;\u003C/span>\n            \u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">plugin\u003C/span>&gt;\u003C/span>\n        \u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">plugins\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">build\u003C/span>&gt;\u003C/span>\n\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">project\u003C/span>&gt;\u003C/span>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>It is a very simple pom file where we use placeholders to reference to our plugin under test. When invoker plugin executes following pom file, firstly will replace those placeholders to reference to the latest version sof our custom plugin which was recently installed in the local repository:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-xml\" data-lang=\"xml\">\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">plugin\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">groupId\u003C/span>&gt;\u003C/span>com.maven.plugins\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">groupId\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">artifactId\u003C/span>&gt;\u003C/span>blog\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">artifactId\u003C/span>&gt;\u003C/span>\n    \u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">version\u003C/span>&gt;\u003C/span>0.0.1-SNAPSHOT\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">version\u003C/span>&gt;\u003C/span>\n\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">plugin\u003C/span>&gt;\u003C/span>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>In that way invoker plugin ensures it is testing the latest version of current project.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect3\">\n\u003Ch4 id=\"_act_invoker_properties\">Act: invoker.properties\u003C/h4>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>It configures how test project will be executed.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">\u003Ca href=\"https://github.com/carlosvin/blog-maven-plugin/blob/master/src/it/md-html/invoker.properties\">src/it/md-html/invoker.properties\u003C/a>\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-properties\" data-lang=\"properties\">\u003Cspan class=\"hljs-attr\">invoker.goals\u003C/span> = \u003Cspan class=\"hljs-string\">blog:build\u003C/span>\n\u003Cspan class=\"hljs-attr\">invoker.name\u003C/span> = \u003Cspan class=\"hljs-string\">Test build MD\u003C/span>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>It will execute \u003Ccode>mvn blog:build\u003C/code>, a goal defined in our custom plugin under example or what is the same, it will execute \u003Ca href=\"https://github.com/carlosvin/blog-maven-plugin/blob/master/src/main/java/com/maven/plugins/blog/BuildMojo.java\" target=\"_blank\" rel=\"noopener\">Build Mojo\u003C/a> described in section \u003Ca href=\"#_write_a_custom_mojo\">Write a custom Mojo\u003C/a>.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect3\">\n\u003Ch4 id=\"_assert_verify_groovy\">Assert: verify.groovy\u003C/h4>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>It is the script to check that plugin execution generated the expected results.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Verification script, it is checking if \u003Ccode>target/site/README.html\u003C/code> file was generated by the plugin.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">\u003Ca href=\"https://github.com/carlosvin/blog-maven-plugin/blob/master/src/it/md-html/verify.groovy\">src/it/md-html/verify.groovy\u003C/a>\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-groovy\" data-lang=\"groovy\">File generated = \u003Cspan class=\"hljs-keyword\">new\u003C/span> File( basedir, \u003Cspan class=\"hljs-string\">&quot;target/site/README.html&quot;\u003C/span> );\n\n\u003Cspan class=\"hljs-keyword\">assert\u003C/span> generated.isFile()\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>",{"title":3,"lang":4,"summary":5,"slug":6,"keywords":7,"filepath":13,"dirpath":14,"created":15,"modified":15,"otherLangs":16,"author":18,"previewimage":-1,"path":19},"Example how to create custom Maven Plugin","en","Example to understand Maven plugins concepts and how to create a custom Maven plugin from scratch","creating-custom-maven-plugin",[8,9,10,11,12],"Maven","Java","Build Systems","maven-site-plugin","Maven Plugins","/static/posts/creating-custom-maven-plugin.adoc","/static/posts",1520791200000,[17],"es","Carlos Martin Sanchez","/langs/en/posts/creating-custom-maven-plugin","\u003Cscript type=\"application/ld+json\">{\"@context\":\"https://schema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"Webpage\",\"@id\":\"https://google.com/article\"},\"headline\":\"Example how to create custom Maven Plugin\",\"alternativeHeadline\":\"Example to understand Maven plugins concepts and how to create a custom Maven plugin from scratch\",\"description\":\"Example to understand Maven plugins concepts and how to create a custom Maven plugin from scratch\",\"datePublished\":\"2018-03-11T18:00:00.000Z\",\"dateModified\":\"2018-03-11T18:00:00.000Z\",\"keywords\":[\"Maven\",\"Java\",\"Build Systems\",\"maven-site-plugin\",\"Maven Plugins\"],\"author\":{\"@type\":\"Person\",\"name\":\"Carlos Martin Sanchez\"},\"publisher\":{\"@type\":\"Person\",\"name\":\"Carlos Martin Sanchez\"}}\u003C/script>"],"uses":{"params":["slug","lang"]}}]}
