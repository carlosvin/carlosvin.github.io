{"type":"data","nodes":[null,{"type":"data","data":[{"path":1,"lang":2,"translations":3,"version":14},"/langs/en/posts/reverse-proxy-multidomain-docker/","en",{"lang":2,"author":4,"siteName":5,"siteDescription":6,"categories":7,"Categories":8,"RecentPosts":9,"NoPosts":10,"SubscribeTo":11,"AboutMe":12,"AllPosts":13},"Carlos Martin Sanchez","Carlos Say's Bla Bla","What is going on in my mind and its surroundings","categories","Categories","Recent posts","There are no posts","Subscribe to the feed","About me","All posts","1.0.1"],"uses":{"params":["lang"],"url":1},"slash":"always"},{"type":"data","data":[{"html":1,"props":2,"jsonLd":17},"\u003Cdiv id=\"toc\" class=\"toc\">\n\u003Cdiv id=\"toctitle\">Table of Contents\u003C/div>\n\u003Cul class=\"sectlevel1\">\n\u003Cli>\u003Ca href=\"#_use_case\">Use case\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_how_to_configure_multi_domain_reverse_proxy\">How to Configure Multi-Domain Reverse Proxy\u003C/a>\n\u003Cul class=\"sectlevel2\">\n\u003Cli>\u003Ca href=\"#_example_project_structure\">Example Project Structure\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_architecture_configuration_docker_compose\">Architecture Configuration (docker-compose)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_application_image_configuration\">Application Image Configuration\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_adding_domain_names_to_your_development_environment_configuration\">Adding domain names to your development environment configuration\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_everything_ready\">Everything ready!\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_use_case\">Use case\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>We have several server applications in the same development environment, each application is bundled in a Docker container, e.g: \u003Cstrong>\"Container A\"\u003C/strong> and \u003Cstrong>\"Container B\"\u003C/strong>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>With Docker those applications have the same IP address. One way to differentiate and access to an specific application is exposing different ports.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"imageblock center\">\n\u003Cdiv class=\"content\">\n\u003Cimg src=\"/posts/reverse-proxy-multidomain-docker/ip.png\" alt=\"ip\">\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Containers exposing the same IP address and different ports.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>If we want to call to \u003Cstrong>\"Application A\"\u003C/strong> we will do: \u003Ccode>GET \u003Ca href=\"http://10.20.30.40:8080/colors/red\" class=\"bare\">http://10.20.30.40:8080/colors/red\u003C/a>\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>If we want to call to \u003Cstrong>\"Application B\"\u003C/strong> we will do: \u003Ccode>GET \u003Ca href=\"http://10.20.30.40:8081/fruits/tomato\" class=\"bare\">http://10.20.30.40:8081/fruits/tomato\u003C/a>\u003C/code>.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>But that solution is a little bit confusing, does 8080 mean we are accessing to \"application A\"?\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>It would be \u003Cstrong>simpler and easier\u003C/strong> to remind something like:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>Calling \u003Cstrong>\"Application A\"\u003C/strong>: \u003Ccode>GET \u003Ca href=\"http://a.domain.com/colors/red\" class=\"bare\">http://a.domain.com/colors/red\u003C/a>\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Calling \u003Cstrong>\"Application B\"\u003C/strong>: \u003Ccode>GET \u003Ca href=\"http://b.domain.com/fruits/tomato\" class=\"bare\">http://b.domain.com/fruits/tomato\u003C/a>\u003C/code>.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"imageblock center\">\n\u003Cdiv class=\"content\">\n\u003Cimg src=\"/posts/reverse-proxy-multidomain-docker/domain.png\" alt=\"domain\">\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Accessing applications by domain name.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Get that extra semantic value is much simpler than I thought at the beginning and you will see below.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_how_to_configure_multi_domain_reverse_proxy\">How to Configure Multi-Domain Reverse Proxy\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>I said it is easy, because we almost have to do nothing, another container will do it for us, especifically we are going to use \u003Ca href=\"https://github.com/jwilder/nginx-proxy\" target=\"_blank\" rel=\"noopener\">nginx-proxy\u003C/a>, it will automatically generate the required \u003Ca href=\"https://www.nginx.com\" target=\"_blank\" rel=\"noopener\">NGINX\u003C/a> configurations.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>So, we will have 2 applications + 1 proxy, that is 3 containers.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"imageblock center\">\n\u003Cdiv class=\"content\">\n\u003Cimg src=\"/posts/reverse-proxy-multidomain-docker/proxy.png\" alt=\"domain\">\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>3 containers, 2 applications and 1 proxy\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"admonitionblock note\">\n\u003Ctable>\n\u003Ctr>\n\u003Ctd class=\"icon\">\n\u003Cdiv class=\"title\">Note\u003C/div>\n\u003C/td>\n\u003Ctd class=\"content\">\nYou can download the full example at \u003Ca href=\"https://github.com/carlosvin/docker-reverse-proxy-multi-domain\" class=\"bare\">https://github.com/carlosvin/docker-reverse-proxy-multi-domain\u003C/a>.\n\u003C/td>\n\u003C/tr>\n\u003C/table>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_example_project_structure\">Example Project Structure\u003C/h3>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">docker-compose.yaml\u003C/dt>\n\u003Cdd>\n\u003Cp>Main configuration file describing architecture in previous picture.\u003C/p>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">a\u003C/dt>\n\u003Cdd>\n\u003Cp>Application A directory.\u003C/p>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">Dockerfile\u003C/dt>\n\u003Cdd>\n\u003Cp>Container A configuration file.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">b\u003C/dt>\n\u003Cdd>\n\u003Cp>Application B directory.\u003C/p>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">Dockerfile\u003C/dt>\n\u003Cdd>\n\u003Cp>Container B configuration file.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://github.com/carlosvin/docker-reverse-proxy-multi-domain\" target=\"_blank\" rel=\"noopener\">View Project\u003C/a>.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_architecture_configuration_docker_compose\">Architecture Configuration (docker-compose)\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>The relationships between containers is the most interesting part in this example.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">docker-reverse-proxy-multi-domain/docker-compose.yaml\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-yaml\" data-lang=\"yaml\">\u003Cspan class=\"hljs-attr\">a:\u003C/span>\n  \u003Cspan class=\"hljs-attr\">build:\u003C/span> \u003Cspan class=\"hljs-string\">a\u003C/span> \u003Cb class=\"conum\">(4)\u003C/b>\n  \u003Cspan class=\"hljs-attr\">environment:\u003C/span>\n    \u003Cspan class=\"hljs-attr\">VIRTUAL_HOST:\u003C/span> \u003Cspan class=\"hljs-string\">a.domain.com\u003C/span> \u003Cb class=\"conum\">(1)\u003C/b>\n  \u003Cspan class=\"hljs-attr\">restart:\u003C/span> \u003Cspan class=\"hljs-string\">always\u003C/span>\n\n\u003Cspan class=\"hljs-attr\">b:\u003C/span>\n  \u003Cspan class=\"hljs-attr\">build:\u003C/span> \u003Cspan class=\"hljs-string\">b\u003C/span> \u003Cb class=\"conum\">(5)\u003C/b>\n  \u003Cspan class=\"hljs-attr\">environment:\u003C/span>\n    \u003Cspan class=\"hljs-attr\">VIRTUAL_HOST:\u003C/span>  \u003Cspan class=\"hljs-string\">b.domain.com\u003C/span> \u003Cb class=\"conum\">(2)\u003C/b>\n  \u003Cspan class=\"hljs-attr\">restart:\u003C/span> \u003Cspan class=\"hljs-string\">always\u003C/span>\n\n\u003Cspan class=\"hljs-attr\">nginx-proxy:\u003C/span> \u003Cb class=\"conum\">(3)\u003C/b>\n  \u003Cspan class=\"hljs-attr\">image:\u003C/span> \u003Cspan class=\"hljs-string\">jwilder/nginx-proxy\u003C/span>\n  \u003Cspan class=\"hljs-attr\">ports:\u003C/span>\n    \u003Cspan class=\"hljs-bullet\">-\u003C/span> \u003Cspan class=\"hljs-string\">&quot;80:80&quot;\u003C/span>\n    \u003Cspan class=\"hljs-bullet\">-\u003C/span> \u003Cspan class=\"hljs-string\">&quot;443:443&quot;\u003C/span>\n  \u003Cspan class=\"hljs-attr\">volumes:\u003C/span>\n    \u003Cspan class=\"hljs-bullet\">-\u003C/span> \u003Cspan class=\"hljs-string\">/var/run/docker.sock:/tmp/docker.sock:ro\u003C/span>\n\n  \u003Cspan class=\"hljs-attr\">restart:\u003C/span> \u003Cspan class=\"hljs-string\">always\u003C/span>\n  \u003Cspan class=\"hljs-attr\">privileged:\u003C/span> \u003Cspan class=\"hljs-literal\">true\u003C/span>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"colist arabic\">\n\u003Col>\n\u003Cli>\n\u003Cp>Configure the domain name for app a.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Configure the domain name for app b.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>From this line there is proxy configuration (copy/paste part).\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>We tell docker-compose has to build Docker images within specified directory.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>For example, we are saying that docker-compose has to build a Docker image using ../b/Dockerfile file.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_application_image_configuration\">Application Image Configuration\u003C/h3>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">a/Dockerfile\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-docker\" data-lang=\"docker\">\u003Cspan class=\"hljs-keyword\">FROM\u003C/span> httpd:\u003Cspan class=\"hljs-number\">2.4\u003C/span> \u003Cb class=\"conum\">(1)\u003C/b>\n\u003Cspan class=\"hljs-keyword\">RUN\u003C/span>\u003Cspan class=\"language-bash\"> \u003Cspan class=\"hljs-built_in\">echo\u003C/span> \u003Cspan class=\"hljs-string\">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;A&lt;/h1&gt;App A works!&lt;/body&gt;&lt;/html&gt;&quot;\u003C/span> &gt; /usr/local/apache2/htdocs/index.html \u003C/span>\u003Cb class=\"conum\">(2)\u003C/b>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"colist arabic\">\n\u003Col>\n\u003Cli>\n\u003Cp>We import an image with an apache server.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>It serves a file that prints \"Host A\" as default page.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>The configuration for application B is pretty much the same:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">b/Dockerfile\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-docker\" data-lang=\"docker\">\u003Cspan class=\"hljs-keyword\">FROM\u003C/span> httpd:\u003Cspan class=\"hljs-number\">2.4\u003C/span>\n\u003Cspan class=\"hljs-keyword\">RUN\u003C/span>\u003Cspan class=\"language-bash\"> \u003Cspan class=\"hljs-built_in\">echo\u003C/span> \u003Cspan class=\"hljs-string\">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;B&lt;/h1&gt;App B works!&lt;/body&gt;&lt;/html&gt;&quot;\u003C/span> &gt; /usr/local/apache2/htdocs/index.html\u003C/span>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_adding_domain_names_to_your_development_environment_configuration\">Adding domain names to your development environment configuration\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>In Linux we just have to map the local address to domain names you have chosen, in the example \u003Ccode>a.domain.com\u003C/code> and \u003Ccode>b.domain.com\u003C/code>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">/etc/hosts\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">127.0.0.1    localhost.localdomain localhost\n::1          localhost6.localdomain6 localhost6\n127.0.0.1    a.domain.com \u003Cb class=\"conum\">(1)\u003C/b>\n127.0.0.1    b.domain.com\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"colist arabic\">\n\u003Col>\n\u003Cli>\n\u003Cp>We just added last 2 lines.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_everything_ready\">Everything ready!\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Now we just have to test the example:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">docker-compose build\ndocker-compose up\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>The 3 containers are running now.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>So we can open our favorite web browser and go to \u003Ccode>a.domain.com\u003C/code>. It will show \u003Cstrong>App A works!\u003C/strong>. If we go to \u003Ccode>b.domain.com\u003C/code> then we will see \u003Cstrong>App B works!\u003C/strong>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"imageblock center\">\n\u003Cdiv class=\"content\">\n\u003Cimg src=\"/posts/reverse-proxy-multidomain-docker/a.screenshot.png\" alt=\"App A works!\">\n\u003C/div>\n\u003Cdiv class=\"title\">Figure 1. a.domain.com\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"imageblock center\">\n\u003Cdiv class=\"content\">\n\u003Cimg src=\"/posts/reverse-proxy-multidomain-docker/b.screenshot.png\" alt=\"App B works!\">\n\u003C/div>\n\u003Cdiv class=\"title\">Figure 2. b.domain.com\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"admonitionblock note\">\n\u003Ctable>\n\u003Ctr>\n\u003Ctd class=\"icon\">\n\u003Cdiv class=\"title\">Note\u003C/div>\n\u003C/td>\n\u003Ctd class=\"content\">\nIn most of the Linux distros you will need privileges to run Docker commands (\u003Ccode>sudo\u003C/code>).\n\u003C/td>\n\u003C/tr>\n\u003C/table>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>",{"title":3,"lang":4,"summary":5,"slug":6,"keywords":7,"filepath":10,"dirpath":11,"created":12,"modified":12,"otherLangs":13,"author":15,"previewimage":-1,"path":16},"Multi-Domain Docker Containers","en","How to create different Docker containers with different domain names in the same host","reverse-proxy-multidomain-docker",[8,9],"Docker","Microservices","/static/posts/reverse-proxy-multidomain-docker/reverse-proxy-multidomain-docker.en.adoc","/static/posts/reverse-proxy-multidomain-docker",1480017600000,[14],"es","Carlos Martin Sanchez","/langs/en/posts/reverse-proxy-multidomain-docker","\u003Cscript type=\"application/ld+json\">{\"@context\":\"https://schema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"Webpage\",\"@id\":\"https://google.com/article\"},\"headline\":\"Multi-Domain Docker Containers\",\"alternativeHeadline\":\"How to create different Docker containers with different domain names in the same host\",\"description\":\"How to create different Docker containers with different domain names in the same host\",\"datePublished\":\"2016-11-24T20:00:00.000Z\",\"dateModified\":\"2016-11-24T20:00:00.000Z\",\"keywords\":[\"Docker\",\"Microservices\"],\"author\":{\"@type\":\"Person\",\"name\":\"Carlos Martin Sanchez\"},\"publisher\":{\"@type\":\"Person\",\"name\":\"Carlos Martin Sanchez\"}}\u003C/script>"],"uses":{"params":["slug","lang"]}}]}
