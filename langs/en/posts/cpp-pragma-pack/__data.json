{"type":"data","nodes":[null,{"type":"data","data":[{"path":1,"lang":2,"translations":3,"version":14},"/langs/en/posts/cpp-pragma-pack/","en",{"lang":2,"author":4,"siteName":5,"siteDescription":6,"categories":7,"Categories":8,"RecentPosts":9,"NoPosts":10,"SubscribeTo":11,"AboutMe":12,"AllPosts":13},"Carlos Martin Sanchez","Carlos Say's Bla Bla","What is going on in my mind and its surroundings","categories","Categories","Recent posts","There are no posts","Subscribe to the feed","About me","All posts","1.0.1"],"uses":{"params":["lang"],"url":1},"slash":"always"},{"type":"data","data":[{"html":1,"props":2,"jsonLd":19},"\u003Cdiv id=\"toc\" class=\"toc\">\n\u003Cdiv id=\"toctitle\">Table of Contents\u003C/div>\n\u003Cul class=\"sectlevel1\">\n\u003Cli>\u003Ca href=\"#_struct_example\">Struct example\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_pragma_pack_directive_in_c_struct\">#pragma pack directive in C++ struct\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_performance_test\">Performance test\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv id=\"preamble\">\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>A C++ struct is an element that groups attributes with different types so we can manipulate them all together using same reference. It is like a class with public visibility by default for functions and attributes.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>If we want to work in a lower level, closer to machine, it might be useful understand how that data structure is stored in memory and how to control that mapping.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_struct_example\">Struct example\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>It has two attributes: an integer (4 bytes) and a boolean (1 byte).\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-c++\" data-lang=\"c++\">\u003Cspan class=\"hljs-keyword\">struct\u003C/span> \u003Cspan class=\"hljs-title class_\">SampleStruct\u003C/span>\n{\n    \u003Cspan class=\"hljs-type\">bool\u003C/span> flag;\n    \u003Cspan class=\"hljs-type\">unsigned\u003C/span> \u003Cspan class=\"hljs-type\">int\u003C/span> timeout;\n};\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>If we get the instance size using \u003Ccode>sizeof\u003C/code> we should get 5 bytes size and memory would be like:\u003C/p>\n\u003C/div>\n\u003Cdiv id=\"5-bytes\" class=\"imageblock center\">\n\u003Cdiv class=\"content\">\n\u003Cimg src=\"/posts/cpp-pragma-pack/5b.png\" alt=\"5Bytes\" width=\"200\" height=\"auto\">\n\u003C/div>\n\u003Cdiv class=\"title\">Figure 1. 5 bytes struct which uses 5 bytes in memory\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Cstrong>But\u003C/strong> is not that simple, memory alignment depends on compiler and system. We will learn how to control compiler alignment policy, so we can avoid getting unexpected allocation memory sizes.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>For example, in my local host, if I get the \u003Ccode>sizeof\u003C/code> the previous structure without \u003Ccode>pragma\u003C/code> declarations, \u003Cstrong>I get a 8 bytes size\u003C/strong>. We are getting 8 Bytes instead of expected 5 Bytes because the compiler allocates more memory at the end of structure so it fits in 2n bytes blocks. Memory actually looks like:\u003C/p>\n\u003C/div>\n\u003Cdiv id=\"8-bytes\" class=\"imageblock center\">\n\u003Cdiv class=\"content\">\n\u003Cimg src=\"/posts/cpp-pragma-pack/8b.png\" alt=\"5Bytes\" width=\"200\" height=\"auto\">\n\u003C/div>\n\u003Cdiv class=\"title\">Without pragma: 5 bytes structure that actually spends 8 bytes in memory\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">It prints structure and attributes size, in this case \u003Cstrong>4 + 1 is not 5\u003C/strong>\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-c++\" data-lang=\"c++\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span>  \u003Cspan class=\"hljs-string\">&lt;iostream&gt;\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">using\u003C/span> \u003Cspan class=\"hljs-keyword\">namespace\u003C/span> std;\n\n\u003Cspan class=\"hljs-keyword\">struct\u003C/span> \u003Cspan class=\"hljs-title class_\">SampleStruct\u003C/span>\n{\n    \u003Cspan class=\"hljs-type\">bool\u003C/span> flag;\n    \u003Cspan class=\"hljs-type\">unsigned\u003C/span> \u003Cspan class=\"hljs-type\">int\u003C/span> timeout;\n};\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">static\u003C/span> \u003Cspan class=\"hljs-type\">void\u003C/span> \u003Cspan class=\"hljs-title\">print\u003C/span> \u003Cspan class=\"hljs-params\">(\u003Cspan class=\"hljs-type\">size_t\u003C/span> sz, \u003Cspan class=\"hljs-type\">size_t\u003C/span> sz_flag, \u003Cspan class=\"hljs-type\">size_t\u003C/span> sz_timeout)\u003C/span>\n\u003C/span>{\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;\\tflag: &quot;\u003C/span> &lt;&lt; sz_flag &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; Bytes&quot;\u003C/span> &lt;&lt; endl;\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;\\t+&quot;\u003C/span> &lt;&lt; endl;\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;\\ttimeout: &quot;\u003C/span> &lt;&lt; sz_timeout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; Bytes&quot;\u003C/span> &lt;&lt; endl;\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;\\t=&quot;\u003C/span> &lt;&lt; endl;\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;\\t&quot;\u003C/span> &lt;&lt; sz_timeout + sz_flag &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; Bytes&quot;\u003C/span> &lt;&lt; endl;\n    cout &lt;&lt;\u003Cspan class=\"hljs-string\">&quot;sizeof struct:  &quot;\u003C/span> &lt;&lt; sz &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; Bytes&quot;\u003C/span> &lt;&lt; endl;\n}\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span>\u003Cspan class=\"hljs-params\">(\u003Cspan class=\"hljs-type\">int\u003C/span> argc, \u003Cspan class=\"hljs-type\">char\u003C/span> *argv[])\u003C/span>\n\u003C/span>{\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;SampleStruct&quot;\u003C/span> &lt;&lt; endl;\n    \u003Cspan class=\"hljs-built_in\">print\u003C/span> (\u003Cspan class=\"hljs-built_in\">sizeof\u003C/span>(SampleStruct), \u003Cspan class=\"hljs-built_in\">sizeof\u003C/span>(SampleStruct::flag), \u003Cspan class=\"hljs-built_in\">sizeof\u003C/span>(SampleStruct::timeout));\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; -- &quot;\u003C/span> &lt;&lt; endl;\n\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">\u003Ca href=\"https://coliru.stacked-crooked.com/a/7c18ee6585e57366\">Executing code with pragma pack directive\u003C/a>: We get 8 bytes instead of 5 bytes\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">SampleStruct\nflag: 1 Bytes\n+\n\u003Cspan class=\"hljs-built_in\">timeout\u003C/span>: 4 Bytes\n=\n5 Bytes\nsizeof struct:  8 Bytes\n--\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"admonitionblock tip\">\n\u003Ctable>\n\u003Ctr>\n\u003Ctd class=\"icon\">\n\u003Cdiv class=\"title\">Tip\u003C/div>\n\u003C/td>\n\u003Ctd class=\"content\">\nIf we want to know the exact structure size we have to specify compiler how to align the memory, to do so we have \u003Ccode>#pragma pack(n)\u003C/code> directive.\n\u003C/td>\n\u003C/tr>\n\u003C/table>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_pragma_pack_directive_in_c_struct\">#pragma pack directive in C++ struct\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>It is a preprocessor directive to indicate to compiler how to align data in memory.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Example with different memory alignment configurations\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-c++\" data-lang=\"c++\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;iostream&gt;\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">using\u003C/span> \u003Cspan class=\"hljs-keyword\">namespace\u003C/span> std;\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">static\u003C/span> \u003Cspan class=\"hljs-type\">void\u003C/span> \u003Cspan class=\"hljs-title\">print\u003C/span> \u003Cspan class=\"hljs-params\">(\u003Cspan class=\"hljs-type\">size_t\u003C/span> sz, \u003Cspan class=\"hljs-type\">size_t\u003C/span> sz_flag, \u003Cspan class=\"hljs-type\">size_t\u003C/span> sz_timeout)\u003C/span>\n\u003C/span>{\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; flag: &quot;\u003C/span> &lt;&lt; sz_flag &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; Bytes&quot;\u003C/span>&lt;&lt; endl;\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; +&quot;\u003C/span> &lt;&lt; endl;\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; timeout: &quot;\u003C/span> &lt;&lt; sz_timeout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;Bytes&quot;\u003C/span> &lt;&lt; endl;\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; =&quot;\u003C/span> &lt;&lt; endl;\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; &quot;\u003C/span> &lt;&lt; sz_timeout + sz_flag &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;Bytes&quot;\u003C/span> &lt;&lt; endl;\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; sizeof struct:  &quot;\u003C/span> &lt;&lt; sz &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; Bytes&quot;\u003C/span> &lt;&lt; endl;\n}\n\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">pragma\u003C/span> pack (1)\u003C/span>\n\u003Cspan class=\"hljs-keyword\">struct\u003C/span> \u003Cspan class=\"hljs-title class_\">SampleStructPack1\u003C/span>\n{\n    \u003Cspan class=\"hljs-type\">bool\u003C/span> flag;\n    \u003Cspan class=\"hljs-type\">unsigned\u003C/span> \u003Cspan class=\"hljs-type\">int\u003C/span> timeout;\n};\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">pragma\u003C/span> pack(0)\u003C/span>\n\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">pragma\u003C/span> pack (2)\u003C/span>\n\u003Cspan class=\"hljs-keyword\">struct\u003C/span> \u003Cspan class=\"hljs-title class_\">SampleStructPack2\u003C/span>\n{\n    \u003Cspan class=\"hljs-type\">bool\u003C/span> flag;\n    \u003Cspan class=\"hljs-type\">unsigned\u003C/span> \u003Cspan class=\"hljs-type\">int\u003C/span> timeout;\n};\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">pragma\u003C/span> pack(0)\u003C/span>\n\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">pragma\u003C/span> pack (4)\u003C/span>\n\u003Cspan class=\"hljs-keyword\">struct\u003C/span> \u003Cspan class=\"hljs-title class_\">SampleStructPack4\u003C/span>\n{\n    \u003Cspan class=\"hljs-type\">bool\u003C/span> flag;\n    \u003Cspan class=\"hljs-type\">unsigned\u003C/span> \u003Cspan class=\"hljs-type\">int\u003C/span> timeout;\n};\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">pragma\u003C/span> pack(0)\u003C/span>\n\n\n\u003Cspan class=\"hljs-keyword\">struct\u003C/span> \u003Cspan class=\"hljs-title class_\">SampleStruct\u003C/span>\n{\n    \u003Cspan class=\"hljs-type\">bool\u003C/span> flag;\n    \u003Cspan class=\"hljs-type\">unsigned\u003C/span> \u003Cspan class=\"hljs-type\">int\u003C/span> timeout;\n};\n\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span>\u003Cspan class=\"hljs-params\">(\u003Cspan class=\"hljs-type\">int\u003C/span> argc, \u003Cspan class=\"hljs-type\">char\u003C/span> *argv[])\u003C/span>\n\u003C/span>{\n\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;SampleStructPack1&quot;\u003C/span> &lt;&lt; endl;\n    \u003Cspan class=\"hljs-built_in\">print\u003C/span> (\u003Cspan class=\"hljs-built_in\">sizeof\u003C/span>(SampleStructPack1), \u003Cspan class=\"hljs-built_in\">sizeof\u003C/span>(SampleStructPack1::flag), \u003Cspan class=\"hljs-built_in\">sizeof\u003C/span>(SampleStructPack1::timeout));\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; -- &quot;\u003C/span> &lt;&lt; endl;\n\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;SampleStructPack2&quot;\u003C/span> &lt;&lt; endl;\n    \u003Cspan class=\"hljs-built_in\">print\u003C/span> (\u003Cspan class=\"hljs-built_in\">sizeof\u003C/span>(SampleStructPack2), \u003Cspan class=\"hljs-built_in\">sizeof\u003C/span>(SampleStructPack2::flag), \u003Cspan class=\"hljs-built_in\">sizeof\u003C/span>(SampleStructPack2::timeout));\n\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;SampleStructPack4&quot;\u003C/span> &lt;&lt; endl;\n    \u003Cspan class=\"hljs-built_in\">print\u003C/span> (\u003Cspan class=\"hljs-built_in\">sizeof\u003C/span>(SampleStructPack4), \u003Cspan class=\"hljs-built_in\">sizeof\u003C/span>(SampleStructPack4::flag), \u003Cspan class=\"hljs-built_in\">sizeof\u003C/span>(SampleStructPack4::timeout));\n\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;SampleStruct&quot;\u003C/span> &lt;&lt; endl;\n    \u003Cspan class=\"hljs-built_in\">print\u003C/span> (\u003Cspan class=\"hljs-built_in\">sizeof\u003C/span>(SampleStruct), \u003Cspan class=\"hljs-built_in\">sizeof\u003C/span>(SampleStruct::flag), \u003Cspan class=\"hljs-built_in\">sizeof\u003C/span>(SampleStruct::timeout));\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; -- &quot;\u003C/span> &lt;&lt; endl;\n\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">\u003Ca href=\"https://coliru.stacked-crooked.com/a/7c18ee6585e57366\">Executing code with pragma pack directive\u003C/a>, we have different results depending of pragma value.\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">SampleStructPack1 \u003Cb class=\"conum\">(1)\u003C/b>\n flag: 1 Bytes\n +\n \u003Cspan class=\"hljs-built_in\">timeout\u003C/span>: 4Bytes\n =\n 5Bytes\n sizeof struct:  5 Bytes\n --\n\nSampleStructPack2 \u003Cb class=\"conum\">(2)\u003C/b>\n flag: 1 Bytes\n +\n \u003Cspan class=\"hljs-built_in\">timeout\u003C/span>: 4Bytes\n =\n 5Bytes\n sizeof struct:  6 Bytes\n\nSampleStructPack4 \u003Cb class=\"conum\">(3)\u003C/b>\n flag: 1 Bytes\n +\n \u003Cspan class=\"hljs-built_in\">timeout\u003C/span>: 4Bytes\n =\n 5Bytes\n sizeof struct:  8 Bytes\n\nSampleStruct \u003Cb class=\"conum\">(4)\u003C/b>\n flag: 1 Bytes\n +\n \u003Cspan class=\"hljs-built_in\">timeout\u003C/span>: 4Bytes\n =\n 5Bytes\n sizeof struct:  8 Bytes\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"colist arabic\">\n\u003Col>\n\u003Cli>\n\u003Cp>SampleStructPack1 \u003Ccode>#pragma pack (1)\u003C/code>: It allocates 1 byte memory block, so our sample struct fits perfectly, in this case it is true that \u003Ccode>4 + 1 = 5\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>SampleStructPack2 \u003Ccode>#pragma pack (2)\u003C/code>: Minimum block size is 2 bytes. Integer attribute fits because it just needs 2 blocks of 2 Bytes. Boolean attribute needs just 1 Byte, but minimum block size is 2 Bytes, that&#8217;s why total allocated memory is 6 bytes, \u003Ccode>4 + 2 = 6\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>SampleStructPack4 \u003Ccode>#pragma pack (4)\u003C/code>: It is like previous one, but in this case we are wasting more memory for boolean attribute, it needs 1 Byte, but we are allocating 4 Bytes.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>SampleStruct (default compiler alignment): As you can see it behaves exactly like \u003Ccode>#pragma pack (4)\u003C/code>, so we can deduct it is the default compiler alignment.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003Cdiv class=\"admonitionblock important\">\n\u003Ctable>\n\u003Ctr>\n\u003Ctd class=\"icon\">\n\u003Cdiv class=\"title\">Important\u003C/div>\n\u003C/td>\n\u003Ctd class=\"content\">\nWhy don&#8217;t we always use smallest memory alignment (\u003Ccode>#pragma pack (1)\u003C/code>) so we can save more memory?\n\u003C/td>\n\u003C/tr>\n\u003C/table>\n\u003C/div>\n\u003Cdiv class=\"admonitionblock warning\">\n\u003Ctable>\n\u003Ctr>\n\u003Ctd class=\"icon\">\n\u003Cdiv class=\"title\">Warning\u003C/div>\n\u003C/td>\n\u003Ctd class=\"content\">\nBecause of performance loss.\n\u003C/td>\n\u003C/tr>\n\u003C/table>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_performance_test\">Performance test\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>The test will allocate same number of elements in arrays for each structure type (1, 2, 4).\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Test results: \u003Ca href=\"https://coliru.stacked-crooked.com/a/954ad542659c7591\">execute performance test\u003C/a>\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">SampleStructPack1: 500000000000000000 bytes allocated \u003Cspan class=\"hljs-keyword\">in\u003C/span> 94311 nanoseconds\nSampleStructPack2: 600000000000000000 bytes allocated \u003Cspan class=\"hljs-keyword\">in\u003C/span> 1777 nanoseconds\nSampleStructPack4: 800000000000000000 bytes allocated \u003Cspan class=\"hljs-keyword\">in\u003C/span> 1519 nanoseconds\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>As you can see, the smallest memory alignment spends more time allocating and releasing memory.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Performance test source code:\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-c++\" data-lang=\"c++\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;iostream&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;chrono&gt;\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">pragma\u003C/span> pack (1)\u003C/span>\n\u003Cspan class=\"hljs-keyword\">struct\u003C/span> \u003Cspan class=\"hljs-title class_\">SampleStructPack1\u003C/span>\n{\n    \u003Cspan class=\"hljs-type\">bool\u003C/span> flag;\n    \u003Cspan class=\"hljs-type\">unsigned\u003C/span> \u003Cspan class=\"hljs-type\">int\u003C/span> timeout;\n};\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">pragma\u003C/span> pack(0)\u003C/span>\n\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">pragma\u003C/span> pack (2)\u003C/span>\n\u003Cspan class=\"hljs-keyword\">struct\u003C/span> \u003Cspan class=\"hljs-title class_\">SampleStructPack2\u003C/span>\n{\n    \u003Cspan class=\"hljs-type\">bool\u003C/span> flag;\n    \u003Cspan class=\"hljs-type\">unsigned\u003C/span> \u003Cspan class=\"hljs-type\">int\u003C/span> timeout;\n};\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">pragma\u003C/span> pack(0)\u003C/span>\n\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">pragma\u003C/span> pack (4)\u003C/span>\n\u003Cspan class=\"hljs-keyword\">struct\u003C/span> \u003Cspan class=\"hljs-title class_\">SampleStructPack4\u003C/span>\n{\n    \u003Cspan class=\"hljs-type\">bool\u003C/span> flag;\n    \u003Cspan class=\"hljs-type\">unsigned\u003C/span> \u003Cspan class=\"hljs-type\">int\u003C/span> timeout;\n};\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">pragma\u003C/span> pack(0)\u003C/span>\n\n\n\u003Cspan class=\"hljs-keyword\">struct\u003C/span> \u003Cspan class=\"hljs-title class_\">SampleStruct\u003C/span>\n{\n    \u003Cspan class=\"hljs-type\">bool\u003C/span> flag;\n    \u003Cspan class=\"hljs-type\">unsigned\u003C/span> \u003Cspan class=\"hljs-type\">int\u003C/span> timeout;\n};\n\n\u003Cspan class=\"hljs-type\">static\u003C/span> \u003Cspan class=\"hljs-type\">const\u003C/span> \u003Cspan class=\"hljs-type\">long\u003C/span> MAX_ELEMENTS = \u003Cspan class=\"hljs-number\">100000000000000000\u003C/span>;\n\u003Cspan class=\"hljs-keyword\">using\u003C/span> \u003Cspan class=\"hljs-keyword\">namespace\u003C/span> std;\n\u003Cspan class=\"hljs-keyword\">using\u003C/span> \u003Cspan class=\"hljs-keyword\">namespace\u003C/span> std::chrono;\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">void\u003C/span> \u003Cspan class=\"hljs-title\">allocate1\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    SampleStructPack1 elements [MAX_ELEMENTS];\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;SampleStructPack1: &quot;\u003C/span> &lt;&lt; \u003Cspan class=\"hljs-built_in\">sizeof\u003C/span>(elements) &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; bytes allocated&quot;\u003C/span>;\n}\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">void\u003C/span> \u003Cspan class=\"hljs-title\">allocate2\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    SampleStructPack2 elements [MAX_ELEMENTS];\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;SampleStructPack2: &quot;\u003C/span> &lt;&lt; \u003Cspan class=\"hljs-built_in\">sizeof\u003C/span>(elements) &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; bytes allocated&quot;\u003C/span>;\n}\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">void\u003C/span> \u003Cspan class=\"hljs-title\">allocate4\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    SampleStructPack4 elements [MAX_ELEMENTS];\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;SampleStructPack4: &quot;\u003C/span> &lt;&lt; \u003Cspan class=\"hljs-built_in\">sizeof\u003C/span>(elements) &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; bytes allocated&quot;\u003C/span>;\n}\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">void\u003C/span> \u003Cspan class=\"hljs-title\">chrono1\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    \u003Cspan class=\"hljs-keyword\">auto\u003C/span> begin = high_resolution_clock::\u003Cspan class=\"hljs-built_in\">now\u003C/span>() ;\n    \u003Cspan class=\"hljs-built_in\">allocate1\u003C/span>();\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; in &quot;\u003C/span> &lt;&lt; \u003Cspan class=\"hljs-built_in\">duration_cast\u003C/span>&lt;nanoseconds&gt;(high_resolution_clock::\u003Cspan class=\"hljs-built_in\">now\u003C/span>() - begin).\u003Cspan class=\"hljs-built_in\">count\u003C/span>() &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; nanoseconds&quot;\u003C/span> &lt;&lt; endl;\n}\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">void\u003C/span> \u003Cspan class=\"hljs-title\">chrono2\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    \u003Cspan class=\"hljs-keyword\">auto\u003C/span> begin = high_resolution_clock::\u003Cspan class=\"hljs-built_in\">now\u003C/span>() ;\n    \u003Cspan class=\"hljs-built_in\">allocate2\u003C/span>();\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; in &quot;\u003C/span> &lt;&lt; \u003Cspan class=\"hljs-built_in\">duration_cast\u003C/span>&lt;nanoseconds&gt;(high_resolution_clock::\u003Cspan class=\"hljs-built_in\">now\u003C/span>() - begin).\u003Cspan class=\"hljs-built_in\">count\u003C/span>() &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; nanoseconds&quot;\u003C/span> &lt;&lt; endl;\n}\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">void\u003C/span> \u003Cspan class=\"hljs-title\">chrono4\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    \u003Cspan class=\"hljs-keyword\">auto\u003C/span> begin = high_resolution_clock::\u003Cspan class=\"hljs-built_in\">now\u003C/span>() ;\n    \u003Cspan class=\"hljs-built_in\">allocate4\u003C/span>();\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; in &quot;\u003C/span> &lt;&lt; \u003Cspan class=\"hljs-built_in\">duration_cast\u003C/span>&lt;nanoseconds&gt;(high_resolution_clock::\u003Cspan class=\"hljs-built_in\">now\u003C/span>() - begin).\u003Cspan class=\"hljs-built_in\">count\u003C/span>() &lt;&lt; \u003Cspan class=\"hljs-string\">&quot; nanoseconds&quot;\u003C/span> &lt;&lt; endl;\n}\n\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span>\u003Cspan class=\"hljs-params\">(\u003Cspan class=\"hljs-type\">int\u003C/span> argc, \u003Cspan class=\"hljs-type\">char\u003C/span> *argv[])\u003C/span>\n\u003C/span>{\n    \u003Cspan class=\"hljs-built_in\">chrono1\u003C/span>();\n    \u003Cspan class=\"hljs-built_in\">chrono2\u003C/span>();\n    \u003Cspan class=\"hljs-built_in\">chrono4\u003C/span>();\n\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>",{"title":3,"lang":4,"summary":5,"slug":6,"keywords":7,"filepath":12,"dirpath":13,"created":14,"modified":14,"otherLangs":15,"author":17,"previewimage":-1,"path":18},"C++ Struct memory alignment","en","Understanding pragma pack preprocessor directive and how it affects to memory alignment","cpp-pragma-pack",[8,9,10,11],"C++","Performance","Compilers","Memory","/static/posts/cpp-pragma-pack/cpp-pragma-pack.en.adoc","/static/posts/cpp-pragma-pack",1353927600000,[16],"es","Carlos Martin Sanchez","/langs/en/posts/cpp-pragma-pack","\u003Cscript type=\"application/ld+json\">{\"@context\":\"https://schema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"Webpage\",\"@id\":\"https://google.com/article\"},\"headline\":\"C++ Struct memory alignment\",\"alternativeHeadline\":\"Understanding pragma pack preprocessor directive and how it affects to memory alignment\",\"description\":\"Understanding pragma pack preprocessor directive and how it affects to memory alignment\",\"datePublished\":\"2012-11-26T11:00:00.000Z\",\"dateModified\":\"2012-11-26T11:00:00.000Z\",\"keywords\":[\"C++\",\"Performance\",\"Compilers\",\"Memory\"],\"author\":{\"@type\":\"Person\",\"name\":\"Carlos Martin Sanchez\"},\"publisher\":{\"@type\":\"Person\",\"name\":\"Carlos Martin Sanchez\"}}\u003C/script>"],"uses":{"params":["slug","lang"]}}]}
