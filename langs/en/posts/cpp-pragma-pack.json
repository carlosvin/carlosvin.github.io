{"html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_struct_example\">Struct example</a></li>\n<li><a href=\"#_pragma_pack_directive_in_c_struct\">#pragma pack directive in C++ struct</a></li>\n<li><a href=\"#_performance_test\">Performance test</a></li>\n</ul>\n</div>\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>A C++ struct is an element that groups attributes with different types so we can manipulate them all together using same reference. It is like a class with public visibility by default for functions and attributes.</p>\n</div>\n<div class=\"paragraph\">\n<p>If we want to work in a lower level, closer to machine, it might be useful understand how that data structure is stored in memory and how to control that mapping.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_struct_example\">Struct example</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>It has two attributes: an integer (4 bytes) and a boolean (1 byte).</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-c++\" data-lang=\"c++\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">SampleStruct</span>\n{\n    <span class=\"hljs-type\">bool</span> flag;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> timeout;\n};</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If we get the instance size using <code>sizeof</code> we should get 5 bytes size and memory would be like:</p>\n</div>\n<div id=\"5-bytes\" class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/posts/cpp-pragma-pack/5b.png\" alt=\"5Bytes\" width=\"200\" height=\"auto\">\n</div>\n<div class=\"title\">Figure 1. 5 bytes struct which uses 5 bytes in memory</div>\n</div>\n<div class=\"paragraph\">\n<p><strong>But</strong> is not that simple, memory alignment depends on compiler and system. We will learn how to control compiler alignment policy, so we can avoid getting unexpected allocation memory sizes.</p>\n</div>\n<div class=\"paragraph\">\n<p>For example, in my local host, if I get the <code>sizeof</code> the previous structure without <code>pragma</code> declarations, <strong>I get a 8 bytes size</strong>. We are getting 8 Bytes instead of expected 5 Bytes because the compiler allocates more memory at the end of structure so it fits in 2n bytes blocks. Memory actually looks like:</p>\n</div>\n<div id=\"8-bytes\" class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/posts/cpp-pragma-pack/8b.png\" alt=\"5Bytes\" width=\"200\" height=\"auto\">\n</div>\n<div class=\"title\">Without pragma: 5 bytes structure that actually spends 8 bytes in memory</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">It prints structure and attributes size, in this case <strong>4 + 1 is not 5</strong></div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-c++\" data-lang=\"c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span>  <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">SampleStruct</span>\n{\n    <span class=\"hljs-type\">bool</span> flag;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> timeout;\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">print</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">size_t</span> sz, <span class=\"hljs-type\">size_t</span> sz_flag, <span class=\"hljs-type\">size_t</span> sz_timeout)</span>\n</span>{\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;\\tflag: &quot;</span> &lt;&lt; sz_flag &lt;&lt; <span class=\"hljs-string\">&quot; Bytes&quot;</span> &lt;&lt; endl;\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;\\t+&quot;</span> &lt;&lt; endl;\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;\\ttimeout: &quot;</span> &lt;&lt; sz_timeout &lt;&lt; <span class=\"hljs-string\">&quot; Bytes&quot;</span> &lt;&lt; endl;\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;\\t=&quot;</span> &lt;&lt; endl;\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span> &lt;&lt; sz_timeout + sz_flag &lt;&lt; <span class=\"hljs-string\">&quot; Bytes&quot;</span> &lt;&lt; endl;\n    cout &lt;&lt;<span class=\"hljs-string\">&quot;sizeof struct:  &quot;</span> &lt;&lt; sz &lt;&lt; <span class=\"hljs-string\">&quot; Bytes&quot;</span> &lt;&lt; endl;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span>\n</span>{\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;SampleStruct&quot;</span> &lt;&lt; endl;\n    <span class=\"hljs-built_in\">print</span> (<span class=\"hljs-built_in\">sizeof</span>(SampleStruct), <span class=\"hljs-built_in\">sizeof</span>(SampleStruct::flag), <span class=\"hljs-built_in\">sizeof</span>(SampleStruct::timeout));\n    cout &lt;&lt; <span class=\"hljs-string\">&quot; -- &quot;</span> &lt;&lt; endl;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/7c18ee6585e57366\">Executing code with pragma pack directive</a>: We get 8 bytes instead of 5 bytes</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">SampleStruct\nflag: 1 Bytes\n+\n<span class=\"hljs-built_in\">timeout</span>: 4 Bytes\n=\n5 Bytes\nsizeof struct:  8 Bytes\n--</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Tip</div>\n</td>\n<td class=\"content\">\nIf we want to know the exact structure size we have to specify compiler how to align the memory, to do so we have <code>#pragma pack(n)</code> directive.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_pragma_pack_directive_in_c_struct\">#pragma pack directive in C++ struct</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>It is a preprocessor directive to indicate to compiler how to align data in memory.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Example with different memory alignment configurations</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-c++\" data-lang=\"c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">print</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">size_t</span> sz, <span class=\"hljs-type\">size_t</span> sz_flag, <span class=\"hljs-type\">size_t</span> sz_timeout)</span>\n</span>{\n    cout &lt;&lt; <span class=\"hljs-string\">&quot; flag: &quot;</span> &lt;&lt; sz_flag &lt;&lt; <span class=\"hljs-string\">&quot; Bytes&quot;</span>&lt;&lt; endl;\n    cout &lt;&lt; <span class=\"hljs-string\">&quot; +&quot;</span> &lt;&lt; endl;\n    cout &lt;&lt; <span class=\"hljs-string\">&quot; timeout: &quot;</span> &lt;&lt; sz_timeout &lt;&lt; <span class=\"hljs-string\">&quot;Bytes&quot;</span> &lt;&lt; endl;\n    cout &lt;&lt; <span class=\"hljs-string\">&quot; =&quot;</span> &lt;&lt; endl;\n    cout &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; sz_timeout + sz_flag &lt;&lt; <span class=\"hljs-string\">&quot;Bytes&quot;</span> &lt;&lt; endl;\n    cout &lt;&lt; <span class=\"hljs-string\">&quot; sizeof struct:  &quot;</span> &lt;&lt; sz &lt;&lt; <span class=\"hljs-string\">&quot; Bytes&quot;</span> &lt;&lt; endl;\n}\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> pack (1)</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">SampleStructPack1</span>\n{\n    <span class=\"hljs-type\">bool</span> flag;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> timeout;\n};\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> pack(0)</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> pack (2)</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">SampleStructPack2</span>\n{\n    <span class=\"hljs-type\">bool</span> flag;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> timeout;\n};\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> pack(0)</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> pack (4)</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">SampleStructPack4</span>\n{\n    <span class=\"hljs-type\">bool</span> flag;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> timeout;\n};\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> pack(0)</span>\n\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">SampleStruct</span>\n{\n    <span class=\"hljs-type\">bool</span> flag;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> timeout;\n};\n\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span>\n</span>{\n\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;SampleStructPack1&quot;</span> &lt;&lt; endl;\n    <span class=\"hljs-built_in\">print</span> (<span class=\"hljs-built_in\">sizeof</span>(SampleStructPack1), <span class=\"hljs-built_in\">sizeof</span>(SampleStructPack1::flag), <span class=\"hljs-built_in\">sizeof</span>(SampleStructPack1::timeout));\n    cout &lt;&lt; <span class=\"hljs-string\">&quot; -- &quot;</span> &lt;&lt; endl;\n\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;SampleStructPack2&quot;</span> &lt;&lt; endl;\n    <span class=\"hljs-built_in\">print</span> (<span class=\"hljs-built_in\">sizeof</span>(SampleStructPack2), <span class=\"hljs-built_in\">sizeof</span>(SampleStructPack2::flag), <span class=\"hljs-built_in\">sizeof</span>(SampleStructPack2::timeout));\n\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;SampleStructPack4&quot;</span> &lt;&lt; endl;\n    <span class=\"hljs-built_in\">print</span> (<span class=\"hljs-built_in\">sizeof</span>(SampleStructPack4), <span class=\"hljs-built_in\">sizeof</span>(SampleStructPack4::flag), <span class=\"hljs-built_in\">sizeof</span>(SampleStructPack4::timeout));\n\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;SampleStruct&quot;</span> &lt;&lt; endl;\n    <span class=\"hljs-built_in\">print</span> (<span class=\"hljs-built_in\">sizeof</span>(SampleStruct), <span class=\"hljs-built_in\">sizeof</span>(SampleStruct::flag), <span class=\"hljs-built_in\">sizeof</span>(SampleStruct::timeout));\n    cout &lt;&lt; <span class=\"hljs-string\">&quot; -- &quot;</span> &lt;&lt; endl;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/7c18ee6585e57366\">Executing code with pragma pack directive</a>, we have different results depending of pragma value.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">SampleStructPack1 <b class=\"conum\">(1)</b>\n flag: 1 Bytes\n +\n <span class=\"hljs-built_in\">timeout</span>: 4Bytes\n =\n 5Bytes\n sizeof struct:  5 Bytes\n --\n\nSampleStructPack2 <b class=\"conum\">(2)</b>\n flag: 1 Bytes\n +\n <span class=\"hljs-built_in\">timeout</span>: 4Bytes\n =\n 5Bytes\n sizeof struct:  6 Bytes\n\nSampleStructPack4 <b class=\"conum\">(3)</b>\n flag: 1 Bytes\n +\n <span class=\"hljs-built_in\">timeout</span>: 4Bytes\n =\n 5Bytes\n sizeof struct:  8 Bytes\n\nSampleStruct <b class=\"conum\">(4)</b>\n flag: 1 Bytes\n +\n <span class=\"hljs-built_in\">timeout</span>: 4Bytes\n =\n 5Bytes\n sizeof struct:  8 Bytes</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>SampleStructPack1 <code>#pragma pack (1)</code>: It allocates 1 byte memory block, so our sample struct fits perfectly, in this case it is true that <code>4 + 1 = 5</code>.</p>\n</li>\n<li>\n<p>SampleStructPack2 <code>#pragma pack (2)</code>: Minimum block size is 2 bytes. Integer attribute fits because it just needs 2 blocks of 2 Bytes. Boolean attribute needs just 1 Byte, but minimum block size is 2 Bytes, that&#8217;s why total allocated memory is 6 bytes, <code>4 + 2 = 6</code>.</p>\n</li>\n<li>\n<p>SampleStructPack4 <code>#pragma pack (4)</code>: It is like previous one, but in this case we are wasting more memory for boolean attribute, it needs 1 Byte, but we are allocating 4 Bytes.</p>\n</li>\n<li>\n<p>SampleStruct (default compiler alignment): As you can see it behaves exactly like <code>#pragma pack (4)</code>, so we can deduct it is the default compiler alignment.</p>\n</li>\n</ol>\n</div>\n<div class=\"admonitionblock important\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Important</div>\n</td>\n<td class=\"content\">\nWhy don&#8217;t we always use smallest memory alignment (<code>#pragma pack (1)</code>) so we can save more memory?\n</td>\n</tr>\n</table>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Warning</div>\n</td>\n<td class=\"content\">\nBecause of performance loss.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_performance_test\">Performance test</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The test will allocate same number of elements in arrays for each structure type (1, 2, 4).</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Test results: <a href=\"https://coliru.stacked-crooked.com/a/954ad542659c7591\">execute performance test</a></div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">SampleStructPack1: 500000000000000000 bytes allocated <span class=\"hljs-keyword\">in</span> 94311 nanoseconds\nSampleStructPack2: 600000000000000000 bytes allocated <span class=\"hljs-keyword\">in</span> 1777 nanoseconds\nSampleStructPack4: 800000000000000000 bytes allocated <span class=\"hljs-keyword\">in</span> 1519 nanoseconds</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>As you can see, the smallest memory alignment spends more time allocating and releasing memory.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Performance test source code:</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-c++\" data-lang=\"c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;chrono&gt;</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> pack (1)</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">SampleStructPack1</span>\n{\n    <span class=\"hljs-type\">bool</span> flag;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> timeout;\n};\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> pack(0)</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> pack (2)</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">SampleStructPack2</span>\n{\n    <span class=\"hljs-type\">bool</span> flag;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> timeout;\n};\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> pack(0)</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> pack (4)</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">SampleStructPack4</span>\n{\n    <span class=\"hljs-type\">bool</span> flag;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> timeout;\n};\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> pack(0)</span>\n\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">SampleStruct</span>\n{\n    <span class=\"hljs-type\">bool</span> flag;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> timeout;\n};\n\n<span class=\"hljs-type\">static</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">long</span> MAX_ELEMENTS = <span class=\"hljs-number\">100000000000000000</span>;\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std::chrono;\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">allocate1</span><span class=\"hljs-params\">()</span>\n</span>{\n    SampleStructPack1 elements [MAX_ELEMENTS];\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;SampleStructPack1: &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">sizeof</span>(elements) &lt;&lt; <span class=\"hljs-string\">&quot; bytes allocated&quot;</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">allocate2</span><span class=\"hljs-params\">()</span>\n</span>{\n    SampleStructPack2 elements [MAX_ELEMENTS];\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;SampleStructPack2: &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">sizeof</span>(elements) &lt;&lt; <span class=\"hljs-string\">&quot; bytes allocated&quot;</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">allocate4</span><span class=\"hljs-params\">()</span>\n</span>{\n    SampleStructPack4 elements [MAX_ELEMENTS];\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;SampleStructPack4: &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">sizeof</span>(elements) &lt;&lt; <span class=\"hljs-string\">&quot; bytes allocated&quot;</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">chrono1</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">auto</span> begin = high_resolution_clock::<span class=\"hljs-built_in\">now</span>() ;\n    <span class=\"hljs-built_in\">allocate1</span>();\n    cout &lt;&lt; <span class=\"hljs-string\">&quot; in &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">duration_cast</span>&lt;nanoseconds&gt;(high_resolution_clock::<span class=\"hljs-built_in\">now</span>() - begin).<span class=\"hljs-built_in\">count</span>() &lt;&lt; <span class=\"hljs-string\">&quot; nanoseconds&quot;</span> &lt;&lt; endl;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">chrono2</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">auto</span> begin = high_resolution_clock::<span class=\"hljs-built_in\">now</span>() ;\n    <span class=\"hljs-built_in\">allocate2</span>();\n    cout &lt;&lt; <span class=\"hljs-string\">&quot; in &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">duration_cast</span>&lt;nanoseconds&gt;(high_resolution_clock::<span class=\"hljs-built_in\">now</span>() - begin).<span class=\"hljs-built_in\">count</span>() &lt;&lt; <span class=\"hljs-string\">&quot; nanoseconds&quot;</span> &lt;&lt; endl;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">chrono4</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">auto</span> begin = high_resolution_clock::<span class=\"hljs-built_in\">now</span>() ;\n    <span class=\"hljs-built_in\">allocate4</span>();\n    cout &lt;&lt; <span class=\"hljs-string\">&quot; in &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">duration_cast</span>&lt;nanoseconds&gt;(high_resolution_clock::<span class=\"hljs-built_in\">now</span>() - begin).<span class=\"hljs-built_in\">count</span>() &lt;&lt; <span class=\"hljs-string\">&quot; nanoseconds&quot;</span> &lt;&lt; endl;\n}\n\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span>\n</span>{\n    <span class=\"hljs-built_in\">chrono1</span>();\n    <span class=\"hljs-built_in\">chrono2</span>();\n    <span class=\"hljs-built_in\">chrono4</span>();\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n</div>\n</div>","props":{"title":"C++ Struct memory alignment","created":1353927600000,"modified":1353927600000,"filepath":"/Users/carlos.martin-sanchez/pers/carlosvin.github.io/static/posts/cpp-pragma-pack/cpp-pragma-pack.en.adoc","dirpath":"/Users/carlos.martin-sanchez/pers/carlosvin.github.io/static/posts/cpp-pragma-pack","keywords":["C++","Performance","Compilers","Memory"],"lang":"en","otherLangs":["es"],"slug":"cpp-pragma-pack","summary":"Understanding pragma pack preprocessor directive and how it affects to memory alignment","author":"Carlos","path":"/langs/en/posts/cpp-pragma-pack"}}