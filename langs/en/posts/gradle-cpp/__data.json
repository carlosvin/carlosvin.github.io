{"type":"data","nodes":[null,{"type":"data","data":[{"path":1,"lang":2,"translations":3,"version":14},"/langs/en/posts/gradle-cpp/","en",{"lang":2,"author":4,"siteName":5,"siteDescription":6,"categories":7,"Categories":8,"RecentPosts":9,"NoPosts":10,"SubscribeTo":11,"AboutMe":12,"AllPosts":13},"Carlos Martin Sanchez","Carlos Say's Bla Bla","What is going on in my mind and its surroundings","categories","Categories","Recent posts","There are no posts","Subscribe to the feed","About me","All posts","1.0.1"],"uses":{"params":["lang"],"url":1},"slash":"always"},{"type":"data","data":[{"html":1,"props":2,"jsonLd":20},"\u003Cdiv id=\"toc\" class=\"toc\">\n\u003Cdiv id=\"toctitle\">Table of Contents\u003C/div>\n\u003Cul class=\"sectlevel1\">\n\u003Cli>\u003Ca href=\"#_introduction\">Introduction\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_case_study\">Case study\u003C/a>\n\u003Cul class=\"sectlevel2\">\n\u003Cli>\u003Ca href=\"#_project_structure\">Project Structure\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_c_application\">C++ Application\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_building_with_gradle\">Building with Gradle\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_try_it_yourself\">Try it yourself\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#_conclusions\">Conclusions\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_introduction\">Introduction\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>I am more and more worried about building, dependency management and distribution of my projects. I&#8217;d like to find a tool that unifies those processes with independence of the language. I know several tools which almost fit to what I&#8217;m looking for, like \u003Ca href=\"https://www.scons.org\" target=\"_blank\" rel=\"noopener\">SCons\u003C/a>, \u003Ca href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction\" target=\"_blank\" rel=\"noopener\">Autotools\u003C/a>, \u003Ca href=\"https://ant.apache.org\" target=\"_blank\" rel=\"noopener\">Ant\u003C/a>, \u003Ca href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven\u003C/a> and lately \u003Ca href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>I&#8217;ve made several projects with \u003Ca href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a>, but always they were \u003Ca href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java\u003C/a> and \u003Ca href=\"https://developer.android.com/studio/build\" target=\"_blank\" rel=\"noopener\">Android\u003C/a> projects. \u003Cspan class=\"line-through\">In \u003Ca href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java\u003C/a> projects I&#8217;ve found a \u003Ca href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven\u003C/a> replacement, because it is faster, easier and less verbose\u003C/span>. \u003Cstrong>Update 2020\u003C/strong>: With the experience, now if I have to pick a build system for a \u003Ca href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java\u003C/a> project I&#8217;d pick \u003Ca href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven\u003C/a>, especially for a professional project, but it is not the topic of this post.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>About \u003Ca href=\"https://developer.android.com/studio/build\" target=\"_blank\" rel=\"noopener\">Android\u003C/a> projects I suffered the early adoption of \u003Ca href=\"https://developer.android.com/sdk/installing/studio-build.html\" target=\"_blank\" rel=\"noopener\">Android Studio + Gradle\u003C/a>, although currently I think the are more mature and they work fine.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>First of all, I have to say: building C/C++/Objective-C projects with \u003Ca href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a> is in \u003Ca href=\"https://docs.gradle.org/current/userguide/feature_lifecycle.html#sec:incubating_state\" target=\"_blank\" rel=\"noopener\">incubation\u003C/a> phase, although now we can perform advanced tasks like:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>Generation several artifacts within same project (libraries and executables).\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Dependency management between artifacts (no versions).\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Different \"flavors\" of the same software, e.g: we can generate a \"Community\" release and other one with more enabled features called \"Enterprise\".\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>It allows multi-platform binary generation.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>As I said, this plugin is still having limitations although they are working on it: \u003Ca href=\"https://blog.gradle.org/state-and-future-of-the-gradle-software-model#a-way-forward\">Gradle C++ roadmap\u003C/a>. \u003Cspan class=\"line-through\">If they achieve it I&#8217;ll leave \u003Ca href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction\" target=\"_blank\" rel=\"noopener\">Autotools\u003C/a> (I&#8217;m going to regret saying that)\u003C/span>. \u003Cstrong>Update 2020\u003C/strong>: Actually few years later I am not using \u003Ca href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html#Autotools-Introduction\" target=\"_blank\" rel=\"noopener\">Autotools\u003C/a>, neither \u003Ca href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a>, but I am using \u003Ca href=\"https://mesonbuild.com/\">Meson\u003C/a> and considering \u003Ca href=\"https://docs.bazel.build/versions/master/tutorial/cpp.html\">Bazel\u003C/a>.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_case_study\">Case study\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>I&#8217;ve extracted all the case study from \u003Ca href=\"https://docs.gradle.org/current/userguide/native_software.html\">Gradle user guide for native software\u003C/a>. I&#8217;ve adapted the project to be multi-platform with 2 versions \"Community\" and \"Enterprise\".\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>The application consists of an executable and a dynamic library. The executable will use the library.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a> also is able to generate a distributable version and a debug version.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>You can fork the code on \u003Ca href=\"https://github.com/carlosvin/cpp_gradle\" class=\"bare\">https://github.com/carlosvin/cpp_gradle\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_project_structure\">Project Structure\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>We can create whichever directory structure, but it is easier using the proposed by \u003Ca href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a>, if not we&#8217;ll have to specify where the code is located.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>This is the project structure:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">gradle-cpp\u003C/dt>\n\u003Cdd>\n\u003Cp>Root directory.\u003C/p>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">build.gradle\u003C/dt>\n\u003Cdd>\n\u003Cp>File where is configured \u003Ca href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a> project, it is the equivalent to: build.xml for \u003Ca href=\"https://ant.apache.org\" target=\"_blank\" rel=\"noopener\">Ant\u003C/a>, \u003Ca href=\"\">Makefile\u003C/a> for C/C++ or pom.xml for \u003Ca href=\"https://maven.apache.org\" target=\"_blank\" rel=\"noopener\">Maven\u003C/a>.\u003C/p>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">src\u003C/dt>\n\u003Cdd>\n\u003Cp>Folder where the source code is located.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">hello\u003C/dt>\n\u003Cdd>\n\u003Cp>This folder contains the module hello. This module will generate hello library.\u003C/p>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">cpp\u003C/dt>\n\u003Cdd>\n\u003Cp>This folder contains C++ source files.\u003C/p>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">Hello.cpp\u003C/dt>\n\u003Cdd>\n\u003Cp>Â File with the implementation of Hello class.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">headers\u003C/dt>\n\u003Cdd>\n\u003Cp>Folder with header files.\u003C/p>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">Hello.h\u003C/dt>\n\u003Cdd>\n\u003Cp>Class Hello declaration.\u003C/p>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">Msg.h\u003C/dt>\n\u003Cdd>\n\u003Cp>File with constants declarations.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">main\u003C/dt>\n\u003Cdd>\n\u003Cp>This folder contains the module which produces the executable that uses hello library.\u003C/p>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">cpp\u003C/dt>\n\u003Cdd>\n\u003Cp>This folder contains C++ source files.\u003C/p>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">main.cpp\u003C/dt>\n\u003Cdd>\n\u003Cp>Source code of main function.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">build\u003C/dt>\n\u003Cdd>\n\u003Cp>Folder created automatically by \u003Ca href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a> where it leaves all execution results like unit tests reports, compiled files, package distributions, etc.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_c_application\">C++ Application\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>It consists of an executable that uses the functionality implemented at \u003Ccode>hello\u003C/code> library.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">main.cpp\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&quot;Hello.h&quot;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span>\u003Cspan class=\"hljs-params\">(\u003Cspan class=\"hljs-type\">int\u003C/span> argc, \u003Cspan class=\"hljs-type\">char\u003C/span> ** argv)\u003C/span>\n\u003C/span>{\n    \u003Cspan class=\"hljs-function\">Hello \u003Cspan class=\"hljs-title\">hello\u003C/span> \u003Cspan class=\"hljs-params\">(\u003Cspan class=\"hljs-string\">&quot;Pepito&quot;\u003C/span>)\u003C/span>\u003C/span>;\n    hello.\u003Cspan class=\"hljs-built_in\">sayHello\u003C/span>(\u003Cspan class=\"hljs-number\">10\u003C/span>);\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ccode>hello\u003C/code> library allows greet \u003Ccode>n\u003C/code> \u003Csup class=\"footnote\">[\u003Ca id=\"_footnoteref_1\" class=\"footnote\" href=\"#_footnotedef_1\" title=\"View footnote.\">1\u003C/a>]\u003C/sup> times to someone who is passed as argument to constructor class.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Hello.h\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-keyword\">class\u003C/span> \u003Cspan class=\"hljs-title class_\">Hello\u003C/span>\n{\n    \u003Cspan class=\"hljs-keyword\">private\u003C/span>:\n        \u003Cspan class=\"hljs-type\">const\u003C/span> \u003Cspan class=\"hljs-type\">char\u003C/span> * who;\n    \u003Cspan class=\"hljs-keyword\">public\u003C/span>:\n        \u003Cspan class=\"hljs-built_in\">Hello\u003C/span>(\u003Cspan class=\"hljs-type\">const\u003C/span> \u003Cspan class=\"hljs-type\">char\u003C/span> * who);\n        \u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">void\u003C/span> \u003Cspan class=\"hljs-title\">sayHello\u003C/span>\u003Cspan class=\"hljs-params\">(\u003Cspan class=\"hljs-type\">unsigned\u003C/span> n = \u003Cspan class=\"hljs-number\">1\u003C/span>)\u003C/span>\u003C/span>;\n};\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_building_with_gradle\">Building with \u003Ca href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a>\u003C/h3>\n\u003Cdiv class=\"sect3\">\n\u003Ch4 id=\"_base_case\">Base case\u003C/h4>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>The only we need to build the application with \u003Ca href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a> is: having \u003Ca href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a>\u003Csup class=\"footnote\">[\u003Ca id=\"_footnoteref_2\" class=\"footnote\" href=\"#_footnotedef_2\" title=\"View footnote.\">2\u003C/a>]\u003C/sup> and the file \u003Ccode>build.gradle\u003C/code>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">build.gradle\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-groovy\" data-lang=\"groovy\">apply \u003Cspan class=\"hljs-attr\">plugin:\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;cpp&#x27;\u003C/span>\n\nmodel {\n  components {\n    hello(NativeLibrarySpec) {}\n    main(NativeExecutableSpec) {\n      binaries.all {\n        lib \u003Cspan class=\"hljs-attr\">library:\u003C/span> \u003Cspan class=\"hljs-string\">&quot;hello&quot;\u003C/span>\n      }\n    }\n  }\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>With this simple file, we&#8217;ll be able to compile and install the application in Debug mode for the platform where we are executing \u003Ca href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a> (in my case X64).\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>If we execute \u003Ccode>gradle task\u003C/code> from the root of the project, we&#8217;ll get all the tasks we can do with \u003Ca href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>In our case, we just want our compiled application ready to run, so we have to execute: \u003Ccode>gradle installMainExecutable\u003C/code>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Once execution has finished, we can run the program calling to `build/install/mainExecutable/main`\u003Csup class=\"footnote\">[\u003Ca id=\"_footnoteref_3\" class=\"footnote\" href=\"#_footnotedef_3\" title=\"View footnote.\">3\u003C/a>]\u003C/sup>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Output\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">$ build/install/mainExecutable/main\n1.  Hello Mr. Pepito (Community)\n2.  Hello Mr. Pepito (Community)\n3.  Hello Mr. Pepito (Community)\n4.  Hello Mr. Pepito (Community)\n5.  Hello Mr. Pepito (Community)\n6.  Hello Mr. Pepito (Community)\n7.  Hello Mr. Pepito (Community)\n8.  Hello Mr. Pepito (Community)\n9.  Hello Mr. Pepito (Community)\n10. Hello Mr. Pepito (Community)\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect3\">\n\u003Ch4 id=\"_different_flavors\">Different \"Flavors\"\u003C/h4>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>With a few lines more we can generate different versions of same application. In our example we are going to build \"Community\" and \"Enterprise\" flavors.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">build.gradle\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-groovy\" data-lang=\"groovy\">apply \u003Cspan class=\"hljs-attr\">plugin:\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;cpp&#x27;\u003C/span>\n\nmodel {\n  flavors {\n      community\n      enterprise\n  }\n\n  components {\n    hello(NativeLibrarySpec) {\n      binaries.all {\n        \u003Cspan class=\"hljs-keyword\">if\u003C/span> (flavor == flavors.enterprise) {\n          cppCompiler.define \u003Cspan class=\"hljs-string\">&quot;ENTERPRISE&quot;\u003C/span>\n        }\n      }\n    }\n    main(NativeExecutableSpec) {\n      binaries.all {\n        lib \u003Cspan class=\"hljs-attr\">library:\u003C/span> \u003Cspan class=\"hljs-string\">&quot;hello&quot;\u003C/span>\n        }\n    }\n  }\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>We also have to prepare our application to use compilation parameters.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Msg.h\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">ifdef\u003C/span> ENTERPRISE\u003C/span>\n\u003Cspan class=\"hljs-type\">static\u003C/span> \u003Cspan class=\"hljs-type\">const\u003C/span> \u003Cspan class=\"hljs-type\">char\u003C/span> * EDITION = \u003Cspan class=\"hljs-string\">&quot;Enterprise&quot;\u003C/span>;\n\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">else\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-type\">static\u003C/span> \u003Cspan class=\"hljs-type\">const\u003C/span> \u003Cspan class=\"hljs-type\">char\u003C/span> * EDITION = \u003Cspan class=\"hljs-string\">&quot;Community&quot;\u003C/span>;\n\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">endif\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>In this way it selects a string depending on used flavor.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>If we execute \u003Ccode>gradle clean task\u003C/code> in the root folder, we&#8217;ll get more available tasks. Before, we had \u003Ccode>installMainExecutable\u003C/code> which has been replaced by \u003Ccode>installCommunityMainExecutable\u003C/code> and \u003Ccode>installEnterpriseMainExecutable\u003C/code>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>If we execute both tasks, we&#8217;ll get the application installed in both flavors:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">\u003Cspan class=\"hljs-variable\">$gradle\u003C/span> installEnterpriseMainExecutable installCommunityMainExecutable\n\n:compileEnterpriseHelloSharedLibraryHelloCpp\n:linkEnterpriseHelloSharedLibrary\n:enterpriseHelloSharedLibrary\n:compileEnterpriseMainExecutableMainCpp\n:linkEnterpriseMainExecutable\n:enterpriseMainExecutable\n:installEnterpriseMainExecutable\n:compileCommunityHelloSharedLibraryHelloCpp\n:linkCommunityHelloSharedLibrary\n:communityHelloSharedLibrary\n:compileCommunityMainExecutableMainCpp\n:linkCommunityMainExecutable\n:communityMainExecutable\n:installCommunityMainExecutable\n\nBUILD SUCCESSFUL\nTotal time: 9.414 secs\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Now we can run the application in both flavors:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Community\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">$ build/install/mainExecutable/community/main\n1.      Hello Mr. Pepito        (Community)\n2.      Hello Mr. Pepito        (Community)\n3.      Hello Mr. Pepito        (Community)\n4.      Hello Mr. Pepito        (Community)\n5.      Hello Mr. Pepito        (Community)\n6.      Hello Mr. Pepito        (Community)\n7.      Hello Mr. Pepito        (Community)\n8.      Hello Mr. Pepito        (Community)\n9.      Hello Mr. Pepito        (Community)\n10.     Hello Mr. Pepito        (Community)\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Enterprise\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">$ build/install/mainExecutable/enterprise/main\n1.      Hello Mr. Pepito        (Enterprise)\n2.      Hello Mr. Pepito        (Enterprise)\n3.      Hello Mr. Pepito        (Enterprise)\n4.      Hello Mr. Pepito        (Enterprise)\n5.      Hello Mr. Pepito        (Enterprise)\n6.      Hello Mr. Pepito        (Enterprise)\n7.      Hello Mr. Pepito        (Enterprise)\n8.      Hello Mr. Pepito        (Enterprise)\n9.      Hello Mr. Pepito        (Enterprise)\n10.     Hello Mr. Pepito        (Enterprise)\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect3\">\n\u003Ch4 id=\"_release_or_debug\">Release or Debug\u003C/h4>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>By default \u003Ca href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a> compiles in Debug mode, but we can add the Release mode which enables several optimizations and remove debug flags\u003Csup class=\"footnote\">[\u003Ca id=\"_footnoteref_4\" class=\"footnote\" href=\"#_footnotedef_4\" title=\"View footnote.\">4\u003C/a>]\u003C/sup>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">build.gradle\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-groovy\" data-lang=\"groovy\">apply \u003Cspan class=\"hljs-attr\">plugin:\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;cpp&#x27;\u003C/span>\nmodel {\n    buildTypes {\n        debug\n        release\n    }\n\u003Cspan class=\"hljs-comment\">// ... the rest of file below doesn&#x27;t change\u003C/span>\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>If we execute \u003Ccode>gradle clean task\u003C/code> we will get more tasks, they have been split, for example \u003Ccode>installCommunityMainExecutable\u003C/code> has been split in \u003Ccode>installDebugCommunityMainExecutable\u003C/code> and \u003Ccode>installReleaseCommunityMainExecutable\u003C/code>.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect3\">\n\u003Ch4 id=\"_multi_platform\">Multi-platform\u003C/h4>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Also we can use cross-compiling features provided by compilers and generate native components for other platforms. To do so we just have to add the supported platforms.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>This only works if we have installed the \u003Ca href=\"https://en.wikipedia.org/wiki/Toolchain\" target=\"_blank\" rel=\"noopener\">Toolchain\u003C/a> for the target platform.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">build.gradle\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-groovy\" data-lang=\"groovy\">apply \u003Cspan class=\"hljs-attr\">plugin:\u003C/span> \u003Cspan class=\"hljs-string\">&#x27;cpp&#x27;\u003C/span>\n\nmodel {\n  buildTypes {\n    debug\n    release\n  }\n\n  platforms {\n    x86 {\n      architecture \u003Cspan class=\"hljs-string\">&quot;x86&quot;\u003C/span>\n    }\n    x64 {\n      architecture \u003Cspan class=\"hljs-string\">&quot;x86_64&quot;\u003C/span>\n    }\n    itanium {\n      architecture \u003Cspan class=\"hljs-string\">&quot;ia-64&quot;\u003C/span>\n    }\n  }\n\n  flavors {\n    community\n    enterprise\n  }\n\n  components {\n    hello(NativeLibrarySpec) {\n      binaries.all {\n        \u003Cspan class=\"hljs-keyword\">if\u003C/span> (flavor == flavors.enterprise) {\n          cppCompiler.define \u003Cspan class=\"hljs-string\">&quot;ENTERPRISE&quot;\u003C/span>\n        }\n      }\n    }\n    main(NativeExecutableSpec) {\n      binaries.all {\n        lib \u003Cspan class=\"hljs-attr\">library:\u003C/span> \u003Cspan class=\"hljs-string\">&quot;hello&quot;\u003C/span>\n      }\n    }\n  }\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>When execute \u003Ccode>gradle clean task\u003C/code> we get the different build options we have.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"admonitionblock note\">\n\u003Ctable>\n\u003Ctr>\n\u003Ctd class=\"icon\">\n\u003Cdiv class=\"title\">Note\u003C/div>\n\u003C/td>\n\u003Ctd class=\"content\">\nIn this example, we can build different versions of the application in different flavors for different platforms in Debug or Release mode.\n\u003C/td>\n\u003C/tr>\n\u003C/table>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_try_it_yourself\">Try it yourself\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>You can find the project at \u003Ca href=\"https://github.com/carlosvin/cpp_gradle\" class=\"bare\">https://github.com/carlosvin/cpp_gradle\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Requirements:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Ca href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java\u003C/a> 6 or higher.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>An installed compiler (e.g \u003Ca href=\"\">GCC\u003C/a>)\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>You just have to follow next steps:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"olist arabic\">\n\u003Col class=\"arabic\">\n\u003Cli>\n\u003Cp>\u003Ccode>git clone \u003Ca href=\"mailto:git@github.com\">git@github.com\u003C/a>:carlosvin/cpp_gradle.git\u003C/code>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode>cd cpp_gradle\u003C/code>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode>./gradlew task\u003C/code> or \u003Ccode>./gradlew.bat task\u003C/code> if you are in Windows. In this way you&#8217;ll see available tasks for this project. The first execution will take more time, because it downloads \u003Ca href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a> runtime.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>If you are in a 64 bits platform, you can use this command to install the application: \u003Ccode>./gradlew installX64ReleaseEnterpriseMainExecutable\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Run the application you just built: \u003Ccode>build/install/mainExecutable/x64ReleaseEnterprise/main\u003C/code>.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_conclusions\">Conclusions\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>With a tiny configuration file, we have many different build combinations.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a> for C++ has a promising future, I hope it follows the steps of \u003Ca href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java\u003C/a> and \u003Ca href=\"https://developer.android.com/studio/build\" target=\"_blank\" rel=\"noopener\">Android\u003C/a> support.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>It is well supported by continuous integration systems.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>It has many plugins and features.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a> for C++ is a feature under development, we have to be careful:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>Don&#8217;t use it in production environments.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Many things can change or disappear.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>The full example is on \u003Ca href=\"https://github.com/carlosvin/cpp_gradle\" class=\"bare\">https://github.com/carlosvin/cpp_gradle\u003C/a>. I recommend you to \u003Ca href=\"#_try_it_yourself\">Try it yourself\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"admonitionblock note\">\n\u003Ctable>\n\u003Ctr>\n\u003Ctd class=\"icon\">\n\u003Cdiv class=\"title\">Note\u003C/div>\n\u003C/td>\n\u003Ctd class=\"content\">\nIf you find any issue in this example, please write a comment, open a defect or fix it yourself at \u003Ca href=\"https://github.com/carlosvin/cpp_gradle\" class=\"bare\">https://github.com/carlosvin/cpp_gradle\u003C/a>\n\u003C/td>\n\u003C/tr>\n\u003C/table>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>More info at \u003Ca href=\"https://docs.gradle.org/current/userguide/native_software.html\">Getting Started Gradle Native\u003C/a>.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv id=\"footnotes\">\n\u003Chr>\n\u003Cdiv class=\"footnote\" id=\"_footnotedef_1\">\n\u003Ca href=\"#_footnoteref_1\">1\u003C/a>. 'n' Positive integer\n\u003C/div>\n\u003Cdiv class=\"footnote\" id=\"_footnotedef_2\">\n\u003Ca href=\"#_footnoteref_2\">2\u003C/a>. Actually \u003Ca href=\"https://www.gradle.org\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a> is not required if we use the \"wrapper\", but we aren&#8217;t going to explain it here, \u003Ca href=\"https://docs.gradle.org/current/userguide/gradle_wrapper.html\">here you can get more info about Gradle Wrapper\u003C/a>.\n\u003C/div>\n\u003Cdiv class=\"footnote\" id=\"_footnotedef_3\">\n\u003Ca href=\"#_footnoteref_3\">3\u003C/a>. .bat in Windows. Without extension in Linux\n\u003C/div>\n\u003Cdiv class=\"footnote\" id=\"_footnotedef_4\">\n\u003Ca href=\"#_footnoteref_4\">4\u003C/a>. We can also specify/modify which optimizations to apply.\n\u003C/div>\n\u003C/div>",{"title":3,"lang":4,"summary":5,"slug":6,"keywords":7,"filepath":13,"dirpath":14,"created":15,"modified":15,"otherLangs":16,"author":18,"previewimage":-1,"path":19},"Build C++ project with Gradle","en","How to build a C++ project using Gradle","gradle-cpp",[8,9,10,11,12],"Gradle","C++","Build Software","Build System","Dependency Management","/static/posts/gradle-cpp.en.adoc","/static/posts",1411776000000,[17],"es","Carlos Martin Sanchez","/langs/en/posts/gradle-cpp","\u003Cscript type=\"application/ld+json\">{\"@context\":\"https://schema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"Webpage\",\"@id\":\"https://google.com/article\"},\"headline\":\"Build C++ project with Gradle\",\"alternativeHeadline\":\"How to build a C++ project using Gradle\",\"description\":\"How to build a C++ project using Gradle\",\"datePublished\":\"2014-09-27T00:00:00.000Z\",\"dateModified\":\"2014-09-27T00:00:00.000Z\",\"keywords\":[\"Gradle\",\"C++\",\"Build Software\",\"Build System\",\"Dependency Management\"],\"author\":{\"@type\":\"Person\",\"name\":\"Carlos Martin Sanchez\"},\"publisher\":{\"@type\":\"Person\",\"name\":\"Carlos Martin Sanchez\"}}\u003C/script>"],"uses":{"params":["slug","lang"]}}]}
