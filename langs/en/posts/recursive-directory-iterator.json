{"html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_introduction\">Introduction</a></li>\n<li><a href=\"#_gettting_started_with_experimental_filesystem_features_c17_g\">Gettting started with Experimental Filesystem Features C&#43;&#43;17 (g++)</a></li>\n<li><a href=\"#_c17_filesystem_features\">C&#43;&#43;17 Filesystem Features</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_stdfilesystempath\">std::filesystem::path</a></li>\n<li><a href=\"#_directory_separator\">Directory separator</a></li>\n<li><a href=\"#_directory_separator_operator\">Directory Separator Operator</a></li>\n<li><a href=\"#_createremove_directories\">Create/Remove Directories</a></li>\n</ul>\n</li>\n<li><a href=\"#_full_example_recursive_directory_iterator\">Full example: Recursive Directory Iterator</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_c11\">C&#43;&#43;11</a></li>\n<li><a href=\"#_c17\">C&#43;&#43;17</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_introduction\">Introduction</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Since C&#43;&#43;17 new filesystem abstractions will be added to C&#43;&#43; environment. So far they are available as <a href=\"https://en.cppreference.com/w/cpp/experimental\">Experimental C&#43;&#43; Features</a>. If you want to dig more about this new library, here it is the <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4100.pdf\" target=\"_blank\" rel=\"noopener\">final draft of File System Technical Specification</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_gettting_started_with_experimental_filesystem_features_c17_g\">Gettting started with Experimental Filesystem Features C&#43;&#43;17 (g++)</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We just have to \"tell\" compiler that:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>we write C&#43;&#43;17 (<code>-c++1z</code>) and</p>\n</li>\n<li>\n<p>it has to add <em>standard library with filesystem library</em> (<code>-lstdc++fs</code>).</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++ -std=c++1z main.cpp -lstdc++fs &amp;&amp; ./a.out</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Let&#8217;s see a simple example with <code>std::filesystem::path</code> class.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;experimental/filesystem&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">namespace</span> fs = std::experimental::filesystem;\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    fs::path aPath {<span class=\"hljs-string\">&quot;./path/to/file.txt&quot;</span>};\n\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Parent path: &quot;</span> &lt;&lt; aPath.<span class=\"hljs-built_in\">parent_path</span>() &lt;&lt; endl;\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Filename: &quot;</span> &lt;&lt; aPath.<span class=\"hljs-built_in\">filename</span>() &lt;&lt; endl;\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Extension: &quot;</span> &lt;&lt; aPath.<span class=\"hljs-built_in\">extension</span>() &lt;&lt; endl;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/9f8bebb8b7f0fbe7\" target=\"_blank\" rel=\"noopener\">Compile and run: Basic C&#43;&#43;17 example</a></div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">$ g++ -std=c++1z main.cpp -lstdc++fs &amp;&amp; ./a.out\n$ ./a.out\n\nParent path: <span class=\"hljs-string\">&quot;./path/to&quot;</span>\nFilename: <span class=\"hljs-string\">&quot;file.txt&quot;</span>\nExtension: <span class=\"hljs-string\">&quot;.txt&quot;</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_c17_filesystem_features\">C&#43;&#43;17 Filesystem Features</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In this section, we are going to explain some <a href=\"https://en.cppreference.com/w/cpp/filesystem\" target=\"_blank\" rel=\"noopener\">std::filesystem</a> features with examples, which will help us to highlight differences between C&#43;&#43;11 and C&#43;&#43;17 so we can get a better idea about what this new library will supply and how it might make developer&#8217;s work easier.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_stdfilesystempath\">std::filesystem::path</h3>\n<div class=\"paragraph\">\n<p>Upper we have seen a tiny <a href=\"https://coliru.stacked-crooked.com/a/9f8bebb8b7f0fbe7\" target=\"_blank\" rel=\"noopener\">use case for std::filesystem::path</a>. That is a quite powerful and convenient feature that supplies an multi-platform abstraction for paths to files using the correct directory path separator depending on the platform we are building our application for (<code>\\</code> for Windows based systems and <code>/</code> for Unix based systems).</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_directory_separator\">Directory separator</h3>\n<div class=\"paragraph\">\n<p>When we want our application to use the correct directory separator in C&#43;&#43;11, we could use conditional macro declaration:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Platform independent directory separator in C&#43;&#43;11</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _WIN32</span>\n<span class=\"hljs-type\">const</span> string SEP = <span class=\"hljs-string\">&quot;\\\\&quot;</span>;\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\n<span class=\"hljs-type\">const</span> string SEP = <span class=\"hljs-string\">&quot;/&quot;</span>;\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Separator in my system &quot;</span> &lt;&lt; SEP &lt;&lt; endl;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://coliru.stacked-crooked.com/a/5023ee989105fc54\" target=\"_blank\" rel=\"noopener\">Compile and run: C&#43;&#43;11 separator example</a>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Platform independent directory separator in C&#43;&#43;17. Cleaner and simpler.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;experimental/filesystem&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">namespace</span> fs = std::experimental::filesystem;\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Separator in my system &quot;</span> &lt;&lt; fs::path::preferred_separator &lt;&lt; endl;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://coliru.stacked-crooked.com/a/1f2f63b3f5597d05\" target=\"_blank\" rel=\"noopener\">Compile and run: C&#43;&#43;17 separator example</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_directory_separator_operator\">Directory Separator Operator</h3>\n<div class=\"paragraph\">\n<p><a href=\"https://en.cppreference.com/w/cpp/filesystem/path\">std::filesystem::path</a> implements <code>/</code> operator, which allows to easily concatenate paths to files and directories.</p>\n</div>\n<div class=\"paragraph\">\n<p>When we want to concatenate paths in C&#43;&#43;11, we have to add extra logic to avoid adding duplicate separators and to select the correct separator for target platform:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Concatenate paths in C&#43;&#43;11</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _WIN32</span>\n<span class=\"hljs-type\">const</span> string SEP = <span class=\"hljs-string\">&quot;\\\\&quot;</span>;\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\n<span class=\"hljs-type\">const</span> string SEP = <span class=\"hljs-string\">&quot;/&quot;</span>;\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    string root {<span class=\"hljs-string\">&quot;/&quot;</span>};\n    string dir {<span class=\"hljs-string\">&quot;var/www/&quot;</span>};\n    string index {<span class=\"hljs-string\">&quot;index.html&quot;</span>};\n\n    string pathToIndex{};\n    pathToIndex.<span class=\"hljs-built_in\">append</span>(root).<span class=\"hljs-built_in\">append</span>(SEP).<span class=\"hljs-built_in\">append</span>(dir).<span class=\"hljs-built_in\">append</span>(SEP).<span class=\"hljs-built_in\">append</span>(index);\n\n    cout &lt;&lt; pathToIndex &lt;&lt; endl;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/290b278ec1de9573\" target=\"_blank\" rel=\"noopener\">Compile and run: Concatenate paths in C&#43;&#43;11</a></div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">//var/www//index.html</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Checking program output we notice it is not fully correct, we should have checked whether path parts already contains a separator so we don&#8217;t append another separator again. That logic is already implemented in <a href=\"https://en.cppreference.com/w/cpp/filesystem/path\">std::filesystem::path</a>, so C&#43;&#43;17 can be like:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Concatenate paths in C&#43;&#43;17</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;experimental/filesystem&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">namespace</span> fs = std::experimental::filesystem;\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    fs::path root {<span class=\"hljs-string\">&quot;/&quot;</span>};\n    fs::path dir {<span class=\"hljs-string\">&quot;var/www/&quot;</span>};\n    fs::path index {<span class=\"hljs-string\">&quot;index.html&quot;</span>};\n\n    fs::path pathToIndex = root / dir / index;\n\n    cout &lt;&lt; pathToIndex &lt;&lt; endl;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/a24d50875b4daad1\">Compile and run: Concatenate paths in C&#43;&#43;17</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\"><span class=\"hljs-string\">&quot;/var/www/index.html&quot;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Code is cleaner and just correct, there are no duplicated separators.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_createremove_directories\">Create/Remove Directories</h3>\n<div class=\"paragraph\">\n<p><a href=\"https://en.cppreference.com/w/cpp/filesystem\" target=\"_blank\" rel=\"noopener\">std::filesystem</a> comes with some utilities to create and remove files and directories, but firstly let&#8217;s try to do so in C&#43;&#43;11.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Create and remove nested directories in C&#43;&#43;11</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/stat.h&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">auto</span> opts = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;\n    <span class=\"hljs-built_in\">mkdir</span>(<span class=\"hljs-string\">&quot;sandbox&quot;</span>, opts);\n    <span class=\"hljs-built_in\">mkdir</span>(<span class=\"hljs-string\">&quot;sandbox/a&quot;</span>, opts);\n    <span class=\"hljs-built_in\">mkdir</span>(<span class=\"hljs-string\">&quot;sandbox/a/b&quot;</span>, opts);\n    <span class=\"hljs-built_in\">mkdir</span>(<span class=\"hljs-string\">&quot;sandbox/c&quot;</span>, opts);\n    <span class=\"hljs-built_in\">mkdir</span>(<span class=\"hljs-string\">&quot;sandbox/c/d&quot;</span>, opts);\n\n    <span class=\"hljs-built_in\">system</span>(<span class=\"hljs-string\">&quot;ls -la sandbox/*&quot;</span>);\n\n    <span class=\"hljs-built_in\">remove</span>(<span class=\"hljs-string\">&quot;sandbox/c/d&quot;</span>);\n    <span class=\"hljs-built_in\">remove</span>(<span class=\"hljs-string\">&quot;sandbox/a/b&quot;</span>);\n    <span class=\"hljs-built_in\">remove</span>(<span class=\"hljs-string\">&quot;sandbox/c&quot;</span>);\n    <span class=\"hljs-built_in\">remove</span>(<span class=\"hljs-string\">&quot;sandbox/a&quot;</span>);\n    <span class=\"hljs-built_in\">remove</span>(<span class=\"hljs-string\">&quot;sandbox&quot;</span>);\n\n    <span class=\"hljs-built_in\">system</span>(<span class=\"hljs-string\">&quot;ls -la&quot;</span>);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/26f4763ec5b42adb\">Compile and run: Create and remove directories C&#43;&#43;11</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++-4.9 -std=c++11 main.cpp -lm &amp;&amp; ./a.out\nsandbox/a:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 12:27 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 12:27 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 12:27 b\n\nsandbox/c:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 12:27 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 12:27 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 12:27 d\ntotal 8012\ndrwxrwxrwx 2 2001 2000    4096 May 28 12:27 .\ndrwxrwxrwx 3 2002 2000 8175616 May 28 12:27 ..\n-rwxr-xr-x 1 2001 2000    8168 May 28 12:27 a.out\n-rw-rw-rw- 1 2001 2000     517 May 28 12:27 main.cpp</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>We have to create/remove one by one. We could rewrite this code snippet with less lines (using a loop), but we still have to pay attention to creation/deletion order, we cannot remove parent directory before we have removed all children.</p>\n</div>\n<div class=\"paragraph\">\n<p>Since C&#43;&#43;17, we can create and remove nested directories with just one call.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Create and remove nested directories C&#43;&#43;17</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;experimental/filesystem&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">namespace</span> fs = std::experimental::filesystem;\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    fs::<span class=\"hljs-built_in\">create_directories</span>(<span class=\"hljs-string\">&quot;sandbox/a/b&quot;</span>);\n    fs::<span class=\"hljs-built_in\">create_directories</span>(<span class=\"hljs-string\">&quot;sandbox/c/d&quot;</span>);\n    <span class=\"hljs-built_in\">system</span>(<span class=\"hljs-string\">&quot;ls -la sandbox/*&quot;</span>);\n\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Were directories removed? &quot;</span> &lt;&lt; fs::<span class=\"hljs-built_in\">remove_all</span>(<span class=\"hljs-string\">&quot;sandbox&quot;</span>) &lt;&lt; endl;\n    <span class=\"hljs-built_in\">system</span>(<span class=\"hljs-string\">&quot;ls -la&quot;</span>);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/62c2d22fa0e7144c\">Compile and run: Create and remove nested directories C&#43;&#43;17</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++ -std=c++1z -fconcepts -fgnu-tm  -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;&amp; ./a.out\nsandbox/a:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 16:45 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 16:45 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 16:45 b\n\nsandbox/c:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 16:45 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 16:45 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 16:45 d\nWere directories removed? 1\ntotal 10132\ndrwxrwxrwx 2 2001 2000    4096 May 28 16:45 .\ndrwxrwxrwx 3 2002 2000 8175616 May 28 16:45 ..\n-rwxr-xr-x 1 2001 2000 2170976 May 28 16:45 a.out\n-rw-rw-rw- 1 2001 2000     393 May 28 16:45 main.cpp</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_full_example_recursive_directory_iterator\">Full example: Recursive Directory Iterator</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>This example consists of iterate recursively through dicrectories fintering files by extension.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_c11\">C&#43;&#43;11</h3>\n<div class=\"paragraph\">\n<p>To keep C&#43;&#43;11 example simple, I haven&#8217;t added filtering  logic, but filtering logic is present in C&#43;&#43;17 example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">filesystem.11.cpp</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;dirent.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;fstream&gt;</span> <span class=\"hljs-comment\">// std::ofstream</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;memory&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;system_error&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/stat.h&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-type\">const</span> string UP_DIR = <span class=\"hljs-string\">&quot;..&quot;</span>;\n<span class=\"hljs-type\">const</span> string CURRENT_DIR = <span class=\"hljs-string\">&quot;.&quot;</span>;\n<span class=\"hljs-type\">const</span> string SEP = <span class=\"hljs-string\">&quot;/&quot;</span>;\n\n\n<span class=\"hljs-function\">string <span class=\"hljs-title\">path</span><span class=\"hljs-params\">(initializer_list&lt;string&gt; parts)</span>\n</span>{\n    string pathTmp {};\n    string separator = <span class=\"hljs-string\">&quot;&quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> &amp; part: parts)\n    {\n        pathTmp.<span class=\"hljs-built_in\">append</span>(separator).<span class=\"hljs-built_in\">append</span>(part);\n        separator = SEP;\n    }\n    <span class=\"hljs-keyword\">return</span> pathTmp;\n}\n\n<span class=\"hljs-function\">vector&lt;string&gt; <span class=\"hljs-title\">getDirectoryFiles</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> string&amp; dir, <span class=\"hljs-type\">const</span> vector&lt;string&gt; &amp; extensions)</span>\n</span>{\n    vector&lt;string&gt; files;\n    <span class=\"hljs-function\">shared_ptr&lt;DIR&gt; <span class=\"hljs-title\">directory_ptr</span><span class=\"hljs-params\">(opendir(dir.c_str()), [](DIR* dir){ dir &amp;&amp; closedir(dir); })</span></span>;\n    <span class=\"hljs-keyword\">if</span> (!directory_ptr)\n    {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-built_in\">system_error</span>(<span class=\"hljs-built_in\">error_code</span>(errno, <span class=\"hljs-built_in\">system_category</span>()), <span class=\"hljs-string\">&quot;Error opening : &quot;</span> + dir);\n    }\n\n    <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">dirent</span> *dirent_ptr;\n    <span class=\"hljs-keyword\">while</span> ((dirent_ptr = <span class=\"hljs-built_in\">readdir</span>(directory_ptr.<span class=\"hljs-built_in\">get</span>())) != <span class=\"hljs-literal\">nullptr</span>)\n    {\n        <span class=\"hljs-type\">const</span> string fileName {dirent_ptr-&gt;d_name};\n        <span class=\"hljs-keyword\">if</span> (dirent_ptr-&gt;d_type == DT_DIR)\n        {\n            <span class=\"hljs-keyword\">if</span> (CURRENT_DIR != fileName &amp;&amp; UP_DIR != fileName)\n            {\n                <span class=\"hljs-keyword\">auto</span> subFiles = <span class=\"hljs-built_in\">getDirectoryFiles</span>(<span class=\"hljs-built_in\">path</span>({dir, fileName}), extensions);\n                files.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-built_in\">end</span>(files), <span class=\"hljs-built_in\">begin</span>(subFiles), <span class=\"hljs-built_in\">end</span>(subFiles));\n            }\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (dirent_ptr-&gt;d_type == DT_REG)\n        {\n            <span class=\"hljs-comment\">// here we should check also if filename has an extension in extensions vector</span>\n            files.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-built_in\">path</span>({dir, fileName}));\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> files;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">auto</span> opt = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;\n    <span class=\"hljs-built_in\">mkdir</span>(<span class=\"hljs-string\">&quot;sandbox&quot;</span>, opt);\n    <span class=\"hljs-built_in\">mkdir</span>(<span class=\"hljs-string\">&quot;sandbox/a&quot;</span>, opt);\n    <span class=\"hljs-built_in\">mkdir</span>(<span class=\"hljs-string\">&quot;sandbox/a/b&quot;</span>, opt);\n\n\tvector&lt;string&gt; e_files = {\n\t    <span class=\"hljs-string\">&quot;./sandbox/a/b/file1.rst&quot;</span>,\n\t    <span class=\"hljs-string\">&quot;./sandbox/a/b/file1.txt&quot;</span>,\n\t    <span class=\"hljs-string\">&quot;./sandbox/a/file2.RST&quot;</span>,\n\t    <span class=\"hljs-string\">&quot;./sandbox/file3.md&quot;</span>,\n\t    <span class=\"hljs-string\">&quot;./sandbox/will_be.ignored&quot;</span>\n\t};\n\n\t<span class=\"hljs-comment\">// create files</span>\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> &amp;f: e_files)\n\t{\n\t\t<span class=\"hljs-function\">ofstream <span class=\"hljs-title\">of</span><span class=\"hljs-params\">(f, ofstream::out)</span></span>;\n\t\tof &lt;&lt; <span class=\"hljs-string\">&quot;test&quot;</span>;\n\t}\n\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;filtered files: &quot;</span> &lt;&lt; endl;\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> &amp;f: <span class=\"hljs-built_in\">getDirectoryFiles</span>(<span class=\"hljs-string\">&quot;.&quot;</span>, {<span class=\"hljs-string\">&quot;.rst&quot;</span>, <span class=\"hljs-string\">&quot;.RST&quot;</span>, <span class=\"hljs-string\">&quot;.md&quot;</span>})){\n\t    cout &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span> &lt;&lt; f &lt;&lt; endl;\n\t}\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/af4228e039a281b3\" target=\"_blank\" rel=\"noopener\">Compile and run C&#43;&#43;11 example</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++ -std=c++11 -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;&amp; ./a.out\nfiltered files:\n\t./main.cpp\n\t./sandbox/file3.md\n\t./sandbox/will_be.ignored\n\t./sandbox/a/b/file1.rst\n\t./sandbox/a/b/file1.txt\n\t./sandbox/a/file2.RST\n\t./a.out</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_c17\">C&#43;&#43;17</h3>\n<div class=\"paragraph\">\n<p>Following example also filters files by extension.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">filesystem.17.cpp</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\"><span class=\"hljs-comment\">#include &lt;dirent.h&gt;</span>\n<span class=\"hljs-comment\">#include &lt;cstring&gt;</span>\n<span class=\"hljs-comment\">#include &lt;iostream&gt;</span>\n<span class=\"hljs-comment\">#include &lt;fstream&gt; // std::ofstream</span>\n<span class=\"hljs-comment\">#include &lt;vector&gt;</span>\n<span class=\"hljs-comment\">#include &lt;memory&gt;</span>\n<span class=\"hljs-comment\">#include &lt;system_error&gt;</span>\n<span class=\"hljs-comment\">#include &lt;sys/stat.h&gt;</span>\n\nusing namespace std;\n\nconst string UP_DIR = <span class=\"hljs-string\">&quot;..&quot;</span>;\nconst string CURRENT_DIR = <span class=\"hljs-string\">&quot;.&quot;</span>;\nconst string SEP = <span class=\"hljs-string\">&quot;/&quot;</span>;\n\n\nstring path(initializer_list&lt;string&gt; parts)\n{\n    string pathTmp {};\n    string separator = <span class=\"hljs-string\">&quot;&quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (auto &amp; part: parts)\n    {\n        pathTmp.append(separator).append(part);\n        separator = SEP;\n    }\n    <span class=\"hljs-built_in\">return</span> pathTmp;\n}\n\nvector&lt;string&gt; getDirectoryFiles(const string&amp; <span class=\"hljs-built_in\">dir</span>, const vector&lt;string&gt; &amp; extensions)\n{\n    vector&lt;string&gt; files;\n    shared_ptr&lt;DIR&gt; directory_ptr(opendir(dir.c_str()), [](DIR* <span class=\"hljs-built_in\">dir</span>){ <span class=\"hljs-built_in\">dir</span> &amp;&amp; closedir(<span class=\"hljs-built_in\">dir</span>); });\n    <span class=\"hljs-keyword\">if</span> (!directory_ptr)\n    {\n        throw system_error(error_code(errno, system_category()), <span class=\"hljs-string\">&quot;Error opening : &quot;</span> + <span class=\"hljs-built_in\">dir</span>);\n    }\n\n    struct dirent *dirent_ptr;\n    <span class=\"hljs-keyword\">while</span> ((dirent_ptr = readdir(directory_ptr.get())) != nullptr)\n    {\n        const string fileName {dirent_ptr-&gt;d_name};\n        <span class=\"hljs-keyword\">if</span> (dirent_ptr-&gt;d_type == DT_DIR)\n        {\n            <span class=\"hljs-keyword\">if</span> (CURRENT_DIR != fileName &amp;&amp; UP_DIR != fileName)\n            {\n                auto subFiles = getDirectoryFiles(path({<span class=\"hljs-built_in\">dir</span>, fileName}), extensions);\n                files.insert(end(files), begin(subFiles), end(subFiles));\n            }\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (dirent_ptr-&gt;d_type == DT_REG)\n        {\n            // here we should check also <span class=\"hljs-keyword\">if</span> filename has an extension <span class=\"hljs-keyword\">in</span> extensions vector\n            files.push_back(path({<span class=\"hljs-built_in\">dir</span>, fileName}));\n        }\n    }\n    <span class=\"hljs-built_in\">return</span> files;\n}\n\nint <span class=\"hljs-function\"><span class=\"hljs-title\">main</span></span> ()\n{\n    auto opt = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;\n    <span class=\"hljs-built_in\">mkdir</span>(<span class=\"hljs-string\">&quot;sandbox&quot;</span>, opt);\n    <span class=\"hljs-built_in\">mkdir</span>(<span class=\"hljs-string\">&quot;sandbox/a&quot;</span>, opt);\n    <span class=\"hljs-built_in\">mkdir</span>(<span class=\"hljs-string\">&quot;sandbox/a/b&quot;</span>, opt);\n\n\tvector&lt;string&gt; e_files = {\n\t    <span class=\"hljs-string\">&quot;./sandbox/a/b/file1.rst&quot;</span>,\n\t    <span class=\"hljs-string\">&quot;./sandbox/a/b/file1.txt&quot;</span>,\n\t    <span class=\"hljs-string\">&quot;./sandbox/a/file2.RST&quot;</span>,\n\t    <span class=\"hljs-string\">&quot;./sandbox/file3.md&quot;</span>,\n\t    <span class=\"hljs-string\">&quot;./sandbox/will_be.ignored&quot;</span>\n\t};\n\n\t// create files\n\t<span class=\"hljs-keyword\">for</span> (auto &amp;f: e_files)\n\t{\n\t\tofstream of(f, ofstream::out);\n\t\tof &lt;&lt; <span class=\"hljs-string\">&quot;test&quot;</span>;\n\t}\n\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;filtered files: &quot;</span> &lt;&lt; <span class=\"hljs-string\">endl;\n\tfor (auto &amp;f: getDirectoryFiles(&quot;.&quot;, {&quot;.rst&quot;, &quot;.RST&quot;, &quot;.md&quot;})){\n\t    cout &lt;&lt; &quot;\\t&quot; &lt;&lt; f &lt;&lt; endl</span>;\n\t}\n\n    <span class=\"hljs-built_in\">return</span> 0;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\"><a href=\"https://coliru.stacked-crooked.com/a/af4228e039a281b3\" target=\"_blank\" rel=\"noopener\">Compile and run C&#43;&#43;17 example</a>.</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">g++ -std=c++11 -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;&amp; ./a.out\nfiltered files:\n\t./main.cpp\n\t./sandbox/file3.md\n\t./sandbox/will_be.ignored\n\t./sandbox/a/b/file1.rst\n\t./sandbox/a/b/file1.txt\n\t./sandbox/a/file2.RST\n\t./a.out</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>","props":{"title":"Filesystem in C++17","created":1495954800000,"modified":1495954800000,"filepath":"/Users/carlos.martin-sanchez/pers/carlosvin.github.io/static/posts/recursive-directory-iterator.en.adoc","dirpath":"/Users/carlos.martin-sanchez/pers/carlosvin.github.io/static/posts","keywords":["C++","C++11","C++17","IO","Filesystem"],"lang":"en","otherLangs":["es"],"slug":"recursive-directory-iterator","summary":"We are going to analyze with examples new filesystem features coming with C++17","author":"Carlos","path":"/langs/en/posts/recursive-directory-iterator"}}