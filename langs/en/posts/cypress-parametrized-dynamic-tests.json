{"html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_explicit_input_data_set\">Explicit input data set</a></li>\n<li><a href=\"#_generated_input_data_set\">Generated input data set</a></li>\n</ul>\n</div>\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"https://www.cypress.io/\" target=\"_blank\" rel=\"noopener\">Cypress</a> is a testing framework for anything running on a web browser. I am using it to test this site and I&#8217;ve talked before about it in the post <a href=\"https://carlosvin.github.io/posts/this-is-sapper/en#_testing\">\"This is Sapper\"</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>In this post I won&#8217;t explain how to use <a href=\"https://www.cypress.io/\" target=\"_blank\" rel=\"noopener\">Cypress</a>, they have a pretty nice documentation: <a href=\"https://docs.cypress.io/guides/getting-started/installing-cypress.html\" target=\"_blank\" rel=\"noopener\">Getting started with Cypress</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>I will stick to the parameterized tests topic.</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>Parameterized tests</strong>: Also known as dynamic tests, it is an useful technique where you can specify an input dataset and the test case will be repeated for each element in the dataset.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_explicit_input_data_set\">Explicit input data set</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Since sometimes you canâ€™t run the test for all the possible inputs, you can select a set of meaningful data to test.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Example checking that the relevant pages in the site have valid HTML syntax</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;validate pages&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    [ <b class=\"conum\">(1)</b>\n        <span class=\"hljs-string\">&quot;/&quot;</span>,\n        <span class=\"hljs-string\">&quot;/categories&quot;</span>,\n        <span class=\"hljs-string\">&quot;/categories/sapper&quot;</span>,\n        <span class=\"hljs-string\">&quot;/posts/creating-custom-maven-plugin-default&quot;</span>,\n        <span class=\"hljs-string\">&quot;/posts/choosing-modern-cpp-stack&quot;</span>,\n        <span class=\"hljs-string\">&quot;/posts/cpp-mutex&quot;</span>,\n        <span class=\"hljs-string\">&quot;/posts/cpp-pragma-pack&quot;</span>,\n        <span class=\"hljs-string\">&quot;/posts/creating-custom-maven-plugin&quot;</span>,\n        <span class=\"hljs-string\">&quot;/posts/delete-html-tags-py-django&quot;</span>,\n        <span class=\"hljs-string\">&quot;/posts/gradle-cpp&quot;</span>,\n        <span class=\"hljs-string\">&quot;/posts/java-embedded-db-performance-comparison&quot;</span>,\n        <span class=\"hljs-string\">&quot;/posts/react-typescript-parcel&quot;</span>,\n        <span class=\"hljs-string\">&quot;/posts/pwa-lessons-learned-cra&quot;</span>,\n    ].<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">url</span>) =&gt;</span> { <b class=\"conum\">(2)</b>\n        <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">`should be valid HTML <span class=\"hljs-subst\">${url}</span>`</span>, <span class=\"hljs-function\">() =&gt;</span> { <b class=\"conum\">(3)</b>\n            cy.<span class=\"hljs-title function_\">visit</span>(url)\n            cy.<span class=\"hljs-title function_\">htmlvalidate</span>()\n        })\n    })\n})</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>List with relevant pages to validate</p>\n</li>\n<li>\n<p>Iterate over the list of pages</p>\n</li>\n<li>\n<p>Test case execution for selected page</p>\n</li>\n</ol>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/posts/cypress-parametrized-dynamic-tests/html-validation.png\" alt=\"Test results\" width=\"100%\">\n</div>\n<div class=\"title\">Figure 1. Test results</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_generated_input_data_set\">Generated input data set</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Instead of explicitly define a data set, you can generate it, for example, creating a random data set.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">Example checking that any generated random number is less than 0</div>\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;random&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> inputData = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-number\">100</span>)).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>()) <b class=\"conum\">(1)</b>\n    inputData.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> { <b class=\"conum\">(2)</b>\n        <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">`should be valid <span class=\"hljs-subst\">${x}</span>`</span>, <span class=\"hljs-function\">() =&gt;</span> { <b class=\"conum\">(3)</b>\n\t\t    <span class=\"hljs-title function_\">expect</span>(x).<span class=\"hljs-property\">to</span>.<span class=\"hljs-property\">be</span>.<span class=\"hljs-title function_\">lessThan</span>(<span class=\"hljs-number\">1</span>)\n        })\n    })\n})</code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>It generates an array of 100 random numbers</p>\n</li>\n<li>\n<p>Iterate over the generated array</p>\n</li>\n<li>\n<p>Test case execution</p>\n</li>\n</ol>\n</div>\n<div class=\"imageblock text-center\">\n<div class=\"content\">\n<img src=\"/posts/cypress-parametrized-dynamic-tests/random-validation.png\" alt=\"Test results\">\n</div>\n<div class=\"title\">Figure 2. Test results</div>\n</div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Tip</div>\n</td>\n<td class=\"content\">\nPlease check the <a href=\"https://github.com/cypress-io/cypress-example-recipes/tree/master/examples/fundamentals__dynamic-tests\">cypress official examples to learn more about dynamic/parameterized testing</a>.\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>","props":{"title":"Parameterized Tests in Cypress","created":1609891200000,"modified":1609891200000,"filepath":"/Users/carlos.martin-sanchez/pers/carlosvin.github.io/static/posts/cypress-parametrized-dynamic-tests/cypress-parametrized-dynamic-tests.adoc","dirpath":"/Users/carlos.martin-sanchez/pers/carlosvin.github.io/static/posts/cypress-parametrized-dynamic-tests","keywords":["Testing","Cypress","Javascript"],"lang":"en","otherLangs":["es"],"slug":"cypress-parametrized-dynamic-tests","summary":"How to write parameterized tests in Cypress","author":"Carlos","previewimage":"/posts/cypress-parametrized-dynamic-tests/html-validation.png","path":"/langs/en/posts/cypress-parametrized-dynamic-tests"}}