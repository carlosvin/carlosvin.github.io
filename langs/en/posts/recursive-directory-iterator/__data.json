{"type":"data","nodes":[null,{"type":"data","data":[{"path":1,"lang":2,"translations":3,"version":14},"/langs/en/posts/recursive-directory-iterator/","en",{"lang":2,"author":4,"siteName":5,"siteDescription":6,"categories":7,"Categories":8,"RecentPosts":9,"NoPosts":10,"SubscribeTo":11,"AboutMe":12,"AllPosts":13},"Carlos Martin Sanchez","Carlos Say's Bla Bla","What is going on in my mind and its surroundings","categories","Categories","Recent posts","There are no posts","Subscribe to the feed","About me","All posts","1.0.1"],"uses":{"params":["lang"],"url":1},"slash":"always"},{"type":"data","data":[{"html":1,"props":2,"jsonLd":20},"\u003Cdiv id=\"toc\" class=\"toc\">\n\u003Cdiv id=\"toctitle\">Table of Contents\u003C/div>\n\u003Cul class=\"sectlevel1\">\n\u003Cli>\u003Ca href=\"#_introduction\">Introduction\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_gettting_started_with_experimental_filesystem_features_c17_g\">Gettting started with Experimental Filesystem Features C&#43;&#43;17 (g++)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_c17_filesystem_features\">C&#43;&#43;17 Filesystem Features\u003C/a>\n\u003Cul class=\"sectlevel2\">\n\u003Cli>\u003Ca href=\"#_stdfilesystempath\">std::filesystem::path\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_directory_separator\">Directory separator\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_directory_separator_operator\">Directory Separator Operator\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_createremove_directories\">Create/Remove Directories\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#_full_example_recursive_directory_iterator\">Full example: Recursive Directory Iterator\u003C/a>\n\u003Cul class=\"sectlevel2\">\n\u003Cli>\u003Ca href=\"#_c11\">C&#43;&#43;11\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_c17\">C&#43;&#43;17\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_introduction\">Introduction\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Since C&#43;&#43;17 new filesystem abstractions will be added to C&#43;&#43; environment. So far they are available as \u003Ca href=\"https://en.cppreference.com/w/cpp/experimental\">Experimental C&#43;&#43; Features\u003C/a>. If you want to dig more about this new library, here it is the \u003Ca href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4100.pdf\" target=\"_blank\" rel=\"noopener\">final draft of File System Technical Specification\u003C/a>.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_gettting_started_with_experimental_filesystem_features_c17_g\">Gettting started with Experimental Filesystem Features C&#43;&#43;17 (g++)\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>We just have to \"tell\" compiler that:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>we write C&#43;&#43;17 (\u003Ccode>-c++1z\u003C/code>) and\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>it has to add \u003Cem>standard library with filesystem library\u003C/em> (\u003Ccode>-lstdc++fs\u003C/code>).\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">g++ -std=c++1z main.cpp -lstdc++fs &amp;&amp; ./a.out\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Let&#8217;s see a simple example with \u003Ccode>std::filesystem::path\u003C/code> class.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;experimental/filesystem&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;iostream&gt;\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">namespace\u003C/span> fs = std::experimental::filesystem;\n\u003Cspan class=\"hljs-keyword\">using\u003C/span> \u003Cspan class=\"hljs-keyword\">namespace\u003C/span> std;\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    fs::path aPath {\u003Cspan class=\"hljs-string\">&quot;./path/to/file.txt&quot;\u003C/span>};\n\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;Parent path: &quot;\u003C/span> &lt;&lt; aPath.\u003Cspan class=\"hljs-built_in\">parent_path\u003C/span>() &lt;&lt; endl;\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;Filename: &quot;\u003C/span> &lt;&lt; aPath.\u003Cspan class=\"hljs-built_in\">filename\u003C/span>() &lt;&lt; endl;\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;Extension: &quot;\u003C/span> &lt;&lt; aPath.\u003Cspan class=\"hljs-built_in\">extension\u003C/span>() &lt;&lt; endl;\n\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">\u003Ca href=\"https://coliru.stacked-crooked.com/a/9f8bebb8b7f0fbe7\" target=\"_blank\" rel=\"noopener\">Compile and run: Basic C&#43;&#43;17 example\u003C/a>\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">$ g++ -std=c++1z main.cpp -lstdc++fs &amp;&amp; ./a.out\n$ ./a.out\n\nParent path: \u003Cspan class=\"hljs-string\">&quot;./path/to&quot;\u003C/span>\nFilename: \u003Cspan class=\"hljs-string\">&quot;file.txt&quot;\u003C/span>\nExtension: \u003Cspan class=\"hljs-string\">&quot;.txt&quot;\u003C/span>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_c17_filesystem_features\">C&#43;&#43;17 Filesystem Features\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>In this section, we are going to explain some \u003Ca href=\"https://en.cppreference.com/w/cpp/filesystem\" target=\"_blank\" rel=\"noopener\">std::filesystem\u003C/a> features with examples, which will help us to highlight differences between C&#43;&#43;11 and C&#43;&#43;17 so we can get a better idea about what this new library will supply and how it might make developer&#8217;s work easier.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_stdfilesystempath\">std::filesystem::path\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Upper we have seen a tiny \u003Ca href=\"https://coliru.stacked-crooked.com/a/9f8bebb8b7f0fbe7\" target=\"_blank\" rel=\"noopener\">use case for std::filesystem::path\u003C/a>. That is a quite powerful and convenient feature that supplies an multi-platform abstraction for paths to files using the correct directory path separator depending on the platform we are building our application for (\u003Ccode>\\\u003C/code> for Windows based systems and \u003Ccode>/\u003C/code> for Unix based systems).\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_directory_separator\">Directory separator\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>When we want our application to use the correct directory separator in C&#43;&#43;11, we could use conditional macro declaration:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Platform independent directory separator in C&#43;&#43;11\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;iostream&gt;\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">using\u003C/span> \u003Cspan class=\"hljs-keyword\">namespace\u003C/span> std;\n\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">ifdef\u003C/span> _WIN32\u003C/span>\n\u003Cspan class=\"hljs-type\">const\u003C/span> string SEP = \u003Cspan class=\"hljs-string\">&quot;\\\\&quot;\u003C/span>;\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">else\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-type\">const\u003C/span> string SEP = \u003Cspan class=\"hljs-string\">&quot;/&quot;\u003C/span>;\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">endif\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;Separator in my system &quot;\u003C/span> &lt;&lt; SEP &lt;&lt; endl;\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://coliru.stacked-crooked.com/a/5023ee989105fc54\" target=\"_blank\" rel=\"noopener\">Compile and run: C&#43;&#43;11 separator example\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Platform independent directory separator in C&#43;&#43;17. Cleaner and simpler.\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;experimental/filesystem&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;iostream&gt;\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">namespace\u003C/span> fs = std::experimental::filesystem;\n\u003Cspan class=\"hljs-keyword\">using\u003C/span> \u003Cspan class=\"hljs-keyword\">namespace\u003C/span> std;\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;Separator in my system &quot;\u003C/span> &lt;&lt; fs::path::preferred_separator &lt;&lt; endl;\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://coliru.stacked-crooked.com/a/1f2f63b3f5597d05\" target=\"_blank\" rel=\"noopener\">Compile and run: C&#43;&#43;17 separator example\u003C/a>.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_directory_separator_operator\">Directory Separator Operator\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://en.cppreference.com/w/cpp/filesystem/path\">std::filesystem::path\u003C/a> implements \u003Ccode>/\u003C/code> operator, which allows to easily concatenate paths to files and directories.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>When we want to concatenate paths in C&#43;&#43;11, we have to add extra logic to avoid adding duplicate separators and to select the correct separator for target platform:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Concatenate paths in C&#43;&#43;11\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;iostream&gt;\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">using\u003C/span> \u003Cspan class=\"hljs-keyword\">namespace\u003C/span> std;\n\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">ifdef\u003C/span> _WIN32\u003C/span>\n\u003Cspan class=\"hljs-type\">const\u003C/span> string SEP = \u003Cspan class=\"hljs-string\">&quot;\\\\&quot;\u003C/span>;\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">else\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-type\">const\u003C/span> string SEP = \u003Cspan class=\"hljs-string\">&quot;/&quot;\u003C/span>;\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">endif\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    string root {\u003Cspan class=\"hljs-string\">&quot;/&quot;\u003C/span>};\n    string dir {\u003Cspan class=\"hljs-string\">&quot;var/www/&quot;\u003C/span>};\n    string index {\u003Cspan class=\"hljs-string\">&quot;index.html&quot;\u003C/span>};\n\n    string pathToIndex{};\n    pathToIndex.\u003Cspan class=\"hljs-built_in\">append\u003C/span>(root).\u003Cspan class=\"hljs-built_in\">append\u003C/span>(SEP).\u003Cspan class=\"hljs-built_in\">append\u003C/span>(dir).\u003Cspan class=\"hljs-built_in\">append\u003C/span>(SEP).\u003Cspan class=\"hljs-built_in\">append\u003C/span>(index);\n\n    cout &lt;&lt; pathToIndex &lt;&lt; endl;\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">\u003Ca href=\"https://coliru.stacked-crooked.com/a/290b278ec1de9573\" target=\"_blank\" rel=\"noopener\">Compile and run: Concatenate paths in C&#43;&#43;11\u003C/a>\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">//var/www//index.html\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Checking program output we notice it is not fully correct, we should have checked whether path parts already contains a separator so we don&#8217;t append another separator again. That logic is already implemented in \u003Ca href=\"https://en.cppreference.com/w/cpp/filesystem/path\">std::filesystem::path\u003C/a>, so C&#43;&#43;17 can be like:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Concatenate paths in C&#43;&#43;17\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;experimental/filesystem&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;iostream&gt;\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">namespace\u003C/span> fs = std::experimental::filesystem;\n\u003Cspan class=\"hljs-keyword\">using\u003C/span> \u003Cspan class=\"hljs-keyword\">namespace\u003C/span> std;\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    fs::path root {\u003Cspan class=\"hljs-string\">&quot;/&quot;\u003C/span>};\n    fs::path dir {\u003Cspan class=\"hljs-string\">&quot;var/www/&quot;\u003C/span>};\n    fs::path index {\u003Cspan class=\"hljs-string\">&quot;index.html&quot;\u003C/span>};\n\n    fs::path pathToIndex = root / dir / index;\n\n    cout &lt;&lt; pathToIndex &lt;&lt; endl;\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">\u003Ca href=\"https://coliru.stacked-crooked.com/a/a24d50875b4daad1\">Compile and run: Concatenate paths in C&#43;&#43;17\u003C/a>.\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">\u003Cspan class=\"hljs-string\">&quot;/var/www/index.html&quot;\u003C/span>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Code is cleaner and just correct, there are no duplicated separators.\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_createremove_directories\">Create/Remove Directories\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://en.cppreference.com/w/cpp/filesystem\" target=\"_blank\" rel=\"noopener\">std::filesystem\u003C/a> comes with some utilities to create and remove files and directories, but firstly let&#8217;s try to do so in C&#43;&#43;11.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Create and remove nested directories in C&#43;&#43;11\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;iostream&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;cstdio&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;sys/stat.h&gt;\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">using\u003C/span> \u003Cspan class=\"hljs-keyword\">namespace\u003C/span> std;\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    \u003Cspan class=\"hljs-keyword\">auto\u003C/span> opts = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;\n    \u003Cspan class=\"hljs-built_in\">mkdir\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox&quot;\u003C/span>, opts);\n    \u003Cspan class=\"hljs-built_in\">mkdir\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/a&quot;\u003C/span>, opts);\n    \u003Cspan class=\"hljs-built_in\">mkdir\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/a/b&quot;\u003C/span>, opts);\n    \u003Cspan class=\"hljs-built_in\">mkdir\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/c&quot;\u003C/span>, opts);\n    \u003Cspan class=\"hljs-built_in\">mkdir\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/c/d&quot;\u003C/span>, opts);\n\n    \u003Cspan class=\"hljs-built_in\">system\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;ls -la sandbox/*&quot;\u003C/span>);\n\n    \u003Cspan class=\"hljs-built_in\">remove\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/c/d&quot;\u003C/span>);\n    \u003Cspan class=\"hljs-built_in\">remove\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/a/b&quot;\u003C/span>);\n    \u003Cspan class=\"hljs-built_in\">remove\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/c&quot;\u003C/span>);\n    \u003Cspan class=\"hljs-built_in\">remove\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/a&quot;\u003C/span>);\n    \u003Cspan class=\"hljs-built_in\">remove\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox&quot;\u003C/span>);\n\n    \u003Cspan class=\"hljs-built_in\">system\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;ls -la&quot;\u003C/span>);\n\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">\u003Ca href=\"https://coliru.stacked-crooked.com/a/26f4763ec5b42adb\">Compile and run: Create and remove directories C&#43;&#43;11\u003C/a>.\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">g++-4.9 -std=c++11 main.cpp -lm &amp;&amp; ./a.out\nsandbox/a:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 12:27 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 12:27 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 12:27 b\n\nsandbox/c:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 12:27 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 12:27 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 12:27 d\ntotal 8012\ndrwxrwxrwx 2 2001 2000    4096 May 28 12:27 .\ndrwxrwxrwx 3 2002 2000 8175616 May 28 12:27 ..\n-rwxr-xr-x 1 2001 2000    8168 May 28 12:27 a.out\n-rw-rw-rw- 1 2001 2000     517 May 28 12:27 main.cpp\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>We have to create/remove one by one. We could rewrite this code snippet with less lines (using a loop), but we still have to pay attention to creation/deletion order, we cannot remove parent directory before we have removed all children.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Since C&#43;&#43;17, we can create and remove nested directories with just one call.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Create and remove nested directories C&#43;&#43;17\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;experimental/filesystem&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;iostream&gt;\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">namespace\u003C/span> fs = std::experimental::filesystem;\n\u003Cspan class=\"hljs-keyword\">using\u003C/span> \u003Cspan class=\"hljs-keyword\">namespace\u003C/span> std;\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    fs::\u003Cspan class=\"hljs-built_in\">create_directories\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/a/b&quot;\u003C/span>);\n    fs::\u003Cspan class=\"hljs-built_in\">create_directories\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/c/d&quot;\u003C/span>);\n    \u003Cspan class=\"hljs-built_in\">system\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;ls -la sandbox/*&quot;\u003C/span>);\n\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;Were directories removed? &quot;\u003C/span> &lt;&lt; fs::\u003Cspan class=\"hljs-built_in\">remove_all\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox&quot;\u003C/span>) &lt;&lt; endl;\n    \u003Cspan class=\"hljs-built_in\">system\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;ls -la&quot;\u003C/span>);\n\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">\u003Ca href=\"https://coliru.stacked-crooked.com/a/62c2d22fa0e7144c\">Compile and run: Create and remove nested directories C&#43;&#43;17\u003C/a>.\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">g++ -std=c++1z -fconcepts -fgnu-tm  -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;&amp; ./a.out\nsandbox/a:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 16:45 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 16:45 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 16:45 b\n\nsandbox/c:\ntotal 12\ndrwxr-xr-x 3 2001 2000 4096 May 28 16:45 .\ndrwxr-xr-x 4 2001 2000 4096 May 28 16:45 ..\ndrwxr-xr-x 2 2001 2000 4096 May 28 16:45 d\nWere directories removed? 1\ntotal 10132\ndrwxrwxrwx 2 2001 2000    4096 May 28 16:45 .\ndrwxrwxrwx 3 2002 2000 8175616 May 28 16:45 ..\n-rwxr-xr-x 1 2001 2000 2170976 May 28 16:45 a.out\n-rw-rw-rw- 1 2001 2000     393 May 28 16:45 main.cpp\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_full_example_recursive_directory_iterator\">Full example: Recursive Directory Iterator\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>This example consists of iterate recursively through dicrectories fintering files by extension.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_c11\">C&#43;&#43;11\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>To keep C&#43;&#43;11 example simple, I haven&#8217;t added filtering  logic, but filtering logic is present in C&#43;&#43;17 example:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">filesystem.11.cpp\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;dirent.h&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;cstring&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;iostream&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;fstream&gt;\u003C/span> \u003Cspan class=\"hljs-comment\">// std::ofstream\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;vector&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;memory&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;system_error&gt;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;sys/stat.h&gt;\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">using\u003C/span> \u003Cspan class=\"hljs-keyword\">namespace\u003C/span> std;\n\n\u003Cspan class=\"hljs-type\">const\u003C/span> string UP_DIR = \u003Cspan class=\"hljs-string\">&quot;..&quot;\u003C/span>;\n\u003Cspan class=\"hljs-type\">const\u003C/span> string CURRENT_DIR = \u003Cspan class=\"hljs-string\">&quot;.&quot;\u003C/span>;\n\u003Cspan class=\"hljs-type\">const\u003C/span> string SEP = \u003Cspan class=\"hljs-string\">&quot;/&quot;\u003C/span>;\n\n\n\u003Cspan class=\"hljs-function\">string \u003Cspan class=\"hljs-title\">path\u003C/span>\u003Cspan class=\"hljs-params\">(initializer_list&lt;string&gt; parts)\u003C/span>\n\u003C/span>{\n    string pathTmp {};\n    string separator = \u003Cspan class=\"hljs-string\">&quot;&quot;\u003C/span>;\n    \u003Cspan class=\"hljs-keyword\">for\u003C/span> (\u003Cspan class=\"hljs-keyword\">auto\u003C/span> &amp; part: parts)\n    {\n        pathTmp.\u003Cspan class=\"hljs-built_in\">append\u003C/span>(separator).\u003Cspan class=\"hljs-built_in\">append\u003C/span>(part);\n        separator = SEP;\n    }\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> pathTmp;\n}\n\n\u003Cspan class=\"hljs-function\">vector&lt;string&gt; \u003Cspan class=\"hljs-title\">getDirectoryFiles\u003C/span>\u003Cspan class=\"hljs-params\">(\u003Cspan class=\"hljs-type\">const\u003C/span> string&amp; dir, \u003Cspan class=\"hljs-type\">const\u003C/span> vector&lt;string&gt; &amp; extensions)\u003C/span>\n\u003C/span>{\n    vector&lt;string&gt; files;\n    \u003Cspan class=\"hljs-function\">shared_ptr&lt;DIR&gt; \u003Cspan class=\"hljs-title\">directory_ptr\u003C/span>\u003Cspan class=\"hljs-params\">(opendir(dir.c_str()), [](DIR* dir){ dir &amp;&amp; closedir(dir); })\u003C/span>\u003C/span>;\n    \u003Cspan class=\"hljs-keyword\">if\u003C/span> (!directory_ptr)\n    {\n        \u003Cspan class=\"hljs-keyword\">throw\u003C/span> \u003Cspan class=\"hljs-built_in\">system_error\u003C/span>(\u003Cspan class=\"hljs-built_in\">error_code\u003C/span>(errno, \u003Cspan class=\"hljs-built_in\">system_category\u003C/span>()), \u003Cspan class=\"hljs-string\">&quot;Error opening : &quot;\u003C/span> + dir);\n    }\n\n    \u003Cspan class=\"hljs-keyword\">struct\u003C/span> \u003Cspan class=\"hljs-title class_\">dirent\u003C/span> *dirent_ptr;\n    \u003Cspan class=\"hljs-keyword\">while\u003C/span> ((dirent_ptr = \u003Cspan class=\"hljs-built_in\">readdir\u003C/span>(directory_ptr.\u003Cspan class=\"hljs-built_in\">get\u003C/span>())) != \u003Cspan class=\"hljs-literal\">nullptr\u003C/span>)\n    {\n        \u003Cspan class=\"hljs-type\">const\u003C/span> string fileName {dirent_ptr-&gt;d_name};\n        \u003Cspan class=\"hljs-keyword\">if\u003C/span> (dirent_ptr-&gt;d_type == DT_DIR)\n        {\n            \u003Cspan class=\"hljs-keyword\">if\u003C/span> (CURRENT_DIR != fileName &amp;&amp; UP_DIR != fileName)\n            {\n                \u003Cspan class=\"hljs-keyword\">auto\u003C/span> subFiles = \u003Cspan class=\"hljs-built_in\">getDirectoryFiles\u003C/span>(\u003Cspan class=\"hljs-built_in\">path\u003C/span>({dir, fileName}), extensions);\n                files.\u003Cspan class=\"hljs-built_in\">insert\u003C/span>(\u003Cspan class=\"hljs-built_in\">end\u003C/span>(files), \u003Cspan class=\"hljs-built_in\">begin\u003C/span>(subFiles), \u003Cspan class=\"hljs-built_in\">end\u003C/span>(subFiles));\n            }\n        }\n        \u003Cspan class=\"hljs-keyword\">else\u003C/span> \u003Cspan class=\"hljs-keyword\">if\u003C/span> (dirent_ptr-&gt;d_type == DT_REG)\n        {\n            \u003Cspan class=\"hljs-comment\">// here we should check also if filename has an extension in extensions vector\u003C/span>\n            files.\u003Cspan class=\"hljs-built_in\">push_back\u003C/span>(\u003Cspan class=\"hljs-built_in\">path\u003C/span>({dir, fileName}));\n        }\n    }\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> files;\n}\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span> \u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    \u003Cspan class=\"hljs-keyword\">auto\u003C/span> opt = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;\n    \u003Cspan class=\"hljs-built_in\">mkdir\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox&quot;\u003C/span>, opt);\n    \u003Cspan class=\"hljs-built_in\">mkdir\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/a&quot;\u003C/span>, opt);\n    \u003Cspan class=\"hljs-built_in\">mkdir\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/a/b&quot;\u003C/span>, opt);\n\n\tvector&lt;string&gt; e_files = {\n\t    \u003Cspan class=\"hljs-string\">&quot;./sandbox/a/b/file1.rst&quot;\u003C/span>,\n\t    \u003Cspan class=\"hljs-string\">&quot;./sandbox/a/b/file1.txt&quot;\u003C/span>,\n\t    \u003Cspan class=\"hljs-string\">&quot;./sandbox/a/file2.RST&quot;\u003C/span>,\n\t    \u003Cspan class=\"hljs-string\">&quot;./sandbox/file3.md&quot;\u003C/span>,\n\t    \u003Cspan class=\"hljs-string\">&quot;./sandbox/will_be.ignored&quot;\u003C/span>\n\t};\n\n\t\u003Cspan class=\"hljs-comment\">// create files\u003C/span>\n\t\u003Cspan class=\"hljs-keyword\">for\u003C/span> (\u003Cspan class=\"hljs-keyword\">auto\u003C/span> &amp;f: e_files)\n\t{\n\t\t\u003Cspan class=\"hljs-function\">ofstream \u003Cspan class=\"hljs-title\">of\u003C/span>\u003Cspan class=\"hljs-params\">(f, ofstream::out)\u003C/span>\u003C/span>;\n\t\tof &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;test&quot;\u003C/span>;\n\t}\n\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;filtered files: &quot;\u003C/span> &lt;&lt; endl;\n\t\u003Cspan class=\"hljs-keyword\">for\u003C/span> (\u003Cspan class=\"hljs-keyword\">auto\u003C/span> &amp;f: \u003Cspan class=\"hljs-built_in\">getDirectoryFiles\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;.&quot;\u003C/span>, {\u003Cspan class=\"hljs-string\">&quot;.rst&quot;\u003C/span>, \u003Cspan class=\"hljs-string\">&quot;.RST&quot;\u003C/span>, \u003Cspan class=\"hljs-string\">&quot;.md&quot;\u003C/span>})){\n\t    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;\\t&quot;\u003C/span> &lt;&lt; f &lt;&lt; endl;\n\t}\n\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">\u003Ca href=\"https://coliru.stacked-crooked.com/a/af4228e039a281b3\" target=\"_blank\" rel=\"noopener\">Compile and run C&#43;&#43;11 example\u003C/a>.\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">g++ -std=c++11 -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;&amp; ./a.out\nfiltered files:\n\t./main.cpp\n\t./sandbox/file3.md\n\t./sandbox/will_be.ignored\n\t./sandbox/a/b/file1.rst\n\t./sandbox/a/b/file1.txt\n\t./sandbox/a/file2.RST\n\t./a.out\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_c17\">C&#43;&#43;17\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Following example also filters files by extension.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">filesystem.17.cpp\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">\u003Cspan class=\"hljs-comment\">#include &lt;dirent.h&gt;\u003C/span>\n\u003Cspan class=\"hljs-comment\">#include &lt;cstring&gt;\u003C/span>\n\u003Cspan class=\"hljs-comment\">#include &lt;iostream&gt;\u003C/span>\n\u003Cspan class=\"hljs-comment\">#include &lt;fstream&gt; // std::ofstream\u003C/span>\n\u003Cspan class=\"hljs-comment\">#include &lt;vector&gt;\u003C/span>\n\u003Cspan class=\"hljs-comment\">#include &lt;memory&gt;\u003C/span>\n\u003Cspan class=\"hljs-comment\">#include &lt;system_error&gt;\u003C/span>\n\u003Cspan class=\"hljs-comment\">#include &lt;sys/stat.h&gt;\u003C/span>\n\nusing namespace std;\n\nconst string UP_DIR = \u003Cspan class=\"hljs-string\">&quot;..&quot;\u003C/span>;\nconst string CURRENT_DIR = \u003Cspan class=\"hljs-string\">&quot;.&quot;\u003C/span>;\nconst string SEP = \u003Cspan class=\"hljs-string\">&quot;/&quot;\u003C/span>;\n\n\nstring path(initializer_list&lt;string&gt; parts)\n{\n    string pathTmp {};\n    string separator = \u003Cspan class=\"hljs-string\">&quot;&quot;\u003C/span>;\n    \u003Cspan class=\"hljs-keyword\">for\u003C/span> (auto &amp; part: parts)\n    {\n        pathTmp.append(separator).append(part);\n        separator = SEP;\n    }\n    \u003Cspan class=\"hljs-built_in\">return\u003C/span> pathTmp;\n}\n\nvector&lt;string&gt; getDirectoryFiles(const string&amp; \u003Cspan class=\"hljs-built_in\">dir\u003C/span>, const vector&lt;string&gt; &amp; extensions)\n{\n    vector&lt;string&gt; files;\n    shared_ptr&lt;DIR&gt; directory_ptr(opendir(dir.c_str()), [](DIR* \u003Cspan class=\"hljs-built_in\">dir\u003C/span>){ \u003Cspan class=\"hljs-built_in\">dir\u003C/span> &amp;&amp; closedir(\u003Cspan class=\"hljs-built_in\">dir\u003C/span>); });\n    \u003Cspan class=\"hljs-keyword\">if\u003C/span> (!directory_ptr)\n    {\n        throw system_error(error_code(errno, system_category()), \u003Cspan class=\"hljs-string\">&quot;Error opening : &quot;\u003C/span> + \u003Cspan class=\"hljs-built_in\">dir\u003C/span>);\n    }\n\n    struct dirent *dirent_ptr;\n    \u003Cspan class=\"hljs-keyword\">while\u003C/span> ((dirent_ptr = readdir(directory_ptr.get())) != nullptr)\n    {\n        const string fileName {dirent_ptr-&gt;d_name};\n        \u003Cspan class=\"hljs-keyword\">if\u003C/span> (dirent_ptr-&gt;d_type == DT_DIR)\n        {\n            \u003Cspan class=\"hljs-keyword\">if\u003C/span> (CURRENT_DIR != fileName &amp;&amp; UP_DIR != fileName)\n            {\n                auto subFiles = getDirectoryFiles(path({\u003Cspan class=\"hljs-built_in\">dir\u003C/span>, fileName}), extensions);\n                files.insert(end(files), begin(subFiles), end(subFiles));\n            }\n        }\n        \u003Cspan class=\"hljs-keyword\">else\u003C/span> \u003Cspan class=\"hljs-keyword\">if\u003C/span> (dirent_ptr-&gt;d_type == DT_REG)\n        {\n            // here we should check also \u003Cspan class=\"hljs-keyword\">if\u003C/span> filename has an extension \u003Cspan class=\"hljs-keyword\">in\u003C/span> extensions vector\n            files.push_back(path({\u003Cspan class=\"hljs-built_in\">dir\u003C/span>, fileName}));\n        }\n    }\n    \u003Cspan class=\"hljs-built_in\">return\u003C/span> files;\n}\n\nint \u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-title\">main\u003C/span>\u003C/span> ()\n{\n    auto opt = S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH;\n    \u003Cspan class=\"hljs-built_in\">mkdir\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox&quot;\u003C/span>, opt);\n    \u003Cspan class=\"hljs-built_in\">mkdir\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/a&quot;\u003C/span>, opt);\n    \u003Cspan class=\"hljs-built_in\">mkdir\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;sandbox/a/b&quot;\u003C/span>, opt);\n\n\tvector&lt;string&gt; e_files = {\n\t    \u003Cspan class=\"hljs-string\">&quot;./sandbox/a/b/file1.rst&quot;\u003C/span>,\n\t    \u003Cspan class=\"hljs-string\">&quot;./sandbox/a/b/file1.txt&quot;\u003C/span>,\n\t    \u003Cspan class=\"hljs-string\">&quot;./sandbox/a/file2.RST&quot;\u003C/span>,\n\t    \u003Cspan class=\"hljs-string\">&quot;./sandbox/file3.md&quot;\u003C/span>,\n\t    \u003Cspan class=\"hljs-string\">&quot;./sandbox/will_be.ignored&quot;\u003C/span>\n\t};\n\n\t// create files\n\t\u003Cspan class=\"hljs-keyword\">for\u003C/span> (auto &amp;f: e_files)\n\t{\n\t\tofstream of(f, ofstream::out);\n\t\tof &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;test&quot;\u003C/span>;\n\t}\n\n    cout &lt;&lt; \u003Cspan class=\"hljs-string\">&quot;filtered files: &quot;\u003C/span> &lt;&lt; \u003Cspan class=\"hljs-string\">endl;\n\tfor (auto &amp;f: getDirectoryFiles(&quot;.&quot;, {&quot;.rst&quot;, &quot;.RST&quot;, &quot;.md&quot;})){\n\t    cout &lt;&lt; &quot;\\t&quot; &lt;&lt; f &lt;&lt; endl\u003C/span>;\n\t}\n\n    \u003Cspan class=\"hljs-built_in\">return\u003C/span> 0;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">\u003Ca href=\"https://coliru.stacked-crooked.com/a/af4228e039a281b3\" target=\"_blank\" rel=\"noopener\">Compile and run C&#43;&#43;17 example\u003C/a>.\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">g++ -std=c++11 -O2 -Wall -Wextra -pedantic -pthread -pedantic-errors main.cpp -lm  -latomic -lstdc++fs &amp;&amp; ./a.out\nfiltered files:\n\t./main.cpp\n\t./sandbox/file3.md\n\t./sandbox/will_be.ignored\n\t./sandbox/a/b/file1.rst\n\t./sandbox/a/b/file1.txt\n\t./sandbox/a/file2.RST\n\t./a.out\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>",{"title":3,"lang":4,"summary":5,"slug":6,"keywords":7,"filepath":13,"dirpath":14,"created":15,"modified":15,"otherLangs":16,"author":18,"previewimage":-1,"path":19},"Filesystem in C++17","en","We are going to analyze with examples new filesystem features coming with C++17","recursive-directory-iterator",[8,9,10,11,12],"C++","C++11","C++17","IO","Filesystem","/static/posts/recursive-directory-iterator.en.adoc","/static/posts",1495954800000,[17],"es","Carlos Martin Sanchez","/langs/en/posts/recursive-directory-iterator","\u003Cscript type=\"application/ld+json\">{\"@context\":\"https://schema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"Webpage\",\"@id\":\"https://google.com/article\"},\"headline\":\"Filesystem in C++17\",\"alternativeHeadline\":\"We are going to analyze with examples new filesystem features coming with C++17\",\"description\":\"We are going to analyze with examples new filesystem features coming with C++17\",\"datePublished\":\"2017-05-28T07:00:00.000Z\",\"dateModified\":\"2017-05-28T07:00:00.000Z\",\"keywords\":[\"C++\",\"C++11\",\"C++17\",\"IO\",\"Filesystem\"],\"author\":{\"@type\":\"Person\",\"name\":\"Carlos Martin Sanchez\"},\"publisher\":{\"@type\":\"Person\",\"name\":\"Carlos Martin Sanchez\"}}\u003C/script>"],"uses":{"params":["slug","lang"]}}]}
