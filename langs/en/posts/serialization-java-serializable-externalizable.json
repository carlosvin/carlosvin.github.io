{"html":"<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#_serializable\">Serializable</a></li>\n<li><a href=\"#_externalizable\">Externalizable</a></li>\n<li><a href=\"#_performance_tests_serializable_vs_externalizable\">Performance tests (Serializable vs. Externalizable)</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#_implementing_serializable\">Implementing Serializable</a></li>\n<li><a href=\"#_implementing_externalizable_wrong_way\">Implementing Externalizable (wrong way)</a></li>\n<li><a href=\"#_implementing_externalizable_right_way\">Implementing Externalizable (right way)</a></li>\n<li><a href=\"#_results_analysis\">Results Analysis</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Recently I&#8217;ve had to serialize/deserialize some data in <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> binary format. Lately I use <a href=\"https://www.json.org\" target=\"_blank\" rel=\"noopener\">JSON</a> or <a href=\"https://en.wikipedia.org/wiki/XML\" target=\"_blank\" rel=\"noopener\">XML</a> formats.</p>\n</div>\n<div class=\"paragraph\">\n<p>I remember that to serialize <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> objects they must implement the <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\" target=\"_blank\" rel=\"noopener\">Serializable</a> interface, but I had also read in Internet other way, implementing the <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html\" target=\"_blank\" rel=\"noopener\">Externalizable</a> interface, then, which interface must I implement? It depends on what you want such as everything in the life.</p>\n</div>\n<div class=\"paragraph\">\n<p>When to use <a href=\"#_serializable\">Serializable</a> or <a href=\"#_externalizable\">Externalizable</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_serializable\">Serializable</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>To serialize easily. You have to write less code.</p>\n</li>\n<li>\n<p>This way has some restrictions: The object to serialize must implement the default constructor (0 args). It must be responsible to manage the parent class attributes.</p>\n</li>\n<li>\n<p>The performance is not as important, we will see more about that in <a href=\"#_performance_tests_serializable_vs_externalizable\">Performance tests (Serializable vs. Externalizable)</a>.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_externalizable\">Externalizable</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>You must implement the serialization/deserialization methods, so you have to write more code.</p>\n</li>\n<li>\n<p>When you cannot use <a href=\"#_serializable\">Serializable</a>.</p>\n</li>\n<li>\n<p>When you want to improve the performance, as we&#8217;ll see in <a href=\"#_performance_tests_serializable_vs_externalizable\">Performance tests (Serializable vs. Externalizable)</a>.</p>\n</li>\n<li>\n<p>If you have to manage the serialization of parent class attributes, then I recommend you use <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html\" target=\"_blank\" rel=\"noopener\">Externalizable</a>, because we&#8217;ll avoid a weird private methods overriding.</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeObject</span><span class=\"hljs-params\">(ObjectOutputStream oos)</span>\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readObject</span><span class=\"hljs-params\">(ObjectInputStream ois)</span></span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_performance_tests_serializable_vs_externalizable\">Performance tests (Serializable vs. Externalizable)</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"#_serializable\">Serializable</a>: Java, through introspection, guesses the types of class attributes to know how to serialize/deserialize them, but this \"magic\" is not free, it has a performance penalty.</p>\n</div>\n<div class=\"paragraph\">\n<p>When we use <a href=\"#_externalizable\">Externalizable</a> interface, we decide how to serialize/deserialize, namely we have to write the code that does it. We&#8217;ve lost ease, but also we avoid that <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> does some tasks, so if we override the methods properly, we&#8217;ll get a performance improvement.</p>\n</div>\n<div class=\"paragraph\">\n<p>To know how big is the performance difference between both interfaces, I&#8217;ve written a <a href=\"https://github.com/carlosvin/serializations-performance-java\" target=\"_blank\" rel=\"noopener\">tiny example in which we serialize an object with 2 collections with 100000 elements each one</a>. Here you can find the <a href=\"http://carlosvin.github.io/serializations-performance-java/classes/com.github.carlosvin.contacts.SerializationTest.html\" target=\"_blank\" rel=\"noopener\">tests execution results</a>. There are 3 different implementations:</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_implementing_serializable\">Implementing Serializable</h3>\n<div class=\"paragraph\">\n<p>As we mentioned above, <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> has to guess certain things. During this process it sacrifices some of performance (slowest way), in exchange we get really simple source code, the class to serialize just has to implement the <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\" target=\"_blank\" rel=\"noopener\">Serializable</a> interface.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Contacts</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Serializable</span> </span>{\n  <span class=\"hljs-comment\">// ...</span>\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>serializing: 1133 millisecond</p>\n</li>\n<li>\n<p>deserializing: 506 millisecond</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_implementing_externalizable_wrong_way\">Implementing Externalizable (wrong way)</h3>\n<div class=\"paragraph\">\n<p>If the class implements <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Externalizable.html\" target=\"_blank\" rel=\"noopener\">Externalizable</a>, we must tell to <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> how it has to serialize/deserialize the class attributes. We just have to be careful, because if we did it bad, then we&#8217;ll get the worst of the both worlds: more complex implementation and bad performance, i.e: If we serialize/deserialize complex class attributes (like collections), <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> will also have to guess many things about the attributes type.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readExternal</span><span class=\"hljs-params\">(ObjectInput in)</span> <span class=\"hljs-keyword\">throws</span> IOException, ClassNotFoundException </span>{\n  setEmails((Set&lt;String&gt;) in.readObject());\n  setPhones((Set&lt;String&gt;) in.readObject());\n}\n\n<span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeExternal</span><span class=\"hljs-params\">(ObjectOutput out)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n  out.writeObject(emails);\n  out.writeObject(phones);\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>serializing: 737 millisecond</p>\n</li>\n<li>\n<p>deserializing: 367 millisecond</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_implementing_externalizable_right_way\">Implementing Externalizable (right way)</h3>\n<div class=\"paragraph\">\n<p>If we serialize one by one the collection elements, then we&#8217;ll save more time, because <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> serializes simple types, this way avoids guessing things that we actually know.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\"><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readExternal</span><span class=\"hljs-params\">(ObjectInput in)</span> <span class=\"hljs-keyword\">throws</span> IOException, ClassNotFoundException </span>{\n  emails.clear();\n  phones.clear();\n  <span class=\"hljs-keyword\">int</span> nEmails = in.readInt();\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nEmails; i++) {\n    emails.add(in.readUTF());\n  }\n  <span class=\"hljs-keyword\">int</span> nPhones = in.readInt();\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nPhones; i++) {\n    phones.add(in.readUTF());\n  }\n}\n\n<span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeExternal</span><span class=\"hljs-params\">(ObjectOutput out)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n  out.writeInt(emails.size());\n  <span class=\"hljs-keyword\">for</span> (String e : emails) {\n    out.writeUTF(e);\n  }\n  out.writeInt(phones.size());\n  <span class=\"hljs-keyword\">for</span> (String p : phones) {\n    out.writeUTF(p);\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>serializing: 204 millisecond</p>\n</li>\n<li>\n<p>deserializing: 92 millisecond</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>We&#8217;ve gained performance at expense of write more code.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_results_analysis\">Results Analysis</h3>\n<div class=\"paragraph\">\n<p>We don&#8217;t gain performance due to use an interface or the other one.</p>\n</div>\n<div class=\"paragraph\">\n<p>We gain performance because <a href=\"#_externalizable\">Externalizable</a> interface forces us to implement ourselves the guessing code, so <a href=\"https://www.java.com\" target=\"_blank\" rel=\"noopener\">Java</a> doesn&#8217;t have to do that.</p>\n</div>\n<div class=\"paragraph\">\n<p>As we have seen at <a href=\"#_implementing_externalizable_wrong_way\">Implementing Externalizable (wrong way)</a>, si no tenemos cuidado, conseguiremos una mejora poco significativa a costa de complicar nuestro código fuente.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"http://carlosvin.github.io/serializations-performance-java/classes/com.github.carlosvin.contacts.SerializationTest.html\" target=\"_blank\" rel=\"noopener\">Test results</a>.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/carlosvin/serializations-performance-java/\">Code in Github</a>.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>","props":{"title":"Java serialization ways: Performance Comparison","created":1399993200000,"modified":1399993200000,"filepath":"/home/carlos/workspace/carlosvin.github.io/static/posts/serialization-java-serializable-externalizable.en.adoc","dirpath":"/home/carlos/workspace/carlosvin.github.io/static/posts","keywords":["Java","Performance"],"lang":"en","otherLangs":["es"],"slug":"serialization-java-serializable-externalizable","summary":"Java serialization ways, performance comparison","author":"Carlos Martin Sanchez","path":"/langs/en/posts/serialization-java-serializable-externalizable"}}