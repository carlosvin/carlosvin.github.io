{"type":"data","nodes":[null,{"type":"data","data":[{"path":1,"lang":2,"translations":3},"/langs/en/posts/choosing-modern-cpp-stack/","en",{"lang":2,"author":4,"siteName":5,"siteDescription":6,"categories":7,"Categories":8,"RecentPosts":9,"NoPosts":10,"SubscribeTo":11,"AboutMe":12,"AllPosts":13},"Carlos Martin Sanchez","Carlos Say's Bla Bla","What is going on in my mind and its surroundings","categories","Categories","Recent posts","There are no posts","Subscribe to the feed","About me","All posts"],"uses":{"params":["lang"],"url":1},"slash":"always"},{"type":"data","data":[{"html":1,"props":2,"jsonLd":21},"\u003Cdiv id=\"toc\" class=\"toc\">\n\u003Cdiv id=\"toctitle\">Table of Contents\u003C/div>\n\u003Cul class=\"sectlevel1\">\n\u003Cli>\u003Ca href=\"#_choosing_build_system_meson\">Choosing Build System (Meson)\u003C/a>\n\u003Cul class=\"sectlevel2\">\n\u003Cli>\u003Ca href=\"#_cmake_vs_meson\">CMake vs Meson\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_other_build_systems_comparisons\">Other build systems comparisons\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#_unit_testing_framework\">Unit Testing Framework\u003C/a>\n\u003Cul class=\"sectlevel2\">\n\u003Cli>\u003Ca href=\"#_doctest_a_catch_alternative\">doctest: A Catch alternative\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#_example\">Example\u003C/a>\n\u003Cul class=\"sectlevel2\">\n\u003Cli>\u003Ca href=\"#_project_output_artifacts\">Project output artifacts\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#_project_structure_fork_project\">Project structure (Fork project)\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv id=\"preamble\">\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>I&#8217;m starting a new project in C++, but I&#8217;ve run into a couple of questions before starting:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"olist arabic\">\n\u003Col class=\"arabic\">\n\u003Cli>\n\u003Cp>Which build system should I use?\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Which unit testing framework?\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003Cdiv class=\"admonitionblock tip\">\n\u003Ctable>\n\u003Ctr>\n\u003Ctd class=\"icon\">\n\u003Cdiv class=\"title\">Tip\u003C/div>\n\u003C/td>\n\u003Ctd class=\"content\">\nIf you just want project template so you can have a C++ project skeleton ready in seconds, just go to \u003Ca href=\"https://github.com/carlosvin/uuid-cpp\" class=\"bare\">https://github.com/carlosvin/uuid-cpp\u003C/a> and follow the \u003Ca href=\"https://github.com/carlosvin/uuid-cpp/blob/master/README.md\" target=\"blank_\">instructions in README.md\u003C/a>.\n\u003C/td>\n\u003C/tr>\n\u003C/table>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_choosing_build_system_meson\">Choosing Build System (\u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a>)\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>I have used before \u003Ca href=\"https://www.gnu.org/software/make/manual/make.html\" target=\"_blank\" rel=\"noopener\">Make\u003C/a>, \u003Ca href=\"https://maven.apache.org/\" target=\"_blank\" rel=\"noopener\">Maven\u003C/a>, \u003Ca href=\"https://scons.org/\" target=\"_blank\" rel=\"noopener\">Scons\u003C/a>, \u003Ca href=\"https://gradle.org/\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a> and \u003Ca href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html\" target=\"_blank\" rel=\"noopener\">Autotools\u003C/a>, but I have some reasons to try find something else:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html\" target=\"_blank\" rel=\"noopener\">Autotools\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>It is not easy to configure and maintain. There are several configuration files and several configuration steps.\u003C/p>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://gradle.org/\" target=\"_blank\" rel=\"noopener\">Gradle\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>CPP feature is still incubating. Not very fast. You can check a similar example project at \u003Ca href=\"/langs/en/posts/gradle-cpp\" target=\"_blank\" rel=\"noopener\">Build C++ project with Gradle\u003C/a>.\u003C/p>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://www.gnu.org/software/make/manual/make.html\" target=\"_blank\" rel=\"noopener\">Make\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>I don&#8217;t love the syntax. Files tends to get messy as project grows.\u003C/p>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://scons.org/\" target=\"_blank\" rel=\"noopener\">Scons\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>It is just slower and not as easy to understand than \u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a>.\u003C/p>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://maven.apache.org/\" target=\"_blank\" rel=\"noopener\">Maven\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>It is slow and you might end up \"\u003Cem>Javatizing\u003C/em>\" your C++ project structure.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003Cdiv class=\"admonitionblock note\">\n\u003Ctable>\n\u003Ctr>\n\u003Ctd class=\"icon\">\n\u003Cdiv class=\"title\">Note\u003C/div>\n\u003C/td>\n\u003Ctd class=\"content\">\nI&#8217;ve listed just things I don&#8217;t like, those projects have other great features.\n\u003C/td>\n\u003C/tr>\n\u003C/table>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_cmake_vs_meson\">\u003Ca href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake\u003C/a> vs \u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a>\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>After discarding previous ones, I&#8217;m considering \u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a> or \u003Ca href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake\u003C/a>. Both are fast build systems:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>Although \u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a> is written in \u003Ca href=\"https://python.org/\" target=\"_blank\" rel=\"noopener\">Python\u003C/a>, it generates a \u003Ca href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja\u003C/a> build project. First time you configure the project you have to run \u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a>, but for building or testing you are actually running \u003Ca href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake\u003C/a> is also able to generate \u003Ca href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja\u003C/a> files among other formats, \u003Ca href=\"https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html\">check CMake generators documentation for more information\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>It has a big advantage over \u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a>, it is mature and widely used in many projects, which means there are many examples and it will fulfill your C++ project building needs.\u003C/p>\n\u003C/dd>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>It is a young project compared with \u003Ca href=\"https://cmake.org/\" target=\"_blank\" rel=\"noopener\">CMake\u003C/a>, but it is growing quite fast and it has been adopted in other big projects like \u003Ca href=\"\">Gnome\u003C/a>, they have an initiative to \u003Ca href=\"https://wiki.gnome.org/Initiatives/GnomeGoals/MesonPorting\">port from Autotools to Meson\u003C/a>.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Cstrong>Finally I&#8217;ve chosen\u003C/strong> \u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a> because syntax is really clear to me, when I read \u003Ccode>meson.build\u003C/code> file I can quickly understand what is happening during build process.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Steps to compile and test a project\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">$ meson build .  \u003Cb class=\"conum\">(1)\u003C/b>\n$ \u003Cspan class=\"hljs-built_in\">cd\u003C/span> build\n$ ninja build    \u003Cb class=\"conum\">(2)\u003C/b>\n$ ninja \u003Cspan class=\"hljs-built_in\">test\u003C/span>     \u003Cb class=\"conum\">(3)\u003C/b>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"colist arabic\">\n\u003Col>\n\u003Cli>\n\u003Cp>First time you configure the project\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Each time you build it\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Each time you run tests\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_other_build_systems_comparisons\">Other build systems comparisons\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>I&#8217;ve found two interesting comparisons about available C++ build systems, they might be a little be biased because those comparisons come from \u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a> and \u003Ca href=\"https://scons.org/\" target=\"_blank\" rel=\"noopener\">Scons\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Ca href=\"https://bitbucket.org/scons/scons/wiki/SconsVsOtherBuildTools\">C++ build systems comparison from Scons\u003C/a>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ca href=\"https://mesonbuild.com/Simple-comparison.html\">C++ build systems comparison from Meson\u003C/a>.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_unit_testing_framework\">Unit Testing Framework\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>I have used some \u003Ca href=\"https://en.wikipedia.org/wiki/XUnit\" target=\"_blank\" rel=\"noopener\">xUnit\u003C/a> based libraries like \u003Ca href=\"https://github.com/unittest-cpp/unittest-cpp\">UnitTest++\u003C/a>, \u003Ca href=\"https://cpputest.github.io/\">CppUTest\u003C/a> or \u003Ca href=\"https://github.com/google/googletest\">Google Test\u003C/a> which match perfectly with \u003Ca href=\"https://github.com/google/googletest/tree/master/googlemock\">Google Mock\u003C/a>. If you want a safe bet that fulfills almost of your testing needs I highly recommend \u003Ca href=\"https://github.com/google/googletest\">Google Test\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>But time ago I found a testing framework with some interesting features, \u003Ca href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch\u003C/a>:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>It is just a header file with no external dependencies, so very easy to start (wget + include downloaded file).\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>You can use normal unit test style or \u003Ca href=\"\">BDD\u003C/a>-style\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>If you want to know more about \u003Ca href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch\u003C/a>, I recommend you to give it a try, it is a matter of 2 minutes to have a \u003Ca href=\"https://github.com/philsquared/Catch/blob/master/docs/tutorial.md#writing-tests\">simple example up and running\u003C/a>. You can also read some interesting articles like \u003Ca href=\"https://github.com/philsquared/Catch/blob/master/docs/why-catch.md\">Why do we need yet another C test framework?] or https://blog.coldflake.com/posts/Testing-C-with-a-new-Catch/[Testing C++ With A New Catch\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_doctest_a_catch_alternative\">\u003Ca href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest\u003C/a>: A \u003Ca href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch\u003C/a> alternative\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>There is another testing framework named \u003Ca href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest\u003C/a>, with same benefits as \u003Ca href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch\u003C/a>, but it promises to be faster and lighter (\u003Ca href=\"https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md\">performance results\u003C/a>) than \u003Ca href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>\u003Ca href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest\u003C/a> is modeled after \u003Ca href=\"https://github.com/philsquared/Catch\" target=\"_blank\" rel=\"noopener\">Catch\u003C/a> and some parts of the code have been taken directly, but there are \u003Ca href=\"https://github.com/onqtam/doctest/blob/master/doc/markdown/faq.md#how-is-doctest-different-from-catch\">differences\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>It hasn&#8217;t been easy to decide, both are really similar, following you can see differences:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">diff between doctest and catch branches\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-diff\" data-lang=\"diff\">\u003Cspan class=\"hljs-meta\">@@ -1,12 +1,12 @@\u003C/span>\n\u003Cspan class=\"hljs-deletion\">-#define CATCH_CONFIG_MAIN // It tells Catch to provide a main() - only do this in one cpp file\u003C/span>\n\u003Cspan class=\"hljs-addition\">+#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN\u003C/span>\n\n\u003Cspan class=\"hljs-deletion\">-#include &quot;catch.hpp&quot;\u003C/span>\n\u003Cspan class=\"hljs-addition\">+#include &quot;doctest.h&quot;\u003C/span>\n#include &quot;Uuid.h&quot;\n#include &lt;string&gt;\n\nconstexpr int MAX_ITERS = 100;\n\n\u003Cspan class=\"hljs-deletion\">-TEST_CASE(&quot;Uuid&quot;, &quot;[uuid]&quot;)\u003C/span>\n\u003Cspan class=\"hljs-addition\">+TEST_CASE(&quot;Uuid&quot;)\u003C/span>\n{\nfor (int i = 0; i &lt; MAX_ITERS; i++)\n{\n\u003Cspan class=\"hljs-meta\">@@ -26,7 +26,7 @@\u003C/span> TEST_CASE(&quot;Uuid&quot;, &quot;[uuid]&quot;)\n\n// BDD style\n\n\u003Cspan class=\"hljs-deletion\">-SCENARIO(&quot;UUID creation&quot;, &quot;[Uuid]&quot;)\u003C/span>\n\u003Cspan class=\"hljs-addition\">+SCENARIO(&quot;UUID creation&quot;)\u003C/span>\n{\n\nGIVEN(&quot;A random UUID &quot;)\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>I&#8217;ve finally chosen \u003Ca href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest\u003C/a> because it promises to be faster: \u003Ca href=\"https://github.com/onqtam/doctest/blob/master/doc/markdown/benchmarks.md\">performance results\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"admonitionblock note\">\n\u003Ctable>\n\u003Ctr>\n\u003Ctd class=\"icon\">\n\u003Cdiv class=\"title\">Note\u003C/div>\n\u003C/td>\n\u003Ctd class=\"content\">\nI&#8217;ve created project using both frameworks you can find them in corresponding branches: \u003Ca href=\"https://github.com/carlosvin/uuid-cpp/tree/doctest\">doctest branch\u003C/a> or \u003Ca href=\"https://github.com/carlosvin/uuid-cpp/tree/catch\">catch branch\u003C/a>.\n\u003C/td>\n\u003C/tr>\n\u003C/table>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect1\">\n\u003Ch2 id=\"_example\">Example\u003C/h2>\n\u003Cdiv class=\"sectionbody\">\n\u003Cdiv class=\"paragraph\">\n\u003Cp>I&#8217;ve created an example to illustrate this article: \u003Ca href=\"https://github.com/carlosvin/uuid-cpp\" class=\"bare\">https://github.com/carlosvin/uuid-cpp\u003C/a>.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>It is a basic implementation of UUID pseudo-random generator based on \u003Ca href=\"https://www.cplusplus.com/reference/random/mt19937\" target=\"_blank\" rel=\"noopener\">mt19937\u003C/a> which is not cryptographically secure.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_project_output_artifacts\">Project output artifacts\u003C/h3>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>When we install the project using \u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a> (\u003Ca href=\"https://ninja-build.org/\" target=\"_blank\" rel=\"noopener\">Ninja\u003C/a>), we will get some artifacts generated and copied in our system.\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"ulist\">\n\u003Cul>\n\u003Cli>\n\u003Cp>Shared library: \u003Ccode>libuuid\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Header library for developers who want to use the shared library: \u003Ccode>include/Uuid.h\u003C/code>.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Executable \u003Ccode>uuidgen\u003C/code> (\u003Ca href=\"\">UUID\u003C/a> generator).\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Test executable (not installed). It tests shared library.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/div>\n\u003Cdiv class=\"paragraph\">\n\u003Cp>For example, if you execute \u003Ccode>ninja install\u003C/code> on Linux, you will get something like:\u003C/p>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">/usr/local/lib/libuuid.so\n/usr/local/include/Uuid.h\n/usr/local/bin/uuidgen\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"sect2\">\n\u003Ch3 id=\"_project_structure_fork_project\">Project structure (\u003Ca href=\"https://github.com/carlosvin/uuid-cpp\">Fork project\u003C/a>)\u003C/h3>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://github.com/carlosvin/uuid-cpp/blob/master/meson.build\">meson.build\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>Root project file configuration. It defines project properties and subdirectories.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">meson.build\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-python\" data-lang=\"python\">project(\n    \u003Cspan class=\"hljs-string\">&#x27;cpp-meson-example&#x27;\u003C/span>, \u003Cspan class=\"hljs-comment\"># project name\u003C/span>\n    \u003Cspan class=\"hljs-string\">&#x27;cpp&#x27;\u003C/span>, \u003Cspan class=\"hljs-comment\"># C++ project, e.g: for C project\u003C/span>\n    version : \u003Cspan class=\"hljs-string\">&#x27;1.0.0&#x27;\u003C/span>,\n    license : \u003Cspan class=\"hljs-string\">&#x27;MIT&#x27;\u003C/span>,\n    default_options : [\u003Cspan class=\"hljs-string\">&#x27;cpp_std=c++11&#x27;\u003C/span>]) \u003Cspan class=\"hljs-comment\"># compile for C++\u003C/span>\n\n\u003Cspan class=\"hljs-comment\"># it will be referred from subdir projects\u003C/span>\ninc = include_directories(\u003Cspan class=\"hljs-string\">&#x27;include&#x27;\u003C/span>)\n\n\u003Cspan class=\"hljs-comment\"># meson will try to find a meson.build file inside following directories\u003C/span>\nsubdir(\u003Cspan class=\"hljs-string\">&#x27;include&#x27;\u003C/span>)\nsubdir(\u003Cspan class=\"hljs-string\">&#x27;src&#x27;\u003C/span>)\nsubdir(\u003Cspan class=\"hljs-string\">&#x27;test&#x27;\u003C/span>)\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://github.com/carlosvin/uuid-cpp/blob/master/include/\">include\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">meson.build\u003C/dt>\n\u003Cdd>\n\u003Cp>Build configuration file for include directory.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">include/meson.build\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-python\" data-lang=\"python\">\u003Cspan class=\"hljs-comment\"># Select header files to be installed\u003C/span>\ninstall_headers(\u003Cspan class=\"hljs-string\">&#x27;Uuid.h&#x27;\u003C/span>)\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://github.com/carlosvin/uuid-cpp/blob/master/include/Uuid.h\">Uuid.h\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>Header file, it is the library interface definition which will be included from projects using that library\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">include/Uuid.h\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-keyword\">namespace\u003C/span> ids {\n\n\u003Cspan class=\"hljs-keyword\">class\u003C/span> \u003Cspan class=\"hljs-title class_\">Uuid\u003C/span> {\n    \u003Cspan class=\"hljs-keyword\">private\u003C/span>:\n    \u003Cspan class=\"hljs-comment\">// ...\u003C/span>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src\">src\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src/meson.build\">meson.build (src)\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>It declares 2 output artifacts, library \u003Ccode>libuuid\u003C/code> and executable \u003Ccode>uuidgen\u003C/code>. Executable depends on the libary, it will use the libary to generate \u003Ca href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier\" target=\"_blank\" rel=\"noopener\">UUID\u003C/a>.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">src/meson.build\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-python\" data-lang=\"python\">libuuid = shared_library(\n    \u003Cspan class=\"hljs-string\">&#x27;uuid&#x27;\u003C/span>, \u003Cb class=\"conum\">(1)\u003C/b>\n    \u003Cspan class=\"hljs-string\">&#x27;Uuid.cpp&#x27;\u003C/span>, \u003Cb class=\"conum\">(2)\u003C/b>\n    include_directories : inc, \u003Cb class=\"conum\">(3)\u003C/b>\n    install : true) \u003Cb class=\"conum\">(4)\u003C/b>\n\nuuidgen = executable(\n    \u003Cspan class=\"hljs-string\">&#x27;uuidgen&#x27;\u003C/span>, \u003Cb class=\"conum\">(5)\u003C/b>\n    \u003Cspan class=\"hljs-string\">&#x27;main.cpp&#x27;\u003C/span>, \u003Cb class=\"conum\">(6)\u003C/b>\n    include_directories : inc, \u003Cb class=\"conum\">(7)\u003C/b>\n    link_with : libuuid, \u003Cb class=\"conum\">(8)\u003C/b>\n    install : true) \u003Cb class=\"conum\">(9)\u003C/b>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"colist arabic\">\n\u003Col>\n\u003Cli>\n\u003Cp>library name\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>source files to be compile\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>previously declared include directories in root \u003Ccode>meson.build\u003C/code>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode>libuuid\u003C/code> will be part of project installation\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>executable name\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>source files to compile\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>previously declared include directories in root \u003Ccode>meson.build\u003C/code>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>linking executable with shared previously declared shared library \u003Ccode>libuuid\u003C/code>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ccode>uuidgen\u003C/code> executable be part of project installation\u003C/p>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src/main.cpp\">main.cpp\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>Entry point for main executable \u003Ccode>uuidgen\u003C/code>.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">src/main.cpp\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&quot;Uuid.h&quot;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;iostream&gt;\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-type\">int\u003C/span> \u003Cspan class=\"hljs-title\">main\u003C/span>\u003Cspan class=\"hljs-params\">()\u003C/span>\n\u003C/span>{\n    ids::Uuid uuid;\n    std::cout &lt;&lt; uuid.\u003Cspan class=\"hljs-built_in\">to_str\u003C/span>() &lt;&lt; std::endl;\n    \u003Cspan class=\"hljs-keyword\">return\u003C/span> \u003Cspan class=\"hljs-number\">0\u003C/span>;\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://github.com/carlosvin/uuid-cpp/blob/master/src/Uuid.cpp\">Uuid.cpp\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>Implementation of declared class in header file.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">src/Uuid.cpp\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&quot;Uuid.h&quot;\u003C/span>\u003C/span>\n\nUuid::\u003Cspan class=\"hljs-built_in\">Uuid\u003C/span>()\n{ \u003Cspan class=\"hljs-comment\">// ...\u003C/span>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://github.com/carlosvin/uuid-cpp/blob/master/test/\">test\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://github.com/carlosvin/uuid-cpp/blob/master/test/meson.build\">meson.build (test)\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>File to configure tests build process.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">test/meson.build\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-python\" data-lang=\"python\">testexe = executable(\n    \u003Cspan class=\"hljs-string\">&#x27;testexe&#x27;\u003C/span>, \u003Cb class=\"conum\">(1)\u003C/b>\n    \u003Cspan class=\"hljs-string\">&#x27;uuid_test.cpp&#x27;\u003C/span>, \u003Cb class=\"conum\">(2)\u003C/b>\n    include_directories : inc, \u003Cb class=\"conum\">(3)\u003C/b>\n    link_with : libuuid) \u003Cb class=\"conum\">(4)\u003C/b>\n\ntest(\u003Cspan class=\"hljs-string\">&#x27;Uuid test&#x27;\u003C/span>, testexe) \u003Cb class=\"conum\">(5)\u003C/b>\n\ntest(\u003Cspan class=\"hljs-string\">&#x27;Uuid test with args and env&#x27;\u003C/span>, testexe, args : [\u003Cspan class=\"hljs-string\">&#x27;arg1&#x27;\u003C/span>, \u003Cspan class=\"hljs-string\">&#x27;arg2&#x27;\u003C/span>], env : [\u003Cspan class=\"hljs-string\">&#x27;FOO=bar&#x27;\u003C/span>]) \u003Cb class=\"conum\">(6)\u003C/b>\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"colist arabic\">\n\u003Col>\n\u003Cli>\n\u003Cp>test executable name\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>tests source files to be compiled\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>declared include directories in root \u003Ccode>meson.build\u003C/code>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>link test executable with previously declared shared library \u003Ccode>libuuid\u003C/code>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>test execution\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>we can specify other test execution passing arguments or environment variables\u003C/p>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">doctest.h\u003C/dt>\n\u003Cdd>\n\u003Cp>\u003Ca href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest\u003C/a> library in a single header file. You can try to automate library installation as part of your build process, but I haven not figured out yet a way to do it with \u003Ca href=\"https://mesonbuild.com/\" target=\"_blank\" rel=\"noopener\">Meson\u003C/a>. For now, I have installed it manually:\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003C/li>\n\u003C/ol>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">Add \u003Ca href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">doctest\u003C/a> to your project\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-bash\" data-lang=\"bash\">\u003Cspan class=\"hljs-built_in\">cd\u003C/span> \u003Cspan class=\"hljs-built_in\">test\u003C/span>\nwget https://raw.githubusercontent.com/onqtam/doctest/master/doctest/doctest.h\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"dlist\">\n\u003Cdl>\n\u003Cdt class=\"hdlist1\">\u003Ca href=\"https://github.com/carlosvin/uuid-cpp/blob/master/test/uuid_test.cpp\">uuid_test.cpp\u003C/a>\u003C/dt>\n\u003Cdd>\n\u003Cp>Tests implementation.\u003C/p>\n\u003C/dd>\n\u003C/dl>\n\u003C/div>\n\u003Cdiv class=\"listingblock\">\n\u003Cdiv class=\"title\">test/uuid_test.cpp\u003C/div>\n\u003Cdiv class=\"content\">\n\u003Cpre class=\"highlight\">\u003Ccode class=\"language-cpp\" data-lang=\"cpp\">\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">define\u003C/span> DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN\u003C/span>\n\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&quot;doctest.h&quot;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&quot;Uuid.h&quot;\u003C/span>\u003C/span>\n\u003Cspan class=\"hljs-meta\">#\u003Cspan class=\"hljs-keyword\">include\u003C/span> \u003Cspan class=\"hljs-string\">&lt;string&gt;\u003C/span>\u003C/span>\n\n\u003Cspan class=\"hljs-keyword\">constexpr\u003C/span> \u003Cspan class=\"hljs-type\">int\u003C/span> MAX_ITERS = \u003Cspan class=\"hljs-number\">100\u003C/span>;\n\n\u003Cspan class=\"hljs-built_in\">TEST_CASE\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;Uuid&quot;\u003C/span>)\n{\n    \u003Cspan class=\"hljs-keyword\">for\u003C/span> (\u003Cspan class=\"hljs-type\">int\u003C/span> i = \u003Cspan class=\"hljs-number\">0\u003C/span>; i &lt; MAX_ITERS; i++)\n    {\n        ids::Uuid uuid;\n        std::string uuid_str{uuid.\u003Cspan class=\"hljs-built_in\">to_str\u003C/span>()};\n\n        \u003Cspan class=\"hljs-built_in\">INFO\u003C/span>(uuid_str);\n\n        \u003Cspan class=\"hljs-comment\">// If assertion fails test execution is stopped\u003C/span>\n        \u003Cspan class=\"hljs-built_in\">REQUIRE\u003C/span>(uuid_str.\u003Cspan class=\"hljs-built_in\">size\u003C/span>() == \u003Cspan class=\"hljs-number\">36\u003C/span>);\n\n        \u003Cspan class=\"hljs-comment\">// If assertion fails test execution continues\u003C/span>\n        \u003Cspan class=\"hljs-built_in\">CHECK\u003C/span>(uuid.most &gt; \u003Cspan class=\"hljs-number\">0\u003C/span>);\n        \u003Cspan class=\"hljs-built_in\">CHECK\u003C/span>(uuid.least &gt; \u003Cspan class=\"hljs-number\">0\u003C/span>);\n    }\n}\n\n\u003Cspan class=\"hljs-comment\">// BDD style\u003C/span>\n\n\u003Cspan class=\"hljs-built_in\">SCENARIO\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;UUID creation&quot;\u003C/span>)\n{\n\n    \u003Cspan class=\"hljs-built_in\">GIVEN\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;A random UUID &quot;\u003C/span>)\n    {\n\n        ids::Uuid uuid;\n        std::string uuid_str{uuid.\u003Cspan class=\"hljs-built_in\">to_str\u003C/span>()};\n\n        \u003Cspan class=\"hljs-built_in\">REQUIRE\u003C/span>(uuid_str.\u003Cspan class=\"hljs-built_in\">size\u003C/span>() == \u003Cspan class=\"hljs-number\">36\u003C/span>);\n\n        \u003Cspan class=\"hljs-built_in\">WHEN\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;get the most and least&quot;\u003C/span>)\n        {\n            \u003Cspan class=\"hljs-built_in\">THEN\u003C/span>(\u003Cspan class=\"hljs-string\">&quot;should be more than 0&quot;\u003C/span>)\n            {\n                \u003Cspan class=\"hljs-built_in\">CHECK\u003C/span>(uuid.most &gt; \u003Cspan class=\"hljs-number\">0\u003C/span>);\n                \u003Cspan class=\"hljs-built_in\">CHECK\u003C/span>(uuid.least &gt; \u003Cspan class=\"hljs-number\">0\u003C/span>);\n            }\n        }\n    }\n}\u003C/code>\u003C/pre>\n\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"admonitionblock tip\">\n\u003Ctable>\n\u003Ctr>\n\u003Ctd class=\"icon\">\n\u003Cdiv class=\"title\">Tip\u003C/div>\n\u003C/td>\n\u003Ctd class=\"content\">\nYou can find how to build and test the example project at: \u003Ca href=\"https://github.com/carlosvin/uuid-cpp#how-to-build-the-example\" class=\"bare\">https://github.com/carlosvin/uuid-cpp#how-to-build-the-example\u003C/a>\n\u003C/td>\n\u003C/tr>\n\u003C/table>\n\u003C/div>\n\u003C/div>\n\u003C/div>\n\u003C/div>",{"title":3,"lang":4,"summary":5,"slug":6,"keywords":7,"filepath":14,"dirpath":15,"created":16,"modified":16,"otherLangs":17,"author":19,"previewimage":-1,"path":20},"Choosing a Modern C++ stack","en","Why I'd choose Meson+Doctest tech stack to create a new C++ project with a reusable and easy-to-run example.","choosing-modern-cpp-stack",[8,9,10,11,12,13],"C++","Unit Testing","Build System","Meson","Catch","doctest","/static/posts/choosing-modern-cpp-stack.en.adoc","/static/posts",1505433600000,[18],"es","Carlos","/langs/en/posts/choosing-modern-cpp-stack","\u003Cscript type=\"application/ld+json\">{\"@context\":\"https://schema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"Webpage\",\"@id\":\"https://google.com/article\"},\"headline\":\"Choosing a Modern C++ stack\",\"alternativeHeadline\":\"Why I'd choose Meson+Doctest tech stack to create a new C++ project with a reusable and easy-to-run example.\",\"description\":\"Why I'd choose Meson+Doctest tech stack to create a new C++ project with a reusable and easy-to-run example.\",\"datePublished\":\"2017-09-15T00:00:00.000Z\",\"dateModified\":\"2017-09-15T00:00:00.000Z\",\"keywords\":[\"C++\",\"Unit Testing\",\"Build System\",\"Meson\",\"Catch\",\"doctest\"],\"author\":{\"@type\":\"Person\",\"name\":\"Carlos\"},\"publisher\":{\"@type\":\"Person\",\"name\":\"Carlos\"}}\u003C/script>"],"uses":{"params":["slug","lang"]}}]}
